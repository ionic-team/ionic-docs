const fetch = require('node-fetch');
const fs = require('fs');

/**
 *
 * This script will create the autogenerated MDX files for each component.
 *
 * Creates files for:
 * - Properties
 * - Events
 * - Methods
 * - CSS Shadow Parts
 * - Custom Properties
 * - Slots
 *
 * The auto-generated directory & files should be gitignored, since they are created from the published core.json
 * and should never be edited manually.
 */

(async function () {
  const response = await fetch('https://unpkg.com/@ionic/docs@6.0.14-dev.11648058957.10b8822b/core.json');
  const { components } = await response.json();

  const names = components.map((component) => component.tag.slice(4));
  // matches all relative markdown links to a component, e.g. (../button)
  COMPONENT_LINK_REGEXP = new RegExp(`\\(../(${names.join('|')})/?(#[^)]+)?\\)`, 'g');

  components.forEach((comp) => {
    const compTag = comp.tag.slice(4);
    writeAutoGeneratedPage(compTag, 'props', renderProperties(comp));
    writeAutoGeneratedPage(compTag, 'events', renderEvents(comp));
    writeAutoGeneratedPage(compTag, 'methods', renderMethods(comp));
    writeAutoGeneratedPage(compTag, 'parts', renderParts(comp));
    writeAutoGeneratedPage(compTag, 'custom-props', renderCustomProps(comp));
    writeAutoGeneratedPage(compTag, 'slots', renderSlots(comp));
  });
})();

function writeAutoGeneratedPage(componentTag, fileName, data) {
  const dir = `./static/auto-generated/${componentTag}`;
  const path = `${dir}/${fileName}.md`;
  fs.mkdirSync(dir, { recursive: true });
  fs.writeFileSync(path, data);
}

function renderProperties({ props: properties }) {
  if (properties.length === 0) {
    return '';
  }

  // NOTE: replaces | with U+FF5C since MDX renders \| in tables incorrectly
  return `
## Properties

${properties
  .map(
    (prop) => `
### ${prop.name}

| | |
| --- | --- |
| **Description** | ${prop.docs.split('\n').join('<br />')} |
| **Attribute** | \`${prop.attr}\` |
| **Type** | \`${prop.type.replace(/\|/g, '\uff5c')}\` |
| **Default** | \`${prop.default}\` |

`
  )
  .join('\n')}
`;
}

function renderEvents({ events }) {
  if (events.length === 0) {
    return '';
  }

  return `
## Events

| Name | Description |
| --- | --- |
${events.map((event) => `| \`${event.event}\` | ${event.docs} |`).join('\n')}

`;
}

function renderMethods({ methods }) {
  if (methods.length === 0) {
    return '';
  }

  // NOTE: replaces | with U+FF5C since MDX renders \| in tables incorrectly
  return `
## Methods

${methods
  .map(
    (method) => `
### ${method.name}

| | |
| --- | --- |
| **Description** | ${method.docs.split('\n').join('<br />')} |
| **Signature** | \`${method.signature.replace(/\|/g, '\uff5c')}\` |
`
  )
  .join('\n')}

`;
}

function renderParts({ parts }) {
  if (parts.length === 0) {
    return '';
  }

  return `
## CSS Shadow Parts

| Name | Description |
| --- | --- |
${parts.map((prop) => `| \`${prop.name}\` | ${prop.docs} |`).join('\n')}

`;
}

function renderCustomProps({ styles: customProps }) {
  if (customProps.length === 0) {
    return '';
  }

  return `
## CSS Custom Properties

| Name | Description |
| --- | --- |
${customProps.map((prop) => `| \`${prop.name}\` | ${prop.docs} |`).join('\n')}

`;
}

function renderSlots({ slots }) {
  if (slots.length === 0) {
    return '';
  }

  return `
## Slots

| Name | Description |
| --- | --- |
${slots.map((slot) => `| \`${slot.name}\` | ${slot.docs} |`).join('\n')}

`;
}
