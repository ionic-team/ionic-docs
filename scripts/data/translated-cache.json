{
  "cache": {
    "If `true`, the accordion group cannot be interacted with.": "`true`の場合、アコーディオングループと対話することができません。",
    "The value of the accordion group.": "アコーディオングループの値です。",
    "The mode determines which platform styles to use.": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
    "Emitted when the value property has changed.": "valueプロパティが変更されたときに発行されます。",
    "If `true`, the accordion group can have multiple accordion components expanded at the same time.": "`true`の場合、アコーディオングループは複数のアコーディオンコンポーネントを同時に展開することができます。",
    "Describes the expansion behavior for each accordion. Possible values are `\"compact\"` and `\"inset\"`. Defaults to `\"compact\"`.": "各アコーディオンの拡張動作を記述します。指定可能な値は `\"compact\"` と `\"inset\"` です。デフォルトは `\"compact\"` です。",
    "If `true`, the accordion group cannot be interacted with, but does not alter the opacity.": "`true`の場合、アコーディオングループはインタラクティブに操作できないが、不透明度は変更されない。",
    "If `true`, all accordions inside of the accordion group will animate when expanding or collapsing.": "`true`の場合、アコーディオングループ内のすべてのアコーディオンが拡大・縮小時にアニメーションを行います。",
    "The wrapper element for the content slot.": "content slotのラッパー要素。",
    "The toggle icon to use. This icon will be rotated when the accordion is expanded or collapsed.": "使用するトグルアイコンです。このアイコンは、アコーディオンの展開・折りたたみ時に回転されます。",
    "The wrapper element for the header slot.": "header slotのラッパーの要素です。",
    "If `true`, the accordion cannot be interacted with.": "`true`の場合、アコーディオンは対話することができません。",
    "Content is placed at the top and is used to expand or collapse the accordion item.": "コンテンツは上部に配置され、アコーディオンアイテムの拡大・縮小に使用されます。",
    "The slot inside of `ion-item` to place the toggle icon. Defaults to `'end'`.": "トグルアイコンを配置する `ion-item` の内側のslot。デフォルトは `'end'` です。",
    "Content is placed below the header and is shown or hidden based on expanded state.": "コンテンツはヘッダーの下に配置され、展開状態に応じて表示または非表示になります。",
    "If `true`, the accordion cannot be interacted with, but does not alter the opacity.": "`true`の場合、アコーディオンはインタラクティブに操作することはできませんが、不透明度は変化しません。",
    "The value of the accordion. Defaults to an autogenerated value.": "アコーディオンの値です。デフォルトは自動生成された値です。",
    "The expanded element. Can be used in combination with the `header` and `content` parts (i.e. `::part(header expanded)`).": "拡張された要素です。ヘッダ`とコンテンツ`の部分と組み合わせて使用することができます（例：`::part(header expanded)`）。",
    "Title for the action sheet.": "アクションシートのタイトルです。",
    "Emitted after the alert has dismissed.": "アラートが解除された後に発行されます。",
    "Emitted after the alert has presented.": "アラートが提示された後に発行されます。",
    "Emitted before the alert has presented.": "アラートが提示される前に発行されます。",
    "Animation to use when the action sheet is dismissed.": "アクションシートが解除されたときに使用するアニメーションです。",
    "Present the action sheet overlay after it has been created.": "アクションシートのオーバーレイを作成後に提示します。",
    "Returns a promise that resolves when the action sheet will dismiss.": "アクションシートが解散するタイミングを解決するPromiseを返します。",
    "An array of buttons for the action sheet.": "アクションシートのボタンの配列です。",
    "Dismiss the action sheet overlay after it has been presented.": "アクションシートのオーバーレイが提示された後、それを解除します。",
    "Emitted before the alert has dismissed.": "アラートが解除される前に発行されます。",
    "Returns a promise that resolves when the action sheet did dismiss.": "アクションシートが解散したときに解決するPromiseを返します。",
    "If `true`, the action sheet will be translucent. Only applies when the mode is `\"ios\"` and the device supports [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).": "`true`の場合、アクションシートは半透明になります。modeが `\"ios\"` で、デバイスが [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility) をサポートしている場合にのみ適用されます。",
    "Subtitle for the action sheet.": "アクションシートのサブタイトルです。",
    "If `true`, the keyboard will be automatically dismissed when the overlay is presented.": "`true`の場合、オーバーレイが表示されたときにキーボードが自動的に解除されます。",
    "Animation to use when the action sheet is presented.": "アクションシートの提示時に使用するアニメーションです。",
    "Additional attributes to pass to the action sheet.": "アクションシートに渡す追加属性。",
    "If `true`, the action sheet will animate.": "`true`の場合、アクションシートはアニメーションを行います。",
    "Additional classes to apply for custom CSS. If multiple classes are provided they should be separated by spaces.": "カスタムCSSに適用する追加のクラス。複数のクラスを指定する場合は、スペースで区切る必要があります。",
    "If `true`, the action sheet will be dismissed when the backdrop is clicked.": "`true`の場合、バックドロップがクリックされるとアクションシートが解除されます。",
    "Background of the action sheet button": "アクションシートボタンの背景",
    "Background of the action sheet button when pressed. Note: setting this will interfere with the Material Design ripple.": "アクションシートボタンが押されたときの背景。注意：これを設定すると、Material Designの波紋に干渉します。",
    "Minimum height of the action sheet": "アクションシートの最小高さ",
    "Minimum width of the action sheet": "アクションシートの最小幅",
    "Color of the action sheet button when tabbed to": "にタブで移動したときのアクションシートのボタンの色。",
    "Color of the action sheet button": "アクションシートボタンの色",
    "Color of the selected action sheet button": "選択されたアクションシートのボタンの色",
    "Background of the selected action sheet button": "選択したアクションシートボタンの背景",
    "Background of the action sheet button on hover": "ホバー時のアクションシートボタンの背景",
    "height of the action sheet": "アクションシートの高さ",
    "Opacity of the action sheet button background when pressed": "アクションシートボタンが押されたときの背景の不透明度",
    "Opacity of the action sheet button background when tabbed to": "にタブしたときのアクションシートボタンの背景の不透明度。",
    "Maximum height of the action sheet": "アクションシートの最大の高さ",
    "Color of the action sheet text": "アクションシートテキストの色",
    "Maximum width of the action sheet": "アクションシートの最大幅",
    "Width of the action sheet": "アクションシートの横幅",
    "Background of the action sheet button when tabbed to": "にタブしたときのアクションシートボタンの背景。",
    "Color of the action sheet button when pressed": "アクションシートボタンが押されたときの色",
    "Color of the action sheet button on hover": "ホバー時のアクションシートボタンの色",
    "Opacity of the selected action sheet button background": "選択されたアクションシートボタンの背景の不透明度",
    "Opacity of the action sheet button background on hover": "ホバー時のアクションシートボタンの背景の不透明度",
    "Opacity of the backdrop": "背景の不透明度",
    "Background of the action sheet group": "アクションシートグループの背景",
    "Returns a promise that resolves when the alert will dismiss.": "アラートが解除されるタイミングを解決するPromiseを返します。",
    "Dismiss the alert overlay after it has been presented.": "アラートオーバーレイが表示された後、解除します。",
    "Returns a promise that resolves when the alert did dismiss.": "アラートが解除されたことを解決するPromiseを返します。",
    "Maximum height of the alert": "アラートの最大の高さ",
    "Height of the alert": "アラートの高さ",
    "Additional attributes to pass to the alert.": "アラートに渡す追加属性。",
    "Animation to use when the alert is dismissed.": "アラートが解除されたときに使用するアニメーション。",
    "Array of input to show in the alert.": "アラートに表示するInputの配列。",
    "Background of the alert": "注意喚起の背景",
    "The main title in the heading of the alert.": "アラートの見出しにあるメインタイトルです。",
    "Array of buttons to be added to the alert.": "アラートに追加されるボタンの配列。",
    "The subtitle in the heading of the alert. Displayed under the title.": "アラートの見出しにあるサブタイトルです。タイトルの下に表示されます。",
    "Present the alert overlay after it has been created.": "アラートオーバーレイを作成した後に提示します。",
    "If `true`, the alert will animate.": "`true`の場合、アラートはアニメーションで表示されます。",
    "If `true`, the alert will be dismissed when the backdrop is clicked.": "`true`の場合、バックドロップがクリックされるとアラートが解除される。",
    "If `true`, the alert will be translucent. Only applies when the mode is `\"ios\"` and the device supports [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).": "`true`の場合、アラートは半透明になります。modeが `\"ios\"` で、デバイスが [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility) をサポートしている場合にのみ適用されます。",
    "Animation to use when the alert is presented.": "アラート提示時に使用するアニメーションです。",
    "The main message to be displayed in the alert. `message` can accept either plaintext or HTML as a string. To display characters normally reserved for HTML, they must be escaped. For example `<Ionic>` would become `&lt;Ionic&gt;`  For more information: [Security Documentation](https://ionicframework.com/docs/faq/security)": "アラートに表示されるメインメッセージ。 `message` には、文字列としてプレーンテキストまたはHTMLのいずれかを指定することができます。通常HTML用に予約されている文字を表示するには、エスケープする必要があります。例えば、`<Ionic>`は `&lt;Ionic&gt;` となります。[セキュリティ・ドキュメンテーション](https://ionicframework.com/docs/faq/security)",
    "Maximum width of the alert": "アラートの最大幅",
    "Minimum width of the alert": "アラートの最小幅",
    "Width of the alert": "アラートの幅",
    "Minimum height of the alert": "アラートの最小の高さ",
    "Border radius of the avatar and inner image": "アバターとインナーイメージの境界半径",
    "Font weight of the button icon": "ボタンアイコンのFont Weight",
    "The text to display in the back button.": "バックボタンに表示するテキストです。",
    "Background of the button on hover": "ホバー時のボタンの背景",
    "The type of the button.": "ボタンの種類です。",
    "Text color of the button when focused with the tab key": "タブキーでフォーカスしたときのボタンの文字色",
    "Background of the button": "ボタンの背景",
    "Text color of the button on hover": "ホバー時のボタンの文字色",
    "Background of the button when focused with the tab key": "タブキーでフォーカスしたときのボタンの背景",
    "Text color of the button": "ボタンの文字色",
    "Opacity of the background on hover": "ホバー時の背景の不透明度",
    "Opacity of the button background when focused with the tab key": "タブキーでフォーカスしたときのボタンの背景の不透明度",
    "If `true`, the user cannot interact with the button.": "`true`の場合、ユーザはボタンと対話することができません。",
    "The url to navigate back to by default when there is no history.": "履歴がない場合に、デフォルトで戻るためのURL。",
    "Border radius of the button": "ボタンの境界半径",
    "Font size of the button icon": "ボタンアイコンのFont Size",
    "The built-in named SVG icon name or the exact `src` of an SVG file to use for the back button.": "戻るボタンに使用する内蔵の名前付きSVGアイコン名またはSVGファイルの正確な`src`を指定します。",
    "Bottom margin of the button icon": "ボタンアイコンのBottom Margin",
    "The color to use from your application's color palette. Default options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`. For more information on colors, see [theming](/docs/theming/basics).": "アプリケーションのカラーパレットから使用する色を指定します。デフォルトのオプションは以下の通りです。 `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, と `\"dark\"` です．色に関する詳しい情報は [theming](/docs/theming/basics) を参照してください。",
    "When using a router, it specifies the transition animation when navigating to another page.": "ルーターを使用する場合、別のページに移動する際の遷移アニメーションを指定します。",
    "Transition of the button": "ボタンの遷移",
    "Bottom padding of the button": "ボタンのBottom Padding",
    "Minimum width of the button": "ボタンの最小幅",
    "Top padding of the button": "ボタンのTop Padding",
    "Top padding of the button icon": "ボタンアイコンのTop Padding",
    "Top margin of the button": "ボタンのTop Margin",
    "Minimum height of the button": "ボタンの最小高さ",
    "Color of the button ripple effect": "ボタンリプルエフェクトの色",
    "The native HTML button element that wraps all child elements.": "すべての子要素を包むネイティブ HTML ボタン要素。",
    "Right margin if direction is left-to-right, and left margin if direction is right-to-left of the button": "ボタンの向きが左から右の場合はRight Margin、右から左の場合はLeft Margin",
    "Right padding if direction is left-to-right, and left padding if direction is right-to-left of the button": "ボタンの向きが左から右の場合はRight Padding、右から左の場合はLeft Paddingとなります。",
    "Opacity of the button": "ボタンの不透明度",
    "Left padding if direction is left-to-right, and right padding if direction is right-to-left of the button": "ボタンの向きが左から右の場合はLeft Padding、右から左の場合はRight Paddingとなります。",
    "Bottom margin of the button": "ボタンのBottom Margin",
    "The back button icon (uses ion-icon).": "戻るボタンのアイコン（ion-iconを使用）。",
    "Left margin if direction is left-to-right, and right margin if direction is right-to-left of the button": "ボタンの向きが左から右の場合はLeft Margin、右から左の場合はRight Margin",
    "Left padding if direction is left-to-right, and right padding if direction is right-to-left of the button icon": "ボタンアイコンの方向が左から右の場合はLeft Padding、右から左の場合はRight Paddingを使用します。",
    "Right padding if direction is left-to-right, and left padding if direction is right-to-left of the button icon": "ボタンアイコンの向きが左から右の場合はRight Padding、右から左の場合はLeft Paddingを使用します。",
    "The back button text.": "戻るボタンのテキストです。",
    "Top margin of the button icon": "ボタンアイコンのTop Margin",
    "Bottom padding of the button icon": "ボタンアイコンのBottom Padding",
    "Left margin if direction is left-to-right, and right margin if direction is right-to-left of the button icon": "ボタンアイコンの方向が左から右の場合はLeft Margin、右から左の場合はRight Margin",
    "Right margin if direction is left-to-right, and left margin if direction is right-to-left of the button icon": "ボタンアイコンの方向が左から右の場合はRight Margin、右から左の場合はLeft Margin",
    "Emitted when the backdrop is tapped.": "バックドロップがタップされたときに発行されます。",
    "If `true`, the backdrop will can be clicked and will emit the `ionBackdropTap` event.": "`true`の場合、背景をクリックすることができ、`ionBackdropTap`イベントを発生させます。",
    "If `true`, the backdrop will stop propagation on tap.": "`true`の場合、バックドロップはタップ時に伝搬を停止します。",
    "If `true`, the backdrop will be visible.": "`true`の場合、バックドロップが表示されます。",
    "Bottom padding of the badge": "バッジのBottom Padding",
    "Text color of the badge": "バッジの文字色",
    "Top padding of the badge": "バッジのTop Padding",
    "Right padding if direction is left-to-right, and left padding if direction is right-to-left of the badge": "バッジの向きが左から右の場合はRight Padding、右から左の場合はLeft Paddingとなります。",
    "Background of the badge": "バッジの背景",
    "Left padding if direction is left-to-right, and right padding if direction is right-to-left of the badge": "バッジの向きが左から右の場合はLeft Padding、右から左の場合はRight Paddingとなります。",
    "Emitted when the breadcrumb loses focus.": "パンくずのフォーカスが外れたときに発行されます。",
    "Text color of the breadcrumb on hover": "ホバー時のパンくずのテキスト色",
    "The indicator element that shows the breadcrumbs are collapsed.": "パンくずが折りたたまれていることを示すインジケーター要素です。",
    "When using a router, it specifies the transition direction when navigating to another page using `href`.": "ルータを使用する場合、`href`を使用して他のページに移動する際の遷移方向を指定します。",
    "If `true`, the user cannot interact with the breadcrumb.": "`true`の場合、ユーザーはパンくずと対話することができません。",
    "Text color of the breadcrumb when focused": "フォーカスされたときのパンくずのテキスト色",
    "Text color of the active breadcrumb": "アクティブなパンくずのテキスト色",
    "Background color of the breadcrumb when focused": "フォーカス時のパンくずの背景色",
    "Emitted when the breadcrumb has focus.": "パンくずがフォーカスされたときに発行されます。",
    "If true, show a separator between this breadcrumb and the next. Defaults to `true` for all breadcrumbs except the last.": "trueの場合、このパンくずと次のパンくずの間にセパレータを表示します。デフォルトは `true` で、最後のパンくずを除くすべてのパンくずが表示されます。",
    "Text color of the breadcrumb": "パンくずの文字色",
    "When using a router, it specifies the transition animation when navigating to another page using `href`.": "ルータを使用する場合、`href`を使用して別のページに移動する際の遷移アニメーションを指定します。",
    "The native HTML anchor or div element that wraps all child elements.": "すべての子要素を包むネイティブHTMLのアンカーまたはdiv要素です。",
    "Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `\"_blank\"`, `\"_self\"`, `\"_parent\"`, `\"_top\"`.": "リンク先のURLを表示する場所を指定します。href`を指定した場合のみ適用される。特別なキーワードがあります。_blank\"`, `\"_self\"`, `\"_parent\"`, `\"_top\"`.",
    "Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.": "ハイパーリンクが指し示す URL または URL フラグメントを格納します。このプロパティが設定されている場合、アンカータグがレンダリングされます。",
    "Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).": "ターゲットオブジェクトとリンクオブジェクトの関係を指定します。値は、スペースで区切られた[リンクタイプ](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types)のリストです。",
    "This attribute instructs browsers to download a URL instead of navigating to it, so the user will be prompted to save it as a local file. If the attribute has a value, it is used as the pre-filled file name in the Save prompt (the user can still change the file name if they want).": "この属性は、ブラウザが URL に移動する代わりに URL をダウンロードするように指示し、ユーザはローカルファイルとして保存するように促されます。この属性に値がある場合、保存のプロンプトであらかじめ入力されたファイル名として使用されます（ユーザーはファイル名を変更することができます）。",
    "If `true`, the breadcrumb will take on a different look to show that it is the currently active breadcrumb. Defaults to `true` for the last breadcrumb if it is not set on any.": "`true`の場合、パンくずが現在アクティブなパンくずであることを示すために、パンくずの外観を変化させることができる。最後のパンくずが設定されていない場合、デフォルトは `true` です。",
    "The separator element between each breadcrumb.": "各パンくずの間のセパレータ要素です。",
    "The maximum number of breadcrumbs to show before collapsing.": "折りたたむ前に表示するパンくずの最大数を指定します。",
    "Emitted when the collapsed indicator is clicked on.": "折りたたみインジケータがクリックされたときに発行されます。",
    "The number of breadcrumbs to show before the collapsed indicator. If `itemsBeforeCollapse` + `itemsAfterCollapse` is greater than `maxItems`, the breadcrumbs will not be collapsed.": "折りたたんだインジケータの前に表示するパンくずの数を指定します。itemsBeforeCollapse` + `itemsAfterCollapse` が `maxItems` よりも大きい場合、パンくずは折りたたまれない。",
    "The number of breadcrumbs to show after the collapsed indicator. If `itemsBeforeCollapse` + `itemsAfterCollapse` is greater than `maxItems`, the breadcrumbs will not be collapsed.": "折りたたまれたインジケータの後に表示するパンくずの数。itemsBeforeCollapse` + `itemsAfterCollapse` が `maxItems` よりも大きい場合、パンくずは折りたたまれない。",
    "Opacity of the button when pressed": "ボタンが押されたときの不透明度",
    "The type of button.": "ボタンの種類です。",
    "Set to `\"round\"` for a button with more rounded corners.": "round\"` に設定すると、より角が丸いボタンになります。",
    "Emitted when the button loses focus.": "ボタンのフォーカスが外れたときに発行されます。",
    "Opacity of the button when focused with the tab key": "タブキーでフォーカスしたときのボタンの不透明度",
    "Emitted when the button has focus.": "ボタンにフォーカスが当たっているときに発行されます。",
    "If `true`, activates a button with a heavier font weight.": "`true`の場合、より重いFont Weightを持つボタンをアクティブにします。",
    "Set to `\"clear\"` for a transparent button that resembles a flat button, to `\"outline\"` for a transparent button with a border, or to `\"solid\"` for a button with a filled background. The default fill is `\"solid\"` except inside of a toolbar, where the default is `\"clear\"`.": "フラットなボタンに似た透明なボタンには `\"clear\"` を、ボーダーのある透明なボタンには `\"outline\"` を、背景を塗りつぶしたボタンには `\"solid\"` を設定します。デフォルトの塗りつぶしは `\"solid\"` です。ただし、ツールバーの内側では `\"clear\"` となります。",
    "Set to `\"small\"` for a button with less height and padding, to `\"default\"` for a button with the default height and padding, or to `\"large\"` for a button with more height and padding. By default the size is unset, unless the button is inside of an item, where the size is `\"small\"` by default. Set the size to `\"default\"` inside of an item to make it a standard size button.": "ボタンの高さとPaddingが少ない場合は `\"small\"` に、ボタンの高さとPaddingがデフォルトの場合は `\"default\"` に、ボタンの高さとPaddingが多い場合は `\"large\"` に設定します。ただし、ボタンがアイテムの中にある場合は、デフォルトでサイズが `\"small\"` になっています。アイテムの内部でサイズを `\"default\"` に設定すると、標準サイズのボタンになります。",
    "Set to `\"block\"` for a full-width button or to `\"full\"` for a full-width button with square corners and no left or right borders.": "全角のボタンなら`\"block\"`、角が四角く左右のボーダーがない全角のボタンなら`\"full\"`に設定します。",
    "The HTML form element or form element id. Used to submit a form when the button is not a child of the form.": "HTML のフォーム要素またはフォーム要素 ID。ボタンがフォームの子でない場合に、フォームを送信するために使用します。",
    "Background of the button when pressed. Note: setting this will interfere with the Material Design ripple.": "ボタンが押されたときの背景。注意：これを設定すると、Material Designの波紋に干渉します。",
    "Text color of the button when pressed": "ボタンが押されたときの文字色",
    "Should be used on an icon in a button that has no text.": "テキストを持たないボタン内のアイコンに対して使用されるべきです。",
    "The native HTML button or anchor element that wraps all child elements.": "すべての子要素をラップするネイティブHTMLのボタンまたはアンカー要素です。",
    "Text color of the button when hover": "ホバー時のボタンの文字色",
    "Content is placed between the named slots if provided without a slot.": "slotがない状態で提供される場合、コンテンツは名前付きslotの間に配置されます。",
    "Box shadow of the button": "ボタンのボックスシャドウ",
    "Content is placed to the right of the button text in LTR, and to the left in RTL.": "コンテンツは、LTRの場合はボタンテキストの右側に、RTLの場合は左側に配置されます。",
    "Content is placed to the left of the button text in LTR, and to the right in RTL.": "コンテンツは、LTRではボタンテキストの左側に、RTLでは右側に配置されます。",
    "Border style of the button": "ボタンのボーダースタイル",
    "Border width of the button": "ボタンのボーダー幅",
    "Border color of the button": "ボタンのボーダーカラー",
    "If true, buttons will disappear when its parent toolbar has fully collapsed if the toolbar is not the first toolbar. If the toolbar is the first toolbar, the buttons will be hidden and will only be shown once all toolbars have fully collapsed.  Only applies in `ios` mode with `collapse` set to `true` on `ion-header`.  Typically used for [Collapsible Large Titles](https://ionicframework.com/docs/api/title#collapsible-large-titles)": "trueを指定すると、ツールバーが最初のツールバーでない場合、親ツールバーが完全に折り畳まれたときにボタンが消えます。ツールバーが最初のツールバーである場合、ボタンは隠され、すべてのツールバーが完全に折りたたまれたときにのみ表示されます。  ion-header`で `collapse` を `true` に設定した `ios` modeにのみ適用されます。  通常、[Collapsible Large Titles](https://ionicframework.com/docs/api/title#collapsible-large-titles)に使用されます。",
    "If `true`, the card header will be translucent. Only applies when the mode is `\"ios\"` and the device supports [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).": "`true`の場合、カードヘッダは半透明になります。modeが `\"ios\"` で、デバイスが [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility) をサポートしている場合にのみ適用されます。",
    "Color of the card subtitle": "カードサブタイトルの色",
    "Color of the card title": "カードタイトルの色",
    "If `true`, the user cannot interact with the card.": "`true`の場合、ユーザはカードと対話することができません。",
    "Color of the card": "カードの色",
    "Background of the card": "カードの背景",
    "The native HTML button, anchor, or div element that wraps all child elements.": "すべての子要素をラップするネイティブHTMLのボタン、アンカー、またはdiv要素です。",
    "The type of the button. Only used when an `onclick` or `button` property is present.": "ボタンの種類。onclick`または`button`プロパティが存在する場合にのみ使用される。",
    "If `true`, a button tag will be rendered and the card will be tappable.": "`true`の場合、ボタンタグがレンダリングされ、カードはタップ可能になる。",
    "If `true`, the checkbox is selected.": "`true`の場合、チェックボックスが選択される。",
    "Border style of the checkbox icon": "チェックボックスアイコンのボーダースタイル",
    "Border width of the checkbox icon": "チェックボックスアイコンのボーダー幅",
    "If `true`, the checkbox will visually appear as indeterminate.": "`true`の場合、チェックボックスは視覚的に不定形と表示されます。",
    "Border color of the checkbox icon": "チェックボックスアイコンのボーダーカラー",
    "Border radius of the checkbox icon": "チェックボックスアイコンの境界半径",
    "Background of the checkbox icon": "チェックボックスアイコンの背景",
    "The name of the control, which is submitted with the form data.": "フォームデータとともに送信されるコントロールの名前。",
    "Size of the checkbox icon": "チェックボックスのアイコンの大きさ",
    "If `true`, the user cannot interact with the checkbox.": "`true`の場合、ユーザはチェックボックスと対話することができません。",
    "Emitted when the checkbox loses focus.": "チェックボックスのフォーカスが外れたときに発行されます。",
    "Color of the checkbox checkmark when checked": "チェックボックスのチェックマークがチェックされたときの色",
    "Emitted when the checkbox has focus.": "チェックボックスにフォーカスが当たったときに発行されます。",
    "Border color of the checkbox icon when checked": "チェックボックスのアイコンがチェックされたときのボーダーカラー",
    "Background of the checkbox icon when checked": "チェックしたときのチェックボックスアイコンの背景",
    "Emitted when the checked property has changed.": "チェックされたプロパティが変更されたときに発行されます。",
    "Stroke width of the checkbox checkmark": "チェックボックス・チェックマークのストローク幅",
    "The value of the checkbox does not mean if it's checked or not, use the `checked` property for that.  The value of a checkbox is analogous to the value of an `<input type=\"checkbox\">`, it's only used when the checkbox participates in a native `<form>`.": "チェックボックスの値は、チェックされているかどうかを意味するものではなく、`checked`プロパティを使用します。  チェックボックスの値は `<input type=\"checkbox\">` の値に似ており、チェックボックスがネイティブの `<form>` に参加する場合にのみ使用されます。",
    "The checkmark used to indicate the checked state.": "チェックされた状態を示すために使用されるチェックマークです。",
    "The container for the checkbox mark.": "チェックボックスマークのコンテナです。",
    "Transition of the checkbox icon": "チェックボックスアイコンの遷移",
    "Color of the chip": "チップの色",
    "If `true`, the user cannot interact with the chip.": "`true`の場合、ユーザはチップと対話することができません。",
    "Display an outline style button.": "アウトラインスタイルボタンを表示します。",
    "Background of the chip": "チップの背景",
    "The amount to offset the column, in terms of how many columns it should shift to the end of the total available.": "オフセットする量を、利用可能な合計の末尾に何列分シフトさせるかで指定します。",
    "The size of the column, in terms of how many columns it should take up out of the total available. If `\"auto\"` is passed, the column will be the size of its content.": "カラムの大きさを、利用可能なカラムのうち何カラムを占めるかで指定します。`\"auto\"`が渡された場合、カラムはそのコンテンツのサイズになります。",
    "The amount to pull the column for lg screens, in terms of how many columns it should shift to the start of the total available.": "LGスクリーン用のカラムを引く量を、使用可能な合計の開始位置に何カラム分シフトさせるかで指定します。",
    "The amount to pull the column for xs screens, in terms of how many columns it should shift to the start of the total available.": "xsスクリーン用のカラムを引っ張る量を、利用可能な合計の開始位置に何カラム分シフトさせるかで指定します。",
    "The amount to push the column for md screens, in terms of how many columns it should shift to the end of the total available.": "mdスクリーン用のカラムを、利用可能な合計の末尾に何カラム分シフトさせるかを指定します。",
    "The amount to pull the column, in terms of how many columns it should shift to the start of the total available.": "列を引っ張る量を、利用可能な合計の開始位置に何列分ずらすかで指定します。",
    "The amount to push the column for xl screens, in terms of how many columns it should shift to the end of the total available.": "xlスクリーン用のカラムをプッシュする量を、利用可能な合計の末尾にシフトするカラムの数で指定します。",
    "The amount to push the column for lg screens, in terms of how many columns it should shift to the end of the total available.": "LGスクリーン用のカラムをプッシュする量を、使用可能な総カラムのうち何カラム分までシフトさせるかで指定します。",
    "The amount to offset the column for xl screens, in terms of how many columns it should shift to the end of the total available.": "xlスクリーン用のカラムをオフセットする量を、利用可能な合計の末尾に何カラム分シフトさせるかで指定します。",
    "The amount to push the column for xs screens, in terms of how many columns it should shift to the end of the total available.": "xs画面分の列を、利用可能な合計の末尾に何列分シフトさせるかを指定します。",
    "The amount to push the column, in terms of how many columns it should shift to the end of the total available.": "カラムを押す量を、利用可能な合計の末尾に何カラム分シフトさせるかで指定します。",
    "The amount to offset the column for xs screens, in terms of how many columns it should shift to the end of the total available.": "xs画面のカラムをオフセットする量を、利用可能な合計の末尾に何カラム分ずらすかで指定します。",
    "The amount to pull the column for xl screens, in terms of how many columns it should shift to the start of the total available.": "xlスクリーン用のカラムを引っ張る量を、利用可能な合計の開始位置に何カラム分シフトさせるかで指定します。",
    "The amount to pull the column for sm screens, in terms of how many columns it should shift to the start of the total available.": "smスクリーン用のカラムを引っ張る量を、利用可能な合計の開始位置に何カラム分シフトさせるかで指定します。",
    "The amount to pull the column for md screens, in terms of how many columns it should shift to the start of the total available.": "mdスクリーン用のカラムを引っ張る量を、利用可能な合計の開始位置に何カラムシフトさせるかで指定します。",
    "The amount to offset the column for md screens, in terms of how many columns it should shift to the end of the total available.": "mdスクリーン用のカラムをオフセットする量を、使用可能な合計の末尾に何カラム分シフトさせるかで指定します。",
    "The amount to push the column for sm screens, in terms of how many columns it should shift to the end of the total available.": "smスクリーン用のカラムを押す量を、使用可能な合計の末尾に何カラム分シフトさせるかで指定します。",
    "The amount to offset the column for sm screens, in terms of how many columns it should shift to the end of the total available.": "smスクリーン用のカラムをオフセットする量を、利用可能な合計の末尾に何カラム分シフトさせるかで指定します。",
    "The amount to offset the column for lg screens, in terms of how many columns it should shift to the end of the total available.": "Lgスクリーン用のカラムをオフセットする量を、使用可能な合計の末尾に何カラム分シフトさせるかで指定します。",
    "The number of total Columns in the Grid": "グリッドのカラムの総数",
    "Padding for the Column on sm screens and up": "スマートフォン以上の画面では、コラムにパッドを入れる。",
    "Padding for the Column on lg screens and up": "LG以上の画面でのコラムのPadding",
    "Padding for the Column on md screens and up": "mdスクリーン以上のカラムのPadding",
    "Padding for the Column on xs screens and up": "xsスクリーン以上のカラムのPadding",
    "Padding for the Column on xl screens and up": "XL以上の画面でのカラムのPadding",
    "The size of the column for sm screens, in terms of how many columns it should take up out of the total available. If `\"auto\"` is passed, the column will be the size of its content.": "smスクリーン用のカラムの大きさを、利用可能なカラムのうち何カラムを占めるかで指定します。`\"auto\"`が渡された場合、カラムはそのコンテンツのサイズになります。",
    "The size of the column for md screens, in terms of how many columns it should take up out of the total available. If `\"auto\"` is passed, the column will be the size of its content.": "mdスクリーンのカラムの大きさを、利用可能なカラムのうち何カラムを占有するかで指定します。`\"auto\"`が渡された場合、カラムはそのコンテンツのサイズになります。",
    "Padding for the Column": "カラムのPadding",
    "The size of the column for xl screens, in terms of how many columns it should take up out of the total available. If `\"auto\"` is passed, the column will be the size of its content.": "xlスクリーン用のカラムの大きさを、利用可能な合計カラムのうち何カラムを占めるべきかという観点から指定します。`\"auto\"`が渡された場合、カラムはそのコンテンツのサイズになります。",
    "The size of the column for lg screens, in terms of how many columns it should take up out of the total available. If `\"auto\"` is passed, the column will be the size of its content.": "lgスクリーン用のカラムの大きさを、利用可能な合計カラム数のうち何カラムを占めるべきかという観点から指定します。 `\"auto\"`が渡された場合、カラムはそのコンテンツのサイズになります。",
    "The size of the column for xs screens, in terms of how many columns it should take up out of the total available. If `\"auto\"` is passed, the column will be the size of its content.": "xsスクリーンのカラムの大きさを、利用可能な合計のうち何カラムを占めるべきかという観点から指定します。 `\"auto\"`が渡された場合、カラムはそのコンテンツのサイズとなる。",
    "Offset bottom of the content": "コンテンツのオフセットボトム",
    "Scroll to the top of the component.": "コンポーネントの上部にスクロールします。",
    "Scroll to a specified X/Y location in the component.": "コンポーネント内の指定したX/Y位置までスクロールします。",
    "Scroll to the bottom of the component.": "コンポーネントの一番下までスクロールします。",
    "Background of the content": "コンテンツの背景",
    "Offset top of the content": "コンテンツのオフセットトップ",
    "Scroll by a specified X/Y distance in the component.": "コンポーネントを指定したX/Y距離だけスクロールさせる。",
    "Color of the content": "コンテンツの色",
    "Emitted when the scroll has ended. This event is disabled by default. Set `scrollEvents` to `true` to enable.": "スクロールが終了したときに発行されます。このイベントはデフォルトで無効になっている。有効にするには `scrollEvents` に `true` を設定します。",
    "Emitted when the scroll has started. This event is disabled by default. Set `scrollEvents` to `true` to enable.": "スクロールが開始されたときに発行されます。このイベントはデフォルトで無効になっている。有効にするには `scrollEvents` に `true` を設定してください。",
    "Keyboard offset of the content": "コンテンツのキーボードオフセット",
    "If `true`, the content will scroll behind the headers and footers. This effect can easily be seen by setting the toolbar to transparent.": "`true`の場合、コンテンツはヘッダーとフッターの後ろにスクロールされます。この効果は、ツールバーを透明に設定することで簡単に確認することができます。",
    "If you want to enable the content scrolling in the X axis, set this property to `true`.": "X軸方向のコンテンツスクロールを有効にしたい場合は、このプロパティを`true`に設定します。",
    "Because of performance reasons, ionScroll events are disabled by default, in order to enable them and start listening from (ionScroll), set this property to `true`.": "パフォーマンス上の理由から、ionScrollイベントはデフォルトで無効になっています。ionScrollイベントを有効にして(ionScroll)からリスニングを開始するには、このプロパティを`true`に設定します。",
    "Emitted while scrolling. This event is disabled by default. Set `scrollEvents` to `true` to enable.": "スクロール中に発行されます。このイベントはデフォルトで無効になっています。有効にするには `scrollEvents` に `true` を設定します。",
    "If `true` and the content does not cause an overflow scroll, the scroll interaction will cause a bounce. If the content exceeds the bounds of ionContent, nothing will change. Note, the does not disable the system bounce on iOS. That is an OS level setting.": "`true`で、コンテンツがオーバーフロースクロールを引き起こさない場合、スクロールインタラクションはバウンスを引き起こします。コンテンツがionContentの境界を超えた場合、何も変化しません。iOSのシステムバウンスを無効にしないことに注意してください。これはOSレベルの設定です。",
    "Get the element where the actual scrolling takes place. This element can be used to subscribe to `scroll` events or manually modify `scrollTop`. However, it's recommended to use the API provided by `ion-content`:  i.e. Using `ionScroll`, `ionScrollStart`, `ionScrollEnd` for scrolling events and `scrollToPoint()` to scroll the content into a certain point.": "実際のスクロールが行われる要素を取得します。この要素を使用して、`scroll` イベントを購読したり、`scrollTop` を手動で変更したりすることができる。スクロールイベントには `ionScroll`, `ionScrollStart`, `ionScrollEnd` を、コンテンツを特定のポイントにスクロールさせるには `scrollToPoint()` を使用することが推奨されます。",
    "If you want to disable the content scrolling in the Y axis, set this property to `false`.": "Y軸方向のコンテンツスクロールを無効にしたい場合は、このプロパティに`false`を設定します。",
    "Top padding of the content": "コンテンツのTop Padding",
    "The background of the content.": "コンテンツの背景です。",
    "Bottom padding of the content": "コンテンツのBottom Padding",
    "The scrollable container of the content.": "コンテンツのスクロール可能なコンテナ。",
    "Should be used for fixed content that should not scroll.": "スクロールしてはいけない固定コンテンツに使用する必要があります。",
    "Content is placed in the scrollable area if provided without a slot.": "slotなしで提供される場合、コンテンツはスクロール可能な領域に配置されます。",
    "Right padding if direction is left-to-right, and left padding if direction is right-to-left of the content": "コンテンツの方向が左から右の場合はRight Padding、右から左の場合はLeft Paddingとなります。",
    "Left padding if direction is left-to-right, and right padding if direction is right-to-left of the content": "コンテンツの方向が左から右の場合はLeft Padding、右から左の場合はRight Paddingとなります。",
    "Content displayed inside of the time button.": "時刻ボタンの内側に表示される内容。",
    "The native HTML button that wraps the slotted text.": "slotされたテキストをラップするネイティブHTMLボタンです。",
    "Content displayed inside of the date button.": "日付ボタンの内側に表示されるコンテンツです。",
    "The ID of the `ion-datetime` instance associated with the datetime button.": "datetime ボタンに関連付けられた `ion-datetime` インスタンスの ID。",
    "The text to display on the picker's cancel button.": "ピッカーのキャンセルボタンに表示するテキストです。",
    "The first day of the week to use for `ion-datetime`. The default value is `0` and represents Sunday.": "ion-datetime`に使用する週の最初の曜日を指定します。デフォルト値は `0` で、日曜日を表す。",
    "If `true`, the user cannot interact with the datetime.": "`true`の場合、ユーザはdatetimeを操作することができません。",
    "Returns if an individual date (calendar day) is enabled or disabled.  If `true`, the day will be enabled/interactive. If `false`, the day will be disabled/non-interactive.  The function accepts an ISO 8601 date string of a given day. By default, all days are enabled. Developers can use this function to write custom logic to disable certain days.  The function is called for each rendered calendar day, for the previous, current and next month. Custom implementations should be optimized for performance to avoid jank.": "個々の日付(暦日)が有効か無効かを返します。 `true`の場合、その日は有効/対話型になる。もし `false` ならば、その日は無効/非インタラクティブです。  この関数は、指定された日のISO 8601の日付文字列を受け取ります。デフォルトでは、すべての曜日が有効になります。開発者はこの関数を使用して、特定の日を無効にするカスタムロジックを記述することができます。  この関数は、レンダリングされたカレンダーの各日、前月、当月、翌月に対して呼び出されます。カスタム実装は、ジャンクを避けるためにパフォーマンスを最適化する必要があります。",
    "The hour cycle of the `ion-datetime`. If no value is set, this is specified by the current locale.": "ion-datetime`の時間周期を指定します。値が設定されていない場合、現在のロケールによって指定される。",
    "If `true`, multiple dates can be selected at once. Only applies to `presentation=\"date\"` and `preferWheel=\"false\"`.": "`true`の場合、複数の日付を一度に選択することができる。presentation=\"date\"`と `preferWheel=\"false\"` にのみ適用される。",
    "Values used to create the list of selectable hours. By default the hour values range from `0` to `23` for 24-hour, or `1` to `12` for 12-hour. However, to control exactly which hours to display, the `hourValues` input can take a number, an array of numbers, or a string of comma separated numbers.": "選択可能な時間のリストを作成するために使用される値です。デフォルトでは、24時間制の場合は `0` から `23` まで、12時間制の場合は `1` から `12` までの時間帯が設定されます。しかし、表示する時間を正確に制御するために、`hourValues` には数値、数値の配列、またはコンマで区切られた数値の文字列を指定することができます。",
    "Values used to create the list of selectable minutes. By default the minutes range from `0` to `59`. However, to control exactly which minutes to display, the `minuteValues` input can take a number, an array of numbers, or a string of comma separated numbers. For example, if the minute selections should only be every 15 minutes, then this input value would be `minuteValues=\"0,15,30,45\"`.": "選択可能な分数のリストを作成するために使用される値です。デフォルトでは、分数は `0` から `59` までの範囲です。しかし、表示する分を正確に制御するために、`minuteValues` には数値、数値の配列、またはコンマで区切られた数値の文字列を取ることができます。例えば、分表示を15分ごとに行う場合は、 `minuteValues=\"0,15,30,45\"` と入力することになります。",
    "The text to display on the picker's \"Clear\" button.": "ピッカーの\"Clear\"ボタンに表示するテキストです。",
    "Used to apply custom text and background colors to specific dates.  Can be either an array of objects containing ISO strings and colors, or a callback that receives an ISO string and returns the colors.  Only applies to the `date`, `date-time`, and `time-date` presentations, with `preferWheel=\"false\"`.": "特定の日付にカスタムテキストと背景色を適用するために使用します。  ISO 文字列と色を含むオブジェクトの配列、または ISO 文字列を受け取って色を返すコールバックのいずれかを指定します。  preferWheel=\"false\"`を持つ `date`、`date-time`、`time-date` のプレゼンテーションにのみ適用されます。",
    "The maximum datetime allowed. Value must be a date string following the [ISO 8601 datetime format standard](https://www.w3.org/TR/NOTE-datetime), `1996-12-19`. The format does not have to be specific to an exact datetime. For example, the maximum could just be the year, such as `1994`. Defaults to the end of this year.": "許容される最大のdatetimeを指定します。値は、[ISO 8601 datetime format standard](https://www.w3.org/TR/NOTE-datetime) の `1996-12-19` に従った日付文字列である必要があります。このフォーマットは、正確な日付時刻を指定する必要はありません。例えば、最大で`1994`のような年号を指定することができます。デフォルトはこの年の末日です。",
    "The text to display on the picker's \"Done\" button.": "ピッカーの \"Done \"ボタンに表示するテキスト。",
    "If `true`, a wheel picker will be rendered instead of a calendar grid where possible. If `false`, a calendar grid will be rendered instead of a wheel picker where possible.  A wheel picker can be rendered instead of a grid when `presentation` is one of the following values: `'date'`, `'date-time'`, or `'time-date'`.  A wheel picker will always be rendered regardless of the `preferWheel` value when `presentation` is one of the following values: `'time'`, `'month'`, `'month-year'`, or `'year'`.": "`true`の場合、可能な限りカレンダーグリッドの代わりにホイールピッカーが表示されます。もし `false` ならば、可能な限りホイールピッカーの代わりにカレンダーグリッドがレンダリングされます。  ホイールピッカーは、`presentation`が以下の値の場合、グリッドの代わりにレンダリングすることができます。presentation`が `'date'`, `'date-time'`, または `'time-date'`.  ホイールピッカーは、`preferWheel`の値に関係なく、`presentation`が次の値のいずれかである場合に常にレンダリングされます。`'time'`, `'month'`, `'month-year'`, または `'year'`.",
    "Values used to create the list of selectable days. By default every day is shown for the given month. However, to control exactly which days of the month to display, the `dayValues` input can take a number, an array of numbers, or a string of comma separated numbers. Note that even if the array days have an invalid number for the selected month, like `31` in February, it will correctly not show days which are not valid for the selected month.": "選択可能な日のリストを作成するために使用する値です。デフォルトでは、指定した月のすべての曜日が表示されます。しかし、表示する曜日を正確に制御するために、`dayValues` には数値、数値の配列、またはコンマで区切られた数値の文字列を取ることができます。配列のdayが2月の`31`のように選択した月にとって無効な数字であっても、選択した月にとって有効でない日は正しく表示されないことに注意してください。",
    "The minimum datetime allowed. Value must be a date string following the [ISO 8601 datetime format standard](https://www.w3.org/TR/NOTE-datetime), such as `1996-12-19`. The format does not have to be specific to an exact datetime. For example, the minimum could just be the year, such as `1994`. Defaults to the beginning of the year, 100 years ago from today.": "許容される最小のdatetime。値は [ISO 8601 datetime format standard](https://www.w3.org/TR/NOTE-datetime) に従った日付文字列でなければならず、例えば `1996-12-19` のようなものです。このフォーマットは、正確な日付時刻を指定する必要はありません。例えば、最小値は`1994`のような年号だけでいいです。デフォルトは、今日から100年前の年頭です。",
    "Values used to create the list of selectable months. By default the month values range from `1` to `12`. However, to control exactly which months to display, the `monthValues` input can take a number, an array of numbers, or a string of comma separated numbers. For example, if only summer months should be shown, then this input value would be `monthValues=\"6,7,8\"`. Note that month numbers do *not* have a zero-based index, meaning January's value is `1`, and December's is `12`.": "選択可能な月のリストを作成するために使用する値。デフォルトでは、月の値は `1` から `12` までの範囲です。しかし、どの月を表示するかを正確に制御するために、`monthValues` には数値、数値の配列、またはコンマで区切られた数値の文字列を取ることができます。例えば、夏の月だけを表示する場合、この入力値は `monthValues=\"6,7,8\"` となります。つまり、1月の値は `1` であり、12月の値は `12` です。",
    "The locale to use for `ion-datetime`. This impacts month and day name formatting. The `'default'` value refers to the default locale set by your device.": "`ion-datetime`に使用するロケールを指定します。これは月と日の名前のフォーマットに影響します。`'default'`値は、あなたのデバイスが設定するデフォルトのロケールを参照します。",
    "Which values you want to select. `'date'` will show a calendar picker to select the month, day, and year. `'time'` will show a time picker to select the hour, minute, and (optionally) AM/PM. `'date-time'` will show the date picker first and time picker second. `'time-date'` will show the time picker first and date picker second.": "どの値を選択するか。`'date'`はカレンダーピッカーを表示し、月、日、年を選択します。`'time'`は時間ピッカーを表示し、時、分、そして（オプションで）AM/PMを選択します。date-time'`は日付ピッカーを最初に表示し、時間ピッカーを次に表示します。`'time-date'`は時間ピッカーを最初に、日付ピッカーを2番目に表示します。",
    "Emitted when the datetime loses focus.": "datetimeのフォーカスが外れたときに発行されます。",
    "Emitted when the value (selected date) has changed.": "値（選択された日付）が変化したときに発行されます。",
    "The value of the datetime as a valid ISO 8601 datetime string. Should be an array of strings if `multiple=\"true\"`.": "datetimeの値を有効なISO 8601 datetime文字列として指定します。multiple=\"true\"`の場合は、文字列の配列とする必要がある。",
    "Emitted when the datetime selection was cancelled.": "datetimeの選択がキャンセルされたときに発生します。",
    "Emits the ionCancel event and optionally closes the popover or modal that the datetime was presented in.": "ionCancel イベントを発行し、オプションで datetime が表示されたポップオーバーまたはモーダルを閉じます。",
    "Resets the internal state of the datetime but does not update the value. Passing a valid ISO-8601 string will reset the state of the component to the provided date. If no value is provided, the internal state will be reset to the clamped value of the min, max and today.": "datetimeの内部状態をリセットするが、値は更新しません。有効なISO-8601文字列を渡すと、コンポーネントの状態は指定した日付にリセットされます。値が提供されない場合、内部状態はmin、max、todayのクランプされた値にリセットされます。",
    "A callback used to format the header text that shows how many dates are selected. Only used if there are 0 or more than 1 selected (i.e. unused for exactly 1). By default, the header text is set to \"numberOfDates days\".": "選択された日付の数を示すヘッダーテキストをフォーマットするために使用されるコールバックです。選択された日付が0または1以上の場合のみ使用されます（つまり、ちょうど1の場合は未使用です）。デフォルトでは、ヘッダーテキストは \"numberOfDates days \"に設定されています。",
    "Confirms the selected datetime value, updates the `value` property, and optionally closes the popover or modal that the datetime was presented in.": "選択されたdatetimeの値を確認し、`value`プロパティを更新し、オプションでdatetimeが表示されていたポップオーバーまたはモーダルを閉じます。",
    "If `cover`, the `ion-datetime` will expand to cover the full width of its container. If `fixed`, the `ion-datetime` will have a fixed width.": "cover`の場合、`ion-datetime`はコンテナの全幅を覆うように展開される。`fixed`の場合、`ion-datetime`は固定幅になる。",
    "If `true`, the default \"Time\" label will be rendered for the time selector of the `ion-datetime` component. Developers can also use the `time-label` slot if they want to customize this label. If a custom label is set in the `time-label` slot then the default label will not be rendered.": "`true`の場合、`ion-datetime`コンポーネントの時間セレクタにデフォルトの \"Time \"ラベルがレンダリングされる。このラベルをカスタマイズしたい場合は、`time-label`slotを使用することもできます。 `time-label` slotにカスタムラベルが設定されている場合、デフォルトのラベルはレンダリングされません。",
    "Values used to create the list of selectable years. By default the year values range between the `min` and `max` datetime inputs. However, to control exactly which years to display, the `yearValues` input can take a number, an array of numbers, or string of comma separated numbers. For example, to show upcoming and recent leap years, then this input's value would be `yearValues=\"2024,2020,2016,2012,2008\"`.": "選択可能な年号のリストを作成するために使用する値。デフォルトでは、年の値は `min` と `max` の間の範囲になります。しかし、表示する年を正確に制御するために、`yearValues` には数値、数値の配列、またはカンマで区切られた数値の文字列を取ることができます。例えば、今後のうるう年と最近のうるう年を表示するには、この入力の値は `yearValues=\"2024,2020,2016,2012,2008\"` となります。",
    "Emitted when the datetime has focus.": "datetimeにフォーカスが当たったときに発行されます。",
    "If `true`, a header will be shown above the calendar picker. This will include both the slotted title, and the selected date.": "`true`の場合、カレンダーピッカーの上にヘッダーが表示されます。これには、slotされたタイトルと、選択された日付の両方が含まれます。",
    "The title of the datetime.": "datetimeのタイトルです。",
    "The buttons in the datetime.": "datetimeのボタンです。",
    "The label for the time selector in the datetime.": "datetimeの時間セレクタのラベルです。",
    "The text color of the title.": "タイトルの文字色です。",
    "The primary background of the datetime component.": "datetimeコンポーネントの主な背景。",
    "If `true`, the datetime appears normal but is not interactive.": "`true`の場合、datetimeは正常に表示されるが、インタラクティブにはなりません。",
    "The primary background of the datetime component in RGB format.": "datetimeコンポーネントの主な背景をRGBフォーマットで示します。",
    "If `true`, the default \"Cancel\" and \"OK\" buttons will be rendered at the bottom of the `ion-datetime` component. Developers can also use the `button` slot if they want to customize these buttons. If custom buttons are set in the `button` slot then the default buttons will not be rendered.": "`true`の場合、`ion-datetime`コンポーネントの下部にデフォルトの \"Cancel\" と \"OK\" ボタンがレンダリングされます。これらのボタンをカスタマイズしたい場合は、`button`slotを使用することもできます。カスタムボタンが `button` slotに設定されている場合、デフォルトのボタンはレンダリングされません。",
    "If `true`, a \"Clear\" button will be rendered alongside the default \"Cancel\" and \"OK\" buttons at the bottom of the `ion-datetime` component. Developers can also use the `button` slot if they want to customize these buttons. If custom buttons are set in the `button` slot then the default buttons will not be rendered.": "`true`の場合、`ion-datetime`コンポーネントの下部にあるデフォルトの \"Cancel \"と \"OK \"ボタンと一緒に \"Clear \"ボタンがレンダリングされます。これらのボタンをカスタマイズしたい場合、開発者は `button` slotを使用することもできる。カスタムボタンが `button` slotに設定されている場合、デフォルトのボタンはレンダリングされません。",
    "The icon name to use for the close icon. This will appear when the fab button is pressed. Only applies if it is the main button inside of a fab containing a fab list.": "クローズアイコンに使用するアイコン名です。ファブボタンが押されたときに表示されます。ファブリストを含むファブ内のメインボタンである場合のみ適用されます。",
    "The close icon that is displayed when a fab list opens (uses ion-icon).": "ファブリストを開いたときに表示されるクローズアイコン（ion-iconを使用します）。",
    "Font size of the close icon": "クローズアイコンのFont Size",
    "Opacity of the button background when pressed": "押されたときのボタンの背景の不透明度",
    "If `true`, the user cannot interact with the fab button.": "`true`の場合、ユーザーはファブボタンを操作することができません。",
    "The size of the button. Set this to `small` in order to have a mini fab button.": "ボタンの大きさを指定します。ミニファブボタンを作るには、`small`に設定します。",
    "Opacity of the button background on hover": "ホバー時のボタン背景の不透明度",
    "If `true`, the fab button will be show a close icon.": "`true`の場合、ファブボタンにクローズアイコンを表示します。",
    "If `true`, the fab button will be translucent. Only applies when the mode is `\"ios\"` and the device supports [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).": "`true`の場合、ファブボタンが半透明になります。modeが `\"ios\"` で、デバイスが [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility) をサポートしている場合にのみ適用されます。",
    "If `true`, the fab button will show when in a fab-list.": "`true`の場合、fabボタンがfab-listにあるときに表示されます。",
    "The side the fab list will show on relative to the main fab button.": "メインファブボタンに対して、ファブリストが表示される側を指定します。",
    "If `true`, the fab list will show all fab buttons in the list.": "`true`の場合、ファブリストに全てのファブボタンが表示されます。",
    "Where to align the fab vertically in the viewport.": "ビューポートでファブを縦に並べる場所。",
    "Where to align the fab horizontally in the viewport.": "ビューポートでファブを水平に揃える場所。",
    "Close an active FAB list container.": "アクティブなFABリストコンテナを閉じる。",
    "If `true`, the fab will display on the edge of the header if `vertical` is `\"top\"`, and on the edge of the footer if it is `\"bottom\"`. Should be used with a `fixed` slot.": "`true`の場合、`vertical`が`\"top\"`の場合はヘッダーの端に、`\"bottom\"`の場合はフッターの端にファブを表示します。 `fixed` slotと一緒に使用する必要があります。",
    "If `true`, both the `ion-fab-button` and all `ion-fab-list` inside `ion-fab` will become active. That means `ion-fab-button` will become a `close` icon and `ion-fab-list` will become visible.": "もし `true` ならば、`ion-fab` 内の `ion-fab-button` とすべての `ion-fab-list` の両方がアクティブになる。つまり、`ion-fab-button`は`close`アイコンになり、`ion-fab-list`は可視化される。",
    "Describes the scroll effect that will be applied to the footer. Only applies in iOS mode.": "フッターに適用されるスクロール効果を記述します。iOS modeでのみ適用されます。",
    "If `true`, the footer will be translucent. Only applies when the mode is `\"ios\"` and the device supports [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).  Note: In order to scroll content behind the footer, the `fullscreen` attribute needs to be set on the content.": "`true`の場合、フッターは半透明になります。modeが `\"ios\"` で、デバイスが [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility) をサポートしている場合のみ適用されます。  注意：フッターの後ろにコンテンツをスクロールさせるためには、コンテンツに `fullscreen` 属性が設定されている必要があります。",
    "Padding for the Grid on xs screens": "xs画面でのGridのPadding",
    "Padding for the Grid on lg screens": "LG画面でのグリッドのPadding",
    "Width of the fixed Grid on xs screens": "xsスクリーンで固定されたGridの幅",
    "Padding for the Grid on md screens": "md画面におけるグリッドのPadding",
    "Padding for the Grid": "グリッドのPadding",
    "Width of the fixed Grid": "固定Gridの幅",
    "Padding for the Grid on sm screens": "スマートスクリーンにおけるグリッドのPadding",
    "Padding for the Grid on xl screens": "XL画面でのグリッドのPadding",
    "Width of the fixed Grid on md screens": "md画面での固定Gridの幅",
    "Width of the fixed Grid on lg screens": "LGスクリーンで固定されたGridの幅",
    "Width of the fixed Grid on sm screens": "sm画面での固定Gridの幅",
    "Width of the fixed Grid on xl screens": "xl画面での固定Gridの幅",
    "If `true`, the grid will have a fixed width based on the screen size.": "`true`の場合、グリッドの幅は画面サイズに応じた固定幅となる。",
    "Describes the scroll effect that will be applied to the header. Only applies in iOS mode.  Typically used for [Collapsible Large Titles](https://ionicframework.com/docs/api/title#collapsible-large-titles)": "ヘッダーに適用されるスクロール効果を記述します。iOS modeでのみ適用されます。  通常、[折りたたみ式ラージタイトル](https://ionicframework.com/docs/api/title#collapsible-large-titles)に使用します。",
    "If `true`, the header will be translucent. Only applies when the mode is `\"ios\"` and the device supports [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).  Note: In order to scroll content behind the header, the `fullscreen` attribute needs to be set on the content.": "`true`の場合、ヘッダーは半透明になります。modeが `\"ios\"` で、デバイスが [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility) をサポートしている場合にのみ適用されます。  注意：ヘッダーの後ろにコンテンツをスクロールさせるには、コンテンツに `fullscreen` 属性が設定されている必要があります。",
    "Emitted when the img fails to load": "imgの読み込みに失敗したときに発行されます。",
    "The inner `img` element.": "内側の `img` 要素。",
    "Emitted when the image has finished loading": "画像の読み込みが終了したときに発行されます。",
    "Emitted when the img src has been set": "img srcが設定されたときに発行されます。",
    "The image URL. This attribute is mandatory for the `<img>` element.": "画像のURL。この属性は `<img>` 要素では必須です。",
    "This attribute defines the alternative text describing the image. Users will see this text displayed if the image URL is wrong, the image is not in one of the supported formats, or if the image is not yet downloaded.": "この属性は、画像を説明する代替テキストを定義します。画像の URL が間違っている場合、画像がサポートされている形式の一つでない場合、または画像がまだダウンロードされていない場合、ユーザにはこのテキストが表示されます。",
    "An animated SVG spinner that shows while loading.": "ロード中に表示されるアニメーションSVGスピナーです。",
    "Optional text to display while loading. `loadingText` can accept either plaintext or HTML as a string. To display characters normally reserved for HTML, they must be escaped. For example `<Ionic>` would become `&lt;Ionic&gt;`  For more information: [Security Documentation](https://ionicframework.com/docs/faq/security)": "ロード中に表示するオプションのテキスト。 `loadingText` には、文字列としてプレーンテキストまたはHTMLのいずれかを指定することができます。通常HTML用に予約されている文字を表示するには、エスケープする必要があります。例えば、`<Ionic>`は `&lt;Ionic&gt;` となります。詳細は [セキュリティ・ドキュメンテーション](https://ionicframework.com/docs/faq/security) をご覧ください。",
    "If `true`, the infinite scroll will be hidden and scroll event listeners will be removed.  Set this to true to disable the infinite scroll from actively trying to receive new data while scrolling. This is useful when it is known that there is no more data that can be added, and the infinite scroll is no longer needed.": "`true`の場合、無限スクロールは非表示になり、スクロールイベントリスナーが削除されます。 `true` を設定すると、無限スクロールがスクロール中に新しいデータを積極的に受け取ろうとするのを無効にすることができます。これは、追加できるデータがもうないことが分かっていて、無限スクロールが不要になった場合に有効です。",
    "The threshold distance from the bottom of the content to call the `infinite` output event when scrolled. The threshold value can be either a percent, or in pixels. For example, use the value of `10%` for the `infinite` output event to get called when the user has scrolled 10% from the bottom of the page. Use the value `100px` when the scroll is within 100 pixels from the bottom of the page.": "スクロールしたときに `infinite` 出力イベントを呼び出すための、コンテンツの底からの閾値の距離。閾値はパーセントかピクセル単位で指定します。例えば、`10%`という値を使用すると、ユーザがページの下から10%スクロールしたときに `infinite` 出力イベントが呼び出されるようになります。また、ページの下から100ピクセル以内にスクロールした場合には、`100px`という値を使用します。",
    "The position of the infinite scroll element. The value can be either `top` or `bottom`.": "無限スクロール要素の位置を指定します。値は `top` または `bottom` のどちらかです。",
    "Emitted when the scroll reaches the threshold distance. From within your infinite handler, you must call the infinite scroll's `complete()` method when your async operation has completed.": "スクロールが閾値の距離に達したときに発行されます。非同期処理が完了したら、無限ハンドラから無限スクロールの `complete()` メソッドを呼び出す必要があります。",
    "Call `complete()` within the `ionInfinite` output event handler when your async operation has completed. For example, the `loading` state is while the app is performing an asynchronous operation, such as receiving more data from an AJAX request to add more items to a data list. Once the data has been received and UI updated, you then call this method to signify that the loading has completed. This method will change the infinite scroll's state from `loading` to `enabled`.": "非同期操作が完了したら、`ionInfinite`出力イベントハンドラ内で `complete()` を呼び出します。例えば、AJAX リクエストからデータを受信してデータリストに項目を追加するなど、アプリが非同期処理を実行している間が `loading` 状態です。データの受信とUIの更新が完了したら、このメソッドを呼び出してロードが完了したことを知らせます。このメソッドは、無限スクロールの状態を `loading` から `enabled` へと変更します。",
    "Indicates whether the value of the control can be automatically completed by the browser.": "コントロールの値が、ブラウザによって自動的に補完されるかどうかを示します。",
    "Whether auto correction should be enabled when the user is entering/editing the text value.": "ユーザーがテキスト値を入力/編集する際に、自動補正を有効にするかどうか。",
    "This attribute is ignored.": "この属性は無視されます。",
    "If `true`, the user cannot interact with the input.": "`true`の場合、ユーザはInputと対話することができません。",
    "The maximum value, which must not be less than its minimum (min attribute) value.": "最大値で、その最小値（min属性）より小さくてはなりません。",
    "If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.": "`true`の場合、値があるときにInputにクリアアイコンが表示されます。これをクリックすると、入力がクリアされます。",
    "The minimum value, which must not be greater than its maximum (max attribute) value.": "最小値で、その最大値（max属性）より大きくてはなりません。",
    "This Boolean attribute lets you specify that a form control should have input focus when the page loads.": "この Boolean 属性により、ページロード時にフォームコントロールにInputフォーカスが当たるように指定することができます。",
    "If `true`, the value will be cleared after focus upon edit. Defaults to `true` when `type` is `\"password\"`, `false` for all other types.": "`true`の場合、編集時にフォーカスされた後、値がクリアされる。デフォルトは `type` が `\"password\"` のとき `true` で、それ以外のときは `false` です。",
    "If `true`, the user can enter more than one value. This attribute applies when the type attribute is set to `\"email\"`, otherwise it is ignored.": "`true`の場合、ユーザは複数の値を入力することができる。この属性は、type属性が `\"email\"` に設定されている場合に適用され、それ以外の場合は無視される。",
    "Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.": "キーを押すたびに `ionChange` イベントが発生するまでの待ち時間をミリ秒単位で設定します。これは `ngModel` や `v-model` などのフォームバインディングにも影響します。",
    "Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user. Available options: `\"off\"`, `\"none\"`, `\"on\"`, `\"sentences\"`, `\"words\"`, `\"characters\"`.": "テキスト値がユーザーによって入力／編集される際に、自動的に大文字にするかどうか、またどのようにするかについて示します。利用可能なオプションoff\"`, `\"none\"`, `\"on\"`, `\"sentences\"`, `\"words\"`, `\"characters\"`.",
    "A hint to the browser for which enter key to display. Possible values: `\"enter\"`, `\"done\"`, `\"go\"`, `\"next\"`, `\"previous\"`, `\"search\"`, and `\"send\"`.": "どのエンターキーを表示するかのブラウザへのヒント。指定可能な値。enter\"`, `\"done\"`, `\"go\"`, `\"next\"`, `\"previous\"`, `\"search\"`, and `\"send\"`.",
    "If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.": "type属性の値が `text`, `email`, `search`, `password`, `tel`, または `url` の場合、この属性はユーザーが入力できる最大文字数を指定します。",
    "A hint to the browser for which keyboard to display. Possible values: `\"none\"`, `\"text\"`, `\"tel\"`, `\"url\"`, `\"email\"`, `\"numeric\"`, `\"decimal\"`, and `\"search\"`.": "どのキーボードを表示するかのブラウザへのヒント。指定可能な値。none\"`, `\"text\"`, `\"tel\"`, `\"url\"`, `\"email\"`, `\"numeric\"`, `\"decimal\"`, and `\"search\"`.",
    "If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.": "type属性の値が `text`, `email`, `search`, `password`, `tel`, または `url` の場合、この属性はユーザーが入力できる最小文字数を指定します。",
    "A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `\"text\"`, `\"search\"`, `\"tel\"`, `\"url\"`, `\"email\"`, `\"date\"`, or `\"password\"`, otherwise it is ignored. When the type attribute is `\"date\"`, `pattern` will only be used in browsers that do not support the `\"date\"` input type natively. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date for more information.": "値をチェックするための正規表現。パターンは、部分的なものだけでなく、値全体にマッチする必要があります。title 属性を使って、ユーザーを助けるためにパターンを説明します。この属性は、type属性の値が `\"text\"`, `\"search\"`, `\"tel\"`, `\"url\"`, `\"email\"`, `\"date\"`, または `\"password\"` であるときに適用され、それ以外のときは無視されます。type 属性が `\"date\"` の場合、`pattern` は `\"date\"` Inputタイプをネイティブにサポートしないブラウザでのみ使用されます。詳しくは https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date を参照してください。",
    "Instructional text that shows before the input has a value. This property applies only when the `type` property is set to `\"email\"`, `\"number\"`, `\"password\"`, `\"search\"`, `\"tel\"`, `\"text\"`, or `\"url\"`, otherwise it is ignored.": "Inputが値を持つ前に表示される指示テキスト。このプロパティは、`type`プロパティが `\"email\"`, `\"number\"`, `\"password\"`, `\"search\"`, `\"tel\"`, `\"text\"`, または `\"url\"` に設定されている場合にのみ適用され、それ以外は無視されます。",
    "Font weight of the input placeholder text": "InputのPlaceholderテキストのFont Weight",
    "The value of the input.": "入力された値です。",
    "Background of the input": "Inputの背景",
    "Emitted when the input loses focus.": "Inputのフォーカスが外れたときに発行されます。",
    "Top padding of the input": "InputのTop Padding",
    "Emitted when the input has focus.": "Inputにフォーカスが当たったときに発行されます。",
    "Opacity of the input placeholder text": "InputのPlaceholderテキストの不透明度",
    "Right padding if direction is left-to-right, and left padding if direction is right-to-left of the input": "入力の方向が左から右の場合はRight Padding、右から左の場合はLeft Paddingとなります。",
    "Emitted when a keyboard input occurred.": "キーボード入力が発生したときに発行されます。",
    "Color of the input text": "Inputのテキストの色",
    "Font style of the input placeholder text": "InputのPlaceholderテキストのFont Style",
    "Returns the native `<input>` element used under the hood.": "要素の内部で使用されているネイティブの `<input>` 要素を返します。",
    "Bottom padding of the input": "InputのBottom Padding",
    "Emitted when the value has changed.": "値が変更されたときに発行されます。",
    "The type of control to display. The default type is text.": "表示するコントロールの種類を指定します。デフォルトのタイプはテキストです。",
    "Works with the min and max attributes to limit the increments at which a value can be set. Possible values are: `\"any\"` or a positive floating point number.": "min属性、max属性と連携して、値を設定する際の増分を制限することができます。設定可能な値は以下の通りです。any\"`または正の浮動小数点数。",
    "Color of the input placeholder text": "InputのPlaceholderテキストの色",
    "Sets focus on the native `input` in `ion-input`. Use this method instead of the global `input.focus()`.  Developers who wish to focus an input when a page enters should call `setFocus()` in the `ionViewDidEnter()` lifecycle method.": "`ion-input` のネイティブ `input` にフォーカスを設定します。グローバルな `input.focus()` の代わりに、このメソッドを使用します。 ページが入ったときにInputにフォーカスを当てたい開発者は、`ionViewDidEnter()` ライフサイクルメソッドの中で `setFocus()` を呼び出してください。",
    "Left padding if direction is left-to-right, and right padding if direction is right-to-left of the input": "入力の方向が左から右の場合はLeft Padding、右から左の場合はRight Paddingとなります。",
    "If `true`, the user cannot modify the value.": "`true`の場合、ユーザーは値を変更することができません。",
    "If `true`, the element will have its spelling and grammar checked.": "`true`の場合、その要素のスペルチェックと文法チェックが行われる。",
    "If `true`, the user must fill in a value before submitting a form.": "`true`の場合、ユーザーはフォームを送信する前に値を入力する必要があります。",
    "The initial size of the control. This value is in pixels unless the value of the type attribute is `\"text\"` or `\"password\"`, in which case it is an integer number of characters. This attribute applies only when the `type` attribute is set to `\"text\"`, `\"search\"`, `\"tel\"`, `\"url\"`, `\"email\"`, or `\"password\"`, otherwise it is ignored.": "コントロールの初期サイズ。ただし、type属性の値が `\"text\"` または `\"password\"` である場合は、整数値の文字数です。この属性は、`type`属性が `\"text\"`, `\"search\"`, `\"tel\"`, `\"url\"`, `\"email\"`, または `\"password\"` に設定されている場合にのみ適用され、それ以外の場合は無視されます。",
    "Top padding of the item divider": "アイテムディバイダーのTop Padding",
    "Bottom inner padding of the item divider": "アイテムディバイダーのBottom Inner Padding",
    "Top inner padding of the item divider": "アイテムディバイダーのTop Inner Padding",
    "End inner padding of the item divider": "アイテムディバイダーのEnd Inner Padding",
    "Background of the item divider": "アイテムディバイダーの背景",
    "Color of the item divider": "アイテムディバイダーの色",
    "Content is placed to the left of the divider text in LTR, and to the right in RTL.": "コンテンツは、LTRでは仕切り文字の左側に、RTLでは右側に配置されます。",
    "Bottom padding of the item divider": "アイテムディバイダーのBottom Padding",
    "Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item divider": "アイテムディバイダーの方向が左から右の場合はRight Padding、右から左の場合はLeft Padding",
    "When it's set to `true`, the item-divider will stay visible when it reaches the top of the viewport until the next `ion-item-divider` replaces it.  This feature relies in `position:sticky`: https://caniuse.com/#feat=css-sticky": "`true`に設定すると、アイテムディバイダーがビューポートの上部に到達しても、次の `ion-item-divider` がそれを置き換えるまで表示されたままになります。  この機能は `position:sticky` に依存しています: https://caniuse.com/#feat=css-sticky",
    "Start inner padding of the item divider": "アイテムディバイダーのStart Inner Padding",
    "Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item divider": "アイテムディバイダーの方向が左から右の場合はLeft Padding、右から左の場合はRight Paddingとなります。",
    "Content is placed to the right of the divider text in LTR, and to the left in RTL.": "コンテンツは、LTRでは仕切り文字の右側に、RTLでは左側に配置されます。",
    "Background of the item option": "アイテムオプションの背景",
    "Color of the item option": "アイテムオプションのカラー",
    "Should be used on an icon in an option that has no text.": "テキストを持たないオプションのアイコンに使用されるべきです。",
    "If `true`, the user cannot interact with the item option.": "`true`の場合、ユーザーはアイテムオプションと対話することができません。",
    "Content is placed to the right of the option text in LTR, and to the left in RTL.": "コンテンツは、LTRではオプションテキストの右側に、RTLでは左側に配置されます。",
    "If `true`, the option will expand to take up the available width and cover any other options.": "`true`の場合、オプションは利用可能な幅を占めるように展開し、他のオプションをカバーします。",
    "Content is placed below the option text.": "コンテンツは、オプションテキストの下に配置されます。",
    "Content is placed above the option text.": "オプションテキストの上にコンテンツが配置されます。",
    "Content is placed to the left of the option text in LTR, and to the right in RTL.": "コンテンツは、LTRではオプションテキストの左側に、RTLでは右側に配置されます。",
    "The side the option button should be on. Possible values: `\"start\"` and `\"end\"`. If you have multiple `ion-item-options`, a side must be provided for each.": "オプションボタンを配置する側を指定します。指定可能な値。start\"` と `\"end\"`.複数の `ion-item-options` がある場合は、それぞれにサイドを指定する必要があります。",
    "Emitted when the item has been fully swiped.": "アイテムが完全にスワイプされたときに発行されます。",
    "Open the sliding item.": "スライド式の項目を開く。",
    "Emitted when the sliding position changes.": "スライド位置が変化したときに発行されます。",
    "Get the amount the item is open in pixels.": "アイテムが開いている量をピクセル単位で取得します。",
    "Close the sliding item. Items can also be closed from the [List](./list).": "スライドしているアイテムを閉じる。アイテムは[リスト](./list)からも閉じることができます。",
    "Close all of the sliding items in the list. Items can also be closed from the [List](./list).": "リスト内のスライドアイテムをすべて閉じます。アイテムは、[リスト](./list)からも閉じることができます。",
    "Get the ratio of the open amount of the item compared to the width of the options. If the number returned is positive, then the options on the right side are open. If the number returned is negative, then the options on the left side are open. If the absolute value of the number is greater than 1, the item is open more than the width of the options.": "オプションの幅と比較した、アイテムのオープン量の比率を取得します。返された数値が正の場合、右側のオプションが開いていることになります。返された数値が負の場合、左側のオプションが開いています。数値の絶対値が1より大きい場合、その項目は選択肢の幅より多く開いていることになります。",
    "If `true`, the user cannot interact with the sliding item.": "`true`の場合、ユーザーはスライドアイテムを操作することができません。",
    "The icon to use when `detail` is set to `true`.": "`detail` が `true` に設定されているときに使用するアイコンです。",
    "If `true`, the user cannot interact with the item.": "`true`の場合、ユーザはそのアイテムと対話することができません。",
    "Background of the item": "アイテムの背景",
    "How the bottom border should be displayed on the item.": "アイテムに表示される下枠の表示方法。",
    "Background of the item when pressed. Note: setting this will interfere with the Material Design ripple.": "押されたときのアイテムの背景。注意：これを設定すると、Material Designの波紋に干渉します。",
    "The shape of the item. If \"round\" it will have increased border radius.": "アイテムの形状を指定します。円形」の場合、境界線の半径が大きくなります。",
    "If `true`, a button tag will be rendered and the item will be tappable.": "`true`の場合、ボタンタグがレンダリングされ、アイテムはタップ可能になる。",
    "The fill for the item. If `'solid'` the item will have a background. If `'outline'` the item will be transparent with a border. Only available in `md` mode.": "アイテムの塗りつぶし。もし `'solid'` ならば、アイテムは背景を持つようになる。もし `'outline'` ならば、アイテムは透明でボーダーを持つようになります。md`modeでのみ使用可能です。",
    "A callback used to format the counter text. By default the counter text is set to \"itemLength / maxLength\".": "カウンターのテキストをフォーマットするために使用されるコールバックです。デフォルトでは、カウンターのテキストは\"itemLength / maxLength\"に設定されています。",
    "If `true`, a character counter will display the ratio of characters used and the total character limit. Only applies when the `maxlength` property is set on the inner `ion-input` or `ion-textarea`.": "`true`の場合、文字カウンタが使用された文字の比率と総文字数制限を表示します。内側の `ion-input` または `ion-textarea` に `maxlength` プロパティが設定されている場合にのみ適用されます。",
    "Opacity of the item background when pressed": "押されたときのアイテム背景の不透明度",
    "If `true`, a detail arrow will appear on the item. Defaults to `false` unless the `mode` is `ios` and an `href` or `button` property is present.": "`true`の場合、アイテムに詳細矢印が表示されます。デフォルトは `false` で、`mode` が `ios` で `href` または `button` プロパティが存在する場合のみです。",
    "Width of the item inner border": "アイテム内枠の幅",
    "Top padding of the item": "アイテムのTop Padding",
    "Minimum height of the item": "アイテムの最小高さ",
    "Bottom padding of the item": "アイテムのBottom Padding",
    "Bottom padding of the item inner": "アイテム内側のBottom Padding",
    "Top padding of the item inner": "アイテム内側のTop Padding",
    "Content is placed under the item and displayed when no error is detected.": "項目の下にコンテンツを配置し、エラーが検出されない場合に表示されます。",
    "Content is placed under the item and displayed when an error is detected.": "項目の下にコンテンツが配置され、エラーが検出されたときに表示されます。",
    "The native HTML button, anchor or div element that wraps all child elements.": "すべての子要素をラップするネイティブHTMLのボタン、アンカー、またはdiv要素です。",
    "Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item inner": "方向が左から右の場合はRight Padding、方向がアイテムの内側の右から左の場合はLeft Paddingとなります。",
    "Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item": "方向が左から右の場合はLeft Padding、方向が右から左の場合はRight Paddingで項目を囲む",
    "Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item": "方向が左から右の場合はRight Padding、方向が右から左の場合はLeft Paddingで項目を囲む",
    "Transition of the item": "アイテムの変遷",
    "Box shadow of the item inner": "アイテム内側のボックスシャドウ",
    "Color of the item ripple effect": "アイテム波及効果の色",
    "Content is placed to the left of the item text in LTR, and to the right in RTL.": "コンテンツは、LTRではアイテムテキストの左側に、RTLでは右側に配置されます。",
    "The chevron icon for the item. Only applies when `detail=\"true\"`.": "アイテムのシェブロンアイコンを表示します。detail=\"true\"`のときのみ適用されます。",
    "Content is placed to the right of the item text in LTR, and to the left in RTL.": "コンテンツは、LTRではアイテムテキストの右側に、RTLでは左側に配置されます。",
    "Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item inner": "方向が左から右の場合はLeft Padding、方向が右から左の場合はRight Paddingがアイテム内側に入る",
    "The color of the highlight on the item when valid": "有効時のアイテム上のハイライトの色",
    "Opacity of the item detail icon": "アイテム詳細アイコンの不透明度",
    "Color of the item border": "アイテムの縁取りの色",
    "The height of the highlight on the item": "アイテムに表示されるハイライトの高さ",
    "Color of the item detail icon": "アイテム詳細アイコンの色",
    "Font size of the item detail icon": "アイテム詳細アイコンのFont Size",
    "Radius of the item border": "アイテムの境界線の半径",
    "Color of the item on hover": "ホバー時のアイテムの色",
    "Color of the item": "アイテムのカラー",
    "The color of the highlight on the item when focused": "フォーカスされたときのアイテムのハイライトの色",
    "Style of the item border": "アイテムの枠のスタイル",
    "Opacity of the item background when focused with the tab key": "タブキーでフォーカスしたときのアイテムの背景の不透明度",
    "Color of the item when pressed": "押したときのアイテムの色",
    "Opacity of the background of the item on hover": "ホバー時のアイテムの背景の不透明度",
    "The color of the highlight on the item when invalid": "無効時のアイテムのハイライトの色",
    "Color of the item when focused with the tab key": "タブキーでフォーカスしたときのアイテムの色",
    "Width of the item border": "アイテムの枠の幅",
    "Background of the item on hover": "ホバー時のアイテムの背景",
    "Background of the item when focused with the tab key": "タブキーでフォーカスしたときのアイテムの背景",
    "The position determines where and how the label behaves inside an item.": "位置は、ラベルがアイテム内のどこで、どのように動作するかを決定します。",
    "Color of the label. This property is only available when using `ion-label` inside of an `ion-item`.": "ラベルの色。このプロパティは `ion-label` を `ion-item` の内部で使用する場合にのみ利用可能です。",
    "How the bottom border should be displayed on the list header.": "リストヘッダーの下辺のボーダーをどのように表示するか。",
    "Style of the list header border": "リストヘッダーボーダーのスタイル",
    "Color of the list header border": "リストヘッダーボーダーの色",
    "Background of the list header": "リストヘッダーの背景",
    "Width of the inner list header border": "リストヘッダー内枠の幅",
    "Color of the list header text": "リストヘッダーテキストの色",
    "Width of the list header border": "リストヘッダー枠の幅",
    "If `true`, the list will have margin around it and rounded corners.": "`true`の場合、リストの周囲に余白ができ、角が丸くなる。",
    "If `ion-item-sliding` are used inside the list, this method closes any open sliding item.  Returns `true` if an actual `ion-item-sliding` is closed.": "リスト内で `ion-item-sliding` が使用されている場合、このメソッドは開いているスライドアイテムを閉じる。  実際に `ion-item-sliding` が閉じられた場合は `true` を返します。",
    "How the bottom border should be displayed on all items.": "すべてのアイテムで、下のボーダーをどのように表示させるか。",
    "Additional attributes to pass to the loader.": "ローダーに渡す追加属性。",
    "Animation to use when the loading indicator is dismissed.": "ローディングインジケータが解除されたときに使用するアニメーションです。",
    "Returns a promise that resolves when the loading did dismiss.": "ローディングが解除されたタイミングを解決するPromiseを返します。",
    "The name of the spinner to display.": "表示するスピナーの名前。",
    "Animation to use when the loading indicator is presented.": "ローディングインジケータが表示されたときに使用するアニメーションです。",
    "If `true`, a backdrop will be displayed behind the loading indicator.": "`true`の場合、ロードインジケータの後ろにバックドロップが表示されます。",
    "Emitted after the loading has dismissed.": "ローディングが解除された後に発行されます。",
    "Returns a promise that resolves when the loading will dismiss.": "ローディングが解除されるタイミングを解決するPromiseを返します。",
    "Emitted before the loading has presented.": "ローディングが提示される前に発行されます。",
    "Emitted after the loading has presented.": "ローディングが提示された後に発行されます。",
    "Emitted before the loading has dismissed.": "ローディングが解除される前に発行されます。",
    "Present the loading overlay after it has been created.": "作成後のローディングオーバーレイを提示します。",
    "Optional text content to display in the loading indicator.": "ロードインジケータに表示するテキストコンテンツは任意です。",
    "If `true`, the loading indicator will animate.": "`true`の場合、ロードインジケータをアニメーションで表示します。",
    "Number of milliseconds to wait before dismissing the loading indicator.": "ローディングインジケータを解除するまでの待ち時間（ミリ秒）。",
    "Dismiss the loading overlay after it has been presented.": "ローディングオーバーレイが提示された後、それを解除します。",
    "If `true`, the loading indicator will be dismissed when the backdrop is clicked.": "`true`の場合、バックドロップがクリックされたときにローディングインジケータが解除される。",
    "If `true`, the loading indicator will be translucent. Only applies when the mode is `\"ios\"` and the device supports [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).": "`true`の場合、ロードインジケータは半透明になります。modeが `\"ios\"` で、デバイスが [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility) をサポートしている場合にのみ適用されます。",
    "Color of the loading spinner": "ローディングスピナーの色",
    "Minimum height of the loading dialog": "ローディングダイアログの最小高さ",
    "Height of the loading dialog": "ローディングダイアログの高さ",
    "Maximum height of the loading dialog": "ローディングダイアログの最大の高さ",
    "Width of the loading dialog": "ローディングダイアログの幅",
    "Background of the loading dialog": "ローディングダイアログの背景",
    "Minimum width of the loading dialog": "ローディングダイアログの最小幅",
    "Maximum width of the loading dialog": "ローディングダイアログの最大幅",
    "Background of the menu button on hover": "ホバー時のメニューボタンの背景",
    "Opacity of the menu button background when focused with the tab key": "タブキーでフォーカスしたときのメニューボタンの背景の不透明度",
    "Background of the menu button": "メニューボタンの背景",
    "Border radius of the menu button": "メニューボタンのボーダー半径",
    "Background of the menu button when focused with the tab key": "タブキーでフォーカスしたときのメニューボタンの背景色",
    "Color of the menu button on hover": "ホバー時のメニューボタンの色",
    "If `true`, the user cannot interact with the menu button.": "`true`の場合、ユーザはメニューボタンを操作することができません。",
    "Color of the menu button when focused with the tab key": "タブキーでフォーカスしたときのメニューボタンの色",
    "The menu button icon (uses ion-icon).": "メニューボタンのアイコン（ion-iconを使用）です。",
    "Automatically hides the menu button when the corresponding menu is not active": "対応するメニューがアクティブでない場合、メニューボタンを自動的に非表示にします。",
    "Optional property that maps to a Menu's `menuId` prop. Can also be `start` or `end` for the menu side. This is used to find the correct menu to toggle": "メニューの `menuId` プロパティに対応するオプションのプロパティです。メニュー側には `start` または `end` を指定することもできます。これは、トグルするための正しいメニューを見つけるために使用されます。",
    "Color of the menu button": "メニューボタンの色",
    "Content is placed inside the toggle to act as the click target.": "トグルの内側にコンテンツを配置し、クリックターゲットとして機能させます。",
    "Optional property that maps to a Menu's `menuId` prop. Can also be `start` or `end` for the menu side. This is used to find the correct menu to toggle.  If this property is not used, `ion-menu-toggle` will toggle the first menu that is active.": "メニューの `menuId` プロパティに対応するオプションのプロパティです。メニュー側には `start` または `end` を指定することもできます。これは、トグルするための正しいメニューを見つけるために使用される。  このプロパティを使用しない場合、`ion-menu-toggle`は、最初にアクティブになったメニューをトグルします。",
    "Automatically hides the content when the corresponding menu is not active.  By default, it's `true`. Change it to `false` in order to keep `ion-menu-toggle` always visible regardless the state of the menu.": "対応するメニューがアクティブでない場合に、自動的にコンテンツを非表示にします。  デフォルトでは `true` になっています。メニューの状態に関係なく `ion-menu-toggle` を常に表示しておきたい場合は、`false` に変更します。",
    "An id for the menu.": "メニューのIDです。",
    "Background of the menu": "メニューの背景",
    "If `true`, swiping the menu is enabled.": "`true`の場合、スワイプによるメニュー操作が有効になる。",
    "Emitted when the menu is about to be closed.": "メニューが閉じられようとするときに発行されます。",
    "Height of the menu": "メニューの高さ",
    "Emitted when the menu is closed.": "メニューが閉じられたときに発行されます。",
    "The display type of the menu. Available options: `\"overlay\"`, `\"reveal\"`, `\"push\"`.": "メニューの表示形式を指定します。利用可能なオプション。overlay\"`, `\"reveal\"`, `\"push\"`.",
    "Emitted when the menu is about to be opened.": "メニューが開かれようとするときに発行されます。",
    "Emitted when the menu is open.": "メニューが開いているときに発行されます。",
    "The `id` of the main content. When using a router this is typically `ion-router-outlet`. When not using a router, this is typically your main view's `ion-content`. This is not the id of the `ion-content` inside of your `ion-menu`.": "メインコンテンツの `id` です。ルータを使用する場合は、通常 `ion-router-outlet` となります。ルータを使用しない場合は、通常、メインビューの `ion-content` となります。これは `ion-menu` 内の `ion-content` の ID ではありません。",
    "Closes the menu. If the menu is already closed or it can't be closed, it returns `false`.": "メニューを閉じる。メニューが既に閉じられていたり、閉じることができない場合は、`false`を返します。",
    "Which side of the view the menu should be placed.": "メニューがビューのどの側に配置されるべきか。",
    "Returns `true` is the menu is open.": "メニューが開いている場合は `true` を返します。",
    "Opens or closes the button. If the operation can't be completed successfully, it returns `false`.": "ボタンを開いたり閉じたりします。操作が正常に完了しない場合は `false` を返します。",
    "The edge threshold for dragging the menu open. If a drag/swipe happens over this value, the menu is not triggered.": "ドラッグでメニューを開く際のエッジのしきい値です。この値を超えてドラッグ/スワイプが行われた場合、メニューはトリガーされない。",
    "Opens the menu. If the menu is already open or it can't be opened, it returns `false`.": "メニューを開く。メニューが既に開いているか、開くことができない場合は、`false`を返します。",
    "Returns `true` is the menu is active.  A menu is active when it can be opened or closed, meaning it's enabled and it's not part of a `ion-split-pane`.": "メニューがアクティブであれば `true` を返します。  メニューがアクティブな状態とは、メニューを開いたり閉じたりできる状態、つまり有効な状態であり、`ion-split-pane`の一部でない状態であることを意味します。",
    "Toggles the menu. If the menu is already open, it will try to close, otherwise it will try to open it. If the operation can't be completed successfully, it returns `false`.": "メニューを切り替えます。メニューが既に開かれている場合は閉じようとし、そうでない場合は開こうとします。操作が正常に完了しない場合は、`false`を返します。",
    "If `true`, the menu is disabled.": "`true`の場合、メニューは無効化される。",
    "Width of the menu": "メニューの幅",
    "Minimum width of the menu": "メニューの最小幅",
    "The container for the menu content.": "メニューの内容を格納するコンテナです。",
    "Maximum height of the menu": "メニューの最大の高さ",
    "Maximum width of the menu": "メニューの最大幅",
    "Minimum height of the menu": "メニューの高さの最小値",
    "The backdrop that appears over the main content when the menu is open.": "メニューを開いているときに、メインコンテンツの上に表示される背景です。",
    "Additional attributes to pass to the modal.": "モーダルに渡す追加属性。",
    "Animation to use when the modal is dismissed.": "モーダルが解除されたときに使用するアニメーションです。",
    "If `true`, the modal can be swiped to dismiss. Only applies in iOS mode.": "`true`の場合、スワイプでモーダルを解除することができます。iOS modeでのみ適用されます。",
    "Returns the current breakpoint of a sheet style modal": "シートスタイルモーダルの現在のブレークポイントを返します。",
    "An ID corresponding to the trigger element that causes the modal to open when clicked.": "クリックされたときにモーダルを開かせるトリガー要素に対応するIDです。",
    "Animation to use when the modal is presented.": "モーダルが表示されたときに使用するアニメーション。",
    "If `true`, the modal will animate.": "`true`の場合、モーダルはアニメーションを行います。",
    "If `true`, a backdrop will be displayed behind the modal. This property controls whether or not the backdrop darkens the screen when the modal is presented. It does not control whether or not the backdrop is active or present in the DOM.": "`true`の場合、モーダルの後ろに背景が表示されます。このプロパティは、モーダルが表示されたときに背景が画面を暗くするかどうかを制御します。このプロパティは、背景がアクティブであるかどうか、または DOM に存在するかどうかを制御するものではありません。",
    "Dismiss the modal overlay after it has been presented.": "モーダルオーバーレイが表示された後、それを解除します。",
    "The horizontal line that displays at the top of a sheet modal. It is `true` by default when setting the `breakpoints` and `initialBreakpoint` properties.": "シートモーダルの上部に表示される水平線です。 `breakpoints`と`initialBreakpoint`プロパティを設定すると、デフォルトで`true`になります。",
    "A decimal value between 0 and 1 that indicates the initial point the modal will open at when creating a sheet modal. This value must also be listed in the `breakpoints` array.": "シートモーダル作成時にモーダルが開く初期点を示す 0 から 1 までの 10 進値。この値は `breakpoints` 配列にも記載されている必要があります。",
    "Determines whether or not a modal can dismiss when calling the `dismiss` method.  If the value is `true` or the value's function returns `true`, the modal will close when trying to dismiss. If the value is `false` or the value's function returns `false`, the modal will not close when trying to dismiss.": "モーダルが `dismiss` メソッドを呼び出したときに、終了できるかどうかを決定します。  値が `true` または値の関数が `true` を返す場合、モーダルは終了しようとするときに閉じます。値が `false` または値の関数が `false` を返す場合、モーダルは終了しようとしたときに閉じません。",
    "If `true`, the modal will open. If `false`, the modal will close. Use this if you need finer grained control over presentation, otherwise just use the modalController or the `trigger` property. Note: `isOpen` will not automatically be set back to `false` when the modal dismisses. You will need to do that in your code.": "`true`の場合、モーダルは開かれます。 `false`の場合、モーダルは閉じます。それ以外の場合は、modalController または `trigger` プロパティを使用してください。注意: `isOpen` は、モーダルが終了しても自動的に `false` に戻されません。あなたのコードでそれを行う必要があります。",
    "The breakpoints to use when creating a sheet modal. Each value in the array must be a decimal between 0 and 1 where 0 indicates the modal is fully closed and 1 indicates the modal is fully open. Values are relative to the height of the modal, not the height of the screen. One of the values in this array must be the value of the `initialBreakpoint` property. For example: [0, .25, .5, 1]": "シート モーダルを作成するときに使用するブレークポイントです。配列の各値は 0 から 1 の間の 10 進数でなければならず、0 はモーダルが完全に閉じていることを、1 はモーダルが完全に開いていることを示しています。値は、画面の高さではなく、モーダルの高さに対する相対値です。この配列の値の1つは、`initialBreakpoint` プロパティの値でなければなりません。例えば[0, .25, .5, 1]",
    "If `true`, the component passed into `ion-modal` will automatically be mounted when the modal is created. The component will remain mounted even when the modal is dismissed. However, the component will be destroyed when the modal is destroyed. This property is not reactive and should only be used when initially creating a modal.  Note: This feature only applies to inline modals in JavaScript frameworks such as Angular, React, and Vue.": "`true`の場合、モーダルの作成時に `ion-modal` に渡されたコンポーネントが自動的にマウントされます。このコンポーネントは、モーダルが終了してもマウントされたままです。しかし、モーダルが破棄されると、コンポーネントは破棄されます。このプロパティはリアクティブではないので、モーダルを最初に作成するときにのみ使用する必要があります。  注意：この機能は、Angular、React、Vue などの JavaScript フレームワークのインライン モーダルにのみ適用されます。",
    "The element that presented the modal. This is used for card presentation effects and for stacking multiple modals on top of each other. Only applies in iOS mode.": "モーダルを提示した要素です。カード提示効果や、複数のモーダルを重ねる場合に使用します。iOS modeでのみ適用されます。",
    "If `true`, the modal will be dismissed when the backdrop is clicked.": "`true`の場合、バックドロップがクリックされるとモーダルは解除されます。",
    "A decimal value between 0 and 1 that indicates the point after which the backdrop will begin to fade in when using a sheet modal. Prior to this point, the backdrop will be hidden and the content underneath the sheet can be interacted with. This value is exclusive meaning the backdrop will become active after the value specified.": "シートモーダル使用時に背景がフェードインし始めるポイントを示す0～1の10進数値です。それ以前は、背景は非表示で、シートの下のコンテンツは操作可能です。この値は排他的で、指定された値の後に背景がアクティブになることを意味します。",
    "The interaction behavior for the sheet modal when the handle is pressed.  Defaults to `\"none\"`, which  means the modal will not change size or position when the handle is pressed. Set to `\"cycle\"` to let the modal cycle between available breakpoints when pressed.  Handle behavior is unavailable when the `handle` property is set to `false` or when the `breakpoints` property is not set (using a fullscreen or card modal).": "ハンドルが押されたときのシートモーダルのインタラクション動作です。  デフォルトは `\"none\"` で、ハンドルが押されてもモーダルはサイズも位置も変わりません。cycle\"` に設定すると、押されたときにモーダルが利用可能なブレークポイント間を循環するようになります。  ハンドルの動作は、`handle` プロパティが `false` に設定されている場合、または `breakpoints` プロパティが設定されていない場合（フルスクリーンまたはカード モーダルを使用している場合）には、利用できません。",
    "Width of the modal": "モーダルの幅",
    "Background of the modal content": "モーダルコンテンツの背景",
    "Border radius of the modal content": "モーダルコンテンツのボーダー半径",
    "Emitted before the modal has dismissed.": "モーダルが解散する前に発行されます。",
    "Emitted before the modal has presented.": "モーダルが提示される前に発行されます。",
    "Minimum height of the modal": "モーダルの最小高さ",
    "Border color of the modal content": "モーダルコンテンツのボーダーカラー",
    "Emitted before the modal has presented. Shorthand for ionModalWillPresent.": "モーダルが提示される前に発行されます。ionModalWillPresent の略記です。",
    "Border width of the modal content": "モーダルコンテンツのボーダー幅",
    "Content is placed inside of the `.modal-content` element.": "コンテンツは `.modal-content` 要素の内側に配置されます。",
    "Emitted before the modal has dismissed. Shorthand for ionModalWillDismiss.": "モーダルが解散する前に発行されます。ionModalWillDismiss の略記です。",
    "Maximum height of the modal": "モーダルの最大の高さ",
    "Maximum width of the modal": "モーダルの最大幅",
    "Minimum width of the modal": "モーダルの最小幅",
    "Height of the modal": "モーダルの高さ",
    "Border style of the modal content": "モーダルコンテンツのボーダースタイル",
    "Emitted after the modal has dismissed.": "モーダルが終了した後に発行されます。",
    "Present the modal overlay after it has been created.": "モーダルオーバーレイを作成した後に提示します。",
    "Emitted after the modal breakpoint has changed.": "モーダルブレークポイントが変更された後に発行されます。",
    "Emitted after the modal has presented.": "モーダルが提示された後に発行されます。",
    "The `ion-backdrop` element.": "ion-backdrop`要素です。",
    "The wrapper element for the default slot.": "デフォルトslotのラッパー要素です。",
    "Returns a promise that resolves when the modal will dismiss.": "モーダルがいつ解散するかを解決するPromiseを返します。",
    "Emitted after the modal has dismissed. Shorthand for ionModalDidDismiss.": "モーダルが解散した後に発行されます。ionModalDidDismiss の略記です。",
    "Returns a promise that resolves when the modal did dismiss.": "モーダルが解除されたときに解決するPromiseを返します。",
    "The handle that is displayed at the top of the sheet modal when `handle=\"true\"`.": "handle=\"true\"`のときにシートモーダルの上部に表示されるハンドルです。",
    "Move a sheet style modal to a specific breakpoint. The breakpoint value must be a value defined in your `breakpoints` array.": "シートスタイルモーダルを特定のブレークポイントに移動します。ブレークポイントの値は、 `breakpoints` 配列で定義された値でなければなりません。",
    "Emitted after the modal has presented. Shorthand for ionModalDidPresent.": "モーダルが提示された後に発行されます。ionModalDidPresent の略記です。",
    "The transition animation when navigating to another page.": "別ページに移動する際の遷移アニメーション。",
    "Data you want to pass to the component as props. Only used if the `\"routerDirection\"` is `\"forward\"` or `\"root\"`.": "コンポーネントにpropsとして渡したいデータ。routerDirection\"` が `\"forward\"` または `\"root\"` である場合のみ使用します。",
    "Component to navigate to. Only used if the `routerDirection` is `\"forward\"` or `\"root\"`.": "ナビゲート先のコンポーネント。 `routerDirection`が `\"forward\"` または `\"root\"` である場合にのみ使用します。",
    "The transition direction when navigating to another page.": "別ページに移動する際の遷移方向です。",
    "Get the view at the specified index.": "指定されたインデックスにあるビューを取得します。",
    "Removes a component from the navigation stack at the specified index.": "指定されたインデックスにあるコンポーネントをナビゲーションスタックから削除します。",
    "Set the root for the current navigation stack to a component.": "現在のナビゲーションスタックのルートをコンポーネントに設定します。",
    "If the nav component should allow for swipe-to-go-back.": "ナビコンポーネントがスワイプで戻ることができるようにする場合。",
    "Get the previous view.": "前のビューを取得します。",
    "Root NavComponent to load": "ロードするルートNavComponent",
    "If `true`, the nav should animate the transition of components.": "`true`の場合、コンポーネントの遷移をアニメーションで表現します。",
    "Inserts an array of components into the navigation stack at the specified index. The last component in the array will become instantiated as a view, and animate in to become the active view.": "指定されたインデックスのナビゲーションスタックにコンポーネントの配列を挿入します。配列の最後のコンポーネントはビューとしてインスタンス化され、アニメーションしてアクティブビューになります。",
    "Pop to a specific index in the navigation stack.": "ナビゲーションスタック内の特定のインデックスにポップします。",
    "Get the active view.": "アクティブビューを取得します。",
    "Returns `true` if the current view can go back.": "現在のビューが戻ることができる場合は `true` を返します。",
    "Event fired when the nav has changed components": "ナビのコンポーネントが変更されたときに発生するイベント",
    "Pop a component off of the navigation stack. Navigates back from the current component.": "ナビゲーションスタックからコンポーネントをポップオフします。現在のコンポーネントからナビゲートして戻る。",
    "Any parameters for the root component": "ルートコンポーネントの任意のパラメータ",
    "Navigate back to the root of the stack, no matter how far back that is.": "スタックのルートまで戻ってナビゲートする、それがどんなに遠くても。",
    "Inserts a component into the navigation stack at the specified index. This is useful to add a component at any point in the navigation stack.": "指定されたインデックスのナビゲーションスタックにコンポーネントを挿入します。これは、ナビゲーションスタックの任意の位置にコンポーネントを追加するのに便利です。",
    "Push a new component onto the current navigation stack. Pass any additional information along as an object. This additional information is accessible through NavParams.": "新しいコンポーネントを現在のナビゲーションスタックにプッシュします。追加情報があれば、オブジェクトとして一緒に渡す。この追加情報には、NavParamsからアクセスできます。",
    "Set the views of the current navigation stack and navigate to the last view. By default animations are disabled, but they can be enabled by passing options to the navigation controller. Navigation parameters can also be passed to the individual pages in the array.": "現在のナビゲーションスタックのビューを設定し、最後のビューにナビゲートします。デフォルトではアニメーションは無効になっていますが、ナビゲーションコントローラーにオプションを渡すことで有効にすることができます。ナビゲーションパラメーターは、配列内の各ページに渡すこともできます。",
    "By default `ion-nav` animates transition between pages based in the mode (ios or material design). However, this property allows to create custom transition using `AnimationBuilder` functions.": "デフォルトでは、`ion-nav` はmode（ios または Material Design）に応じてページ間の遷移をアニメーション化します。しかし、このプロパティは `AnimationBuilder` 関数を使用して、独自の遷移を作成することができます。",
    "Event fired when the nav will change components": "ナビコンポーネントが変更されたときに発生するイベント",
    "Color of the note": "ノートの色",
    "If `true`, the picker will animate.": "`true`の場合、ピッカーはアニメーションを行います。",
    "Returns a promise that resolves when the picker did dismiss.": "ピッカーが解散したことを解決するPromiseを返します。",
    "Array of columns to be displayed in the picker.": "ピッカーに表示されるカラムの配列。",
    "Emitted before the picker has dismissed.": "ピッカーが解散する前に発行されます。",
    "Emitted before the picker has presented.": "ピッカーが提示される前に発行されます。",
    "Present the picker overlay after it has been created.": "ピッカー・オーバーレイを作成した後に提示します。",
    "Emitted after the picker has dismissed.": "ピッカーが解散した後に発行されます。",
    "Additional attributes to pass to the picker.": "ピッカーに渡す追加属性。",
    "Number of milliseconds to wait before dismissing the picker.": "ピッカーが終了するまでの待ち時間をミリ秒単位で指定します。",
    "Animation to use when the picker is dismissed.": "ピッカーが解除されたときに使用するアニメーションです。",
    "If `true`, a backdrop will be displayed behind the picker.": "`true`の場合、ピッカーの後ろに背景が表示されます。",
    "Get the column that matches the specified name.": "指定された名前に一致するカラムを取得します。",
    "Emitted after the picker has presented.": "ピッカーが提示された後に発行されます。",
    "Animation to use when the picker is presented.": "ピッカーが表示されたときに使用するアニメーション。",
    "Returns a promise that resolves when the picker will dismiss.": "ピッカーが解散するタイミングを解決するPromiseを返します。",
    "Array of buttons to be displayed at the top of the picker.": "ピッカーの上部に表示されるボタンの配列。",
    "Dismiss the picker overlay after it has been presented.": "ピッカー・オーバーレイが表示された後、それを解除します。",
    "If `true`, the picker will be dismissed when the backdrop is clicked.": "`true`の場合、バックドロップがクリックされるとピッカーが解除される。",
    "Minimum width of the picker": "ピッカーの最小幅",
    "Border width of the picker": "ピッカーのボーダー幅",
    "Width of the picker": "ピッカーの幅",
    "Maximum width of the picker": "ピッカーの最大幅",
    "Minimum height of the picker": "ピッカーの最小の高さ",
    "Maximum height of the picker": "ピッカーの最大の高さ",
    "Height of the picker": "ピッカーの高さ",
    "Background of the picker in rgb format": "ピッカーの背景（rgb形式）",
    "Border style of the picker": "ピッカーのボーダースタイル",
    "Background of the picker": "ピッカーの背景",
    "Border color of the picker": "ピッカーのボーダーカラー",
    "Border radius of the picker": "ピッカーのボーダー半径",
    "Animation to use when the popover is presented.": "ポップオーバーが表示されたときに使用するアニメーションです。",
    "Describes how to calculate the popover width. If `'cover'`, the popover width will match the width of the trigger. If `'auto'`, the popover width will be determined by the content in the popover.": "ポップオーバーの幅を計算する方法を説明します。cover'` の場合、ポップオーバーの幅はトリガーの幅と一致します。auto'` の場合、ポップオーバーの幅はポップオーバー内のコンテンツによって決定されます。",
    "Animation to use when the popover is dismissed.": "ポップオーバーが解除されたときに使用するアニメーションです。",
    "If `true`, the popover will be automatically dismissed when the content has been clicked.": "`true`の場合、コンテンツがクリックされると、ポップオーバーは自動的に解除される。",
    "If `true`, the popover will be dismissed when the backdrop is clicked.": "`true`の場合、バックドロップがクリックされたときにポップオーバーが解除される。",
    "If `true`, the popover will display an arrow that points at the `reference` when running in `ios` mode. Does not apply in `md` mode.": "`true`の場合、`ios` modeで動作しているとき、ポップオーバーは `reference` を指し示す矢印を表示します。 `md` modeでは適用されない。",
    "If `true`, the popover will animate.": "`true`の場合、ポップオーバーはアニメーションを行います。",
    "The data to pass to the popover component. You only need to use this if you are not using a JavaScript framework. Otherwise, you can just set the props directly on your component.": "ポップオーバー・コンポーネントに渡すデータです。これを使う必要があるのは、JavaScriptフレームワークを使用していない場合だけです。そうでなければ、コンポーネントに直接propsを設定すればよいのです。",
    "If `true`, the popover will open. If `false`, the popover will close. Use this if you need finer grained control over presentation, otherwise just use the popoverController or the `trigger` property. Note: `isOpen` will not automatically be set back to `false` when the popover dismisses. You will need to do that in your code.": "`true`の場合、ポップオーバーは開く。もし `false` ならば、ポップオーバーは閉じます。より細かく表示を制御する必要がある場合はこれを使用し、そうでない場合は popoverController または `trigger` プロパティを使用します。注意: ポップオーバーが閉じると `isOpen` は自動的に `false` に戻されません。あなたのコードでそれを行う必要があります。",
    "If `true`, a backdrop will be displayed behind the popover. This property controls whether or not the backdrop darkens the screen when the popover is presented. It does not control whether or not the backdrop is active or present in the DOM.": "`true`の場合、ポップオーバーの後ろに背景が表示されます。このプロパティは、ポップオーバーが表示されたときに背景が画面を暗くするかどうかを制御します。このプロパティは、背景がアクティブであるかどうか、またはDOMに存在するかどうかを制御しません。",
    "Describes how to align the popover content with the `reference` point. Defaults to `'center'` for `ios` mode, and `'start'` for `md` mode.": "ポップオーバーのコンテンツを `reference` ポイントに揃える方法を記述します。デフォルトは `ios` modeでは `'center'` で、`md` modeでは `'start'` です。",
    "The event to pass to the popover animation.": "ポップオーバー・アニメーションに渡すイベントです。",
    "Additional attributes to pass to the popover.": "ポップオーバーに渡す追加属性。",
    "Describes what to position the popover relative to. If `'trigger'`, the popover will be positioned relative to the trigger button. If passing in an event, this is determined via event.target. If `'event'`, the popover will be positioned relative to the x/y coordinates of the trigger action. If passing in an event, this is determined via event.clientX and event.clientY.": "ポップオーバーを何に対して相対的に配置するかを記述します。もし `'trigger'` ならば、ポップオーバーはトリガーボタンに相対して配置されます。イベントを渡すと、event.targetで決定されます。もし `'event'` ならば、ポップオーバーはトリガーアクションのx/y座標に相対的に配置されます。イベントを渡す場合、これはevent.clientXとevent.clientYを介して決定されます。",
    "If `true`, the popover will be translucent. Only applies when the mode is `\"ios\"` and the device supports [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).": "`true`の場合、ポップオーバーは半透明になります。modeが `\"ios\"` で、デバイスが [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility) をサポートしている場合にのみ適用されます。",
    "Describes which side of the `reference` point to position the popover on. The `'start'` and `'end'` values are RTL-aware, and the `'left'` and `'right'` values are not.": "ポップオーバーを `reference` ポイントのどちら側に配置するかを記述します。start'` と `end'` は RTL を意識した値で、`left'` と `right'` はそうでない値です。",
    "The component to display inside of the popover. You only need to use this if you are not using a JavaScript framework. Otherwise, you can just slot your component inside of `ion-popover`.": "ポップオーバーの内側に表示するコンポーネントです。これを使う必要があるのは、JavaScriptフレームワークを使用していない場合だけです。そうでない場合は、`ion-popover`の中にコンポーネントを入れるだけでいいです。",
    "If `true`, the component passed into `ion-popover` will automatically be mounted when the popover is created. The component will remain mounted even when the popover is dismissed. However, the component will be destroyed when the popover is destroyed. This property is not reactive and should only be used when initially creating a popover.  Note: This feature only applies to inline popovers in JavaScript frameworks such as Angular, React, and Vue.": "`true`の場合、ポップオーバーの作成時に `ion-popover` に渡されたコンポーネントが自動的にマウントされます。このコンポーネントは、ポップオーバーが削除されてもマウントされたままです。ただし、ポップオーバーが破棄されると、コンポーネントは破棄されます。このプロパティはリアクティブではないので、ポップオーバーを最初に作成するときにのみ使用する必要があります。  注：この機能は、Angular、React、VueなどのJavaScriptフレームワークのインラインポップオーバーにのみ適用されます。",
    "Maximum width of the popover": "ポップオーバーの最大幅",
    "Box shadow of the popover": "ポップオーバーのボックスシャドウ",
    "Emitted before the popover has presented. Shorthand for ionPopoverWillPresent.": "ポップオーバーが提示される前に発行されます。ionPopoverWillPresentの略記です。",
    "Height of the popover": "ポップオーバーの高さ",
    "Minimum width of the popover": "ポップオーバーの最小幅",
    "The amount to move the popover by on the x-axis": "ポップオーバーをX軸方向に移動させる量",
    "Maximum height of the popover": "ポップオーバーの最大の高さ",
    "Emitted before the popover has dismissed. Shorthand for ionPopoverWillDismiss.": "ポップオーバーが解散する前に発行されます。ionPopoverWillDismissの略記です。",
    "Minimum height of the popover": "ポップオーバーの高さの最小値",
    "Background of the popover": "ポップオーバーの背景",
    "The arrow that points to the reference element. Only applies on `ios` mode.": "参照要素を指し示す矢印。`ios` mode時のみ適用される。",
    "Width of the popover": "ポップオーバーの幅",
    "Emitted before the popover has dismissed.": "ポップオーバーが解除される前に発行されます。",
    "Emitted after the popover has dismissed.": "ポップオーバーが解除された後に発行されます。",
    "The amount to move the popover by on the y-axis": "ポップオーバーをY軸方向に移動させる量を指定します。",
    "Emitted before the popover has presented.": "ポップオーバーが表示される前に発行されます。",
    "Emitted after the popover has presented.": "ポップオーバーが表示された後に発行されます。",
    "Content is placed inside of the `.popover-content` element.": "コンテンツは `.popover-content` 要素の内部に配置される。",
    "Emitted after the popover has presented. Shorthand for ionPopoverWillDismiss.": "ポップオーバーが提示された後に発行されます。ionPopoverWillDismissの略記です。",
    "Returns a promise that resolves when the popover will dismiss.": "ポップオーバーが解除されるタイミングを解決するPromiseを返します。",
    "Dismiss the popover overlay after it has been presented.": "ポップオーバーオーバーレイが提示された後、それを解除します。",
    "Present the popover overlay after it has been created. Developers can pass a mouse, touch, or pointer event to position the popover relative to where that event was dispatched.": "ポップオーバーが作成された後に、ポップオーバーを表示します。開発者は、マウス、タッチ、またはポインタイベントを渡すことで、そのイベントがディスパッチされた場所と相対的にポップオーバーを配置することができます。",
    "Describes what kind of interaction with the trigger that should cause the popover to open. Does not apply when the `trigger` property is `undefined`. If `'click'`, the popover will be presented when the trigger is left clicked. If `'hover'`, the popover will be presented when a pointer hovers over the trigger. If `'context-menu'`, the popover will be presented when the trigger is right clicked on desktop and long pressed on mobile. This will also prevent your device's normal context menu from appearing.": "どのようなトリガーとの相互作用でポップオーバーを開くべきかを記述します。trigger`プロパティが `undefined` の場合は適用されません。click'` の場合、トリガーが左クリックされたときにポップオーバーが表示されます。hover'` の場合、ポインタがトリガーの上に乗ったときにポップオーバーが表示されます。コンテキストメニュー'`の場合、デスクトップでは右クリック、モバイルでは長押しでポップオーバーが表示されます。これは、デバイスの通常のコンテキストメニューが表示されるのを防ぐことにもなります。",
    "Returns a promise that resolves when the popover did dismiss.": "ポップオーバーが解除されたタイミングを解決するPromiseを返します。",
    "Emitted after the popover has dismissed. Shorthand for ionPopoverDidDismiss.": "ポップオーバーが解散した後に発行されます。ionPopoverDidDismissの略記です。",
    "An ID corresponding to the trigger element that causes the popover to open. Use the `trigger-action` property to customize the interaction that results in the popover opening.": "ポップオーバーを開かせるトリガー要素に対応するIDです。trigger-action`プロパティを使用して、ポップオーバーを開くためのインタラクションをカスタマイズすることができます。",
    "Background of the progress bar representing the current value": "現在値を表すプログレスバーの背景",
    "Background of the progress track, or the buffer bar if `buffer` is set": "プログレストラックの背景、または `buffer` が設定されている場合はバッファバー。",
    "If true, reverse the progress bar direction.": "true の場合、プログレスバーの方向を反転させます。",
    "The track bar behind the progress bar. If the `buffer` property is set and `type` is `\"determinate\"` the track will be the width of the `buffer` value.": "プログレスバーの後ろにあるトラックバーです。buffer`プロパティが設定され、`type`が `\"determinate\"` である場合、トラックは `buffer` 値の幅となる。",
    "The animated circles that appear while buffering. This only shows when `buffer` is set and `type` is `\"determinate\"`.": "バッファリング中に表示されるアニメーションの円です。これは `buffer` が設定され、`type` が `\"determinate\"` のときのみ表示される。",
    "The progress bar that shows the current value when `type` is `\"determinate\"` and slides back and forth when `type` is `\"indeterminate\"`.": "type`が`\"determinate\"`のときは現在値を表示し、`type`が`\"indeterminate\"`のときは前後にスライドするプログレスバーです。",
    "The state of the progress bar, based on if the time the process takes is known or not. Default options are: `\"determinate\"` (no animation), `\"indeterminate\"` (animate from left to right).": "処理にかかる時間が既知か否かに応じて、プログレスバーの状態を指定します。デフォルトのオプションは以下の通り。determinate\"` (アニメーションなし), `\"indeterminate\"` (左から右へアニメーションする).",
    "The value determines how much of the active bar should display when the `type` is `\"determinate\"`. The value should be between [0, 1].": "この値は、`type`が`\"determinate\"`である場合に、アクティブバーをどれだけ表示するかを決定するものです。値は [0, 1] の間であるべきです。",
    "DEPRECATED, use `--background` instead": "DEPRECATED、代わりに `--background` を使用します。",
    "If the buffer and value are smaller than 1, the buffer circles will show. The buffer should be between [0, 1].": "バッファと値が1より小さい場合、バッファの円が表示されます。バッファは[0, 1]の間である必要があります。",
    "the value of the radio group.": "無線グループの値です。",
    "If `true`, the radios can be deselected.": "`true`の場合、ラジオを非選択にすることができる。",
    "The checkmark or dot used to indicate the checked state.": "チェックされた状態を示すために使用されるチェックマークまたはドットです。",
    "Color of the checked radio": "チェックしたラジオの色",
    "The container for the radio mark.": "ラジオマークの入れ物です。",
    "Emitted when the radio button has focus.": "ラジオボタンにフォーカスが当たったときに発行されます。",
    "Border radius of the radio": "ラジオのボーダー半径",
    "Color of the radio": "ラジオのカラー",
    "Border radius of the inner checked radio": "内側のチェック付きラジオのボーダー半径",
    "Emitted when the radio button loses focus.": "ラジオボタンのフォーカスが外れたときに発行されます。",
    "the value of the radio.": "ラジオの値です。",
    "If `true`, the user cannot interact with the radio.": "`true`の場合、ユーザはラジオと対話することができません。",
    "Background of the range bar": "レンジバーの背景",
    "Minimum integer value of the range.": "範囲の最小の整数値。",
    "Emitted when the range has focus.": "レンジのフォーカスが合ったときに発行されます。",
    "Maximum integer value of the range.": "範囲の最大整数値。",
    "Show two knobs.": "2つのノブを表示します。",
    "If `true`, the user cannot interact with the range.": "`true`の場合、ユーザは範囲と対話することができません。",
    "Emitted when the range loses focus.": "レンジの焦点が合わなくなったときに発行されます。",
    "If `true`, tick marks are displayed based on the step value. Only applies when `snaps` is `true`.": "`true`の場合、ステップの値に基づいてティックマークを表示します。snaps`が `true` の場合のみ適用される。",
    "How long, in milliseconds, to wait to trigger the `ionChange` event after each change in the range value. This also impacts form bindings such as `ngModel` or `v-model`.": "範囲の値が変化するたびに `ionChange` イベントを起動するまでの待ち時間をミリ秒単位で指定します。これは `ngModel` や `v-model` のようなフォームバインディングにも影響します。",
    "the value of the range.": "範囲の値です。",
    "If `true`, the knob snaps to tick marks evenly spaced based on the step property value.": "`true`の場合、ノブはステッププロパティの値に基づいて等間隔に配置されたティックマークにスナップします。",
    "Emitted when the user starts moving the range knob, whether through mouse drag, touch gesture, or keyboard interaction.": "マウスドラッグ、タッチジェスチャー、キーボード操作など、ユーザーがレンジノブの移動を開始したときに発行されます。",
    "Emitted when the user finishes moving the range knob, whether through mouse drag, touch gesture, or keyboard interaction.": "マウスドラッグ、タッチジェスチャー、キーボード操作など、ユーザーが範囲ノブの移動を終了したときに発行されます。",
    "The start position of the range active bar. This feature is only available with a single knob (dualKnobs=\"false\"). Valid values are greater than or equal to the min value and less than or equal to the max value.": "レンジアクティブバーの開始位置です。この機能は、ノブが1つの場合のみ有効です（dualKnobs=\"false\"）。有効な値は、min値以上、max値以下です。",
    "Specifies the value granularity.": "値の粒度を指定します。",
    "If `true`, a pin with integer value is shown when the knob is pressed.": "`true`の場合、ノブを押したときに整数値のピンが表示されます。",
    "A callback used to format the pin text. By default the pin text is set to `Math.round(value)`.": "ピンのテキストをフォーマットするために使用されるコールバックです。デフォルトでは、ピンのテキストは `Math.round(value)` に設定されます。",
    "An inactive tick mark.": "非アクティブなティックマークです。",
    "Box shadow of the range knob": "レンジノブのボックスシャドウ",
    "The active part of the bar.": "バーのアクティブな部分です。",
    "The handle that is used to drag the range.": "範囲をドラッグする際に使用するハンドル。",
    "Color of the range pin (only available in MD mode)": "レンジピンの色（MD mode時のみ有効）",
    "The counter that appears above a knob.": "ノブの上に表示されるカウンターです。",
    "Size of the range knob": "レンジツマミの大きさ",
    "Background of the range knob": "レンジノブの背景",
    "Height of the range": "レンジの高さ",
    "The inactive part of the bar.": "バーの非アクティブな部分。",
    "Border radius of the range knob": "レンジツマミのボーダー半径",
    "Background of the range pin (only available in MD mode)": "レンジピンの背景（MD mode時のみ有効）",
    "Content is placed to the left of the range slider in LTR, and to the right in RTL.": "コンテンツは、LTRでは範囲スライダーの左側に、RTLでは右側に配置されます。",
    "Content is placed to the right of the range slider in LTR, and to the left in RTL.": "コンテンツは、LTRでは範囲スライダーの右側に、RTLでは左側に配置されます。",
    "Background of the active range bar": "アクティブレンジバーの背景",
    "Border radius of the range bar": "レンジバーのボーダー半径",
    "Height of the range bar": "レンジバーの高さ",
    "An active tick mark.": "アクティブなティックマークです。",
    "An animated SVG spinner that shows when refreshing begins": "リフレッシュ開始を示すアニメーションSVGスピナー",
    "A static icon or a spinner to display when you begin to pull down. A spinner name can be provided to gradually show tick marks when pulling down on iOS devices.": "プルダウン開始時に表示する静的なアイコンまたはスピナーです。スピナー名を指定することで、iOSデバイスでプルダウン時に徐々にティックマークが表示されるようにすることができます。",
    "The text you want to display when you begin to pull down. `pullingText` can accept either plaintext or HTML as a string. To display characters normally reserved for HTML, they must be escaped. For example `<Ionic>` would become `&lt;Ionic&gt;`  For more information: [Security Documentation](https://ionicframework.com/docs/faq/security)": "プルダウン開始時に表示したいテキストです。 `pullingText` は、文字列としてプレーンテキストまたはHTMLのいずれかを受け取ることができます。通常HTML用に予約されている文字を表示するには、エスケープする必要があります。例えば、`<Ionic>`は `&lt;Ionic&gt;` となります。[セキュリティ・ドキュメンテーション](https://ionicframework.com/docs/faq/security)",
    "The text you want to display when performing a refresh. `refreshingText` can accept either plaintext or HTML as a string. To display characters normally reserved for HTML, they must be escaped. For example `<Ionic>` would become `&lt;Ionic&gt;`  For more information: [Security Documentation](https://ionicframework.com/docs/faq/security)": "リフレッシュを行う際に表示したいテキストです。 `refreshingText` には、文字列としてプレーンテキストまたはHTMLのいずれかを指定することができます。通常HTML用に予約されている文字を表示するには、エスケープする必要があります。例えば、`<Ionic>`は `&lt;Ionic&gt;` になります。[セキュリティ・ドキュメンテーション](https://ionicframework.com/docs/faq/security)",
    "Emitted while the user is pulling down the content and exposing the refresher.": "ユーザーがコンテンツを引き下げ、リフレッシャーを露出している間に発行されます。",
    "If `true`, the refresher will be hidden.": "`true`の場合、リフレッシャーは非表示となる。",
    "Time it takes to close the refresher. Does not apply when the refresher content uses a spinner, enabling the native refresher.": "リフレッシャーを閉じるのにかかる時間。リフレッシュコンテンツがスピナーを使用している場合は適用されず、ネイティブリフレッシャーが有効になります。",
    "Changes the refresher's state from `refreshing` to `cancelling`.": "リフレッシュの状態を `refreshing` から `cancelling` に変更します。",
    "Emitted when the user begins to start pulling down.": "ユーザーが引き下げを開始するときに発行されます。",
    "Call `complete()` when your async operation has completed. For example, the `refreshing` state is while the app is performing an asynchronous operation, such as receiving more data from an AJAX request. Once the data has been received, you then call this method to signify that the refreshing has completed and to close the refresher. This method also changes the refresher's state from `refreshing` to `completing`.": "非同期操作が完了したら `complete()` を呼び出します。例えば、`refreshing`状態は、アプリがAJAXリクエストからより多くのデータを受信するなど、非同期操作を実行している間です。データを受信したら、このメソッドを呼び出して、リフレッシュが完了したことを示し、リフレッシュャを閉じます。このメソッドは、リフレッシャーの状態を `refreshing` から `completing` に変更します。",
    "The minimum distance the user must pull down until the refresher will go into the `refreshing` state. Does not apply when the refresher content uses a spinner, enabling the native refresher.": "リフレッシャーが `refreshing` 状態になるまでに、ユーザが引き下げるべき最小距離。リフレッシャーコンテンツがスピナーを使用する場合は適用されず、ネイティブリフレッシャーが有効になる。",
    "The maximum distance of the pull until the refresher will automatically go into the `refreshing` state. Defaults to the result of `pullMin + 60`. Does not apply when  the refresher content uses a spinner, enabling the native refresher.": "リフレッシャーが自動的に `refreshing` 状態になるまでの、引っ張りの最大距離。デフォルトは `pullMin + 60` の結果です。リフレッシュコンテンツがスピナーを使用している場合は適用されず、ネイティブリフレッシャーが有効になります。",
    "A number representing how far down the user has pulled. The number `0` represents the user hasn't pulled down at all. The number `1`, and anything greater than `1`, represents that the user has pulled far enough down that when they let go then the refresh will happen. If they let go and the number is less than `1`, then the refresh will not happen, and the content will return to it's original position.": "ユーザーがどれだけ下に引っ張られたかを表す数値です。数値 `0` は、ユーザーが全く下に引いていないことを表します。数値 `1` および `1` より大きい数値は、ユーザーが手を離したときに更新が行われるほど十分に下に引っ張られたことを表します。もしユーザーが手を離し、数値が `1` より小さい場合は、更新は行われず、コンテンツは元の位置に戻ります。",
    "Emitted when the user lets go of the content and has pulled down further than the `pullMin` or pulls the content down and exceeds the pullMax. Updates the refresher state to `refreshing`. The `complete()` method should be called when the async operation has completed.": "ユーザーがコンテンツから手を離し、`pullMin`を越えて下に引いたとき、またはコンテンツを下に引き、pullMaxを越えたときに発行されます。リフレッシャーの状態を `refreshing` に更新します。非同期処理が完了したら `complete()` メソッドを呼び出す必要があります。",
    "Time it takes the refresher to snap back to the `refreshing` state. Does not apply when the refresher content uses a spinner, enabling the native refresher.": "リフレッシャーが `refreshing` 状態にスナップバックするのにかかる時間。リフレッシュコンテンツがスピナーを使用している場合は適用されず、ネイティブリフレッシュが有効になります。",
    "How much to multiply the pull speed by. To slow the pull animation down, pass a number less than `1`. To speed up the pull, pass a number greater than `1`. The default value is `1` which is equal to the speed of the cursor. If a negative value is passed in, the factor will be `1` instead.  For example: If the value passed is `1.2` and the content is dragged by `10` pixels, instead of `10` pixels the content will be pulled by `12` pixels (an increase of 20 percent). If the value passed is `0.8`, the dragged amount will be `8` pixels, less than the amount the cursor has moved.  Does not apply when the refresher content uses a spinner, enabling the native refresher.": "引きの速さを何倍にするか。引きのアニメーションを遅くするには、`1`より小さい数値を渡します。引っ張る速度を速くするには、`1`より大きい数値を渡します。デフォルト値は `1` で、カーソルの速度と同じです。もし負の値が渡された場合、代わりに `1` が係数となります。  例えば例えば、渡された値が `1.2` で、コンテンツが `10` ピクセルでドラッグされた場合、`10` ピクセルではなく、`12` ピクセルでドラッグされます（20% の増加です）。渡された値が `0.8` の場合、ドラッグされた量はカーソルの移動量より少ない `8` ピクセルとなります。  リフレッシュコンテンツがスピナーを使用している場合は適用されず、ネイティブリフレッシャーが有効になります。",
    "Event that needs to be listened to in order to complete the reorder action. Once the event has been emitted, the `complete()` method then needs to be called in order to finalize the reorder action.": "再注文アクションを完了させるためにリッスンする必要があるイベント。イベントが発生したら、再注文のアクションを確定するために `complete()` メソッドを呼び出す必要があります。",
    "Completes the reorder operation. Must be called by the `ionItemReorder` event.  If a list of items is passed, the list will be reordered and returned in the proper order.  If no parameters are passed or if `true` is passed in, the reorder will complete and the item will remain in the position it was dragged to. If `false` is passed, the reorder will complete and the item will bounce back to its original position.": "再注文操作を完了します。ionItemReorder` イベントで呼び出す必要がある。  アイテムのリストが渡された場合、リストは適切な順序に並び替えられ、返される。  パラメータが渡されない場合、または `true` が渡された場合、並べ替えは完了し、アイテムはドラッグされた位置に留まります。 `false`が渡された場合、並び替えは完了し、アイテムは元の位置に跳ね返されます。",
    "If `true`, the reorder will be hidden.": "`true`の場合、リオーダーは非表示になる。",
    "The icon of the reorder handle (uses ion-icon).": "リオーダーハンドルのアイコンです（ion-iconを使用）。",
    "Adds the ripple effect to the parent element.": "親要素に波及効果を付加します。",
    "Sets the type of ripple-effect:  - `bounded`: the ripple effect expands from the user's click position - `unbounded`: the ripple effect expands from the center of the button and overflows the container.  NOTE: Surfaces for bounded ripples should have the overflow property set to hidden, while surfaces for unbounded ripples should have it set to visible.": "リップル効果の種類を設定します： - `bounded`：リップル効果はユーザーのクリック位置から拡大します - `unbounded`：リップル効果はボタンの中心から拡大し、コンテナを溢れさせます。  注：境界のある波紋のサーフェスは、overflowプロパティをhiddenに設定し、境界のない波紋のサーフェスは、visibleに設定する必要があります。",
    "Internal event that fires when any value of this rule is added/removed from the DOM, or any of his public properties changes.  `ion-router` captures this event in order to update his internal registry of router rules.": "このルールの値がDOMから追加/削除されたり、パブリックプロパティが変更されたりしたときに発生する内部イベントです。  ion-router`は、ルータルールの内部レジストリを更新するために、このイベントを捕捉します。",
    "A redirect route, redirects \"from\" a URL \"to\" another URL. This property is that \"from\" URL. It needs to be an exact match of the navigated URL in order to apply.  The path specified in this value is always an absolute path, even if the initial `/` slash is not specified.": "リダイレクトルートは、あるURLから別のURLへリダイレクトさせるルートです。このプロパティは、その \"from\" URLです。このプロパティを適用するには、ナビゲートされるURLと完全に一致する必要があります。  この値で指定されるパスは、最初の `/` スラッシュが指定されていない場合でも、常に絶対パスとなります。",
    "A redirect route, redirects \"from\" a URL \"to\" another URL. This property is that \"to\" URL. When the defined `ion-route-redirect` rule matches, the router will redirect to the path specified in this property.  The value of this property is always an absolute path inside the scope of routes defined in `ion-router` it can't be used with another router or to perform a redirection to a different domain.  Note that this is a virtual redirect, it will not cause a real browser refresh, again, it's a redirect inside the context of ion-router.  When this property is not specified or his value is `undefined` the whole redirect route is noop, even if the \"from\" value matches.": "リダイレクトルートは、あるURLから別のURLへリダイレクトさせるルートです。このプロパティは、その \"to \"URLです。定義された `ion-route-redirect` ルールにマッチした場合、ルータはこのプロパティで指定されたパスにリダイレクトします。  このプロパティの値は、常に `ion-router` で定義されたルートの範囲内の絶対パスであり、別のルータや別のドメインへのリダイレクトを実行するために使用することはできません。  これは仮想的なリダイレクトであり、実際のブラウザのリフレッシュを引き起こすことはないことに注意してください。  このプロパティが指定されていない場合、または値が `undefined` の場合、たとえ \"from\" の値が一致しても、リダイレクトルート全体は noop となります。",
    "A key value `{ 'red': true, 'blue': 'white'}` containing props that should be passed to the defined component when rendered.": "キーとなる値 `{ 'red': true, 'blue':'white'}` には、レンダリング時に定義されたコンポーネントに渡すべき小道具が含まれる。",
    "Used internally by `ion-router` to know when this route did change.": "このルートがいつ変更されたかを知るために `ion-router` が内部で使用します。",
    "Relative path that needs to match in order for this route to apply.  Accepts paths similar to expressjs so that you can define parameters in the url /foo/:bar where bar would be available in incoming props.": "このルートを適用するために一致させる必要がある相対パスです。  expressjs と同様にパスを受け付けるので、/foo/:bar のような url でパラメータを定義し、受信する props で bar を利用することができます。",
    "A navigation hook that is fired when the route tries to enter. Returning `true` allows the navigation to proceed, while returning `false` causes it to be cancelled. Returning a `NavigationHookOptions` object causes the router to redirect to the path specified.": "ルーターがアクセスしようとしたときに発生するナビゲーションフックです。 `true`を返すとナビゲーションを進めることができ、`false`を返すとナビゲーションをキャンセルすることができます。NavigationHookOptions`オブジェクトを返すと、ルーターは指定されたパスにリダイレクトするようになります。",
    "A navigation hook that is fired when the route tries to leave. Returning `true` allows the navigation to proceed, while returning `false` causes it to be cancelled. Returning a `NavigationHookOptions` object causes the router to redirect to the path specified.": "ルートが離脱しようとしたときに発生するナビゲーションフックです。 `true`を返すとナビゲーションを進めることができ、`false`を返すとナビゲーションをキャンセルすることができます。NavigationHookOptions`オブジェクトを返すと、ルーターは指定されたパスにリダイレクトするようになります。",
    "Name of the component to load/select in the navigation outlet (`ion-tabs`, `ion-nav`) when the route matches.  The value of this property is not always the tagname of the component to load, in `ion-tabs` it actually refers to the name of the `ion-tab` to select.": "ルートが一致したときに、ナビゲーションアウトレット（`ion-tabs`、`ion-nav`）にロード/選択するコンポーネントの名前。  このプロパティの値は、常にロードするコンポーネントのタグ名とは限らず、`ion-tabs`では、実際には選択する `ion-tab` の名前を指します。",
    "Text color of the router link": "ルーターリンクの文字色",
    "Background of the router link": "ルーターリンクの背景",
    "If `true`, the router-outlet should animate the transition of components.": "`true`の場合、ルータ・アウトレットはコンポーネントの遷移をアニメーションで表現する必要があります。",
    "This property allows to create custom transition using AnimationBuilder functions.": "このプロパティは、AnimationBuilder の機能を使用して、カスタムトランジションを作成することができます。",
    "Emitted when the route had changed": "ルートが変更されたときに発行されます。",
    "Navigate to the specified path.": "指定されたパスに移動します。",
    "Event emitted when the route is about to change": "ルートが変更されようとするときに発行されます。イベント",
    "The root path to use when matching URLs. By default, this is set to \"/\", but you can specify an alternate prefix for all URL paths.": "URLのマッチング時に使用するルートパスです。デフォルトでは\"/\"に設定されていますが、すべてのURLパスに対して代替プレフィックスを指定することができます。",
    "Go back to previous page in the window.history.": "window.historyで前ページに戻る。",
    "The router can work in two \"modes\": - With hash: `/index.html#/path/to/page` - Without hash: `/path/to/page`  Using one or another might depend in the requirements of your app and/or where it's deployed.  Usually \"hash-less\" navigation works better for SEO and it's more user friendly too, but it might requires additional server-side configuration in order to properly work.  On the other side hash-navigation is much easier to deploy, it even works over the file protocol.  By default, this property is `true`, change to `false` to allow hash-less URLs.": "ルーターは2つの \"モード \"で動作します。- ハッシュを使用します。ハッシュあり： `/index.html#/path/to/page` - ハッシュなし。ハッシュなし： `/path/to/page` - ハッシュあり： `/index.html#/path/to/page` どちらを使うかは、アプリの要件や配置される場所によって異なるかもしれません。  通常、\"ハッシュなし\"ナビゲーションはSEOに有利で、よりユーザーフレンドリーですが、適切に動作させるためにサーバー側の追加設定が必要な場合があります。  一方、ハッシュ・ナビゲーションは、ファイル・プロトコルで動作するため、導入が非常に簡単です。  デフォルトでは、このプロパティは `true` です。ハッシュのない URL を許可するには `false` に変更します。",
    "If `true`, enable searchbar animation.": "`true`の場合、検索バーのアニメーションを有効にします。",
    "Set the the cancel button text. Only applies to `ios` mode.": "キャンセルボタンのテキストを設定します。 `ios` modeのみ適用されます。",
    "Set the input's autocomplete property.": "Inputのオートコンプリートプロパティを設定します。",
    "Emitted when the cancel button is clicked.": "キャンセルボタンがクリックされたときに発行されます。",
    "Set the input's autocorrect property.": "Inputのオートコレクトプロパティを設定します。",
    "Set the clear icon. Defaults to `close-circle` for `ios` and `close-sharp` for `md`.": "クリアアイコンを設定します。デフォルトは `ios` の場合は `close-circle` 、`md` の場合は `close-sharp` です。",
    "The icon to use as the search icon. Defaults to `search-outline` in `ios` mode and `search-sharp` in `md` mode.": "検索アイコンとして使用するアイコンです。デフォルトは `ios` modeでは `search-outline` 、`md` modeでは `search-sharp` です。",
    "If `true`, enable spellcheck on the input.": "`true`の場合、入力値のスペルチェックを有効にします。",
    "the value of the searchbar.": "検索バーの値。",
    "Sets the behavior for the cancel button. Defaults to `\"never\"`. Setting to `\"focus\"` shows the cancel button on focus. Setting to `\"never\"` hides the cancel button. Setting to `\"always\"` shows the cancel button regardless of focus state.": "キャンセルボタンに関する動作を設定します。デフォルトは `\"never\"` です。focus\"` に設定すると、フォーカスが当たったときにキャンセルボタンを表示します。never\"`に設定すると、キャンセルボタンを非表示にします。always\"` に設定すると、フォーカスの状態に関係なくキャンセルボタンを表示します。",
    "Set the type of the input.": "Inputの種類を設定します。",
    "Set the input's placeholder. `placeholder` can accept either plaintext or HTML as a string. To display characters normally reserved for HTML, they must be escaped. For example `<Ionic>` would become `&lt;Ionic&gt;`  For more information: [Security Documentation](https://ionicframework.com/docs/faq/security)": "Inputのplaceholderを設定します。 `placeholder` には、文字列としてプレーンテキストまたはHTMLのいずれかを指定することができます。通常HTML用に予約されている文字を表示するには、エスケープする必要があります。例えば `<Ionic>` は `&lt;Ionic&gt;` になります。詳細は [セキュリティ・ドキュメンテーション](https://ionicframework.com/docs/faq/security) をご覧ください。",
    "Set the cancel button icon. Only applies to `md` mode. Defaults to `arrow-back-sharp`.": "キャンセルボタンのアイコンを設定します。 `md` modeのみに適用されます。デフォルトは `arrow-back-sharp` です。",
    "Sets focus on the specified `ion-searchbar`. Use this method instead of the global `input.focus()`.": "指定された `ion-searchbar` にフォーカスを合わせる。グローバルな `input.focus()` の代わりに、このメソッドを使用します。",
    "Sets the behavior for the clear button. Defaults to `\"focus\"`. Setting to `\"focus\"` shows the clear button on focus if the input is not empty. Setting to `\"never\"` hides the clear button. Setting to `\"always\"` shows the clear button regardless of focus state, but only if the input is not empty.": "クリアボタンに関する動作を設定します。デフォルトは `\"focus\"` です。`\"focus\"`に設定すると、Inputが空でない場合、フォーカス時にクリアボタンを表示します。`\"never\"`に設定すると、クリアボタンを非表示にします。`\"always\"`に設定すると、フォーカスの状態に関係なくクリアボタンを表示するが、Inputが空でない場合にのみクリアボタンを表示します。",
    "Color of the searchbar clear button": "検索バーのクリアボタンの色",
    "Border radius of the searchbar input": "検索バーのInputのボーダー半径",
    "Color of the searchbar cancel button": "検索バーのキャンセルボタンの色",
    "Background of the searchbar input": "検索バーのInputの背景",
    "Box shadow of the searchbar input": "検索バーのInputのボックスシャドウ",
    "Opacity of the searchbar placeholder": "検索バーのPlaceholderの不透明度",
    "Font style of the searchbar placeholder": "検索バーのPlaceholderのFont Style",
    "Color of the searchbar text": "検索バーのテキストの色",
    "Color of the searchbar placeholder": "検索バーのPlaceholderの色",
    "Color of the searchbar icon": "検索バーのアイコンの色",
    "Font weight of the searchbar placeholder": "検索バーのPlaceholderのFont Weight",
    "Emitted when the clear input button is clicked.": "Clear Inputボタンがクリックされたときに発行されます。",
    "Color of the segment button border": "セグメントボタンのボーダーの色",
    "Color of the checked segment button": "チェックしたセグメントボタンの色",
    "Radius of the segment button border": "セグメントボタンのボーダーの半径",
    "The value of the segment button.": "セグメントボタンの値です。",
    "Set the layout of the text and icon in the segment.": "セグメント内のテキストとアイコンのレイアウトを設定します。",
    "Width of the segment button border": "セグメントボタンの枠の幅",
    "Background of the segment button": "セグメントボタンの背景",
    "Color of the segment button": "セグメントボタンの色",
    "Background of the checked segment button": "チェックしたセグメントボタンの背景",
    "Color of the segment button on hover": "ホバー時のセグメントボタンの色",
    "Style of the segment button border": "セグメントボタンのボーダーのスタイル",
    "Color of the segment button when focused with the tab key": "タブキーでフォーカスしたときのセグメントボタンの色",
    "Opacity of the segment button background on hover": "ホバー時のセグメントボタンの背景の不透明度",
    "Background of the segment button when focused with the tab key": "タブキーでフォーカスされたときのセグメントボタンの背景",
    "Background of the segment button on hover": "セグメントボタンがホバーされたときの背景",
    "Opacity of the segment button background when focused with the tab key": "タブキーでフォーカスしたときのセグメントボタンの背景の不透明度",
    "If `true`, the user cannot interact with the segment button.": "`true`の場合、ユーザーはセグメントボタンを操作することができません。",
    "Bottom margin of the segment button": "セグメントボタンのBottom Margin",
    "Left margin if direction is left-to-right, and right margin if direction is right-to-left of the segment button": "セグメントボタンの方向が左から右の場合はLeft Margin、右から左の場合はRight Margin",
    "Top margin of the segment button": "セグメントボタンのTop Margin",
    "Bottom padding of the segment button": "セグメントボタンのBottom Padding",
    "Transition of the segment button": "セグメントボタンの遷移",
    "Top padding of the segment button": "セグメントボタンのTop Padding",
    "Right padding if direction is left-to-right, and left padding if direction is right-to-left of the segment button": "セグメントボタンの向きが左から右の場合はRight Padding、右から左の場合はLeft Paddingとなります。",
    "Left padding if direction is left-to-right, and right padding if direction is right-to-left of the segment button": "セグメントボタンの向きが左から右の場合はLeft Padding、右から左の場合はRight Paddingとなります。",
    "Transform of the indicator for the checked segment button": "チェックされたセグメントボタンのインジケータのトランスフォーム",
    "Height of the indicator for the checked segment button": "チェックしたセグメントボタンのインジケータの高さ",
    "Right margin if direction is left-to-right, and left margin if direction is right-to-left of the segment button": "セグメントボタンの方向が左から右の場合はRight Margin、右から左の場合はLeft Margin",
    "Transition of the indicator for the checked segment button": "チェックしたセグメントボタンのインジケーターの遷移",
    "Color of the indicator for the checked segment button": "チェックしたセグメントボタンのインジケーターの色",
    "Box shadow on the indicator for the checked segment button": "チェックしたセグメントボタンのインジケーターにボックスシャドウを付ける",
    "The background element for the indicator displayed on the checked segment button.": "チェックしたセグメントボタンに表示されるインジケータの背景要素です。",
    "The indicator displayed on the checked segment button.": "チェックしたセグメントボタンに表示されるインジケーターです。",
    "If `true`, users will be able to swipe between segment buttons to activate them.": "`true`の場合、ユーザーはセグメントボタンの間をスワイプしてアクティブにすることができます。",
    "If `true`, the user cannot interact with the segment.": "`true`の場合、ユーザーはセグメントと対話することができません。",
    "the value of the segment.": "セグメントの価値",
    "Emitted when the value property has changed and any dragging pointer has been released from `ion-segment`.": "valueプロパティが変更され、`ion-segment`からドラッグポインタが解放されたときに発行されます。",
    "If `true`, the segment buttons will overflow and the user can swipe to see them. In addition, this will disable the gesture to drag the indicator between the buttons in order to swipe to see hidden buttons.": "`true`の場合、セグメントボタンはオーバーフローし、ユーザーはスワイプしてそれらを見ることができます。また、スワイプして隠れたボタンを見るために、ボタンの間でインジケータをドラッグするジェスチャーを無効にします。",
    "If `true`, navigating to an `ion-segment-button` with the keyboard will focus and select the element. If `false`, keyboard navigation will only focus the `ion-segment-button` element.": "`true`の場合、キーボードで `ion-segment-button` に移動すると、その要素にフォーカスが当たって選択される。 `false` の場合、キーボードによるナビゲーションは `ion-segment-button` 要素にのみフォーカスを当てます。",
    "The text value of the option.": "オプションのテキスト値です。",
    "If `true`, the user cannot interact with the select option. This property does not apply when `interface=\"action-sheet\"` as `ion-action-sheet` does not allow for disabled buttons.": "`true`の場合、ユーザは選択オプションと対話することができません。このプロパティは、`interface=\"action-sheet\"`の場合には適用されない。なぜなら、`ion-action-sheet`はボタンを無効にすることができないからです。",
    "the value of the select.": "セレクトの値です。",
    "The text to display on the ok button.": "okボタンに表示するテキストです。",
    "Bottom padding of the select": "セレクトのBottom Padding",
    "The text to display when the select is empty.": "セレクトが空のときに表示するテキストです。",
    "The text to display instead of the selected option's value.": "選択されたオプションの値の代わりに表示するテキストです。",
    "Emitted when the select loses focus.": "セレクトのフォーカスが外れたときに発行されます。",
    "The interface the select should use: `action-sheet`, `popover` or `alert`.": "selectが使用するインターフェース。action-sheet`, `popover` または `alert`.",
    "Emitted when the selection is cancelled.": "選択がキャンセルされたときに発行されます。",
    "The text to display on the cancel button.": "キャンセルボタンに表示するテキストです。",
    "Open the select overlay. The overlay is either an alert, action sheet, or popover, depending on the `interface` property on the `ion-select`.": "セレクトオーバーレイを開きます。オーバーレイは `ion-select` の `interface` プロパティによって、アラート、アクションシート、ポップオーバーのいずれかになります。",
    "Emitted when the overlay is dismissed.": "オーバーレイが解除されたときに発行されます。",
    "Emitted when the select has focus.": "セレクトにフォーカスが当たったときに発行されます。",
    "Any additional options that the `alert`, `action-sheet` or `popover` interface can take. See the [ion-alert docs](./alert), the [ion-action-sheet docs](./action-sheet) and the [ion-popover docs](./popover) for the create options for each interface.  Note: `interfaceOptions` will not override `inputs` or `buttons` with the `alert` interface.": "alert`、`action-sheet`、`popover` インターフェースが取ることができる追加オプション。各インターフェイスの作成オプションについては、 [ion-alert docs](./alert), [ion-action-sheet docs](./action-sheet), [ion-popover docs](./popover) を参照してください。  注意: `interfaceOptions` は `alert` インターフェースで `inputs` や `buttons` をオーバーライドしません。",
    "If `true`, the user cannot interact with the select.": "`true`の場合、ユーザはセレクトと対話することができません。",
    "If `true`, the select can accept multiple values.": "`true`の場合、selectは複数の値を受け入れることができる。",
    "A property name or function used to compare object values": "オブジェクトの値を比較するために使用されるプロパティ名または関数。",
    "Right padding if direction is left-to-right, and left padding if direction is right-to-left of the select": "セレクトの方向が左から右の場合はRight Padding、右から左の場合はLeft Paddingを行う",
    "The select icon container.": "セレクトアイコンのコンテナです。",
    "The text displayed in the select when there is no value.": "値がないときにセレクトに表示されるテキスト。",
    "Top padding of the select": "セレクトのTop Padding",
    "Opacity of the select placeholder text": "選択Placeholderテキストの不透明度",
    "Color of the select placeholder text": "セレクトPlaceholderテキストの色",
    "The displayed value of the select.": "セレクトの表示値です。",
    "Left padding if direction is left-to-right, and right padding if direction is right-to-left of the select": "セレクトの方向が左から右の場合はLeft Padding、右から左の場合はRight Padding",
    "If `true`, the skeleton text will animate.": "`true`の場合、スケルトンテキストをアニメーションさせる。",
    "Background of the skeleton text": "スケルトンテキストの背景",
    "Border radius of the skeleton text": "スケルトンテキストのボーダー半径",
    "Background of the skeleton text in rgb format": "スケルトンテキストの背景（rgb形式",
    "Options to pass to the swiper instance. See https://swiperjs.com/swiper-api for valid options": "swiperインスタンスに渡すオプションです。有効なオプションについては、https://swiperjs.com/swiper-api を参照してください。",
    "Get whether or not the current slide is the first slide.": "現在のスライドが最初のスライドであるか否かを取得します。",
    "If `true`, show the scrollbar.": "`true`の場合、スクロールバーを表示します。",
    "Get the index of the previous slide.": "前のスライドのインデックスを取得します。",
    "Start auto play.": "オートプレイを開始します。",
    "Transition to the specified slide.": "指定されたスライドに遷移します。",
    "If `true`, show the pagination.": "もし `true` ならば、ページネーションを表示します。",
    "Transition to the previous slide.": "前のスライドに遷移します。",
    "Update the underlying slider implementation. Call this if you've added or removed child slides.": "基礎となるスライダーの実装を更新します。子スライダーを追加または削除した場合に呼び出します。",
    "Lock or unlock the ability to slide to the previous slide.": "前のスライドにスライドする機能をロックまたはアンロックします。",
    "Get whether or not the current slide is the last slide.": "現在のスライドが最後のスライドであるか否かを取得します。",
    "Lock or unlock the ability to slide to the next slide.": "次のスライドにスライドする機能をロックまたはアンロックします。",
    "Lock or unlock the ability to slide to the next or previous slide.": "次のスライドや前のスライドにスライドする機能をロックまたはアンロックします。",
    "Get the index of the active slide.": "アクティブなスライドのインデックスを取得します。",
    "Get the total number of slides.": "スライドの総枚数を取得します。",
    "Get the Swiper instance. Use this to access the full Swiper API. See https://swiperjs.com/swiper-api for all API options.": "Swiperのインスタンスを取得します。これを使用して、SwiperのフルAPIにアクセスします。すべてのAPIオプションについては、https://swiperjs.com/swiper-api を参照してください。",
    "Stop auto play.": "自動再生を停止します。",
    "Force swiper to update its height (when autoHeight is enabled) for the duration equal to 'speed' parameter.": "speed」パラメータに等しい時間、スイーパーの高さを強制的に更新する（autoHeightが有効な場合）。",
    "Transition to the next slide.": "次のスライドに遷移します。",
    "Emitted when the user first touches the slider.": "ユーザーがスライダーに初めて触れたときに発行されます。",
    "Background of the active pagination bullet": "アクティブなページネーションバレットの背景",
    "Background of the active pagination progress-bar": "アクティブなページネーションの進行バーの背景",
    "Background of the pagination bullets": "ページネーションの箇条書きの背景",
    "Background of the pagination progress-bar": "ページネーションの進行バーの背景",
    "Emitted when the slide transition has ended.": "スライド遷移が終了したときに発行されます。",
    "Emitted after Swiper initialization": "Swiperの初期化後に発行されます。",
    "Emitted when the slider is at its initial position.": "スライダーが初期位置にあるときに発行されます。",
    "Emitted when the user releases the touch.": "ユーザーがタッチを離したときに発行されます。",
    "Emitted before the active slide has changed.": "アクティブスライドが変更される前に発行されます。",
    "Emitted when the user taps/clicks on the slide's container.": "ユーザがスライドのコンテナをタップ/クリックしたときに発行されます。",
    "Emitted when the slide transition has started.": "スライド遷移が開始されたときに発行されます。",
    "Emitted when the next slide has ended.": "次のスライドが終了したときに発行されます。",
    "Emitted when the next slide has started.": "次のスライドが開始されたときに発行されます。",
    "Emitted when the slider is actively being moved.": "スライダーがアクティブに移動しているときに発行されます。",
    "Emitted when the user double taps on the slide's container.": "ユーザがスライドのコンテナをダブルタップしたときに発生します。",
    "Emitted when the previous slide has started.": "前のスライドが開始されたときに発行されます。",
    "Emitted after the active slide has changed.": "アクティブスライドが変更された後に発行されます。",
    "Emitted when the previous slide has ended.": "前のスライドが終了したときに発行されます。",
    "Background of the pagination scroll-bar": "ページネーション用スクロールバーの背景",
    "Emitted when the slider is at the last slide.": "スライダーが最後のスライドになったときに発行されます。",
    "Background of the active pagination scroll-bar": "アクティブなページネーションのスクロールバーの背景",
    "The name of the SVG spinner to use. If a name is not provided, the platform's default spinner will be used.": "使用するSVGスピナーの名前。名前が提供されない場合、プラットフォームのデフォルトのスピナーが使用されます。",
    "Duration of the spinner animation in milliseconds. The default varies based on the spinner.": "スピナーアニメーションの持続時間（ミリ秒）。デフォルトはスピナーによって異なる。",
    "Color of the spinner": "スピナーの色",
    "If `true`, the spinner's animation will be paused.": "`true`の場合、スピナーのアニメーションは一時停止されます。",
    "Expression to be called when the split-pane visibility has changed": "分割画面の表示が変わったときに呼び出される式",
    "Border between panes": "ペイン間のボーダー",
    "Minimum width of the side pane. Does not apply when split pane is collapsed.": "サイドペインの最小幅を指定します。分割ペインが折りたたまれた状態では適用されません。",
    "If `true`, the split pane will be hidden.": "`true`の場合、分割ペインが非表示になります。",
    "Maximum width of the side pane. Does not apply when split pane is collapsed.": "サイドペインの最大幅を指定します。分割ペインが折りたたまれた状態では適用されません。",
    "Width of the side pane. Does not apply when split pane is collapsed.": "サイドペインの幅を指定します。分割ペインが折りたたまれた状態では適用されません。",
    "When the split-pane should be shown. Can be a CSS media query expression, or a shortcut expression. Can also be a boolean expression.": "分割パネルを表示するタイミング。CSSメディアクエリ式、またはショートカット式を指定します。また、ブーリアン表現も可能です。",
    "The selected tab component": "選択されたタブコンポーネント",
    "Border of the tab bar": "タブバーの境界線",
    "Color of the tab bar": "タブバーの色",
    "Background of the tab bar": "タブバーの背景",
    "If `true`, the tab bar will be translucent. Only applies when the mode is `\"ios\"` and the device supports [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).": "`true`の場合、タブバーを半透明にします。modeが `\"ios\"` で、デバイスが [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility) をサポートしている場合にのみ適用されます。",
    "Color of the selected tab button": "選択されたタブボタンの色",
    "Color of the tab button": "タブボタンの色",
    "Bottom padding of the tab button": "タブボタンのBottom Padding",
    "If `true`, the user cannot interact with the tab button.": "`true`の場合、ユーザはタブボタンを操作することができません。",
    "Set the layout of the text and icon in the tab bar. It defaults to `'icon-top'`.": "タブバーのテキストとアイコンのレイアウトを設定します。デフォルトは `'icon-top'` です。",
    "Top padding of the tab button": "タブボタンのTop Padding",
    "Background of the tab button": "タブボタンの背景",
    "Left padding if direction is left-to-right, and right padding if direction is right-to-left of the tab button": "タブボタンの向きが左から右の場合はLeft Padding、右から左の場合はRight Paddingとなります。",
    "Opacity of the tab button background when focused with the tab key": "タブキーでフォーカスしたときのタブボタンの背景の不透明度",
    "A tab id must be provided for each `ion-tab`. It's used internally to reference the selected tab or by the router to switch between them.": "各 `ion-tab` にはタブ ID を指定する必要があります。これは、選択されたタブを参照したり、ルータがタブを切り替えたりするために内部的に使用される。",
    "Color of the tab button when focused with the tab key": "タブキーでフォーカスしたときのタブボタンの色",
    "Background of the tab button when focused with the tab key": "タブキーでフォーカスされたときのタブボタンの背景",
    "The native HTML anchor element that wraps all child elements.": "すべての子要素を包むネイティブHTMLのアンカー要素です。",
    "Right padding if direction is left-to-right, and left padding if direction is right-to-left of the tab button": "タブボタンの向きが左から右の場合はRight Padding、右から左の場合はLeft Paddingとなります。",
    "The component to display inside of the tab.": "タブの内側に表示するコンポーネントです。",
    "Set the active component for the tab": "タブのアクティブコンポーネントを設定します。",
    "Get the currently selected tab.": "現在選択されているタブを取得します。",
    "Content is placed at the bottom of the screen.": "コンテンツは画面下部に配置されます。",
    "Select a tab by the value of its `tab` property or an element reference.": "タブの `tab` プロパティの値、または要素の参照によってタブを選択します。",
    "Content is placed at the top of the screen.": "コンテンツは画面上部に配置されます。",
    "Emitted when the navigation has finished transitioning to a new component.": "ナビゲーションが新しいコンポーネントに遷移し終わったときに発行されます。",
    "Get a specific tab by the value of its `tab` property or an element reference.": "タブの `tab` プロパティの値、または要素の参照によって特定のタブを取得します。",
    "Emitted when the navigation is about to transition to a new component.": "ナビゲーションが新しいコンポーネントに移行しようとするときに発行されます。",
    "Bottom padding of the textarea": "テキストエリアのBottom Padding",
    "Color of the text": "本文の色",
    "The visible width of the text control, in average character widths. If it is specified, it must be a positive integer.": "テキストコントロールの可視幅を、平均文字幅で指定します。指定する場合は、正の整数である必要があります。",
    "Background of the textarea": "textareaの背景",
    "Border radius of the textarea": "テキストエリアの境界半径",
    "Emitted when the input value has changed.": "入力値が変化したときに発行されます。",
    "Indicates how the control wraps text.": "コントロールがテキストをどのように折り返すかを示します。",
    "If `true`, the user cannot interact with the textarea.": "`true`の場合、ユーザはテキストエリアと対話することができません。",
    "Sets focus on the native `textarea` in `ion-textarea`. Use this method instead of the global `textarea.focus()`.": "ion-textarea` のネイティブ `textarea` にフォーカスを設定します。グローバルな `textarea.focus()` の代わりに、このメソッドを使用します。",
    "Returns the native `<textarea>` element used under the hood.": "要素の内部で使用されるネイティブの `<textarea>` 要素を返します。",
    "Right padding if direction is left-to-right, and left padding if direction is right-to-left of the textarea": "テキストエリアの方向が左から右の場合はRight Padding、右から左の場合はLeft Paddingを使用します。",
    "If `true`, the textarea container will grow and shrink based on the contents of the textarea.": "`true`の場合、textareaコンテナはtextareaの内容に応じて拡大・縮小します。",
    "The number of visible text lines for the control.": "コントロールの可視テキスト行数。",
    "The value of the textarea.": "textareaの値です。",
    "Instructional text that shows before the input has a value.": "入力が値を持つ前に表示される指示文。",
    "Color of the placeholder text": "Placeholderテキストの色",
    "Style of the placeholder text": "Placeholderテキストのスタイル",
    "Opacity of the placeholder text": "Placeholderテキストの不透明度",
    "Weight of the placeholder text": "Placeholderテキストの重さ",
    "Top padding of the textarea": "textareaのTop Padding",
    "Left padding if direction is left-to-right, and right padding if direction is right-to-left of the textarea": "textareaの方向が左から右の場合はLeft Padding、右から左の場合はRight Padding。",
    "Size of the thumbnail": "サムネイルの大きさ",
    "Border radius of the thumbnail": "サムネイルのボーダー半径",
    "The size of the toolbar title.": "ツールバーのタイトルの大きさを指定します。",
    "Text color of the title": "タイトルの文字色",
    "An array of buttons for the toast.": "トースト用のボタンがずらり。",
    "The position of the toast on the screen.": "画面上のトーストの位置です。",
    "Message to be shown in the toast.": "乾杯の際に表示するメッセージ",
    "Animation to use when the toast is presented.": "乾杯の音頭をとるときに使うアニメーションです。",
    "Animation to use when the toast is dismissed.": "トーストの解散時に使用するアニメーションです。",
    "Header to be shown in the toast.": "トーストに表示されるヘッダー。",
    "If `true`, the toast will animate.": "`true`の場合、トーストはアニメーションします。",
    "Returns a promise that resolves when the toast did dismiss.": "トーストが解散したことを解決するPromiseを返します。",
    "Returns a promise that resolves when the toast will dismiss.": "トーストが解散するタイミングを解決するPromiseを返します。",
    "Additional attributes to pass to the toast.": "トーストに渡す追加の属性。",
    "The name of the icon to display, or the path to a valid SVG file. See `ion-icon`. https://ionic.io/ionicons": "表示するアイコンの名前、または有効なSVGファイルへのパスを指定します。ion-icon`を参照。https://ionic.io/ionicons",
    "Defines how the message and buttons are laid out in the toast. 'baseline': The message and the buttons will appear on the same line. Message text may wrap within the message container. 'stacked': The buttons containers and message will stack on top of each other. Use this if you have long text in your buttons.": "トーストのメッセージやボタンの配置を定義します。'baseline'を指定します。メッセージとボタンは同じ行に表示されます。メッセージテキストはメッセージコンテナ内で折り返すことができます。'stacked':ボタンコンテナとメッセージが重なるように表示されます。ボタンに長いテキストがある場合に使用します。",
    "How many milliseconds to wait before hiding the toast. By default, it will show until `dismiss()` is called.": "トーストを隠すまでに何ミリ秒待つかを指定します。デフォルトでは、`dismiss()`が呼ばれるまで表示されます。",
    "If `true`, the toast will be translucent. Only applies when the mode is `\"ios\"` and the device supports [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).": "`true`の場合、トーストは半透明になります。modeが `\"ios\"` で、デバイスが [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility) をサポートしている場合にのみ適用されます。",
    "Dismiss the toast overlay after it has been presented.": "トーストのオーバーレイが提示された後、それを解除します。",
    "Maximum width of the toast": "トーストの最大幅",
    "Color of the button text": "ボタンテキストの色",
    "Any button element that is displayed inside of the toast.": "トーストの内側に表示される任意のボタン要素。",
    "Maximum height of the toast": "トーストの最大の高さ",
    "Width of the toast": "トーストの幅",
    "Color of the toast text": "トーストの文字色",
    "Position from the left if direction is left-to-right, and from the right if direction is right-to-left": "方向が左から右の場合は左から、方向が右から左の場合は右から位置すること",
    "Height of the toast": "トーストの高さ",
    "Minimum width of the toast": "トーストの最小幅",
    "The element that wraps all child elements.": "すべての子要素を包む要素。",
    "White space of the toast message": "乾杯メッセージのホワイトスペース",
    "Minimum height of the toast": "トーストの最小の高さ",
    "Box shadow of the toast": "乾杯の箱影",
    "Position from the right if direction is left-to-right, and from the left if direction is right-to-left": "方向が左から右の場合は右から、方向が右から左の場合は左から位置すること",
    "Border color of the toast": "トーストのボーダーカラー",
    "Border width of the toast": "トーストのボーダー幅",
    "Background of the toast": "乾杯の背景",
    "Border style of the toast": "トーストのボーダースタイル",
    "Emitted before the toast has presented.": "トーストが提示される前に発行されます。",
    "Emitted after the toast has dismissed.": "トーストが解散した後に発行されます。",
    "The body text of the toast.": "乾杯の音頭の本文です。",
    "Present the toast overlay after it has been created.": "トーストのオーバーレイを作成した後に提示します。",
    "Border radius of the toast": "トーストのボーダー半径",
    "The icon that appears next to the toast content.": "トーストの内容の横に表示されるアイコンです。",
    "The header text of the toast.": "乾杯のヘッダーテキストです。",
    "Emitted before the toast has dismissed.": "乾杯が解散する前に発行されます。",
    "Emitted after the toast has presented.": "トーストが提示された後に発行されます。",
    "Background of the toggle when checked": "チェックしたときのトグルの背景",
    "Horizontal spacing around the toggle handle": "トグルハンドル周辺の横方向の間隔",
    "Border radius of the toggle handle": "トグルハンドルのボーダー半径",
    "Width of the toggle handle": "トグルハンドルの幅",
    "Height of the toggle handle": "トグルハンドルの高さ",
    "Background of the toggle handle": "トグルハンドルの背景",
    "Maximum height of the toggle handle": "トグルハンドルの最大の高さ",
    "Transition of the toggle handle": "トグルハンドルの変遷",
    "Emitted when the toggle has focus.": "トグルにフォーカスが当たったときに発行されます。",
    "Enables the on/off accessibility switch labels within the toggle.": "トグル内のオン／オフアクセシビリティスイッチラベルを有効にします。",
    "Background of the toggle": "トグルの背景",
    "If `true`, the user cannot interact with the toggle.": "`true`の場合、ユーザーはトグルを操作することができません。",
    "Box shadow of the toggle handle": "トグルハンドルのボックスシャドウ",
    "Border radius of the toggle track": "トグルトラックのボーダー半径",
    "Background of the toggle handle when checked": "チェックしたときのトグルハンドルの背景",
    "Emitted when the toggle loses focus.": "トグルのフォーカスが外れたときに発行されます。",
    "If `true`, the toggle is selected.": "`true`の場合、トグルが選択されます。",
    "The value of the toggle does not mean if it's checked or not, use the `checked` property for that.  The value of a toggle is analogous to the value of a `<input type=\"checkbox\">`, it's only used when the toggle participates in a native `<form>`.": "トグルの値は、チェックされているかどうかを意味するものではありません。  トグルの値は `<input type=\"checkbox\">` の値に類似しており、トグルがネイティブの `<form>` に参加する場合にのみ使用されます。",
    "The background track of the toggle.": "トグルの背景トラックです。",
    "The toggle handle, or knob, used to change the checked state.": "チェックした状態を変更するために使用するトグルハンドル（つまみ）です。",
    "Color of the toolbar border": "ツールバーの枠の色",
    "Background of the toolbar": "ツールバーの背景",
    "Minimum height of the toolbar": "ツールバーの最小高さ",
    "Top padding of the toolbar": "ツールバーのTop Padding",
    "Width of the toolbar border": "ツールバーの枠の幅",
    "Opacity of the toolbar background": "ツールバーの背景の不透明度",
    "Style of the toolbar border": "ツールバーのボーダーのスタイル",
    "Bottom padding of the toolbar": "ツールバーのBottom Padding",
    "Content is placed to the left of the toolbar text in LTR, and to the right in RTL.": "コンテンツは、LTRではツールバーテキストの左側に、RTLでは右側に配置されます。",
    "Right padding if direction is left-to-right, and left padding if direction is right-to-left of the toolbar": "ツールバーの向きが左から右の場合はRight Padding、右から左の場合はLeft Paddingを使用します。",
    "Color of the toolbar text": "ツールバーテキストの色",
    "Content is placed to the right of the toolbar text in LTR, and to the left in RTL.": "コンテンツは、LTRではツールバーテキストの右側に、RTLでは左側に配置されます。",
    "Left padding if direction is left-to-right, and right padding if direction is right-to-left of the toolbar": "ツールバーの方向が左から右の場合はLeft Padding、右から左の場合はRight Paddingを使用します。",
    "Content is placed to the right of the toolbar text in `ios` mode, and to the far right in `md` mode.": "コンテンツは、`ios` modeではツールバーテキストの右側に、`md` modeでは右端に配置されます。",
    "Content is placed to the left of the toolbar text in `ios` mode, and directly to the right in `md` mode.": "コンテンツは、`ios` modeではツールバーテキストの左側に、`md` modeでは右側に直接配置されます。",
    "NOTE: only Vanilla JS API.": "注：Vanilla JS APIのみです。",
    "NOTE: only JSX API for stencil.  Provide a render function for the footer to be rendered. Returns a JSX virtual-dom.": "注：ステンシル用のJSX APIのみ。  フッターをレンダリングするためのrender関数を提供します。JSXのvirtual-domを返します。",
    "An optional function that maps each item header within their height.": "各項目のヘッダを高さの範囲内でマッピングするオプション関数。",
    "An optional function that maps each item footer within their height.": "各項目のフッターをその高さ内にマッピングするオプション関数。",
    "NOTE: only JSX API for stencil.  Provide a render function for the header to be rendered. Returns a JSX virtual-dom.": "注：ステンシル用のJSX APIのみ。  レンダリングされるヘッダーのrender関数を提供します。JSXのvirtual-domを返します。",
    "NOTE: only JSX API for stencil.  Provide a render function for the items to be rendered. Returns a JSX virtual-dom.": "注：ステンシル用のJSX APIのみ。  レンダリングするアイテムのレンダー関数を用意します。JSXのvirtual-domを返します。",
    "This method marks a subset of items as dirty, so they can be re-rendered. Items should be marked as dirty any time the content or their style changes.  The subset of items to be updated can are specifying by an offset and a length.": "このメソッドは、アイテムのサブセットをダーティとしてマークし、再レンダリングができるようにします。アイテムは、コンテンツまたはそのスタイルが変更されるたびに、ダーティとしてマークされる必要があります。  更新されるアイテムのサブセットは、オフセットと長さで指定することができます。",
    "Section footers and the data used within its given template can be dynamically created by passing a function to `footerFn`. The logic within the footer function can decide if the footer template should be used, and what data to give to the footer template. The function must return `null` if a footer cell shouldn't be created.": "セクションフッターと与えられたテンプレート内で使用されるデータは、`footerFn`に関数を渡すことで動的に作成することができます。フッター関数内のロジックは、フッターテンプレートを使用するかどうか、またフッターテンプレートにどのようなデータを与えるかを決定することができます。フッターセルが作成されない場合は、関数は `null` を返さなければなりません。",
    "An optional function that maps each item within their height. When this function is provides, heavy optimizations and fast path can be taked by `ion-virtual-scroll` leading to massive performance improvements.  This function allows to skip all DOM reads, which can be Doing so leads to massive performance": "各アイテムをその高さ内にマッピングするオプションの関数です。この関数が提供されると、`ion-virtual-scroll`によって重い最適化と高速パスが取られるようになり、大幅な性能向上が期待できる。  この関数は、DOMの読み込みをすべてスキップすることができ、Doingすることで大幅なパフォーマンスの向上につながります。",
    "This method marks the tail the items array as dirty, so they can be re-rendered.  It's equivalent to calling:  ```js virtualScroll.checkRange(lastItemLen); ```": "このメソッドは、アイテム配列の末尾をダーティとしてマークし、再レンダリングできるようにします。  これは次のように呼び出すのと同じです： ``js virtualScroll.checkRange(lastItemLen); ```。",
    "Returns the position of the virtual item at the given index.": "指定されたインデックスの位置にある仮想アイテムの位置を返します。",
    "It is important to provide this if virtual item height will be significantly larger than the default The approximate height of each virtual item template's cell. This dimension is used to help determine how many cells should be created when initialized, and to help calculate the height of the scrollable area. This height value can only use `px` units. Note that the actual rendered size of each cell comes from the app's CSS, whereas this approximation is used to help calculate initial dimensions before the item has been rendered.": "仮想アイテムの高さがデフォルトよりかなり大きくなる場合は、これを指定することが重要です。 各仮想アイテムテンプレートのセルのおおよその高さ。この寸法は、初期化時に作成されるべきセルの数を決定したり、スクロール可能な領域の高さを計算したりするのに使用されます。この高さの値には `px` 単位しか使用できません。各セルの実際のレンダリングサイズはアプリの CSS から得られるもので、この近似値はアイテムがレンダリングされる前に初期寸法を計算するのに役立つものであることに注意してください。",
    "The data that builds the templates within the virtual scroll. It's important to note that when this data has changed, then the entire virtual scroll is reset, which is an expensive operation and should be avoided if possible.": "仮想スクロール内のテンプレートを構築するためのデータです。このデータが変更された場合、仮想スクロール全体がリセットされることになります。",
    "The approximate width of each footer template's cell. This dimension is used to help determine how many cells should be created when initialized, and to help calculate the height of the scrollable area. This height value can only use `px` units. Note that the actual rendered size of each cell comes from the app's CSS, whereas this approximation is used to help calculate initial dimensions before the item has been rendered.": "各フッターテンプレートのセルのおおよその幅を指定します。この寸法は、初期化時に作成されるべきセルの数を決定したり、スクロール可能な領域の高さを計算したりするのに使用されます。この高さの値には `px` 単位しか使用できません。各セルの実際のレンダリングサイズはアプリのCSSから得られますが、この近似値はアイテムがレンダリングされる前に初期寸法を計算するために使用されることに注意してください。",
    "Section headers and the data used within its given template can be dynamically created by passing a function to `headerFn`. For example, a large list of contacts usually has dividers between each letter in the alphabet. App's can provide their own custom `headerFn` which is called with each record within the dataset. The logic within the header function can decide if the header template should be used, and what data to give to the header template. The function must return `null` if a header cell shouldn't be created.": "セクションヘッダーとそのテンプレート内で使用されるデータは、`headerFn`に関数を渡すことによって動的に作成することができます。例えば、大きな連絡先リストでは、通常、アルファベットの各文字の間に仕切りがあります。アプリは独自のカスタム `headerFn` を提供することができ、データセット内の各レコードで呼び出される。ヘッダー関数内のロジックは、ヘッダーテンプレートを使用するかどうか、またヘッダーテンプレートにどのようなデータを与えるかを決定することができる。ヘッダーセルが作成されない場合は、この関数は `null` を返さなければなりません。",
    "The approximate height of each header template's cell. This dimension is used to help determine how many cells should be created when initialized, and to help calculate the height of the scrollable area. This height value can only use `px` units. Note that the actual rendered size of each cell comes from the app's CSS, whereas this approximation is used to help calculate initial dimensions before the item has been rendered.": "各ヘッダーテンプレートのセルのおおよその高さを表します。この寸法は、初期化時に作成されるべきセルの数を決定したり、スクロール可能な領域の高さを計算したりするのに使用されます。この高さの値には `px` 単位しか使用できません。各セルの実際のレンダリングサイズはアプリのCSSから得られますが、この近似値はアイテムがレンダリングされる前に初期寸法を計算するために使用されることに注意してください。",
    "The platform to add (e.g. `android`, `ios`)": "追加するプラットフォーム（例：`android`、`ios`）。",
    "The platform to build for (e.g. `android`, `ios`)": "ビルドするプラットフォーム（例：`android`、`ios`）を指定します。",
    "The platform to copy (e.g. `android`, `ios`)": "コピーするプラットフォーム（例：`android`、`ios`）。",
    "The platform to open (e.g. `android`, `ios`)": "開くプラットフォーム（例：`android`、`ios`）。",
    "The platform to run (e.g. `android`, `ios`)": "実行するプラットフォーム（例：`android`、`ios`）。",
    "The platform to sync (e.g. `android`, `ios`)": "同期するプラットフォーム（例：`android`、`ios`）。",
    "The platform to update (e.g. `android`, `ios`)": "アップデートするプラットフォーム（例：`android`、`ios`）。",
    "The property name you wish to get": "取得したいプロパティ名",
    "The property name you wish to set": "設定したいプロパティ名",
    "The new value of the given property": "与えられたプロパティの新しい値",
    "The property name you wish to delete": "削除したいプロパティ名",
    "The platform to build (e.g. `android`, `ios`)": "ビルドするプラットフォーム（例：`android`、`ios`）。",
    "The platform to compile (`android`, `ios`)": "コンパイルするプラットフォーム（`android`、`ios`）。",
    "`add`, `remove`, or `update` a platform; `ls`, `check`, or `save` all project platforms": "プラットフォームの追加、削除、または更新; プロジェクトのプラットフォームをすべて保存します。",
    "The platform that you would like to add (`android`, `ios`)": "追加したいプラットフォーム（`android`、`ios`）を指定します。",
    "The name of the plugin (corresponds to `add` and `remove`)": "プラグインの名前 (`add` と `remove` に対応する)",
    "`add` or `remove` a plugin; `ls` or `save` all project plugins": "プラグインを `add` または `remove`; プロジェクトのすべてのプラグインを `ls` または `save` します。",
    "The platform you would like to prepare (e.g. `android`, `ios`)": "用意したいプラットフォーム（例：`android`、`ios`）。",
    "The platform for which you would like to gather requirements (`android`, `ios`)": "要件を収集したいプラットフォーム（`android`、`ios`）。",
    "The platform for which you would like to generate resources (`ios`, `android`)": "リソースを生成したいプラットフォーム（`ios`、`android`）を指定します。",
    "The native platform (e.g. `ios`, `android`)": "ネイティブプラットフォーム（例：`ios`、`android`）。",
    "The issue identifier": "課題識別子",
    "The name/path of the feature being generated": "生成されるフィーチャの名前/パス",
    "The type of feature (e.g. `page`, `component`, `directive`, `service`)": "機能の種類（例：`page`、`component`、`directive`、`service`）を指定します。",
    "The name of your project (e.g. `myApp`, `\"My App\"`)": "プロジェクト名（例：`myApp`、`\"My App\"`）を指定します。",
    "The integration to disable (e.g. `capacitor`, `cordova`, `enterprise`)": "無効にするインテグレーション（例：`capacitor`、`cordova`、`enterprise`）を指定します。",
    "The integration to enable (e.g. `capacitor`, `cordova`, `enterprise`)": "有効にするインテグレーション（例：`capacitor`、`cordova`、`enterprise`）を指定します。",
    "The Appflow ID of the app to link (e.g. `a1b2c3d4`)": "リンクするアプリのAppflow ID (例: `a1b2c3d4`)",
    "Your email address (deprecated)": "お客様のEメールアドレス（非推奨）",
    "Your password (deprecated)": "お客様のパスワード（非推奨）",
    "The platform to package (`android`, `ios`)": "パッケージングするプラットフォーム（`android`、`ios`）。",
    "The build type (`debug`, `release`, `development`, `ad-hoc`, `app-store`, `enterprise`)": "ビルドタイプ（`debug`, `release`, `development`, `ad-hoc`, `app-store`, `enterprise` ）。",
    "The build id of the desired successful package build": "成功したパッケージのビルドを示すビルドID",
    "The destination to deploy the build artifact to the app store": "ビルドアーティファクトをアプリストアにデプロイするための保存先",
    "Location of public key file to add to Ionic": "Ionicに追加する公開鍵ファイルの場所",
    "The ID of the public key to delete": "削除する公開鍵のID",
    "Destination of private key file": "秘密鍵ファイルの保存先",
    "Location of private key file to use": "使用する秘密鍵のファイルの場所",
    "The name of your new project (e.g. `myApp`, `\"My App\"`)": "新しいプロジェクトの名前（例：`myApp`、`\"My App\"`）を指定します。",
    "The starter template to use (e.g. `blank`, `tabs`; use `--list` to see all)": "使用するスターターテンプレート（例：`blank`, `tabs`; すべてを見るには `--list` を使用します。）",
    "Emitted when the value property has changed as a result of a user action such as a click. This event will not emit when programmatically setting the value property.": "クリックなどのユーザー操作により、valueプロパティが変化したときに発生します。プログラムによってvalueプロパティを設定した場合は、このイベントは発生しません。",
    "The value of the accordion group. This controls which accordions are expanded. This should be an array of strings only when `multiple=\"true\"`": "アコーディオングループの値です。これは、どのアコーディオンを展開するかを制御します。これは、`multiple=\"true\"`のときだけ、文字列の配列でなければなりません。",
    "The slot inside of `ion-item` to place the toggle icon. Defaults to `\"end\"`.": "トグルアイコンを配置する `ion-item` の内側のスロット。デフォルトは `\"end\"` です。",
    "Emitted before the action sheet has presented.": "アクションシートが提示される前に発行されます。",
    "An ID corresponding to the trigger element that causes the action sheet to open when clicked.": "クリックするとアクションシートが開くトリガー要素に対応するID。",
    "Emitted after the action sheet has presented.": "アクションシートが提示された後に発行されます。",
    "Emitted after the action sheet has dismissed.": "アクションシートが解散した後に発行されます。",
    "Emitted before the action sheet has dismissed.": "アクションシートが解散する前に発行されます。",
    "Emitted after the action sheet has presented. Shorthand for ionActionSheetWillDismiss.": "アクションシートが提示された後に発行されます。ionActionSheetWillDismissの略語。",
    "Emitted before the action sheet has presented. Shorthand for ionActionSheetWillPresent.": "アクションシートが提示される前に発行されます。ionActionSheetWillPresentの略記。",
    "Emitted before the action sheet has dismissed. Shorthand for ionActionSheetWillDismiss.": "アクションシートが解散する前に発行されます。ionActionSheetWillDismissの略記。",
    "If `true`, the action sheet will open. If `false`, the action sheet will close. Use this if you need finer grained control over presentation, otherwise just use the actionSheetController or the `trigger` property. Note: `isOpen` will not automatically be set back to `false` when the action sheet dismisses. You will need to do that in your code.": "`true`の場合、アクションシートは開かれます。`false`の場合、アクションシートは閉じます。プレゼンテーションの細かな制御が必要な場合はこれを使用し、そうでない場合は actionSheetController または `trigger` プロパティを使用します。注意: アクションシートが終了しても、`isOpen`は自動的に`false`に戻されません。あなたのコードでそれを行う必要があります。",
    "Emitted after the action sheet has dismissed. Shorthand for ionActionSheetDidDismiss.": "アクションシートが解散した後に発行されます。ionActionSheetDidDismissの略記。",
    "An ID corresponding to the trigger element that causes the alert to open when clicked.": "クリックされるとアラートが開くトリガー要素に対応するID。",
    "Emitted after the alert has presented. Shorthand for ionAlertWillDismiss.": "アラートが提示された後に発行されます。ionAlertWillDismissの略記。",
    "Emitted before the alert has presented. Shorthand for ionAlertWillPresent.": "アラートが提示される前に発行されます。ionAlertWillPresentの略記。",
    "Emitted before the alert has dismissed. Shorthand for ionAlertWillDismiss.": "アラートが解除される前に発行されます。ionAlertWillDismissの略記。",
    "Emitted after the alert has dismissed. Shorthand for ionAlertDidDismiss.": "アラートが解除された後に発行されます。ionAlertDidDismissの略記。",
    "If `true`, the alert will open. If `false`, the alert will close. Use this if you need finer grained control over presentation, otherwise just use the alertController or the `trigger` property. Note: `isOpen` will not automatically be set back to `false` when the alert dismisses. You will need to do that in your code.": "`true`の場合、アラートは開く。もし `false` ならば、アラートは閉じます。alertControllerや`trigger`プロパティを使用してください。注意: アラートが終了しても `isOpen` は自動的に `false` に戻りません。あなたのコードでそれを行う必要があります。",
    "The main message to be displayed in the alert. `message` can accept either plaintext or HTML as a string. To display characters normally reserved for HTML, they must be escaped. For example `<Ionic>` would become `&lt;Ionic&gt;`  For more information: [Security Documentation](https://ionicframework.com/docs/faq/security)  This property accepts custom HTML as a string. Content is parsed as plaintext by default. `innerHTMLTemplatesEnabled` must be set to `true` in the Ionic config before custom HTML can be used.": "アラートに表示されるメインメッセージ。`message`には、文字列としてプレーンテキストまたはHTMLのいずれかを指定することができます。通常HTML用に予約されている文字を表示するには、エスケープする必要があります。例えば、`<Ionic>`は `&lt;Ionic&gt;` になります：[セキュリティ・ドキュメント](https://ionicframework.com/docs/faq/security) このプロパティは、カスタムHTMLを文字列として受け付けます。デフォルトでは、コンテンツはプレーンテキストとしてパースされます。カスタムHTMLを使用するには、Ionicの設定で `innerHTMLTemplatesEnabled` を `true` に設定する必要があります。",
    "Emitted when the checked property has changed as a result of a user action such as a click. This event will not emit when programmatically setting the checked property.": "クリックなどのユーザー操作によりcheckedプロパティが変更された場合に発生します。プログラムによってcheckedプロパティを設定した場合は、このイベントは発生しません。",
    "How to pack the label and checkbox within a line. `\"start\"`: The label and checkbox will appear on the left in LTR and on the right in RTL. `\"end\"`: The label and checkbox will appear on the right in LTR and on the left in RTL. `\"space-between\"`: The label and checkbox will appear on opposite ends of the line with space between the two elements.": "ラベルとチェックボックスを1行にまとめる方法。`\"start\"`：ラベルとチェックボックスは、LTRでは左に、RTLでは右に表示されます。`\"end\"`：ラベルとチェックボックスは、LTRでは右に、RTLでは左に表示されます。`\"space-between\"`：ラベルとチェックボックスは、2つの要素の間にスペースがある状態で、行の反対側の端に表示されます。",
    "Where to place the label relative to the checkbox. `\"start\"`: The label will appear to the left of the checkbox in LTR and to the right in RTL. `\"end\"`: The label will appear to the right of the checkbox in LTR and to the left in RTL. `\"fixed\"`: The label has the same behavior as `\"start\"` except it also has a fixed width. Long text will be truncated with ellipses (\"...\").": "チェックボックスに対して相対的にラベルを配置する場所。`\"start\"`：ラベルはLTRではチェックボックスの左側に、RTLでは右側に表示されます。`\"end\"`：ラベルはLTRではチェックボックスの右側に、RTLでは左側に表示されます。`\"fixed\"`：ラベルの幅が固定される以外は、`\"start\"`と同じ動作になります。長いテキストは省略記号(\"...\")で切り捨てられます。",
    "The label text to associate with the checkbox. Use the \"labelPlacement\" property to control where the label is placed relative to the checkbox.": "チェックボックスと関連付けるラベルテキスト。\"labelPlacement\"プロパティを使用して、チェックボックスに対するラベルの配置を制御します。",
    "Set the `legacy` property to `true` to forcibly use the legacy form control markup. Ionic will only opt checkboxes in to the modern form markup when they are using either the `aria-label` attribute or have text in the default slot. As a result, the `legacy` property should only be used as an escape hatch when you want to avoid this automatic opt-in behavior.  Note that this property will be removed in an upcoming major release of Ionic, and all form components will be opted-in to using the modern form markup.": "`legacy`プロパティを`true`に設定すると、強制的にレガシーフォームコントロールのマークアップを使用することができます。Ionicは、チェックボックスが`aria-label`属性を使用しているか、デフォルトスロットにテキストがある場合にのみ、モダンなフォームマークアップを選択します。そのため、`legacy`プロパティは、この自動オプトイン動作を回避したい場合にのみ、エスケープハッチとして使用する必要があります。なお、このプロパティはIonicの今後のメジャーリリースで削除され、すべてのフォームコンポーネントは最新のフォームマークアップを使用するようオプトインされる予定です。",
    "If `true` and the content does not cause an overflow scroll, the scroll interaction will cause a bounce. If the content exceeds the bounds of ionContent, nothing will change. Note, this does not disable the system bounce on iOS. That is an OS level setting.": "`true`で、コンテンツがオーバーフロースクロールを引き起こさない場合、スクロールインタラクションはバウンスを引き起こします。コンテンツがionContentの境界を超えた場合、何も変化しません。なお、これはiOSのシステムバウンスを無効にするものではありません。これはOSレベルの設定です。",
    "The locale to use for `ion-datetime`. This impacts month and day name formatting. The `\"default\"` value refers to the default locale set by your device.": "ion-datetime`に使用するロケールを指定します。これは月と日の名前のフォーマットに影響します。`\"default\"`の値は、あなたのデバイスが設定するデフォルトのロケールを指します。",
    "The value of the datetime as a valid ISO 8601 datetime string. This should be an array of strings only when `multiple=\"true\"`.": "datetimeの値を有効なISO 8601 datetime文字列として指定します。これは、`multiple=\"true\"`の場合のみ、文字列の配列です。",
    "Which values you want to select. `\"date\"` will show a calendar picker to select the month, day, and year. `\"time\"` will show a time picker to select the hour, minute, and (optionally) AM/PM. `\"date-time\"` will show the date picker first and time picker second. `\"time-date\"` will show the time picker first and date picker second.": "どの値を選択するか。`\"date\"`はカレンダーピッカーを表示し、月、日、年を選択します。`\"time\"`は時間ピッカーを表示し、時、分、そして（オプションで）AM/PMを選択します。`\"date-time\"`は、日付ピッカーを最初に、時間ピッカーを次に表示します。\"time-date\"`は、最初に時間ピッカー、2番目に日付ピッカーを表示します。",
    "If `true`, a wheel picker will be rendered instead of a calendar grid where possible. If `false`, a calendar grid will be rendered instead of a wheel picker where possible.  A wheel picker can be rendered instead of a grid when `presentation` is one of the following values: `\"date\"`, `\"date-time\"`, or `\"time-date\"`.  A wheel picker will always be rendered regardless of the `preferWheel` value when `presentation` is one of the following values: `\"time\"`, `\"month\"`, `\"month-year\"`, or `\"year\"`.": "`true`の場合、可能な限りカレンダーグリッドの代わりにホイールピッカーが表示されます。もし `false` ならば、可能な限りホイールピッカーの代わりにカレンダーグリッドがレンダリングされます。  ホイールピッカーは、`presentation`が以下の値の場合、グリッドの代わりにレンダリングすることができます：`presentation`が `\"date\"`, `\"date-time\"`, または `\"time-date\"`.  ホイールピッカーは、`preferWheel`の値に関係なく、`presentation`が次の値のいずれかである場合に常にレンダリングされます：`\"time\"`, `\"month\"`, `\"month-year\"`, または `\"year\"`.",
    "Optional text to display while loading. `loadingText` can accept either plaintext or HTML as a string. To display characters normally reserved for HTML, they must be escaped. For example `<Ionic>` would become `&lt;Ionic&gt;`  For more information: [Security Documentation](https://ionicframework.com/docs/faq/security)  This property accepts custom HTML as a string. Content is parsed as plaintext by default. `innerHTMLTemplatesEnabled` must be set to `true` in the Ionic config before custom HTML can be used.": "ロード中に表示するオプションのテキスト。`loadingText`には、文字列としてプレーンテキストまたはHTMLのいずれかを指定することができます。通常HTML用に予約されている文字を表示するには、エスケープする必要があります。例えば、`<Ionic>`は `&lt;Ionic&gt;` になります。詳しくはこちら：[セキュリティ・ドキュメント](https://ionicframework.com/docs/faq/security) このプロパティは、カスタムHTMLを文字列として受け付けます。デフォルトでは、コンテンツはプレーンテキストとしてパースされます。カスタムHTMLを使用するには、Ionicの設定で `innerHTMLTemplatesEnabled` を `true` に設定する必要があります。",
    "Radius of the input": "Inputの半径",
    "The visible label associated with the input.": "Inputに関連する可視ラベル。",
    "Text that is placed under the input and displayed when no error is detected.": "Inputの下に配置され、エラーが検出されなかった場合に表示されるテキストです。",
    "Text that is placed under the input and displayed when an error is detected.": "Inputの下に配置され、エラーが検出されたときに表示されるテキストです。",
    "If `true`, a character counter will display the ratio of characters used and the total character limit. Developers must also set the `maxlength` property for the counter to be calculated correctly.": "`true`の場合、文字カウンタが使用された文字の比率と総文字数制限を表示します。カウンターを正しく計算するために、開発者は `maxlength` プロパティも設定する必要があります。",
    "The fill for the item. If `\"solid\"` the item will have a background. If `\"outline\"` the item will be transparent with a border. Only available in `md` mode.": "アイテムの塗りつぶし。もし `\"solid\"` ならば、アイテムは背景を持つようになります。もし `\"outline\"` ならば、アイテムはボーダー付きの透明なものになります。md`モードでのみ使用可能です。",
    "The color of the highlight on the input when focused": "フォーカスされたときの入力のハイライトの色",
    "Set the amount of time, in milliseconds, to wait to trigger the `ionInput` event after each keystroke.": "キーを押すたびに `ionInput` イベントが発生するまでの待ち時間をミリ秒単位で設定します。",
    "Style of the border below the input when using helper text, error text, or counter": "ヘルパーテキスト、エラーテキスト、カウンターを使用する場合の入力下のボーダーのスタイル",
    "The color of the highlight on the input when valid": "有効時の入力のハイライトの色",
    "Width of the border below the input when using helper text, error text, or counter": "ヘルパーテキスト、エラーテキスト、カウンターを使用する場合の入力下のボーダーの幅",
    "The shape of the input. If \"round\" it will have an increased border radius.": "入力の形状を指定します。\"round\"の場合、境界線の半径が大きくなります。",
    "The color of the highlight on the input when invalid": "入力が無効な場合のハイライトの色",
    "The `ionInput` event fires when the `value` of an `<ion-input>` element has been changed.  For elements that accept text input (`type=text`, `type=tel`, etc.), the interface is [`InputEvent`](https://developer.mozilla.org/en-US/docs/Web/API/InputEvent); for others, the interface is [`Event`](https://developer.mozilla.org/en-US/docs/Web/API/Event). If the input is cleared on edit, the type is `null`.": "`ionInput`イベントは `<ion-input>` 要素の `value` が変更されたときに発生するイベントです。  テキスト入力を受け付ける要素 (`type=text`, `type=tel` など) のインタフェースは [`InputEvent`](https://developer.mozilla.org/en-US/docs/Web/API/InputEvent) である。その他の要素のインタフェースは [`Event`](https://developer.mozilla.org/en-US/docs/Web/API/Event) です。編集時に入力がクリアされる場合、型は `null` となります。",
    "Color of the border below the input when using helper text, error text, or counter": "ヘルパーテキスト、エラーテキスト、カウンターを使用する場合のInput下のボーダーの色",
    "Where to place the label relative to the input. `\"start\"`: The label will appear to the left of the input in LTR and to the right in RTL. `\"end\"`: The label will appear to the right of the input in LTR and to the left in RTL. `\"floating\"`: The label will appear smaller and above the input when the input is focused or it has a value. Otherwise it will appear on top of the input. `\"stacked\"`: The label will appear smaller and above the input regardless even when the input is blurred or has no value. `\"fixed\"`: The label has the same behavior as `\"start\"` except it also has a fixed width. Long text will be truncated with ellipses (\"...\").": "入力に対してラベルを配置する位置。`\"start\"`：ラベルはLTRでは入力の左側に、RTLでは右側に表示されます。`\"end\"`：ラベルはLTRでは入力の右側、RTLでは左側に表示されます。\"floating\"`：`\"floating\"`：ラベルは、入力にフォーカスが当たっているときや、入力に値があるときは小さく表示され、入力の上に表示されます。それ以外の場合は、入力の上に表示されます。`\"スタック(stacked)\"`：入力がぼやけた状態や値がない場合でも、ラベルは小さく表示され、入力の上に表示されます。`\"fixed\"`：ラベルの幅が固定される以外は、`\"start\"`と同じ動作になります。長いテキストは省略記号（\"...\"）で切り捨てられます。",
    "Set the `legacy` property to `true` to forcibly use the legacy form control markup. Ionic will only opt components in to the modern form markup when they are using either the `aria-label` attribute or the `label` property. As a result, the `legacy` property should only be used as an escape hatch when you want to avoid this automatic opt-in behavior. Note that this property will be removed in an upcoming major release of Ionic, and all form components will be opted-in to using the modern form markup.": "`legacy`プロパティを`true`に設定すると、レガシーフォームコントロールのマークアップを強制的に使用することができます。Ionicは、コンポーネントが`aria-label`属性または`label`プロパティを使用している場合にのみ、最新のフォームマークアップを選択します。そのため、`legacy`プロパティは、この自動オプトイン動作を回避したい場合にのみ、エスケープハッチとして使用する必要があります。なお、このプロパティはIonicの今後のメジャーリリースで削除され、すべてのフォームコンポーネントはモダンフォームマークアップを使用するようオプトインされる予定です。",
    "The `ionChange` event is fired for `<ion-input>` elements when the user modifies the element's value. Unlike the `ionInput` event, the `ionChange` event is not necessarily fired for each alteration to an element's value.  Depending on the way the users interacts with the element, the `ionChange` event fires at a different moment: - When the user commits the change explicitly (e.g. by selecting a date from a date picker for `<ion-input type=\"date\">`, pressing the \"Enter\" key, etc.). - When the element loses focus after its value has changed: for elements where the user's interaction is typing.": "`ionChange` イベントは、ユーザーが要素の値を変更したときに `<ion-input>` 要素に対して発生します。 `ionInput` イベントとは異なり、`ionChange` イベントは必ずしも要素の値が変更されるたびに発生するわけではない。  ユーザーが要素と対話する方法に応じて、`ionChange` イベントは次のような異なるタイミングで発生します。 - ユーザーが明示的に変更をコミットしたとき (例えば、`<ion-input type=\"date\">` の日付ピッカーから日付を選択し、「Enter」キーを押すなど)。- 値が変更された後、要素がフォーカスを失ったとき：ユーザーの対話がタイピングである要素について。",
    "Content is placed under the item and displayed when an error is detected. **DEPRECATED** Use the \"errorText\" property on ion-input or ion-textarea instead.": "コンテンツはアイテムの下に配置され、エラーが検出されたときに表示されます。**DEPRECATED** 代わりに ion-input または ion-textarea の \"errorText\" プロパティを使用してください。",
    "Content is placed under the item and displayed when no error is detected. **DEPRECATED** Use the \"helperText\" property on ion-input or ion-textarea instead.": "コンテンツはアイテムの下に配置され、エラーが検出されない場合に表示されます。**DEPRECATED** 代わりに ion-input または ion-textarea の \"helperText\" プロパティを使用してください。",
    "Emitted after the loading indicator has dismissed. Shorthand for ionLoadingDidDismiss.": "ローディングインジケータが解除された後に発行されます。ionLoadingDidDismissの略記。",
    "Emitted before the loading indicator has dismissed. Shorthand for ionLoadingWillDismiss.": "ローディングインジケータが解散する前に発行されます。ionLoadingWillDismissの略記です。",
    "Emitted before the loading indicator has presented. Shorthand for ionLoadingWillPresent.": "ローディングインジケータが提示される前に発行されます。ionLoadingWillPresentの略記。",
    "If `true`, the loading indicator will open. If `false`, the loading indicator will close. Use this if you need finer grained control over presentation, otherwise just use the loadingController or the `trigger` property. Note: `isOpen` will not automatically be set back to `false` when the loading indicator dismisses. You will need to do that in your code.": "`true`の場合、ローディングインジケータは開きます。`false`の場合、ローディングインジケータは閉じます。より細かく表示を制御したい場合に使用します。そうでない場合は、loadingController または `trigger` プロパティを使用してください。注意: ローディングインジケータが終了しても、`isOpen`は自動的に `false`に戻されません。あなたのコードでそれを行う必要があります。",
    "An ID corresponding to the trigger element that causes the loading indicator to open when clicked.": "クリックするとローディングインジケータが開くトリガー要素に対応するIDです。",
    "Emitted after the loading indicator has presented. Shorthand for ionLoadingWillDismiss.": "ローディングインジケータが提示された後に放出される。ionLoadingWillDismissの略記。",
    "Optional text content to display in the loading indicator.  This property accepts custom HTML as a string. Content is parsed as plaintext by default. `innerHTMLTemplatesEnabled` must be set to `true` in the Ionic config before custom HTML can be used.": "ローディングインジケータに表示するテキストコンテンツを任意で指定します。  このプロパティは、文字列としてカスタムHTMLを受け入れます。コンテンツはデフォルトでプレーンテキストとしてパースされます。カスタムHTMLを使用するには、Ionicの設定で `innerHTMLTemplatesEnabled` を `true` に設定する必要があります。",
    "Emitted after the picker has dismissed. Shorthand for ionPickerDidDismiss.": "ピッカーが解散した後に発行されます。ionPickerDidDismissの略記です。",
    "Emitted before the picker has presented. Shorthand for ionPickerWillPresent.": "ピッカーが提示される前に発行されます。ionPickerWillPresentの略記です。",
    "Emitted after the picker has presented. Shorthand for ionPickerWillDismiss.": "ピッカーが提示された後に発行されます。ionPickerWillDismissの略記です。",
    "Emitted before the picker has dismissed. Shorthand for ionPickerWillDismiss.": "ピッカーが解散する前に発行されます。ionPickerWillDismissの略記です。",
    "If `true`, the picker will open. If `false`, the picker will close. Use this if you need finer grained control over presentation, otherwise just use the pickerController or the `trigger` property. Note: `isOpen` will not automatically be set back to `false` when the picker dismisses. You will need to do that in your code.": "`true`の場合、ピッカーは開きます。`false`の場合、ピッカーは閉じます。ピッカーの表示をより細かく制御したい場合に使用します。それ以外の場合は pickerController や `trigger` プロパティを使用します。注意: ピッカーが終了しても `isOpen` は自動的に `false` に戻りません。あなたのコードでそれを行う必要があります。",
    "An ID corresponding to the trigger element that causes the picker to open when clicked.": "クリックするとピッカーが開くトリガー要素に対応するID。",
    "Describes what kind of interaction with the trigger that should cause the popover to open. Does not apply when the `trigger` property is `undefined`. If `\"click\"`, the popover will be presented when the trigger is left clicked. If `\"hover\"`, the popover will be presented when a pointer hovers over the trigger. If `\"context-menu\"`, the popover will be presented when the trigger is right clicked on desktop and long pressed on mobile. This will also prevent your device's normal context menu from appearing.": "どのようなトリガーとの相互作用でポップオーバーを開くべきかを記述します。 `trigger`プロパティが `undefined` の場合は適用されません。`\"click\"` の場合、トリガーが左クリックされたときにポップオーバーが表示されます。`\"hover\"` の場合、ポインタがトリガーの上に乗ったときにポップオーバーが表示されます。コンテキストメニューの場合、デスクトップでは右クリック、モバイルでは長押しでポップオーバーが表示されます。これは、デバイスの通常のコンテキストメニューが表示されるのを防ぐことにもなります。",
    "Describes which side of the `reference` point to position the popover on. The `\"start\"` and `\"end\"` values are RTL-aware, and the `\"left\"` and `\"right\"` values are not.": "ポップオーバーを `reference` ポイントのどちら側に配置するかを記述します。`\"start\"` と `\"end\"` の値はRTLを意識しており、`\"left\"` と `\"right\"` の値はそうではない。",
    "Describes how to calculate the popover width. If `\"cover\"`, the popover width will match the width of the trigger. If `\"auto\"`, the popover width will be determined by the content in the popover.": "ポップオーバーの幅を計算する方法を記述します。もし `\"cover\"` ならば、ポップオーバーの幅はトリガーの幅と一致します。auto\"` の場合、ポップオーバーの幅はポップオーバー内のコンテンツによって決定される。",
    "Describes what to position the popover relative to. If `\"trigger\"`, the popover will be positioned relative to the trigger button. If passing in an event, this is determined via event.target. If `\"event\"`, the popover will be positioned relative to the x/y coordinates of the trigger action. If passing in an event, this is determined via event.clientX and event.clientY.": "ポップオーバーを何に対して相対的に配置するかを記述します。もし `\"trigger\"` ならば、ポップオーバーはトリガーボタンに相対して配置されます。イベントを渡すと、event.targetによって決定されます。もし `\"event\"` ならば、ポップオーバーはトリガーアクションのx/y座標に相対的に配置されます。イベントを渡す場合、これはevent.clientXとevent.clientYを介して決定されます。",
    "Describes how to align the popover content with the `reference` point. Defaults to `\"center\"` for `ios` mode, and `\"start\"` for `md` mode.": "ポップオーバーのコンテンツを `reference` ポイントに揃える方法を記述します。デフォルトは `ios` モードでは `\"center\"` で、`md` モードでは `\"start\"` です。",
    "The label text to associate with the radio. Use the \"labelPlacement\" property to control where the label is placed relative to the radio.": "ラジオに関連付けるラベルテキストです。\"labelPlacement\"プロパティを使用して、ラジオに対するラベルの相対的な配置を制御します。",
    "Set the `legacy` property to `true` to forcibly use the legacy form control markup. Ionic will only opt components in to the modern form markup when they are using either the `aria-label` attribute or the default slot that contains the label text. As a result, the `legacy` property should only be used as an escape hatch when you want to avoid this automatic opt-in behavior. Note that this property will be removed in an upcoming major release of Ionic, and all form components will be opted-in to using the modern form markup.": "`legacy`プロパティを`true`に設定すると、レガシーフォームコントロールのマークアップを強制的に使用することができます。Ionicは、コンポーネントが`aria-label`属性またはラベルテキストを含むデフォルトスロットのいずれかを使用している場合にのみ、モダンフォームマークアップを選択するようになっています。そのため、`legacy`プロパティは、この自動オプトイン動作を回避したい場合にのみ、エスケープハッチとして使用する必要があります。なお、このプロパティはIonicの今後のメジャーリリースで削除され、すべてのフォームコンポーネントはモダンフォームマークアップを使用するようにオプトインされる予定です。",
    "How to pack the label and radio within a line. `\"start\"`: The label and radio will appear on the left in LTR and on the right in RTL. `\"end\"`: The label and radio will appear on the right in LTR and on the left in RTL. `\"space-between\"`: The label and radio will appear on opposite ends of the line with space between the two elements.": "ラベルとラジオを1行にまとめる方法。`\"start\"` とします：ラベルとラジオは、LTRでは左側に、RTLでは右側に表示されます。`\"end\"`：ラベルとラジオは、LTRでは右に、RTLでは左に表示されます。`\"space-between\"`：ラベルとラジオは、2つの要素の間にスペースがある状態で、行の反対側の端に表示されます。",
    "Where to place the label relative to the radio. `\"start\"`: The label will appear to the left of the radio in LTR and to the right in RTL. `\"end\"`: The label will appear to the right of the radio in LTR and to the left in RTL. `\"fixed\"`: The label has the same behavior as `\"start\"` except it also has a fixed width. Long text will be truncated with ellipses (\"...\").": "ラジオから相対的にラベルを配置する場所。`\"start\"`：ラベルはLTRではラジオの左側に、RTLでは右側に表示されます。`\"end\"`：ラベルはLTRではラジオの右、RTLでは左に表示されます。`\"fixed\"`：ラベルの幅が固定される以外は、`\"start\"`と同じ動作になります。長いテキストは省略記号(\"...\")で切り捨てられます。",
    "The label text to associate with the range. Use the \"labelPlacement\" property to control where the label is placed relative to the range.": "範囲に関連付けるラベルテキスト。`\"labelPlacement`\"プロパティを使用して、ラベルが範囲に対してどの位置に配置されるかを制御します。",
    "The `ionInput` event is fired for `<ion-range>` elements when the value is modified. Unlike `ionChange`, `ionInput` is fired continuously while the user is dragging the knob.": "`ionInput`イベントは、`<ion-range>`要素に対して、値が変更されたときに発生するイベントです。`ionChange`とは異なり、`ionInput`はユーザがノブをドラッグしている間、継続して発生します。",
    "The `ionChange` event is fired for `<ion-range>` elements when the user modifies the element's value: - When the user releases the knob after dragging; - When the user moves the knob with keyboard arrows  `ionChange` is not fired when the value is changed programmatically.": "`ionChange`イベントは、`<ion-range>`要素に対して、ユーザーがその要素の値を変更したときに発生します： - ドラッグした後にノブを離したとき - キーボードの矢印でノブを動かしたとき プログラムで値を変更したときは、`ionChange`イベントは発生しません。",
    "Where to place the label relative to the range. `\"start\"`: The label will appear to the left of the range in LTR and to the right in RTL. `\"end\"`: The label will appear to the right of the range in LTR and to the left in RTL. `\"fixed\"`: The label has the same behavior as `\"start\"` except it also has a fixed width. Long text will be truncated with ellipses (\"...\").": "範囲に対してラベルを配置する場所。`\"start\"`：ラベルはLTRでは範囲の左側に、RTLでは右側に表示されます。`\"end\"`：ラベルはLTRでは範囲の右側、RTLでは左側に表示されます。`\"fixed\"`：ラベルの幅が固定される以外は、`\"start\"`と同じ動作をします。長いテキストは省略記号(\"...\")で切り捨てられます。",
    "How long, in milliseconds, to wait to trigger the `ionInput` event after each change in the range value.": "レンジの値が変化するたびに `ionInput` イベントをトリガーするまでの待ち時間（ミリ秒単位）。",
    "The text you want to display when performing a refresh. `refreshingText` can accept either plaintext or HTML as a string. To display characters normally reserved for HTML, they must be escaped. For example `<Ionic>` would become `&lt;Ionic&gt;`  For more information: [Security Documentation](https://ionicframework.com/docs/faq/security)  Content is parsed as plaintext by default. `innerHTMLTemplatesEnabled` must be set to `true` in the Ionic config before custom HTML can be used.": "リフレッシュを行う際に表示したいテキストです。 `refreshingText` には、文字列としてプレーンテキストまたはHTMLのいずれかを指定することができます。通常HTML用に予約されている文字を表示するには、エスケープする必要があります。例えば、`<Ionic>`は `&lt;Ionic&gt;` となります：[セキュリティ・ドキュメント](https://ionicframework.com/docs/faq/security) デフォルトでは、コンテンツはプレーンテキストとして解析されます。カスタムHTMLを使用するには、Ionicの設定で `innerHTMLTemplatesEnabled` を `true` に設定する必要があります。",
    "The text you want to display when you begin to pull down. `pullingText` can accept either plaintext or HTML as a string. To display characters normally reserved for HTML, they must be escaped. For example `<Ionic>` would become `&lt;Ionic&gt;`  For more information: [Security Documentation](https://ionicframework.com/docs/faq/security)  Content is parsed as plaintext by default. `innerHTMLTemplatesEnabled` must be set to `true` in the Ionic config before custom HTML can be used.": "プルダウン開始時に表示したいテキストです。 `pullingText` は、文字列としてプレーンテキストまたはHTMLのいずれかを受け取ることができます。通常HTML用に予約されている文字を表示するには、エスケープする必要があります。例えば、`<Ionic>`は `&lt;Ionic&gt;` になります：[セキュリティ・ドキュメント](https://ionicframework.com/docs/faq/security) デフォルトでは、コンテンツはプレーンテキストとして解析されます。カスタムHTMLを使用するには、Ionicの設定で `innerHTMLTemplatesEnabled` を `true` に設定する必要があります。",
    "Emitted when the `value` of the `ion-searchbar` element has changed.": "ion-searchbar`要素の `value` が変更されたときに発行されます。",
    "The `ionChange` event is fired for `<ion-searchbar>` elements when the user modifies the element's value. Unlike the `ionInput` event, the `ionChange` event is not necessarily fired for each alteration to an element's value.  The `ionChange` event is fired when the value has been committed by the user. This can happen when the element loses focus or when the \"Enter\" key is pressed. `ionChange` can also fire when clicking the clear or cancel buttons.": "`ionChange` イベントは、`<ion-searchbar>` 要素に対して、ユーザがその要素の値を変更したときに発生します。ionInput` イベントとは異なり、要素の値が変更されるたびに `ionChange` イベントが発生する必要はない。`ionChange`イベントは、ユーザーによって値がコミットされたときに発生します。これは、要素のフォーカスが外れたときや、\"Enter \"キーが押されたときに発生します。また、クリアボタンやキャンセルボタンをクリックしたときにも `ionChange` イベントが発生することがあります。",
    "Background of the select": "セレクトの背景",
    "The value of the select.": "セレクトの値です。",
    "The visible label associated with the select.": "セレクトに関連する可視ラベル。",
    "The shape of the select. If \"round\" it will have an increased border radius.": "セレクトの形状を指定します。`round`の場合、境界線の半径が大きくなります。",
    "How to pack the label and select within a line. `justify` does not apply when the label and select are on different lines when `labelPlacement` is set to `\"floating\"` or `\"stacked\"`. `\"start\"`: The label and select will appear on the left in LTR and on the right in RTL. `\"end\"`: The label and select will appear on the right in LTR and on the left in RTL. `\"space-between\"`: The label and select will appear on opposite ends of the line with space between the two elements.": "ラベルとセレクトを1行にまとめる方法。`labelPlacement`が `\"floating\"` または `\"stacked\"` に設定されている場合、ラベルとセレクトが異なる行にあるときは `justify` は適用されません。`\"start\"`：ラベルとセレクトはLTRでは左側に、RTLでは右側に表示されます。`\"end\"`：ラベルとセレクトはLTRでは右に、RTLでは左に表示されます。\"space-between\"`：ラベルとセレクトは行の反対側の端に表示され、2つの要素の間にはスペースがあります。",
    "The color to use from your application's color palette. Default options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`. For more information on colors, see [theming](/docs/theming/basics).  This property is only available when using the modern select syntax.": "アプリケーションのカラーパレットから使用する色を指定します。デフォルトのオプションは以下の通りです：`\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, と `\"dark\"` です．色についての詳細は [theming](/docs/theming/basics) を参照してください。  このプロパティは、modern select構文を使用する場合にのみ利用可能です。",
    "The color of the ripple effect on MD mode.": "MDモード時のリップルエフェクトの色です。",
    "Where to place the label relative to the select. `\"start\"`: The label will appear to the left of the select in LTR and to the right in RTL. `\"end\"`: The label will appear to the right of the select in LTR and to the left in RTL. `\"floating\"`: The label will appear smaller and above the select when the select is focused or it has a value. Otherwise it will appear on top of the select. `\"stacked\"`: The label will appear smaller and above the select regardless even when the select is blurred or has no value. `\"fixed\"`: The label has the same behavior as `\"start\"` except it also has a fixed width. Long text will be truncated with ellipses (\"...\"). When using `\"floating\"` or `\"stacked\"` we recommend initializing the select with either a `value` or a `placeholder`.": "セレクトに対してラベルを配置する位置。`\"start\"`：ラベルはLTRではセレクトの左側に、RTLでは右側に表示されます。`\"end\"`：ラベルはLTRではセレクトの右側に、RTLでは左側に表示されます。\"floating\"`：ラベルは、セレクトがフォーカスされているか、セレクトに値がある場合、小さく表示され、セレクトの上に表示されます。それ以外の場合は、セレクトの上に表示されます。\"stacked\"`：ラベルは、セレクトがぼやけた状態や値がない状態でも、小さく表示され、セレクトの上に表示されます。`\"fixed\"`：ラベルの幅が固定される以外は、`\"start\"`と同じ動作になります。長いテキストは省略記号（\"...\"）で切り捨てられます。`\"floating\"`や \"stacked\"`を使用する場合は、selectに `value` か `placeholder` のどちらかを指定して初期化することをお勧めします。",
    "Set the layout of the text and icon in the tab bar. It defaults to `\"icon-top\"`.": "タブバーのテキストとアイコンのレイアウトを設定します。デフォルトは`\"icon-top\"`です。",
    "The color of the highlight on the textarea when valid": "有効時のテキストエリアのハイライトの色",
    "Text that is placed under the textarea and displayed when an error is detected.": "テキストエリアの下に配置され、エラーが検出されたときに表示されるテキストです。",
    "The visible label associated with the textarea.": "テキストエリアに関連する可視ラベル。",
    "If `true`, the value will be cleared after focus upon edit.": "true`の場合、編集時にフォーカスが当たった後、値がクリアされる。",
    "Text that is placed under the textarea and displayed when no error is detected.": "textareaの下に配置され、エラーが検出されなかった場合に表示されるテキストです。",
    "Style of the border below the textarea when using helper text, error text, or counter": "ヘルパーテキスト、エラーテキスト、カウンター使用時のテキストエリア下のボーダーのスタイル",
    "Width of the border below the textarea when using helper text, error text, or counter": "ヘルパーテキスト、エラーテキスト、カウンターを使用する場合のテキストエリア下のボーダーの幅",
    "The shape of the textarea. If \"round\" it will have an increased border radius.": "テキストエリアの形状を指定します。round \"の場合、ボーダーの半径が大きくなります。",
    "This attribute specifies the maximum number of characters that the user can enter.": "この属性は、ユーザが入力できる最大文字数を指定します。",
    "Color of the border below the textarea when using helper text, error text, or counter": "ヘルパーテキスト、エラーテキスト、カウンターを使用する場合のテキストエリア下のボーダーの色",
    "The `ionChange` event is fired for `<ion-textarea>` elements when the user modifies the element's value. Unlike the `ionInput` event, the `ionChange` event is not necessarily fired for each alteration to an element's value.  The `ionChange` event is fired when the element loses focus after its value has been modified.": "`ionChange` イベントは `<ion-textarea>` 要素に対して、ユーザがその要素の値を変更したときに発生します。 `ionInput` イベントとは異なり、`ionChange` イベントは要素の値が変更されるたびに発生する必要はない。  値が変更された後、要素のフォーカスが外れると `ionChange` イベントが発生します。",
    "The `ionInput` event fires when the `value` of an `<ion-textarea>` element has been changed.  When `clearOnEdit` is enabled, the `ionInput` event will be fired when the user clears the textarea by performing a keydown event.": "`ionInput` イベントは、`<ion-textarea>` 要素の `value` が変更されたときに発生します。 `clearOnEdit` が有効な場合、ユーザがキーダウンイベントを実行してテキストエリアをクリアしたときに `ionInput` イベントが発生します。",
    "Where to place the label relative to the textarea. `\"start\"`: The label will appear to the left of the textarea in LTR and to the right in RTL. `\"end\"`: The label will appear to the right of the textarea in LTR and to the left in RTL. `\"floating\"`: The label will appear smaller and above the textarea when the textarea is focused or it has a value. Otherwise it will appear on top of the textarea. `\"stacked\"`: The label will appear smaller and above the textarea regardless even when the textarea is blurred or has no value. `\"fixed\"`: The label has the same behavior as `\"start\"` except it also has a fixed width. Long text will be truncated with ellipses (\"...\").": "テキストエリアと相対的にラベルを配置する場所。\"start\"`：ラベルはLTRではテキストエリアの左側に、RTLでは右側に表示されます。`\"end\"`：ラベルはLTRではテキストエリアの右側に、RTLでは左側に表示されます。\"floating\"`：ラベルは、テキストエリアにフォーカスが当たっているか、値がある場合、小さく表示され、テキストエリアの上に表示されます。それ以外の場合はtextareaの上に表示されます。`\"stacked\"`：テキストエリアがぼやけた状態や値がない場合でも、ラベルは小さく表示され、テキストエリアの上に表示されます。固定\"`：ラベルの幅が固定される以外は、`\"start\"`と同じ動作になります。長いテキストは省略記号（\"...\"）で切り捨てられます。",
    "This attribute specifies the minimum number of characters that the user can enter.": "この属性は、ユーザーが入力できる最小の文字数を指定します。",
    "The color of the highlight on the textarea when invalid": "無効時のテキストエリア上のハイライトの色",
    "The color of the highlight on the textarea when focused": "フォーカスされたときのテキストエリアのハイライトの色",
    "An ID corresponding to the trigger element that causes the toast to open when clicked.": "クリックされたときにトーストを開かせるトリガー要素に対応するID。",
    "Emitted before the toast has presented. Shorthand for ionToastWillPresent.": "トーストが表示される前に発行されます。ionToastWillPresentの略記。",
    "Emitted before the toast has dismissed. Shorthand for ionToastWillDismiss.": "トーストが終了する前に発行されます。ionToastWillDismissの略語です。",
    "Message to be shown in the toast. This property accepts custom HTML as a string. Content is parsed as plaintext by default. `innerHTMLTemplatesEnabled` must be set to `true` in the Ionic config before custom HTML can be used.": "トーストに表示するメッセージ。このプロパティは、文字列としてカスタムHTMLを受け入れます。デフォルトではコンテンツはプレーンテキストとしてパースされます。カスタムHTMLを使用するには、Ionicの設定で `innerHTMLTemplatesEnabled` を `true` に設定する必要があります。",
    "Emitted after the toast has dismissed. Shorthand for ionToastDidDismiss.": "トーストが終了した後に発行されます。ionToastDidDismissの略記。",
    "Emitted after the toast has presented. Shorthand for ionToastWillDismiss.": "トーストがはじまった後に発行されます。ionToastWillDismissの略語。",
    "If `true`, the toast will open. If `false`, the toast will close. Use this if you need finer grained control over presentation, otherwise just use the toastController or the `trigger` property. Note: `isOpen` will not automatically be set back to `false` when the toast dismisses. You will need to do that in your code.": "もし `true` ならば、トーストは表示されます。もし `false` ならば、トーストは閉じます。プレゼンテーションの細かい制御が必要な場合はこれを使用し、そうでない場合は toastController または `trigger` プロパティを使用してください。注意: トーストが終了しても `isOpen` は自動的に `false` に戻りません。あなたのコードでそれを行う必要があります。",
    "Background of the toggle track when checked": "チェックしたときのトグルトラックの背景",
    "Background of the toggle track": "トグルトラックの背景",
    "The label text to associate with the toggle. Use the \"labelPlacement\" property to control where the label is placed relative to the toggle.": "トグルに関連付けるラベルテキストです。`\"labelPlacement`\"プロパティを使用して、トグルに対してラベルを配置する位置を制御します。",
    "How to pack the label and toggle within a line. `\"start\"`: The label and toggle will appear on the left in LTR and on the right in RTL. `\"end\"`: The label and toggle will appear on the right in LTR and on the left in RTL. `\"space-between\"`: The label and toggle will appear on opposite ends of the line with space between the two elements.": "ラベルとトグルを1行にまとめる方法。`\"start\"`：ラベルとトグルは、LTRでは左に、RTLでは右に表示されます。`\"end\"`：ラベルとトグルは、LTRでは右に、RTLでは左に表示されます。`\"space-between\"`：ラベルとトグルは、2つの要素の間にスペースがある状態で、行の反対側の端に表示されます。",
    "Where to place the label relative to the input. `\"start\"`: The label will appear to the left of the toggle in LTR and to the right in RTL. `\"end\"`: The label will appear to the right of the toggle in LTR and to the left in RTL. `\"fixed\"`: The label has the same behavior as `\"start\"` except it also has a fixed width. Long text will be truncated with ellipses (\"...\").": "Inputに対してラベルを配置する場所。\"start\"`とする：ラベルはLTRではトグルの左側に、RTLでは右側に表示されます。`\"end\"`：ラベルはLTRではトグルの右側に、RTLでは左側に表示されます。`\"fixed\"`：ラベルの幅が固定される以外は、`\"start\"`と同じ動作になります。長いテキストは省略記号(\"...\")で切り捨てられます。",
    "Emitted when the user switches the toggle on or off. Does not emit when programmatically changing the value of the `checked` property.": "ユーザがトグルのオン/オフを切り替えたときに発行されます。プログラムによって `checked` プロパティの値が変更された場合は発生しません。",
    "The currently selected wheel-item.": "現在選択されているホイール項目。",
    "The time picker button when the picker is open.": "ピッカーが開いているときのタイムピッカーボタン。",
    "The button that opens the month/year picker when using a grid style layout.": "グリッドスタイルレイアウト使用時に月/年ピッカーを開くボタン。",
    "The background of the highlight under the selected item when using a wheel style layout, or in the month/year picker for grid style layouts.": "ホイールスタイルレイアウトの場合は選択された項目の下、グリッドスタイルレイアウトの場合は月/年ピッカーのハイライトの背景。",
    "The individual items when using a wheel style layout, or in the month/year picker when using a grid style layout.": "ホイールスタイルレイアウトを使用している場合は個々の項目、グリッドスタイルレイアウトを使用している場合は月/年のピッカーに表示されます。",
    "The color of the gradient covering non-selected items when using a wheel style layout, or in the month/year picker for grid style layouts. Must be in RGB format, e.g. `255, 255, 255`.": "ホイールスタイルレイアウトの場合は非選択項目を覆うグラデーションの色、グリッドスタイルレイアウトの場合は月/年ピッカーの色。255,255,255`のようなRGBフォーマットでなければなりません。",
    "The button that opens the time picker when using a grid style layout with `presentation=\"date-time\"` or `\"time-date\"`.": "presentation=\"date-time\"`または`\"time-date\"`のグリッドスタイルレイアウトを使用しているときに、時間ピッカーを開くボタン。",
    "Values used to create the list of selectable years. By default the year values range between the `min` and `max` datetime inputs. However, to control exactly which years to display, the `yearValues` input can take a number, an array of numbers, or string of comma separated numbers. For example, to show upcoming and recent leap years, then this input's value would be `yearValues=\"2008,2012,2016,2020,2024\"`.": "選択可能な年のリストを作成するために使用する値。デフォルトでは、年の値は日付の `min` と `max` の間に設定される。しかし、表示する年を正確に制御するために、 `yearValues` 入力には数値、数値の配列、カンマで区切られた数値の文字列を指定することができます。例えば、うるう年と最近のうるう年を表示する場合、この入力の値は `yearValues=\"2008,2012,2016,2020,2024\"` となります。",
    "The label text to associate with the input. Use the `labelPlacement` property to control where the label is placed relative to the input. Use this if you need to render a label with custom HTML. (EXPERIMENTAL)": "入力に関連付けるラベルテキスト。labelPlacement`プロパティを使用すると、入力に対してラベルを配置する位置を制御することができる。ラベルをカスタム HTML でレンダリングする必要がある場合に使用します。(EXPERIMENTAL)",
    "The visible label associated with the input.  Use this if you need to render a plaintext label.  The `label` property will take priority over the `label` slot if both are used.": "入力に関連付けられた可視ラベル。  プレーンテキストのラベルをレンダリングする必要がある場合に使用する。  両方が使用されている場合、`label` プロパティが `label` スロットよりも優先される。",
    "Radius of the input. A large radius may display unevenly when using fill=\"outline\"; if needed, use shape=\"round\" instead or increase --padding-start.": "入力の半径。fill=\"outline \"を使う場合、半径が大きいと表示が不 均一になることがある。",
    "The `ionChange` event is fired when the user modifies the input's value. Unlike the `ionInput` event, the `ionChange` event is only fired when changes are committed, not as the user types.  Depending on the way the users interacts with the element, the `ionChange` event fires at a different moment: - When the user commits the change explicitly (e.g. by selecting a date from a date picker for `<ion-input type=\"date\">`, pressing the \"Enter\" key, etc.). - When the element loses focus after its value has changed: for elements where the user's interaction is typing.": "ionChange` イベントは、ユーザが入力値を変更したときに発生する。ionInput` イベントとは異なり、`ionChange` イベントは変更がコミットされたときにのみ発生する。  ユーザが明示的に変更をコミットしたとき (例えば、`<ion-input type=\"date\">` の日付ピッカーから日付を選択したり、\"Enter\" キーを押したりしたときなど)。- 値が変更された後、要素がフォーカスを失ったとき: ユーザーのインタラクションがタイピングである要素の場合。",
    "Sets focus on the native `input` in `ion-input`. Use this method instead of the global `input.focus()`.  Developers who wish to focus an input when a page enters should call `setFocus()` in the `ionViewDidEnter()` lifecycle method.  Developers who wish to focus an input when an overlay is presented should call `setFocus` after `didPresent` has resolved.": "ion-input` のネイティブ `input` にフォーカスを設定する。グローバルな `input.focus()` の代わりにこのメソッドを使用する。  ページ入力時に入力にフォーカスを当てたい場合は、 `ionViewDidEnter()` ライフサイクルメソッド内で `setFocus()` を呼び出す必要がある。  オーバーレイが表示されたときに入力にフォーカスを当てたい開発者は、 `didPresent` が解決した後に `setFocus` を呼び出してください。",
    "The `ionInput` event is fired each time the user modifies the input's value. Unlike the `ionChange` event, the `ionInput` event is fired for each alteration to the input's value. This typically happens for each keystroke as the user types.  For elements that accept text input (`type=text`, `type=tel`, etc.), the interface is [`InputEvent`](https://developer.mozilla.org/en-US/docs/Web/API/InputEvent); for others, the interface is [`Event`](https://developer.mozilla.org/en-US/docs/Web/API/Event). If the input is cleared on edit, the type is `null`.": "ionInput` イベントは、ユーザが入力値を変更するたびに発生する。ionChange` イベントとは異なり、 `ionInput` イベントは入力値が変更されるたびに発生する。これは通常、ユーザが入力を行うたびに発生します。  テキスト入力を受け付ける要素(`type=text`, `type=tel`など)の場合、インターフェイスは[`InputEvent`](https://developer.mozilla.org/en-US/docs/Web/API/InputEvent)となります。その他の要素の場合、インターフェイスは[`Event`](https://developer.mozilla.org/en-US/docs/Web/API/Event)となります。編集時に入力がクリアされる場合、型は `null` となる。",
    "The height of the highlight on the item. Only applies to inputs and textareas using the legacy form syntax. DEPRECATED: Highlights can be styled on `ion-input` or `ion-textarea` when using the modern form syntax.": "アイテムのハイライトの高さ。レガシーなフォーム構文を使用している input と textareas にのみ適用されます。廃止予定：モダンなフォーム構文を使用している場合、ハイライトは `ion-input` または `ion-textarea` にスタイル設定することができる。",
    "The color of the highlight on the item when invalid. Only applies to inputs and textareas using the legacy form syntax. DEPRECATED: Highlights can be styled on `ion-input` or `ion-textarea` when using the modern form syntax.": "無効な場合の項目のハイライトの色。レガシーなフォーム構文を使用している input と textareas にのみ適用されます。廃止予定：モダンなフォーム構文を使用している場合、ハイライトは `ion-input` または `ion-textarea` にスタイル設定することができる。",
    "The color of the highlight on the item when valid. Only applies to inputs and textareas using the legacy form syntax. DEPRECATED: Highlights can be styled on `ion-input` or `ion-textarea` when using the modern form syntax.": "有効な場合の項目のハイライトの色。レガシーなフォーム構文を使用している input と textareas にのみ適用されます。廃止予定：モダンなフォーム構文を使用している場合、ハイライトは `ion-input` または `ion-textarea` でスタイリングできる。",
    "The color of the highlight on the item when focused. Only applies to inputs and textareas using the legacy form syntax. DEPRECATED: Highlights can be styled on `ion-input` or `ion-textarea` when using the modern form syntax.": "フォーカスされたときのアイテムのハイライトの色。レガシーなフォーム構文を使用している input と textareas にのみ適用されます。廃止予定：モダンなフォーム構文を使用している場合、ハイライトは `ion-input` または `ion-textarea` にスタイル設定することができる。",
    "Describes how to calculate the popover width. If `\"cover\"`, the popover width will match the width of the trigger. If `\"auto\"`, the popover width will be set to a static default value.": "ポップオーバーの幅を計算する方法を記述します。もし `\"cover\"` なら、ポップオーバーの幅はトリガーの幅に合わせます。auto\"` の場合、ポップオーバーの幅は静的なデフォルト値に設定されます。",
    "The text to display as the control's label. Use this over the `label` slot if you only need plain text. The `label` property will take priority over the `label` slot if both are used.": "コントロールのラベルとして表示するテキスト。プレーンテキストのみが必要な場合は `label` スロットよりもこちらを使用する。両方を使用する場合は、`label` プロパティが `label` スロットよりも優先される。",
    "If used in a form, set the name of the control, which is submitted with the form data.": "フォームで使用する場合は、フォーム・データと一緒に送信されるコントロールの名前を設定します。",
    "Sets focus on the native `input` in `ion-searchbar`. Use this method instead of the global `input.focus()`.  Developers who wish to focus an input when a page enters should call `setFocus()` in the `ionViewDidEnter()` lifecycle method.  Developers who wish to focus an input when an overlay is presented should call `setFocus` after `didPresent` has resolved.": "ion-searchbar` のネイティブ `input` にフォーカスを設定する。グローバルな `input.focus()` の代わりにこのメソッドを使用する。  ページ入力時に入力にフォーカスを当てたい開発者は、 `ionViewDidEnter()` ライフサイクルメソッド内で `setFocus()` を呼び出す必要がある。  オーバーレイが表示されたときに入力にフォーカスを当てたい開発者は、 `didPresent` が解決した後に `setFocus` を呼び出してください。",
    "Width of the select border": "セレクトボーダーの幅",
    "Style of the select border": "セレクトボーダーのスタイル",
    "The label text describing the select.": "セレクトを表すラベルテキスト。",
    "The color of the highlight on the select when focused": "フォーカス時のセレクトのハイライトの色",
    "The container for the selected text or placeholder.": "選択テキストまたはプレースホルダーのコンテナ。",
    "Color of the select border": "セレクトボーダーの色",
    "The color of the highlight on the select when invalid": "無効時のセレクトのハイライトの色",
    "The color of the highlight on the select when valid": "有効時のセレクトのハイライトの色",
    "The visible label associated with the select.  Use this if you need to render a plaintext label.  The `label` property will take priority over the `label` slot if both are used.": "セレクトに関連付けられた可視ラベル。  プレーンテキストのラベルをレンダリングする必要がある場合に使用する。  label`プロパティは `label` スロットよりも優先される。",
    "The label text to associate with the select. Use the `labelPlacement` property to control where the label is placed relative to the select. Use this if you need to render a label with custom HTML.": "セレクトに関連付けるラベルテキスト。labelPlacement`プロパティを使用して、selectに対するラベルの位置を制御します。ラベルをカスタムHTMLでレンダリングする必要がある場合に使用します。",
    "Radius of the select border. A large radius may display unevenly when using fill=\"outline\"; if needed, use shape=\"round\" instead or increase --padding-start.": "選択枠の半径。fill=\"outline \"を使う場合、半径が大きいと表示が不 均一になることがあります。",
    "The toggle icon to show when the select is open. If defined, the icon rotation behavior in `md` mode will be disabled. If undefined, `toggleIcon` will be used for when the select is both open and closed.": "セレクトが開いているときに表示するトグルアイコン。定義されている場合、`md`モードでのアイコン回転の動作は無効になる。未定義の場合、セレクトが開いているときも閉じているときも `toggleIcon` が使用される。",
    "The toggle icon to use. Defaults to `chevronExpand` for `ios` mode, or `caretDownSharp` for `md` mode.": "使用するトグルアイコン。デフォルトは `ios` モードの場合は `chevronExpand` で、`md` モードの場合は `caretDownSharp` である。",
    "Get a specific tab by the value of its `tab` property or an element reference. This method is only available for vanilla JavaScript projects. The Angular, React, and Vue implementations of tabs are coupled to each framework's router.": "特定のタブを `tab` プロパティの値または要素参照で取得する。このメソッドは vanilla JavaScript プロジェクトでのみ利用可能です。Angular、React、Vue のタブの実装は、それぞれのフレームワークのルータと結合しています。",
    "Get the currently selected tab. This method is only available for vanilla JavaScript projects. The Angular, React, and Vue implementations of tabs are coupled to each framework's router.": "現在選択されているタブを取得します。このメソッドは、バニラJavaScriptプロジェクトでのみ使用できます。Angular、React、Vueのタブの実装は、各フレームワークのルーターと結合しています。",
    "Select a tab by the value of its `tab` property or an element reference. This method is only available for vanilla JavaScript projects. The Angular, React, and Vue implementations of tabs are coupled to each framework's router.": "タブを `tab` プロパティの値または要素参照で選択する。このメソッドはバニラJavaScriptプロジェクトでのみ利用可能です。Angular、React、Vue のタブの実装は、それぞれのフレームワークのルータと結合しています。",
    "The label text to associate with the textarea. Use the `labelPlacement` property to control where the label is placed relative to the textarea. Use this if you need to render a label with custom HTML. (EXPERIMENTAL)": "テキストエリアに関連付けるラベルテキスト。labelPlacement`プロパティを使用して、textareaに対するラベルの位置を制御する。ラベルをカスタム HTML でレンダリングする必要がある場合に使用します。(実験的)",
    "The `ionChange` event is fired when the user modifies the textarea's value. Unlike the `ionInput` event, the `ionChange` event is fired when the element loses focus after its value has been modified.": "onChange` イベントは、ユーザが textarea の値を変更したときに発生する。ionInput` イベントとは異なり、`ionChange` イベントは値が変更された後に要素のフォーカスが外れたときに発生する。",
    "The visible label associated with the textarea.  Use this if you need to render a plaintext label.  The `label` property will take priority over the `label` slot if both are used.": "textareaに関連付けられた可視ラベル。  プレーンテキストのラベルをレンダリングする必要がある場合に使用する。  両方が使用されている場合、`label` プロパティが `label` スロットよりも優先される。",
    "The `ionInput` event is fired each time the user modifies the textarea's value. Unlike the `ionChange` event, the `ionInput` event is fired for each alteration to the textarea's value. This typically happens for each keystroke as the user types.  When `clearOnEdit` is enabled, the `ionInput` event will be fired when the user clears the textarea by performing a keydown event.": "ionInput` イベントは、ユーザが textarea の値を変更するたびに発生する。ionChange` イベントとは異なり、 `ionInput` イベントは textarea の値が変更されるたびに発生する。これは通常、ユーザがキーを入力するたびに発生する。  clearOnEdit` が有効な場合、ユーザが textarea をクリアするためにキーダウンを行うと、 `ionInput` イベントが発生する。",
    "Any button element with role \"cancel\" that is displayed inside of the toast.": "トーストの内側に表示される、\"cancel \"というロールを持つボタン要素。",
    "Where to place the label relative to the checkbox. `\"start\"`: The label will appear to the left of the checkbox in LTR and to the right in RTL. `\"end\"`: The label will appear to the right of the checkbox in LTR and to the left in RTL. `\"fixed\"`: The label has the same behavior as `\"start\"` except it also has a fixed width. Long text will be truncated with ellipses (\"...\"). `\"stacked\"`: The label will appear above the checkbox regardless of the direction. The alignment of the label can be controlled with the `alignment` property.": "チェックボックスに対するラベルの位置。start\"`：ラベルはLTRではチェックボックスの左に、RTLでは右に表示されます。end\"`：ラベルはLTRではチェックボックスの右、RTLでは左に表示されます。fixed\"`：ラベルの幅が固定される以外は `\"start\"` と同じ動作をします。長いテキストは省略記号(\"...\")で切り捨てられます。積み重ね\"`：ラベルは向きに関係なくチェックボックスの上に表示されます。ラベルの整列は `alignment` プロパティで制御できます。",
    "How to control the alignment of the checkbox and label on the cross axis. `\"start\"`: The label and control will appear on the left of the cross axis in LTR, and on the right side in RTL. `\"center\"`: The label and control will appear at the center of the cross axis in both LTR and RTL.": "横軸上のチェックボックスとラベルの配置を制御する方法。start\"`：ラベルとコントロールはLTRでは横軸の左側に、RTLでは右側に表示されます。center\"`：ラベルとコントロールはLTRでもRTLでも十字軸の中央に表示されます。",
    "The individual buttons that display a day inside of the datetime calendar.": "日付カレンダーの中に日を表示する個々のボタン。",
    "The calendar day that contains the current day.": "現在の日を含む暦日。",
    "The currently selected calendar day.": "現在選択されている暦日。",
    "The calendar day that is disabled.": "無効になる暦日。",
    "How to control the alignment of the radio and label on the cross axis. `\"start\"`: The label and control will appear on the left of the cross axis in LTR, and on the right side in RTL. `\"center\"`: The label and control will appear at the center of the cross axis in both LTR and RTL.": "ラジオとラベルの十字軸上の配置を制御する方法。start\"`：ラベルとコントロールはLTRでは横軸の左側に、RTLでは右側に表示されます。center\"`：ラベルとコントロールはLTRでもRTLでも十字軸の中央に表示されます。",
    "Where to place the label relative to the radio. `\"start\"`: The label will appear to the left of the radio in LTR and to the right in RTL. `\"end\"`: The label will appear to the right of the radio in LTR and to the left in RTL. `\"fixed\"`: The label has the same behavior as `\"start\"` except it also has a fixed width. Long text will be truncated with ellipses (\"...\"). `\"stacked\"`: The label will appear above the radio regardless of the direction. The alignment of the label can be controlled with the `alignment` property.": "ラジオに対してラベルを配置する位置。start\"`：ラベルはLTRではラジオの左に、RTLでは右に表示されます。end\"`：ラベルはLTRではラジオの右、RTLでは左に表示される。fixed\"`：ラベルの幅が固定される以外は `\"start\"` と同じ動作をします。長いテキストは省略記号(\"...\")で切り捨てられます。stacked\"`：ラベルは向きに関係なくラジオの上に表示されます。ラベルの整列は `alignment` プロパティで制御できます。",
    "Where to place the label relative to the range. `\"start\"`: The label will appear to the left of the range in LTR and to the right in RTL. `\"end\"`: The label will appear to the right of the range in LTR and to the left in RTL. `\"fixed\"`: The label has the same behavior as `\"start\"` except it also has a fixed width. Long text will be truncated with ellipses (\"...\"). `\"stacked\"`: The label will appear above the range regardless of the direction.": "範囲に対するラベルの位置。start\"`：ラベルはLTRでは範囲の左側、RTLでは右側に表示される。end\"`：ラベルはLTRでは範囲の右側、RTLでは左側に表示される。fixed\"`：ラベルの幅が固定される以外は `\"start\"` と同じ動作をします。長いテキストは省略記号(\"...\")で切り捨てられます。積み上げ\"`：ラベルは方向に関係なく範囲の上に表示されます。",
    "How to control the alignment of the toggle and label on the cross axis. ``\"start\"`: The label and control will appear on the left of the cross axis in LTR, and on the right side in RTL. `\"center\"`: The label and control will appear at the center of the cross axis in both LTR and RTL.": "十字軸上のトグルとラベルの配置を制御する方法。start\"`：ラベルとコントロールはLTRでは十字軸の左側に、RTLでは右側に表示されます。center\"`：ラベルとコントロールはLTRでもRTLでも十字軸の中央に表示されます。",
    "Where to place the label relative to the input. `\"start\"`: The label will appear to the left of the toggle in LTR and to the right in RTL. `\"end\"`: The label will appear to the right of the toggle in LTR and to the left in RTL. `\"fixed\"`: The label has the same behavior as `\"start\"` except it also has a fixed width. Long text will be truncated with ellipses (\"...\"). `\"stacked\"`: The label will appear above the toggle regardless of the direction. The alignment of the label can be controlled with the `alignment` property.": "入力に対するラベルの位置。start\"`：ラベルはLTRではトグルの左に、RTLでは右に表示されます。end\"`：ラベルはLTRではトグルの右、RTLでは左に表示されます。fixed\"`：ラベルの幅が固定される以外は `\"start\"` と同じ動作をします。長いテキストは省略記号(\"...\")で切り捨てられます。stacked\"`：ラベルは向きに関係なくトグルの上に表示されます。ラベルの整列は `alignment` プロパティで制御できます。",
    "The starting position of the toast on the screen. Can be tweaked further using the `positionAnchor` property.": "画面上のトーストの開始位置。positionAnchor`プロパティを使ってさらに微調整できる。",
    "The element to anchor the toast's position to. Can be set as a direct reference or the ID of the element. With `position=\"bottom\"`, the toast will sit above the chosen element. With `position=\"top\"`, the toast will sit below the chosen element. With `position=\"middle\"`, the value of `positionAnchor` is ignored.": "トーストの位置を固定する要素。直接参照するか、要素のIDを指定します。position=\"bottom\"`の場合、トーストは選択した要素の上に表示されます。position=\"top\"`の場合、トーストは選択した要素の下に位置します。position=\"middle\"`の場合、`positionAnchor`の値は無視される。"
  }
}