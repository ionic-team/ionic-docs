[
  {
    "packageName": "@awesome-cordova-plugins/abbyy-rtr",
    "displayName": "ABBYY Real-Time Recognition",
    "description": "\nThis plugin allows to use the Text Capture and Data Capture features of\nABBYY Real-Time Recognition SDK (RTR SDK) in apps.\n",
    "usage": "\n```typescript\nimport { AbbyyRTR } from '@awesome-cordova-plugins/abbyy-rtr/ngx';\n\n\nconstructor(private abbyyRTR: AbbyyRTR) { }\n\n...\n\n\nthis.abbyyRTR.startTextCapture(options)\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n\n\nthis.abbyyRTR.startDataCapture(options)\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/abbyysdk/RTR-SDK.Cordova",
    "cordovaPlugin": {
      "name": "cordova-plugin-abbyy-rtr-sdk"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/action-sheet",
    "displayName": "Action Sheet",
    "description": "\nThe ActionSheet plugin shows a native list of options the user can choose from.\n\nRequires Cordova plugin: `cordova-plugin-actionsheet`. For more info, please see the [ActionSheet plugin docs](https://github.com/EddyVerbruggen/cordova-plugin-actionsheet).\n",
    "usage": "\n```typescript\nimport { ActionSheet, ActionSheetOptions } from '@awesome-cordova-plugins/action-sheet/ngx';\n\nconstructor(private actionSheet: ActionSheet) { }\n\n...\n\n\nlet buttonLabels = ['Share via Facebook', 'Share via Twitter'];\n\nconst options: ActionSheetOptions = {\n  title: 'What do you want with this image?',\n  subtitle: 'Choose an action',\n  buttonLabels: buttonLabels,\n  addCancelButtonWithLabel: 'Cancel',\n  addDestructiveButtonWithLabel: 'Delete',\n  androidTheme: this.actionSheet.ANDROID_THEMES.THEME_HOLO_DARK,\n  destructiveButtonLast: true\n}\n\nthis.actionSheet.show(options).then((buttonIndex: number) => {\n  console.log('Button pressed: ' + buttonIndex);\n});\n```",
    "platforms": [
      "Android",
      "Browser",
      "iOS",
      "Windows",
      "Windows Phone 8"
    ],
    "repo": "https://github.com/EddyVerbruggen/cordova-plugin-actionsheet",
    "cordovaPlugin": {
      "name": "cordova-plugin-actionsheet"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/adjust",
    "displayName": "Adjust",
    "description": "\nThis is the Ionic Cordova SDK of Adjust™. You can read more about Adjust™ at adjust.com.\n\nRequires Cordova plugin: `com.adjust.sdk`. For more info, please see the [Adjust Cordova SDK](https://github.com/adjust/cordova_sdk)\n",
    "usage": "\n```typescript\n import { Adjust, AdjustConfig, AdjustEnvironment } from '@awesome-cordova-plugins/adjust/ngx';\n\n constructor(private adjust: Adjust) { }\n\n ...\n\n const config = new AdjustConfig('APP-TOKEN-HERE', AdjustEnvironment.Sandbox);\n config.logLevel = AdjustLogLevel.Verbose;\n // Set other config properties.\n adjust.create(config);\n\n```",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/adjust/cordova_sdk",
    "cordovaPlugin": {
      "name": "com.adjust.sdk"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/admob-plus",
    "displayName": "AdMob Plus",
    "description": "\nAdMob Plus is the successor of cordova-plugin-admob-free, which provides a cleaner API and build with modern tools.\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/admob-plus/admob-plus",
    "cordovaPlugin": {
      "name": "cordova-admob-plus"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/admob",
    "displayName": "AdMob",
    "description": "\nMost complete Admob plugin with support for [Tappx](http://www.tappx.com/?h=dec334d63287772de859bdb4e977fce6) ads.\nMonetize your apps and games with AdMob ads, using latest Google AdMob SDK. With this plugin you can show AdMob ads easily!\n\n**Supports:**\n- Banner ads (top and bottom)\n- Interstitial ads\n- Rewarded ads\n- [Tappx](http://www.tappx.com/?h=dec334d63287772de859bdb4e977fce6) ads\n",
    "usage": "\n**Note:** No ads will be served on apps with package name `io.ionic.starter`. This is the default package name for new `ionic` apps. Make sure to rename the package name so ads can be displayed.\n```typescript\nimport { Admob, AdmobOptions } from '@awesome-cordova-plugins/admob';\n\n\nconstructor(private admob: Admob) {\n    // Admob options config\n    const admobOptions: AdmobOptions = {\n      bannerAdId: 'XXX-XXXX-XXXX',\n      interstitialAdId: 'XXX-XXXX-XXXX',\n      rewardedAdId: 'XXX-XXXX-XXXX',\n      isTesting: true,\n      autoShowBanner: false,\n      autoShowInterstitial: false,\n      autoShowRewarded: false,\n      adSize: this.admob.AD_SIZE.BANNER\n    };\n\n    // Set admob options\n    this.admob.setOptions(admobOptions)\n      .then(() => console.log('Admob options have been successfully set'))\n      .catch(err => console.error('Error setting admob options:', err));\n}\n\n\n\n// (Optionally) Load banner ad, in order to have it ready to show\nthis.admob.createBannerView()\n  .then(() => console.log('Banner ad loaded'))\n  .catch(err => console.error('Error loading banner ad:', err));\n\n\n// Show banner ad (createBannerView must be called before and onAdLoaded() event raised)\nthis.admob.onAdLoaded().subscribe((ad) => {\n  if (ad.adType === this.admob.AD_TYPE.BANNER) {\n    this.admob.showBannerAd()\n      .then(() => console.log('Banner ad shown'))\n      .catch(err => console.error('Error showing banner ad:', err));\n  }\n});\n\n\n// Hide banner ad, but do not destroy it, so it can be shown later on\n// See destroyBannerView in order to hide and destroy banner ad\nthis.admob.showBannerAd(false)\n  .then(() => console.log('Banner ad hidden'))\n  .catch(err => console.error('Error hiding banner ad:', err));\n\n\n\n// Request an interstitial ad, in order to be shown later on\n// It is possible to autoshow it via options parameter, see docs\nthis.admob.requestInterstitialAd()\n  .then(() => console.log('Interstitial ad loaded'))\n  .catch(err => console.error('Error loading interstitial ad:', err));\n\n\n// Show an interstitial ad (requestInterstitialAd must be called before)\nthis.admob.onAdLoaded().subscribe((ad) => {\n  if (ad.adType === this.admob.AD_TYPE.INTERSTITIAL) {\n    this.admob.showInterstitialAd()\n      .then(() => console.log('Interstitial ad shown'))\n      .catch(err => console.error('Error showing interstitial ad:', err));\n  }\n});\n\n\n// Request a rewarded ad\nthis.admob.requestRewardedAd()\n  .then(() => console.log('Rewarded ad loaded'))\n  .catch(err => console.error('Error loading rewarded ad:', err));\n\n\n// Show rewarded ad (requestRewardedAd must be called before)\nthis.admob.onAdLoaded().subscribe((ad) => {\n  if (ad.adType === this.admob.AD_TYPE.REWARDED) {\n    this.admob.showRewardedAd()\n      .then(() => console.log('Rewarded ad shown'))\n      .catch(err => console.error('Error showing rewarded ad:', err));\n  }\n});\n\n\n// Hide and destroy banner or interstitial ad\nthis.admob.destroyBannerView()\n  .then(() => console.log('Banner or interstitial ad destroyed'))\n  .catch(err => console.error('Error destroying banner or interstitial ad:', err));\n\n\n\n// On Ad loaded event\nthis.admob.onAdLoaded().subscribe((ad) => {\n  if (ad.adType === this.admob.AD_TYPE.BANNER) {\n    console.log('Banner ad is loaded');\n    this.admob.showBannerAd();\n  } else if (ad.adType === this.admob.AD_TYPE.INTERSTITIAL) {\n    console.log('Interstitial ad is loaded');\n    this.admob.showInterstitialAd();\n  } else if (ad.adType === this.admob.AD_TYPE.REWARDED) {\n    console.log('Rewarded ad is loaded');\n    this.admob.showRewardedAd();\n  }\n});\n\n\n\n// On ad failed to load\nthis.admob.onAdFailedToLoad().subscribe(err => console.log('Error loading ad:', err));\n\n\n\n// On interstitial ad opened\nthis.admob.onAdOpened().subscribe(() => console.log('Interstitial ad opened'));\n\n\n\n// On interstitial ad closed\nthis.admob.onAdClosed().subscribe(() => console.log('Interstitial ad closed'));\n\n\n\n// On ad clicked and left application\nthis.admob.onAdLeftApplication().subscribe(() => console.log('Ad lefted application'));\n\n\n\n// On user ad rewarded\nthis.admob.onRewardedAd().subscribe(() => console.log('The user has been rewarded'));\n\n\n\n// On rewarded ad video started\nthis.admob.onRewardedAdVideoStarted().subscribe(() => console.log('Rewarded ad vieo started'));\n\n\n\n// On rewarded ad video completed\nthis.admob.onRewardedAdVideoCompleted().subscribe(() => console.log('Rewarded ad video completed'));\n\n```\n",
    "platforms": [
      "Android",
      "iOS",
      "Browser"
    ],
    "repo": "https://github.com/appfeel/admob-google-cordova",
    "cordovaPlugin": {
      "name": "cordova-admob"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/aes-256",
    "displayName": "AES256",
    "description": "\nThis cordova ionic plugin allows you to perform AES 256 encryption and decryption on the plain text.\nIt's a cross-platform plugin which supports both Android and iOS.\nThe encryption and decryption are performed on the device native layer so that the performance is much faster.\n",
    "usage": "\n```typescript\nimport { AES256 } from '@awesome-cordova-plugins/aes-256/ngx';\n\nprivate secureKey: string;\nprivate secureIV: string;\n\nconstructor(private aes256: AES256) {\n   this.generateSecureKeyAndIV(); // To generate the random secureKey and secureIV\n}\n\n...\n\nasync generateSecureKeyAndIV() {\n   this.secureKey = await this.aes256.generateSecureKey('random password 12345'); // Returns a 32 bytes string\n   this.secureIV = await this.aes256.generateSecureIV('random password 12345'); // Returns a 16 bytes string\n}\n\nthis.aes256.encrypt(this.secureKey, this.secureIV, 'testdata')\n  .then(res => console.log('Encrypted Data: ',res))\n  .catch((error: any) => console.error(error));\n\nthis.aes256.decrypt(this.secureKey, this.secureIV, 'encryptedData')\n  .then(res => console.log('Decrypted Data : ',res))\n  .catch((error: any) => console.error(error));\n\n\n* this.aes256.generateSecureKey('random password 12345')\n  .then(res => console.log('Secure Key : ',res))\n  .catch((error: any) => console.error(error));\n\n\n* this.aes256.generateSecureIV('random password 12345')\n  .then(res => console.log('Secure IV : ',res))\n  .catch((error: any) => console.error(error));\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/Ideas2IT/cordova-aes256",
    "cordovaPlugin": {
      "name": "cordova-plugin-aes256-encryption"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/all-in-one-sdk",
    "displayName": "AllInOneSDK",
    "description": "\nPaytm All-in-One SDK plugin for Cordova/Ionic Applications\nPaytm All-in-One SDK provides a swift, secure and seamless payment experience to your users by invoking the Paytm app (if installed on your user’s smartphone) to complete payment for your order.\nPaytm All-in-One SDK enables payment acceptance via Paytm wallet, Paytm Payments Bank, saved Debit/Credit cards, Net Banking, BHIM UPI and EMI as available in your customer’s Paytm account. If Paytm app is not installed on a customer's device, the transaction will be processed via web view within the All-in-One SDK.\nFor more information about Paytm All-in-One SDK, please visit https://developer.paytm.com/docs/all-in-one-sdk/hybrid-apps/cordova/\n",
    "usage": "\n```typescript\nimport { AllInOneSDK } from '@awesome-cordova-plugins/all-in-one-sdk/ngx';\n\n\nconstructor(private allInOneSDK: AllInOneSDK) { }\n\n...\n\nFor below parameters see [documentation](https://developer.paytm.com/docs/all-in-one-sdk/hybrid-apps/cordova/)\nlet paymentIntent = { mid : merchantID, orderId: orderId, txnToken: transactionToken, amount: amount, isStaging: isStaging, callbackUrl:callBackURL,  restrictAppInvoke:restrictAppInvoke  }\n\nthis.allInOneSDK.startTransaction(paymentIntent)\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n\n```\n\nFor iOS:\nAfter adding the plugin, open the iOS project, you can find the same at <projectName>/platforms/ios.\nIn case merchant don’t have callback URL, Add an entry into Info.plist LSApplicationQueriesSchemes(Array) Item 0 (String)-> paytm\nAdd a URL Scheme “paytm”+”MID”\n\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/paytm/paytm-allinonesdk-ionic-cordova.git",
    "cordovaPlugin": {
      "name": "cordova-paytm-allinonesdk"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/analytics-firebase",
    "displayName": "Analytics Firebase",
    "description": "\nGoogle Analytics Firebase plugin for Ionic Native apps.\n",
    "usage": "\n```typescript\nimport { AnalyticsFirebase } from '@awesome-cordova-plugins/analytics-firebase';\n\n\nconstructor(private analyticsFirebase: AnalyticsFirebase) { }\n\n// Track an event with default events and params\nconst eventParams = {};\neventParams[this.analyticsFirebase.DEFAULT_PARAMS.LEVEL] = 29;\nthis.analyticsFirebase.logEvent(this.analyticsFirebase.DEFAULT_EVENTS.LEVEL_UP, eventParams)\n  .then(() => console.log('Event successfully tracked'))\n  .catch(err => console.log('Error tracking event:', err));\n\n// Track an event with custom events and params\nconst eventParams = {};\neventParams['my-prop'] = 29;\nthis.analyticsFirebase.logEvent('my-event', eventParams)\n  .then(() => console.log('Event successfully tracked'))\n  .catch(err => console.log('Error tracking event:', err));\n\n\n// Reset analytics data\nthis.analyticsFirebase.resetAnalyticsData()\n  .then(() => console.log('Analytics data have been reset'))\n  .catch(err => console.log('Error resetting analytics data:', err));\n\n\n// Track a screen view\nthis.analyticsFirebase.setCurrentScreen('Home')\n  .then(() => console.log('View successfully tracked'))\n  .catch(err => console.log('Error tracking view:', err));\n\n\n// Set user id\nthis.analyticsFirebase.setUserId('USER-ID')\n  .then(() => console.log('User id successfully set'))\n  .catch(err => console.log('Error setting user id:', err));\n\n\n// Set user property from default properties\nthis.analyticsFirebase.setUserProperty('KEY', 'VALUE')\n  .then(() => console.log('User property successfully set'))\n  .catch(err => console.log('Error setting user property:', err));\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/appfeel/analytics-google",
    "cordovaPlugin": {
      "name": "cordova-plugin-analytics"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/android-exoplayer",
    "displayName": "Android ExoPlayer",
    "description": "\nCordova media player plugin using Google's ExoPlayer framework.\n\nhttps://github.com/google/ExoPlayer\n",
    "usage": "\n```typescript\nimport { AndroidExoPlayer } from '@awesome-cordova-plugins/android-exoplayer/ngx';\n\nconstructor(private androidExoPlayer: AndroidExoPlayer) { }\n\n...\n\nthis.androidExoPlayer.show({url: 'http://www.youtube.com/api/manifest/dash/id/bf5bb2419360daf1/source/youtube'});\n\n```\n",
    "platforms": [
      "Android"
    ],
    "repo": "https://github.com/frontyard/cordova-plugin-exoplayer",
    "cordovaPlugin": {
      "name": "cordova-plugin-exoplayer"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/android-full-screen",
    "displayName": "Android Full Screen",
    "description": "\nThis plugin enables developers to offer users a true full screen experience in their Cordova and PhoneGap apps for Android.\nUsing Android 4.0+, you can use true full screen in \"lean mode\", the way you see in apps like YouTube, expanding the app right to the edges of the screen, hiding the status and navigation bars until the user next interacts. This is ideally suited to video or cut-scene content.\nIn Android 4.4+, however, you can now enter true full screen, fully interactive immersive mode. In this mode, your app will remain in true full screen until you choose otherwise; users can swipe down from the top of the screen to temporarily display the system UI.",
    "usage": "\n```typescript\nimport { AndroidFullScreen } from '@awesome-cordova-plugins/android-full-screen/ngx';\n\nconstructor(private androidFullScreen: AndroidFullScreen) { }\n\n...\n\nthis.androidFullScreen.isImmersiveModeSupported()\n  .then(() => console.log('Immersive mode supported'))\n  .catch(err => console.log(err));\n\n```\n",
    "platforms": [
      "Android"
    ],
    "repo": "https://github.com/mesmotronic/cordova-plugin-fullscreen",
    "cordovaPlugin": {
      "name": "cordova-plugin-fullscreen"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/android-notch",
    "displayName": "Android Notch",
    "description": "\nThis plugin enables developers to get the cutout and android devices inset sizes\nIt is based on the cordova plugin developed by @tobspr: https://github.com/tobspr/cordova-plugin-android-notch\nThis plugin works on all android versions, but we can only detect notches starting from Android 9.\n",
    "usage": "\n```typescript\nimport { AndroidNotch } from '@awesome-cordova-plugins/android-notch/ngx';\n\n\nconstructor(private androidNotch: AndroidNotch) { }\n\n...\n\n\nthis.androidNotch.hasCutout()\n   .then((px: number) => console.log('Inset size: '), px)\n   .catch((error: any) => console.log('Error: ', error))\n\nthis.androidNotch.getInsetTop()\n   .then((px: number) => console.log('Inset size: '), px)\n   .catch((error: any) => console.log('Error: ', error))\n\nthis.androidNotch.getInsetRight()\n   .then((px: number) => console.log('Inset size: '), px)\n   .catch((error: any) => console.log('Error: ', error))\n\nthis.androidNotch.getInsetBottom()\n   .then((px: number) => console.log('Inset size: '), px)\n   .catch((error: any) => console.log('Error: ', error))\n\nthis.androidNotch.getInsetLeft()\n   .then((px: number) => console.log('Inset size: '), px)\n   .catch((error: any) => console.log('Error: ', error))\n\n```\n",
    "platforms": [
      "Android"
    ],
    "repo": "https://github.com/tobspr/cordova-plugin-android-notch.git",
    "cordovaPlugin": {
      "name": "cordova-plugin-android-notch"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/android-permissions",
    "displayName": "Android Permissions",
    "description": "\nThis plugin is designed to support Android new permissions checking mechanism.\n\nYou can find all permissions here: https://developer.android.com/reference/android/Manifest.permission.html\n",
    "usage": "\n```\nimport { AndroidPermissions } from '@awesome-cordova-plugins/android-permissions/ngx';\n\n\nconstructor(private androidPermissions: AndroidPermissions) { }\n\n...\n\nthis.androidPermissions.checkPermission(this.androidPermissions.PERMISSION.CAMERA).then(\n  result => console.log('Has permission?',result.hasPermission),\n  err => this.androidPermissions.requestPermission(this.androidPermissions.PERMISSION.CAMERA)\n);\n\nthis.androidPermissions.requestPermissions([this.androidPermissions.PERMISSION.CAMERA, this.androidPermissions.PERMISSION.GET_ACCOUNTS]);\n\n```\n\nAndroid 26 and above: due to Android 26's changes to permissions handling (permissions are requested at time of use rather than at runtime,) if your app does not include any functions (eg. other Ionic Native plugins) that utilize a particular permission, then `requestPermission()` and `requestPermissions()` will resolve immediately with no prompt shown to the user.  Thus, you must include a function utilizing the feature you would like to use before requesting permission for it.\n",
    "platforms": [
      "Android"
    ],
    "repo": "https://github.com/NeoLSN/cordova-plugin-android-permissions",
    "cordovaPlugin": {
      "name": "cordova-plugin-android-permissions"
    },
    "premierSlug": "android-permissions"
  },
  {
    "packageName": "@awesome-cordova-plugins/anyline",
    "displayName": "Anyline",
    "description": "\nAnyline provides an easy-to-use SDK for applications to enable Optical Character Recognition (OCR) on mobile devices.\n",
    "usage": "\n```typescript\nimport { Anyline } from '@awesome-cordova-plugins/anyline/ngx';\n\n\nconstructor(private anyline: Anyline) { }\n\n...\n\n\nthis.anyline.scan(options)\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/Anyline/anyline-ocr-cordova-module",
    "cordovaPlugin": {
      "name": "io-anyline-cordova"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/app-availability",
    "displayName": "App Availability",
    "description": "\nThis plugin allows you to check if an app is installed on the user's device. It requires an URI Scheme (e.g. twitter://) on iOS or a Package Name (e.g com.twitter.android) on Android.\n\nRequires Cordova plugin: cordova-plugin-appavailability. For more info, please see the [AppAvailability plugin docs](https://github.com/ohh2ahh/AppAvailability).\n",
    "usage": "\n```typescript\nimport { AppAvailability } from '@awesome-cordova-plugins/app-availability/ngx';\nimport { Platform } from 'ionic-angular';\n\nconstructor(private appAvailability: AppAvailability, private platform: Platform) { }\n\n...\n\nlet app;\n\nif (this.platform.is('ios')) {\n  app = 'twitter://';\n} else if (this.platform.is('android')) {\n  app = 'com.twitter.android';\n}\n\nthis.appAvailability.check(app)\n  .then(\n    (yes: boolean) => console.log(app + ' is available'),\n    (no: boolean) => console.log(app + ' is NOT available')\n  );\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/ohh2ahh/AppAvailability",
    "cordovaPlugin": {
      "name": "cordova-plugin-appavailability"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/app-center-analytics",
    "displayName": "App Center Analytics",
    "description": "\nApp Center Analytics helps you understand user behavior and customer engagement to improve your app.\nThe SDK automatically captures session count and device properties like model, OS version, etc.\nYou can define your own custom events to measure things that matter to you.\nAll the information captured is available in the App Center portal for you to analyze the data.\n\nFor more info, please see https://docs.microsoft.com/en-us/appcenter/sdk/analytics/cordova\n",
    "usage": "\n```typescript\nimport { AppCenterAnalytics } from '@awesome-cordova-plugins/app-center-analytics/ngx';\n\n\nconstructor(private appCenterAnalytics: AppCenterAnalytics) { }\n\n...\n\nthis.appCenterAnalytics.setEnabled(true).then(() => {\n   this.appCenterAnalytics.trackEvent('My Event', { TEST: 'HELLO_WORLD' }).then(() => {\n       console.log('Custom event tracked');\n   });\n});\n\n```",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/Microsoft/appcenter-sdk-cordova/tree/master/cordova-plugin-appcenter-analytics",
    "cordovaPlugin": {
      "name": "cordova-plugin-appcenter-analytics"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/app-center-crashes",
    "displayName": "App Center Crashes",
    "description": "\nApp Center Analytics helps you understand user behavior and customer engagement to improve your app.\nThe SDK automatically captures session count and device properties like model, OS version, etc.\nYou can define your own custom events to measure things that matter to you.\nAll the information captured is available in the App Center portal for you to analyze the data.\n\nFor more info, please see https://docs.microsoft.com/en-us/appcenter/sdk/crashes/cordova\n",
    "usage": "\n```typescript\nimport { AppCenterCrashes } from '@awesome-cordova-plugins/app-center-crashes/ngx';\n\n\nconstructor(private AppCenterCrashes: AppCenterCrashes) { }\n\n...\n\nthis.AppCenterCrashes.setEnabled(true).then(() => {\n   this.AppCenterCrashes.lastSessionCrashReport().then(report => {\n       console.log('Crash report', report);\n   });\n});\n\n```",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/Microsoft/appcenter-sdk-cordova/tree/master/cordova-plugin-appcenter-crashes",
    "cordovaPlugin": {
      "name": "cordova-plugin-appcenter-crashes"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/app-center-low-memory",
    "displayName": "App Center Low Memory",
    "description": "\nGenerates a low memory warning.\nFor more info, please see: https://github.com/Microsoft/appcenter-sdk-cordova/tree/master/cordova-plugin-appcenter-generate-low-memory\n",
    "usage": "\n```typescript\nimport { LowMemory } from '@awesome-cordova-plugins/app-center-low-memory/ngx';\n\n...\n\nconstructor(private lowMemory: LowMemory) { }\n\nasync warning() {\n  await this.lowMemory.generateLowMemory();\n}\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/Microsoft/appcenter-sdk-cordova/tree/master/cordova-plugin-appcenter-generate-low-memory",
    "cordovaPlugin": {
      "name": "https://github.com/Microsoft/appcenter-sdk-cordova/tree/master/cordova-plugin-appcenter-generate-low-memory"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/app-center-push",
    "displayName": "App Center Push",
    "description": "\n\nFor more info, please see https://docs.microsoft.com/en-us/appcenter/sdk/push/cordova\n",
    "usage": "\n```typescript\nimport { AppCenterPush } from '@awesome-cordova-plugins/app-center-push/ngx';\n\n\nconstructor(private appCenterPush: AppCenterPush) { }\n\n...\n\nthis.appCenterPush.setEnabled(true).then(() => {\n   this.appCenterPush.addEventListener('My Event').subscribe(pushNotification => {\n       console.log('Recived push notification', pushNotification);\n   });\n});\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/Microsoft/appcenter-sdk-cordova/tree/master/cordova-plugin-appcenter-push",
    "cordovaPlugin": {
      "name": "cordova-plugin-appcenter-push"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/app-preferences",
    "displayName": "App Preferences",
    "description": "\nThis plugin allows you to read and write app preferences\n",
    "usage": "\n```typescript\nimport { AppPreferences } from '@awesome-cordova-plugins/app-preferences/ngx';\n\nconstructor(private appPreferences: AppPreferences) { }\n\n...\n\nthis.appPreferences.fetch('key').then((res) => { console.log(res); });\n\n```\n\n",
    "platforms": [
      "Android",
      "BlackBerry 10",
      "Browser",
      "iOS",
      "macOS",
      "Windows 8",
      "Windows Phone"
    ],
    "repo": "https://github.com/apla/me.apla.cordova.app-preferences",
    "cordovaPlugin": {
      "name": "cordova-plugin-app-preferences"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/app-rate",
    "displayName": "App Rate",
    "description": "\nThe AppRate plugin makes it easy to prompt the user to rate your app, either now, later, or never.\n\nRequires Cordova plugin: cordova-plugin-apprate. For more info, please see the [AppRate plugin docs](https://github.com/pushandplay/cordova-plugin-apprate).\n",
    "usage": "\n```typescript\nimport { AppRate } from '@awesome-cordova-plugins/app-rate/ngx';\n\nconstructor(private appRate: AppRate) { }\n\n...\n// set certain preferences\nthis.appRate.setPreferences({\n  storeAppURL: {\n    ios: '<app_id>',\n    android: 'market://details?id=<package_name>',\n    windows: 'ms-windows-store://review/?ProductId=<store_id>'\n  }\n});\n\nthis.appRate.promptForRating(true);\n\n// or, override the whole preferences object\nthis.appRate.setPreferences({\n  usesUntilPrompt: 3,\n  storeAppURL: {\n   ios: '<app_id>',\n   android: 'market://details?id=<package_name>',\n   windows: 'ms-windows-store://review/?ProductId=<store_id>'\n  }\n});\n\nthis.appRate.promptForRating(false);\n```\n",
    "platforms": [
      "Android",
      "BlackBerry 10",
      "iOS",
      "Windows"
    ],
    "repo": "https://github.com/pushandplay/cordova-plugin-apprate",
    "cordovaPlugin": {
      "name": "cordova-plugin-apprate"
    },
    "premierSlug": "app-rate"
  },
  {
    "packageName": "@awesome-cordova-plugins/app-version",
    "displayName": "App Version",
    "description": "\nReads the version of your app from the target build settings.\n\nRequires Cordova plugin: `cordova-plugin-app-version`. For more info, please see the [Cordova App Version docs](https://github.com/whiteoctober/cordova-plugin-app-version).\n",
    "usage": "\n```typescript\nimport { AppVersion } from '@awesome-cordova-plugins/app-version/ngx';\n\nconstructor(private appVersion: AppVersion) { }\n\n...\n\n\nthis.appVersion.getAppName();\nthis.appVersion.getPackageName();\nthis.appVersion.getVersionCode();\nthis.appVersion.getVersionNumber();\n\n```\n",
    "platforms": [
      "Android",
      "iOS",
      "Windows"
    ],
    "repo": "https://github.com/whiteoctober/cordova-plugin-app-version",
    "cordovaPlugin": {
      "name": "cordova-plugin-app-version"
    },
    "premierSlug": "app-version"
  },
  {
    "packageName": "@awesome-cordova-plugins/apple-wallet",
    "displayName": "Apple Wallet",
    "description": "\nA Cordova plugin that enables users from Add Payment Cards to their Apple Wallet.\n",
    "usage": "\n```typescript\nimport { AppleWallet } from '@awesome-cordova-plugins/apple-wallet/ngx';\n\n\nconstructor(private appleWallet: AppleWallet) { }\n\n\n...\n\n\n// Simple call to determine if the current device supports Apple Pay and has a supported card installed.\nthis.appleWallet.isAvailable()\n .then((res: boolean) => {\n   // Expect res to be boolean\n  })\n .catch((err) => {\n   // Catch {{err}} here\n });\n\n...\n\n\n// Simple call to check Card Eligibility\nthis.appleWallet.checkCardEligibility(primaryAccountIdentifier: string)\n .then((res: boolean) => {\n   // Expect res to be boolean\n  })\n .catch((err) => {\n   // Catch {{err}} here\n });\n\n\n...\n\n\n// Simple call to checkCardEligibilityBySuffix\nthis.appleWallet.checkCardEligibilityBySuffix(cardSuffix: string)\n .then((res: boolean) => {\n   // Expect res to be boolean\n  })\n .catch((err) => {\n   // Catch {{err}} here\n });\n\n\n...\n\n// Simple call to check out if there is any paired Watches so that you can toggle visibility of 'Add to Watch' button\nthis.appleWallet.checkPairedDevices()\n .then((res: WatchExistData) => {\n   // object contains boolean flags showing paired devices\n  })\n .catch((err) => {\n   // Catch {{err}} here\n });\n\n\n...\n\n\n\n// Simple call to check paired devices with a card by its suffix\nthis.appleWallet.checkPairedDevicesBySuffix(cardSuffix: string)\n .then((res: PairedDevicesFlags) => {\n   // object contains boolean values that ensure that card is already exists in wallet or paired-watch\n  })\n .catch((err) => {\n   // Catch {{err}} here\n });\n\n\n...\n\n\n// Simple call with the configuration data needed to instantiate a new PKAddPaymentPassViewController object.\n// This method provides the data needed to create a request to add your payment pass (credit/debit card). After a successful callback, pass the certificate chain to your issuer server-side using our callback delegate method `AppleWallet.completeAddPaymentPass`. The issuer server-side should returns an encrypted JSON payload containing the encrypted card data, which is required to be get the final response\n\nthis.appleWallet.startAddPaymentPass(data: cardData)\n .then((res: SignatureCertificatesData) => {\n   // User proceed and successfully asked to add card to his wallet\n   // Use the callback response JSON payload to complete addition process\n  })\n .catch((err) => {\n   // Catch {{err}} here\n });\n\n\n...\n\n\nthis.appleWallet.completeAddPaymentPass(data: encryptedCardData)\n .then((res: string) => {\n   // Expect res to be string either 'success' or 'error'\n  })\n .catch((err) => {\n   // Catch {{err}} here\n   // Error and can not add the card, or something wrong happend\n   // PKAddPaymentPassViewController will be dismissed\n });\n\n```",
    "platforms": [
      "iOS"
    ],
    "repo": "https://github.com/tomavic/cordova-apple-wallet",
    "cordovaPlugin": {
      "name": "cordova-apple-wallet"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/appsflyer",
    "displayName": "Appsflyer",
    "description": "\nAppsflyer Cordova SDK support for Attribution\n",
    "usage": "\n```typescript\nimport { Appsflyer } from '@awesome-cordova-plugins/appsflyer/ngx';\n\n\nconstructor(private appsflyer: Appsflyer) { }\n\n...\n\n\nthis.appsflyer.initSdk(options);\n\n```\n",
    "platforms": [
      "iOS",
      "Android"
    ],
    "repo": "https://github.com/AppsFlyerSDK/cordova-plugin-appsflyer-sdk",
    "cordovaPlugin": {
      "name": "cordova-plugin-appsflyer-sdk"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/background-fetch",
    "displayName": "Background Fetch",
    "description": "\niOS Background Fetch Implementation. See: https://developer.apple.com/reference/uikit/uiapplication#1657399\niOS Background Fetch is basically an API which wakes up your app about every 15 minutes (during the user's prime-time hours) and provides your app exactly 30s of background running-time. This plugin will execute your provided callbackFn whenever a background-fetch event occurs. There is no way to increase the rate which a fetch-event occurs and this plugin sets the rate to the most frequent possible value of UIApplicationBackgroundFetchIntervalMinimum -- iOS determines the rate automatically based upon device usage and time-of-day (ie: fetch-rate is about ~15min during prime-time hours; less frequently when the user is presumed to be sleeping, at 3am for example).\nFor more detail, please see https://github.com/transistorsoft/cordova-plugin-background-fetch\n",
    "usage": "\n\n```typescript\nimport { BackgroundFetch, BackgroundFetchConfig } from '@awesome-cordova-plugins/background-fetch/ngx';\n\n\nconstructor(private backgroundFetch: BackgroundFetch) {\n\n  const config: BackgroundFetchConfig = {\n    stopOnTerminate: false, // Set true to cease background-fetch from operating after user \"closes\" the app. Defaults to true.\n  }\n\n  backgroundFetch.configure(config)\n     .then(() => {\n         console.log('Background Fetch initialized');\n\n         this.backgroundFetch.finish();\n\n     })\n     .catch(e => console.log('Error initializing background fetch', e));\n\n  // Start the background-fetch API. Your callbackFn provided to #configure will be executed each time a background-fetch event occurs. NOTE the #configure method automatically calls #start. You do not have to call this method after you #configure the plugin\n  backgroundFetch.start();\n\n  // Stop the background-fetch API from firing fetch events. Your callbackFn provided to #configure will no longer be executed.\n  backgroundFetch.stop();\n\n\n}\n\n```",
    "platforms": [
      "iOS"
    ],
    "repo": "https://github.com/transistorsoft/cordova-plugin-background-fetch",
    "cordovaPlugin": {
      "name": "cordova-plugin-background-fetch"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/background-geolocation",
    "displayName": "Background Geolocation",
    "description": "\nThis plugin provides foreground and background geolocation with battery-saving \"circular region monitoring\" and \"stop detection\". For\nmore detail, please see https://github.com/mauron85/cordova-plugin-background-geolocation\n",
    "usage": "\n\nBackgroundGeolocation must be called within app.ts and or before Geolocation. Otherwise the platform will not ask you for background tracking permission.\n\n```typescript\nimport { BackgroundGeolocation, BackgroundGeolocationConfig, BackgroundGeolocationEvents, BackgroundGeolocationResponse } from '@awesome-cordova-plugins/background-geolocation/ngx';\n\nconstructor(private backgroundGeolocation: BackgroundGeolocation) { }\n\n...\n\nconst config: BackgroundGeolocationConfig = {\n            desiredAccuracy: 10,\n            stationaryRadius: 20,\n            distanceFilter: 30,\n            debug: true, //  enable this hear sounds for background-geolocation life-cycle.\n            stopOnTerminate: false, // enable this to clear background location settings when the app terminates\n    };\n\nthis.backgroundGeolocation.configure(config)\n  .then(() => {\n\n    this.backgroundGeolocation.on(BackgroundGeolocationEvents.location).subscribe((location: BackgroundGeolocationResponse) => {\n      console.log(location);\n\n      // IMPORTANT:  You must execute the finish method here to inform the native plugin that you're finished,\n      // and the background-task may be completed.  You must do this regardless if your operations are successful or not.\n      // IF YOU DON'T, ios will CRASH YOUR APP for spending too much time in the background.\n      this.backgroundGeolocation.finish(); // FOR IOS ONLY\n    });\n\n  });\n\n// start recording location\nthis.backgroundGeolocation.start();\n\n// If you wish to turn OFF background-tracking, call the #stop method.\nthis.backgroundGeolocation.stop();\n\n```",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/mauron85/cordova-plugin-background-geolocation",
    "cordovaPlugin": {
      "name": "@mauron85/cordova-plugin-background-geolocation"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/background-mode",
    "displayName": "Background Mode",
    "description": "\nCordova plugin to prevent the app from going to sleep while in background.\nRequires Cordova plugin: cordova-plugin-background-mode. For more info about plugin, visit: https://github.com/katzer/cordova-plugin-background-mode",
    "usage": "\n```typescript\nimport { BackgroundMode } from '@awesome-cordova-plugins/background-mode/ngx';\n\nconstructor(private backgroundMode: BackgroundMode) { }\n\n...\n\nthis.backgroundMode.enable();\n```\n",
    "platforms": [
      "AmazonFire OS",
      "Android",
      "Browser",
      "iOS",
      "Windows"
    ],
    "repo": "https://github.com/katzer/cordova-plugin-background-mode",
    "cordovaPlugin": {
      "name": "cordova-plugin-background-mode"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/background-upload",
    "displayName": "BackgroundUpload",
    "description": "\nThis plugin does something\n",
    "usage": "\n```typescript\nimport { BackgroundUpload } from '@awesome-cordova-plugins/background-upload/ngx';\n\n\nconstructor(private backgroundUpload: BackgroundUpload) { }\n\n...\n\n\nthis.backgroundUpload.init({})\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/spoonconsulting/cordova-plugin-background-upload",
    "cordovaPlugin": {
      "name": "cordova-plugin-background-upload"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/badge",
    "displayName": "Badge",
    "description": "\nThe essential purpose of badge numbers is to enable an application to inform its users that it has something for them — for example, unread messages — when the application isn’t running in the foreground.\n\nRequires Cordova plugin: cordova-plugin-badge. For more info, please see the [Badge plugin docs](https://github.com/katzer/cordova-plugin-badge).\n\nAndroid Note: Badges have historically only been a feature implemented by third party launchers and not visible unless one of those launchers was being used (E.G. Samsung or Nova Launcher) and if enabled by the user. As of Android 8 (Oreo), [notification badges](https://developer.android.com/training/notify-user/badges) were introduced officially to reflect unread notifications. This plugin is unlikely to work as expected on devices running Android 8 or newer. Please see the [local notifications plugin docs](https://github.com/katzer/cordova-plugin-local-notifications) for more information on badge use with notifications.\n",
    "usage": "\n```typescript\nimport { Badge } from '@awesome-cordova-plugins/badge/ngx';\n\nconstructor(private badge: Badge) { }\n\n...\n\nthis.badge.set(10);\nthis.badge.increase(1);\nthis.badge.clear();\n```\n",
    "platforms": [
      "Android",
      "Browser",
      "iOS",
      "Windows"
    ],
    "repo": "https://github.com/katzer/cordova-plugin-badge",
    "cordovaPlugin": {
      "name": "cordova-plugin-badge"
    },
    "premierSlug": "badge"
  },
  {
    "packageName": "@awesome-cordova-plugins/barcode-scanner",
    "displayName": "Barcode Scanner",
    "description": "\nThe Barcode Scanner Plugin opens a camera view and automatically scans a barcode, returning the data back to you.\n\nRequires Cordova plugin: `phonegap-plugin-barcodescanner`. For more info, please see the [BarcodeScanner plugin docs](https://github.com/phonegap/phonegap-plugin-barcodescanner).\n",
    "usage": "\n```typescript\nimport { BarcodeScanner } from '@awesome-cordova-plugins/barcode-scanner/ngx';\n\nconstructor(private barcodeScanner: BarcodeScanner) { }\n\n...\n\n\nthis.barcodeScanner.scan().then(barcodeData => {\n console.log('Barcode data', barcodeData);\n}).catch(err => {\n\tconsole.log('Error', err);\n});\n```",
    "platforms": [
      "Android",
      "BlackBerry 10",
      "Browser",
      "iOS",
      "Windows"
    ],
    "repo": "https://github.com/phonegap/phonegap-plugin-barcodescanner",
    "cordovaPlugin": {
      "name": "phonegap-plugin-barcodescanner"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/battery-status",
    "displayName": "Battery Status",
    "description": "\nRequires Cordova plugin: cordova-plugin-batterystatus. For more info, please see the [BatteryStatus plugin docs](https://github.com/apache/cordova-plugin-battery-status).\n",
    "usage": "\n```typescript\nimport { BatteryStatus } from '@awesome-cordova-plugins/battery-status/ngx';\n\nconstructor(private batteryStatus: BatteryStatus) { }\n\n...\n\n\n// watch change in battery status\nconst subscription = this.batteryStatus.onChange().subscribe(status => {\n   console.log(status.level, status.isPlugged);\n});\n\n// stop watch\nsubscription.unsubscribe();\n\n```",
    "platforms": [
      "iOS",
      "Android",
      "Windows",
      "Browser"
    ],
    "repo": "https://github.com/apache/cordova-plugin-battery-status",
    "cordovaPlugin": {
      "name": "cordova-plugin-battery-status"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/biocatch",
    "displayName": "BioCatch",
    "description": "\nBioCatch SDK Cordova support\n",
    "usage": "\n```typescript\nimport { BioCatch } from '@awesome-cordova-plugins/biocatch';\n\n\nconstructor(private biocatch: BioCatch) { }\n\n...\n\n\nthis.biocatch.start('customer-session-1', 'http://example.com', 'some-public-key')\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n\n```\n",
    "platforms": [
      "iOS",
      "Android"
    ],
    "repo": "https://bitbucket.org/carlos_orellana/ionic-plugin",
    "cordovaPlugin": {
      "name": "cordova-plugin-biocatch"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/biometric-wrapper",
    "displayName": "BiometricWrapper",
    "description": "\nThis plugin capture biometric(Iris and Fingerprint) and validate the user.\nMay be used in Banking domain\n",
    "usage": "\n```typescript\nimport { BiometricWrapper } from '@awesome-cordova-plugins/biometric-wrapper/ngx';\n\n\nconstructor(private biometricWrapper: BiometricWrapper) { }\n\n...\n\n\nthis.biometricWrapper.activateIris({'PID_XML': '<pid-xml/>'})\n  .then((res: any) => )\n  .catch((error: any) => );\n\n```\n",
    "platforms": [
      "Android"
    ],
    "repo": "",
    "installVariables": [],
    "cordovaPlugin": {
      "name": "cordova-plugin-biometric"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/ble",
    "displayName": "BLE",
    "description": "\nThis plugin enables communication between a phone and Bluetooth Low Energy (BLE) peripherals.\n\nThe plugin provides a simple JavaScript API for iOS and Android.\n\n- Scan for peripherals\n- Connect to a peripheral\n- Read the value of a characteristic\n- Write new value to a characteristic\n- Get notified when characteristic's value changes\n\nAdvertising information is returned when scanning for peripherals. Service, characteristic, and property info is returned when connecting to a peripheral. All access is via service and characteristic UUIDs. The plugin manages handles internally.\n\nSimultaneous connections to multiple peripherals are supported.\n",
    "usage": "\n\n```typescript\n\nimport { BLE } from '@awesome-cordova-plugins/ble/ngx';\n\nconstructor(private ble: BLE) { }\n\n```\n\n## Peripheral Data\n\nPeripheral Data is passed to the success callback when scanning and connecting. Limited data is passed when scanning.\n\n```typescript\n  {\n      'name': 'Battery Demo',\n      'id': '20:FF:D0:FF:D1:C0',\n      'advertising': [2,1,6,3,3,15,24,8,9,66,97,116,116,101,114,121],\n      'rssi': -55\n  }\n```\nAfter connecting, the peripheral object also includes service, characteristic and descriptor information.\n\n```typescript\n  {\n      'name': 'Battery Demo',\n      'id': '20:FF:D0:FF:D1:C0',\n      'advertising': [2,1,6,3,3,15,24,8,9,66,97,116,116,101,114,121],\n      'rssi': -55,\n      'services': [\n          '1800',\n          '1801',\n          '180f'\n      ],\n      'characteristics': [\n          {\n              'service': '1800',\n              'characteristic': '2a00',\n              'properties': [\n                  'Read'\n              ]\n          },\n          {\n              'service': '1800',\n              'characteristic': '2a01',\n              'properties': [\n                  'Read'\n              ]\n          },\n          {\n              'service': '1801',\n              'characteristic': '2a05',\n              'properties': [\n                  'Read'\n              ]\n          },\n          {\n              'service': '180f',\n              'characteristic': '2a19',\n              'properties': [\n                  'Read'\n              ],\n              'descriptors': [\n                  {\n                      'uuid': '2901'\n                  },\n                  {\n                      'uuid': '2904'\n                  }\n              ]\n          }\n      ]\n  }\n```\n\n## Advertising Data\nBluetooth advertising data is returned in when scanning for devices. The format varies depending on your platform. On Android advertising data will be the raw advertising bytes. iOS does not allow access to raw advertising data, so a dictionary of data is returned.\n\nThe advertising information for both Android and iOS appears to be a combination of advertising data and scan response data.\n\n### Android\n\n```typescript\n  {\n      'name': 'demo',\n      'id': '00:1A:7D:DA:71:13',\n      'advertising': ArrayBuffer,\n     'rssi': -37\n }\n```\n\nConvert the advertising info to a Uint8Array for processing. `var adData = new Uint8Array(peripheral.advertising)`\n\n### iOS\n\nNote that iOS uses the string value of the constants for the [Advertisement Data Retrieval Keys](https://developer.apple.com/library/ios/documentation/CoreBluetooth/Reference/CBCentralManagerDelegate_Protocol/index.html#//apple_ref/doc/constant_group/Advertisement_Data_Retrieval_Keys). This will likely change in the future.\n\n```typescript\n  {\n      'name': 'demo',\n      'id': 'D8479A4F-7517-BCD3-91B5-3302B2F81802',\n      'advertising': {\n          'kCBAdvDataChannel': 37,\n          'kCBAdvDataServiceData': {\n              'FED8': {\n                  'byteLength': 7 // data not shown\n              }\n          },\n          'kCBAdvDataLocalName': 'demo',\n          'kCBAdvDataServiceUUIDs': ['FED8'],\n          'kCBAdvDataManufacturerData': {\n              'byteLength': 7  // data not shown\n          },\n          'kCBAdvDataTxPowerLevel': 32,\n          'kCBAdvDataIsConnectable': true\n      },\n      'rssi': -53\n  }\n```\n\n## Typed Arrays\n\nThis plugin uses typed Arrays or ArrayBuffers for sending and receiving data.\n\nThis means that you need convert your data to ArrayBuffers before sending and from ArrayBuffers when receiving.\n\n```typescript\n  // ASCII only\n  function stringToBytes(string) {\n     var array = new Uint8Array(string.length);\n     for (var i = 0, l = string.length; i < l; i++) {\n         array[i] = string.charCodeAt(i);\n      }\n      return array.buffer;\n  }\n\n  // ASCII only\n  function bytesToString(buffer) {\n      return String.fromCharCode.apply(null, new Uint8Array(buffer));\n  }\n```\nYou can read more about typed arrays in these articles on [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays) and [HTML5 Rocks](http://www.html5rocks.com/en/tutorials/webgl/typed_arrays/).\n\n## UUIDs\n\nUUIDs are always strings and not numbers. Some 16-bit UUIDs, such as '2220' look like integers, but they're not. (The integer 2220 is 0x8AC in hex.) This isn't a problem with 128 bit UUIDs since they look like strings 82b9e6e1-593a-456f-be9b-9215160ebcac. All 16-bit UUIDs should also be passed to methods as strings.\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/don/cordova-plugin-ble-central",
    "cordovaPlugin": {
      "name": "cordova-plugin-ble-central"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/blinkid",
    "displayName": "BlinkId",
    "description": "\nMicroblink SDK wrapper for barcode and document scanning. See the\nblinkid-phonegap repository for available recognizers and other settings\n",
    "usage": "\n```typescript\nimport { BlinkId, RecognizerResultState } from '@awesome-cordova-plugins/blinkid/ngx';\n\nconstructor(private blinkId: BlinkId) { }\n\n...\n\nconst overlaySettings = new this.blinkId.DocumentOverlaySettings();\n\nconst usdlRecognizer = new this.blinkId.UsdlRecognizer();\nconst usdlSuccessFrameGrabber = new this.blinkId.SuccessFrameGrabberRecognizer(usdlRecognizer);\n\nconst barcodeRecognizer = new this.blinkId.BarcodeRecognizer();\nbarcodeRecognizer.scanPdf417 = true;\n\nconst recognizerCollection = new this.blinkId.RecognizerCollection([\n  usdlSuccessFrameGrabber,\n  barcodeRecognizer,\n]);\n\nconst canceled = await this.blinkId.scanWithCamera(\n  overlaySettings,\n  recognizerCollection,\n  { ios: IOS_LICENSE_KEY, android: ANDROID_LICENSE_KEY },\n);\n\nif (!canceled) {\n  if (usdlRecognizer.result.resultState === RecognizerResultState.valid) {\n    const successFrame = usdlSuccessFrameGrabber.result.successFrame;\n    if (successFrame) {\n      this.base64Img = `data:image/jpg;base64, ${successFrame}`;\n      this.fields = usdlRecognizer.result.fields;\n    }\n  } else {\n    this.barcodeStringData = barcodeRecognizer.result.stringData;\n  }\n}\n\n...\n\nconst overlaySettings = new this.blinkId.BlinkCardOverlaySettings();\nconst recognizer = new this.blinkId.BlinkCardRecognizer();\nrecognizer.returnFullDocumentImage = false;\nrecognizer.detectGlare = true;\nrecognizer.extractCvv = true;\nrecognizer.extractValidThru = true;\nrecognizer.extractOwner = true;\n\nconst recognizerCollection = new this.blinkId.RecognizerCollection([recognizer]);\nconst canceled = await this.blinkId.scanWithCamera(\n  overlaySettings,\n  recognizerCollection,\n  {\n    ios: '', //iOS License Key\n    android: '' //Android License Key\n  },\n);\n\nif (!canceled) {\n  if (recognizer.result.resultState === RecognizerResultState.valid) {\n    const results = recognizer.result;\n\n    if (results.resultState === RecognizerResultState.valid) {\n      const ccInfo = {\n        cardNumber: Number(results.cardNumber),\n        expirationMonth: Number(results.validThru.month),\n        expirationYear: Number(results.validThru.year),\n        cvv: Number(results.cvv)\n      };\n    }\n  }\n```\n",
    "platforms": [
      "iOS",
      "Android"
    ],
    "repo": "https://github.com/BlinkID/blinkid-phonegap",
    "cordovaPlugin": {
      "name": "blinkid-cordova"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/bluetooth-classic-serial-port",
    "displayName": "Bluetooth Classic Serial Port",
    "description": "This plugin is written using the iOS Accessory Framework (MFi) to support Classic Bluetooth on iOS.",
    "usage": "\n```typescript\nimport { BluetoothClassicSerialPort } from '@awesome-cordova-plugins/bluetooth-classic-serial-port/ngx';\n\nconstructor(private bluetoothClassicSerialPort: BluetoothClassicSerialPort) { }\n\n\n// Write a string\nthis.bluetoothClassicSerialPort.write(\"00001101-0000-1000-8000-00805F9B34FB\", \"hello, world\", success, failure);\n\n// Array of int or bytes\nthis.bluetoothClassicSerialPort.write(\"00001101-0000-1000-8000-00805F9B34FB\", [186, 220, 222], success, failure);\n\n// Typed Array\nvar data = new Uint8Array(4);\ndata[0] = 0x41;\ndata[1] = 0x42;\ndata[2] = 0x43;\ndata[3] = 0x44;\nthis.bluetoothClassicSerialPort.write(interfaceId, data, success, failure);\n\n// Array Buffer\nthis.bluetoothClassicSerialPort.write(interfaceId, data.buffer, success, failure);\n```\n\n// iOS select accessory\n\n```typescript\n async selectAccessory() {\n   const deviceDiscovery = this.bluetoothClassicSerialPort.setDeviceDiscoveredListener().subscribe(async (connectionConfig) => {\n     deviceDiscovery.unsubscribe();\n   })\n\n   await this.bluetoothClassicSerialPort.discoverUnpaired().catch(error => {\n     deviceDiscovery.unsubscribe();\n   })\n\n }\n```\n\n",
    "platforms": [
      "Android",
      "iOS",
      "Browser"
    ],
    "repo": "https://github.com/MaximBelov/cordova-plugin-bluetooth-classic-serial-port",
    "cordovaPlugin": {
      "name": "cordova-plugin-bluetooth-classic-serial-port"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/bluetooth-le",
    "displayName": "BluetoothLE",
    "description": "\nThis plugin has the most complete implementation for interacting with Bluetooth LE devices on Android, iOS and partially Windows.\nIt's a wrap around [randdusing/cordova-plugin-bluetoothle](https://github.com/randdusing/cordova-plugin-bluetoothle/blob/master/readme.md) cordova plugin for Ionic.\nIt supports peripheral **and** central modes and covers most of the API methods available on Android and iOS.\n",
    "usage": "\n```typescript\nimport { BluetoothLE } from '@awesome-cordova-plugins/bluetooth-le/ngx';\n\n\nconstructor(public bluetoothle: BluetoothLE, public plt: Platform) {\n\n this.plt.ready().then((readySource) => {\n\n   console.log('Platform ready from', readySource);\n\n   this.bluetoothle.initialize().then(ble => {\n     console.log('ble', ble.status) // logs 'enabled'\n   });\n\n  });\n}\n\n```\n\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/randdusing/cordova-plugin-bluetoothle",
    "installVariables": [],
    "cordovaPlugin": {
      "name": "cordova-plugin-bluetoothle"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/bluetooth-serial",
    "displayName": "Bluetooth Serial",
    "description": "This plugin enables serial communication over Bluetooth. It was written for communicating between Android or iOS and an Arduino (not Android to Android or iOS to iOS).",
    "usage": "\n```typescript\nimport { BluetoothSerial } from '@awesome-cordova-plugins/bluetooth-serial/ngx';\n\nconstructor(private bluetoothSerial: BluetoothSerial) { }\n\n\n// Write a string\nthis.bluetoothSerial.write('hello world').then(success, failure);\n\n// Array of int or bytes\nthis.bluetoothSerial.write([186, 220, 222]).then(success, failure);\n\n// Typed Array\nvar data = new Uint8Array(4);\ndata[0] = 0x41;\ndata[1] = 0x42;\ndata[2] = 0x43;\ndata[3] = 0x44;\nthis.bluetoothSerial.write(data).then(success, failure);\n\n// Array Buffer\nthis.bluetoothSerial.write(data.buffer).then(success, failure);\n```\n",
    "platforms": [
      "Android",
      "iOS",
      "Windows Phone 8"
    ],
    "repo": "https://github.com/don/BluetoothSerial",
    "cordovaPlugin": {
      "name": "cordova-plugin-bluetooth-serial"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/branch-io",
    "displayName": "BranchIo",
    "description": "\nBranch.io is an attribution service for deeplinking and invitation links\n",
    "usage": "\n```\nimport { BranchIo } from '@awesome-cordova-plugins/branch-io/ngx';\n\n\nconstructor(private branch: BranchIo) { }\n\n```\n",
    "platforms": [
      "iOS",
      "Android"
    ],
    "repo": "https://github.com/BranchMetrics/cordova-ionic-phonegap-branch-deep-linking",
    "cordovaPlugin": {
      "name": "branch-cordova-sdk"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/broadcaster",
    "displayName": "Broadcaster",
    "description": "\nThis plugin adds exchanging events between native code and your app.\n",
    "usage": "\n```typescript\nimport { Broadcaster } from '@awesome-cordova-plugins/broadcaster/ngx';\n\nconstructor(private broadcaster: Broadcaster) { }\n\n...\n\n// Listen to events from Native\nthis.broadcaster.addEventListener('eventName').subscribe((event) => console.log(event));\n\n// Send event to Native\nthis.broadcaster.fireNativeEvent('eventName', {}).then(() => console.log('success'));\n\n```\n",
    "platforms": [
      "Android",
      "iOS",
      "Browser"
    ],
    "repo": "https://github.com/bsorrentino/cordova-broadcaster",
    "cordovaPlugin": {
      "name": "cordova-plugin-broadcaster"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/build-info",
    "displayName": "Build Info",
    "description": "\nThis plugin provides build information.\n",
    "usage": "\n```\nimport { BuildInfo } from '@awesome-cordova-plugins/build-info/ngx';\n\nthis.platform.ready().then(() => {\n    console.log('BuildInfo.baseUrl        =' + BuildInfo.baseUrl)\n    console.log('BuildInfo.packageName    =' + BuildInfo.packageName)\n    console.log('BuildInfo.basePackageName=' + BuildInfo.basePackageName)\n    console.log('BuildInfo.displayName    =' + BuildInfo.displayName)\n    console.log('BuildInfo.name           =' + BuildInfo.name)\n    console.log('BuildInfo.version        =' + BuildInfo.version)\n    console.log('BuildInfo.versionCode    =' + BuildInfo.versionCode)\n    console.log('BuildInfo.debug          =' + BuildInfo.debug)\n    console.log('BuildInfo.buildType      =' + BuildInfo.buildType)\n    console.log('BuildInfo.flavor         =' + BuildInfo.flavor)\n    console.log('BuildInfo.buildDate      =' + BuildInfo.buildDate)\n    console.log('BuildInfo.installDate    =' + BuildInfo.installDate)\n})\n```\n",
    "platforms": [
      "Android",
      "iOS",
      "Windows",
      "macOS",
      "browser",
      "Electron"
    ],
    "repo": "https://github.com/lynrin/cordova-plugin-buildinfo",
    "cordovaPlugin": {
      "name": "cordova-plugin-buildinfo"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/calendar",
    "displayName": "Calendar",
    "description": "\nThis plugin allows you to add events to the Calendar of the mobile device.\n\nRequires Cordova plugin: `cordova-plugin-calendar`. For more info, please see the [Calendar plugin docs](https://github.com/EddyVerbruggen/Calendar-PhoneGap-Plugin).\n\n",
    "usage": "\n```typescript\nimport { Calendar } from '@awesome-cordova-plugins/calendar/ngx';\n\nconstructor(private calendar: Calendar) { }\n\n\nthis.calendar.createCalendar('MyCalendar').then(\n  (msg) => { console.log(msg); },\n  (err) => { console.log(err); }\n);\n```",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/EddyVerbruggen/Calendar-PhoneGap-Plugin",
    "cordovaPlugin": {
      "name": "cordova-plugin-calendar"
    },
    "premierSlug": "calendar"
  },
  {
    "packageName": "@awesome-cordova-plugins/call-directory",
    "displayName": "Call Directory",
    "description": "\nThis plugin can add phone numbers to an Callkit call directory extension. Call `reloadExtension` after using `addIdentification` and `removeIdentification`\nto process the changes in the call directory extension.\n",
    "usage": "\n```typescript\nimport { CallDirectory } from '@awesome-cordova-plugins/call-directory/ngx';\n\n\nconstructor(private callDirectory: CallDirectory) { }\n\n\nlet items = [{label: \"Hello\", number: \"123\"}];\nthis.callDirectory.addIdentification(items)\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n\nthis.callDirectory.reloadExtension()\n  .then(res: string) => console.log(res))\n  .catch((error: any) => console.error(error));\n```\n",
    "platforms": [
      "iOS"
    ],
    "repo": "https://github.com/GEDYSIntraWare/cordova-plugin-call-directory",
    "installVariables": [
      "EXT_NAME",
      "ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES"
    ],
    "cordovaPlugin": {
      "name": "cordova-plugin-call-directory"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/call-number",
    "displayName": "Call Number",
    "description": "\nCall a number directly from your Cordova/Ionic application.\n**NOTE**: The iOS Simulator (and maybe Android Simulators) do not provide access to the phone subsystem.\n",
    "usage": "\n```typescript\nimport { CallNumber } from '@awesome-cordova-plugins/call-number/ngx';\n\nconstructor(private callNumber: CallNumber) { }\n\n...\n\n\nthis.callNumber.callNumber(\"18001010101\", true)\n  .then(res => console.log('Launched dialer!', res))\n  .catch(err => console.log('Error launching dialer', err));\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/Rohfosho/CordovaCallNumberPlugin",
    "cordovaPlugin": {
      "name": "call-number"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/camera-preview",
    "displayName": "Camera Preview",
    "description": "\nShowing camera preview in HTML\n\nRequires Cordova plugin: `https://github.com/cordova-plugin-camera-preview/cordova-plugin-camera-preview.git`. For more info, please see the [Cordova Camera Preview docs](https://github.com/cordova-plugin-camera-preview/cordova-plugin-camera-preview).\n",
    "usage": "\n```typescript\nimport { CameraPreview, CameraPreviewPictureOptions, CameraPreviewOptions, CameraPreviewDimensions } from '@awesome-cordova-plugins/camera-preview/ngx';\n\nconstructor(private cameraPreview: CameraPreview) { }\n\n...\n\n// camera options (Size and location). In the following example, the preview uses the rear camera and display the preview in the back of the webview\nconst cameraPreviewOpts: CameraPreviewOptions = {\n  x: 0,\n  y: 0,\n  width: window.screen.width,\n  height: window.screen.height,\n  camera: 'rear',\n  tapPhoto: true,\n  previewDrag: true,\n  toBack: true,\n  alpha: 1\n}\n\n// start camera\nthis.cameraPreview.startCamera(cameraPreviewOpts).then(\n  (res) => {\n    console.log(res)\n  },\n  (err) => {\n    console.log(err)\n  });\n\n// Set the handler to run every time we take a picture\nthis.cameraPreview.setOnPictureTakenHandler().subscribe((result) => {\n  console.log(result);\n  // do something with the result\n});\n\n\n// picture options\nconst pictureOpts: CameraPreviewPictureOptions = {\n  width: 1280,\n  height: 1280,\n  quality: 85\n}\n\n// take a picture\nthis.cameraPreview.takePicture(this.pictureOpts).then((imageData) => {\n  this.picture = 'data:image/jpeg;base64,' + imageData;\n}, (err) => {\n  console.log(err);\n  this.picture = 'assets/img/test.jpg';\n});\n\n// take a snap shot\nthis.cameraPreview.takeSnapshot(this.pictureOpts).then((imageData) => {\n  this.picture = 'data:image/jpeg;base64,' + imageData;\n}, (err) => {\n  console.log(err);\n  this.picture = 'assets/img/test.jpg';\n});\n\n\n// Switch camera\nthis.cameraPreview.switchCamera();\n\n// set color effect to negative\nthis.cameraPreview.setColorEffect('negative');\n\n// Stop the camera preview\nthis.cameraPreview.stopCamera();\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/cordova-plugin-camera-preview/cordova-plugin-camera-preview",
    "cordovaPlugin": {
      "name": "cordova-plugin-camera-preview"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/camera",
    "displayName": "Camera",
    "description": "\nTake a photo or capture video.\n\nRequires the Cordova plugin: `cordova-plugin-camera`. For more info, please see the [Cordova Camera Plugin Docs](https://github.com/apache/cordova-plugin-camera).\n\n[Warning] Since IOS 10 the camera requires permissions to be placed in your config.xml add\n```xml\n<config-file parent=\"NSCameraUsageDescription\" platform=\"ios\" target=\"*-Info.plist\">\n <string>You can take photos</string>\n</config-file>\n```\ninside of the <platform name='ios> section\n",
    "usage": "\n```typescript\nimport { Camera, CameraOptions } from '@awesome-cordova-plugins/camera/ngx';\n\nconstructor(private camera: Camera) { }\n\n...\n\n\nconst options: CameraOptions = {\n  quality: 100,\n  destinationType: this.camera.DestinationType.FILE_URI,\n  encodingType: this.camera.EncodingType.JPEG,\n  mediaType: this.camera.MediaType.PICTURE\n}\n\nthis.camera.getPicture(options).then((imageData) => {\n // imageData is either a base64 encoded string or a file URI\n // If it's base64 (DATA_URL):\n let base64Image = 'data:image/jpeg;base64,' + imageData;\n}, (err) => {\n // Handle error\n});\n```",
    "platforms": [
      "Android",
      "Browser",
      "iOS",
      "Windows"
    ],
    "repo": "https://github.com/apache/cordova-plugin-camera",
    "cordovaPlugin": {
      "name": "cordova-plugin-camera"
    },
    "premierSlug": "camera"
  },
  {
    "packageName": "@awesome-cordova-plugins/chooser",
    "displayName": "Chooser",
    "description": "\nFile chooser plugin for Cordova.\n\nThe following must be added to config.xml to prevent crashing when selecting large files on Android:\n```xml\n<platform name=\"android\">\n <edit-config\n   file=\"app/src/main/AndroidManifest.xml\"\n   mode=\"merge\"\n   target=\"/manifest/application\">\n   <application android:largeHeap=\"true\" />\n </edit-config>\n</platform>\n```\n",
    "usage": "\n```typescript\nimport { Chooser } from '@awesome-cordova-plugins/chooser/ngx';\n\n\nconstructor(private chooser: Chooser) { }\n\n...\n\n\nthis.chooser.getFile()\n  .then(file => console.log(file ? file.name : 'canceled'))\n  .catch((error: any) => console.error(error));\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/cyph/cordova-plugin-chooser",
    "cordovaPlugin": {
      "name": "cordova-plugin-chooser"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/clevertap",
    "displayName": "CleverTap",
    "description": "\nCordova Plugin that wraps CleverTap SDK for Android and iOS\n",
    "usage": "\n```typescript\nimport { CleverTap } from '@awesome-cordova-plugins/clevertap/ngx';\n\nconstructor(private clevertap: CleverTap) { }\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/CleverTap/clevertap-cordova",
    "cordovaPlugin": {
      "name": "clevertap-cordova"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/clipboard",
    "displayName": "Clipboard",
    "description": "\nClipboard management plugin for Cordova that supports iOS, Android, and Windows Phone 8.\n\n",
    "usage": "\n```typescript\nimport { Clipboard } from '@awesome-cordova-plugins/clipboard/ngx';\n\nconstructor(private clipboard: Clipboard) { }\n\n...\n\n\nthis.clipboard.copy('Hello world');\n\nthis.clipboard.paste().then(\n   (resolve: string) => {\n      alert(resolve);\n    },\n    (reject: string) => {\n      alert('Error: ' + reject);\n    }\n  );\n\nthis.clipboard.clear();\n```\n",
    "platforms": [
      "Android",
      "iOS",
      "Windows Phone 8"
    ],
    "repo": "https://github.com/ihadeed/cordova-clipboard",
    "cordovaPlugin": {
      "name": "cordova-clipboard"
    },
    "premierSlug": "clipboard"
  },
  {
    "packageName": "@awesome-cordova-plugins/cloud-settings",
    "displayName": "Cloud Settings",
    "description": "\nStores app settings in cloud storage so if the user re-installs the app or installs it on a different device, the settings will be restored and available in the new installation.\n",
    "usage": "\n```typescript\nimport { CloudSettings } from '@awesome-cordova-plugins/cloud-settings/ngx';\n\n\nconstructor(private cloudSettings: CloudSettings) { }\n\n...\n\nthis.cloudSettings.exists()\n  .then((exists: boolean) => console.log(\"Saved settings exist: \" + exists) )\n\nthis.cloudSettings.load()\n  .then((settings: any) => this.settings = settings)\n  .catch((error: any) => console.error(error));\n\nthis.cloudSettings.save(this.settings)\n  .then((savedSettings: any) => console.log(\"Saved settings: \" + JSON.stringify(savedSettings)))\n  .catch((error: any) => console.error(error));\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/dpa99c/cordova-plugin-cloud-settings",
    "installVariables": [
      "ANDROID_BACKUP_SERVICE_KEY"
    ],
    "cordovaPlugin": {
      "name": "cordova-plugin-cloud-settings"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/code-push",
    "displayName": "Code Push",
    "description": "\nCodePush plugin for Cordova by Microsoft that supports iOS and Android.\n\nFor more info, please see https://github.com/Dellos7/example-cordova-code-push-plugin\n",
    "usage": "\n```typescript\nimport { CodePush } from '@awesome-cordova-plugins/code-push/ngx';\n\nconstructor(private codePush: CodePush) { }\n\n...\n\n// note - mostly error & completed methods of observable will not fire\n// as syncStatus will contain the current state of the update\nthis.codePush.sync().subscribe((syncStatus) => console.log(syncStatus));\n\nconst downloadProgress = (progress) => { console.log(`Downloaded ${progress.receivedBytes} of ${progress.totalBytes}`); }\nthis.codePush.sync({}, downloadProgress).subscribe((syncStatus) => console.log(syncStatus));\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/Microsoft/cordova-plugin-code-push",
    "cordovaPlugin": {
      "name": "cordova-plugin-code-push"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/custom-uisdk",
    "displayName": "CustomUISDK",
    "description": "\nThis plugin is used to access Paytm's native CustomUISDK framework's apis.\n",
    "usage": "\n```typescript\nimport { CustomUISDK } from '@awesome-cordova-plugins/custom-uisdk/ngx';\n\nconstructor(private customuisdk: CustomUISDK) { }\n\n...\nthis.customuisdk.functionName('Hello', 123)\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n```\n",
    "platforms": [
      "Android, iOS"
    ],
    "repo": "https://github.com/paytm/paytm-customuisdk-cordova",
    "installVariables": [],
    "cordovaPlugin": {
      "name": "cordova-paytm-customuisdk"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/deeplinks",
    "displayName": "Deeplinks",
    "description": "This plugin handles deeplinks on iOS and Android for both custom URL scheme links\nand Universal App Links.\n\nPlease read the [ionic plugin deeplinks docs](https://github.com/ionic-team/ionic-plugin-deeplinks) for iOS and Android integration.\nYou must add `universal-links` to your `config.xml` and set up Apple App Site Association (AASA) for iOS and Asset Links for Android.\n",
    "usage": "\n```typescript\nimport { Deeplinks } from '@awesome-cordova-plugins/deeplinks/ngx';\n\nconstructor(private deeplinks: Deeplinks) { }\n\nthis.deeplinks.route({\n     '/about-us': AboutPage,\n     '/universal-links-test': AboutPage,\n     '/products/:productId': ProductPage\n   }).subscribe(match => {\n     // match.$route - the route we matched, which is the matched entry from the arguments to route()\n     // match.$args - the args passed in the link\n     // match.$link - the full link data\n     console.log('Successfully matched route', match);\n   }, nomatch => {\n     // nomatch.$link - the full link data\n     console.error('Got a deeplink that didn\\'t match', nomatch);\n   });\n```\n\nAlternatively, if you're using Ionic, there's a convenience method that takes a reference to a `NavController` and handles\nthe actual navigation for you:\n\n```typescript\nthis.deeplinks.routeWithNavController(this.navController, {\n  '/about-us': AboutPage,\n  '/products/:productId': ProductPage\n}).subscribe(match => {\n    // match.$route - the route we matched, which is the matched entry from the arguments to route()\n    // match.$args - the args passed in the link\n    // match.$link - the full link data\n    console.log('Successfully matched route', match);\n  }, nomatch => {\n    // nomatch.$link - the full link data\n    console.error('Got a deeplink that didn\\'t match', nomatch);\n  });\n```\n\nSee the [Ionic Deeplinks Demo](https://github.com/ionic-team/ionic2-deeplinks-demo/blob/master/app/app.ts) for an example of how to\nretrieve the `NavController` reference at runtime.\n",
    "platforms": [
      "Android",
      "Browser",
      "iOS"
    ],
    "repo": "https://github.com/ionic-team/ionic-plugin-deeplinks",
    "installVariables": [
      "URL_SCHEME",
      "DEEPLINK_SCHEME",
      "DEEPLINK_HOST",
      "ANDROID_PATH_PREFIX"
    ],
    "cordovaPlugin": {
      "name": "ionic-plugin-deeplinks"
    },
    "premierSlug": "deeplinks"
  },
  {
    "packageName": "@awesome-cordova-plugins/device-accounts",
    "displayName": "Device Accounts",
    "description": "\nGets the Google accounts associated with the Android device\n",
    "usage": "\n```typescript\nimport { DeviceAccounts } from '@awesome-cordova-plugins/device-accounts/ngx';\n\nconstructor(private deviceAccounts: DeviceAccounts) { }\n\n...\n\nthis.deviceAccounts.get()\n  .then(accounts => console.log(accounts))\n  .catch(error => console.error(error));\n\n```",
    "platforms": [
      "Android"
    ],
    "repo": "https://github.com/xUnholy/cordova-device-accounts-v2",
    "cordovaPlugin": {
      "name": "cordova-device-accounts-v2"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/device-motion",
    "displayName": "Device Motion",
    "description": "\nRequires Cordova plugin: `cordova-plugin-device-motion`. For more info, please see the [Device Motion docs](https://github.com/apache/cordova-plugin-device-motion).\n",
    "usage": "\n```typescript\nimport { DeviceMotion, DeviceMotionAccelerationData } from '@awesome-cordova-plugins/device-motion/ngx';\n\nconstructor(private deviceMotion: DeviceMotion) { }\n\n...\n\n// Get the device current acceleration\nthis.deviceMotion.getCurrentAcceleration().then(\n  (acceleration: DeviceMotionAccelerationData) => console.log(acceleration),\n  (error: any) => console.log(error)\n);\n\n// Watch device acceleration\nvar subscription = this.deviceMotion.watchAcceleration().subscribe((acceleration: DeviceMotionAccelerationData) => {\n  console.log(acceleration);\n});\n\n// Stop watch\nsubscription.unsubscribe();\n\n```",
    "platforms": [
      "Android",
      "BlackBerry 10",
      "Browser",
      "Firefox OS",
      "iOS",
      "Tizen",
      "Ubuntu",
      "Windows",
      "Windows Phone 8"
    ],
    "repo": "https://github.com/apache/cordova-plugin-device-motion",
    "cordovaPlugin": {
      "name": "cordova-plugin-device-motion"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/device-orientation",
    "displayName": "Device Orientation",
    "description": "\nRequires Cordova plugin: `cordova-plugin-device-orientation`. For more info, please see the [Device Orientation docs](https://github.com/apache/cordova-plugin-device-orientation).\n",
    "usage": "\n```typescript\n// DeviceOrientationCompassHeading is an interface for compass\nimport { DeviceOrientation, DeviceOrientationCompassHeading } from '@awesome-cordova-plugins/device-orientation/ngx';\n\nconstructor(private deviceOrientation: DeviceOrientation) { }\n\n...\n\n// Get the device current compass heading\nthis.deviceOrientation.getCurrentHeading().then(\n  (data: DeviceOrientationCompassHeading) => console.log(data),\n  (error: any) => console.log(error)\n);\n\n// Watch the device compass heading change\nvar subscription = this.deviceOrientation.watchHeading().subscribe(\n  (data: DeviceOrientationCompassHeading) => console.log(data)\n);\n\n// Stop watching heading change\nsubscription.unsubscribe();\n```",
    "platforms": [
      "Amazon Fire OS",
      "Android",
      "BlackBerry 10",
      "Browser",
      "Firefox OS",
      "iOS",
      "Tizen",
      "Ubuntu",
      "Windows",
      "Windows Phone"
    ],
    "repo": "https://github.com/apache/cordova-plugin-device-orientation",
    "cordovaPlugin": {
      "name": "cordova-plugin-device-orientation"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/device",
    "displayName": "Device",
    "description": "\nAccess information about the underlying device and platform.\n",
    "usage": "\n```typescript\nimport { Device } from '@awesome-cordova-plugins/device/ngx';\n\nconstructor(private device: Device) { }\n\n...\n\nconsole.log('Device UUID is: ' + this.device.uuid);\n```\n",
    "platforms": [
      "Android",
      "Browser",
      "iOS",
      "macOS",
      "Windows"
    ],
    "repo": "https://github.com/apache/cordova-plugin-device",
    "cordovaPlugin": {
      "name": "cordova-plugin-device"
    },
    "premierSlug": "device"
  },
  {
    "packageName": "@awesome-cordova-plugins/dfu-update",
    "displayName": "Dfu Update",
    "description": "\nThis plugin is a Wrapper to use Nordic Semiconductor's Device Firmware Update (DFU) service to update a Bluetooth LE device.\n",
    "usage": "\n```typescript\nimport { DfuUpdate } from '@awesome-cordova-plugins/dfu-update/ngx';\n\n\nconstructor(private dfuUpdate: DfuUpdate) { }\n\n...\n\n\nthis.dfuUpdate.updateFirmware('fileURL', 'deviceIdentifier')\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/EinfachHans/cordova-plugin-dfu-update",
    "installVariables": [
      "ANDROID_NORDIC_VERSION"
    ],
    "cordovaPlugin": {
      "name": "cordova-plugin-dfu-update"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/diagnostic",
    "displayName": "Diagnostic",
    "description": "\nChecks whether device hardware features are enabled or available to the app, e.g. camera, GPS, wifi\n",
    "usage": "\n```typescript\nimport { Diagnostic } from '@awesome-cordova-plugins/diagnostic/ngx';\n\nconstructor(private diagnostic: Diagnostic) { }\n\n...\n\nlet successCallback = (isAvailable) => { console.log('Is available? ' + isAvailable); }\nlet errorCallback = (e) => console.error(e);\n\nthis.diagnostic.isCameraAvailable().then(successCallback).catch(errorCallback);\n\nthis.diagnostic.isBluetoothAvailable().then(successCallback, errorCallback);\n\n\nthis.diagnostic.getBluetoothState()\n  .then((state) => {\n    if (state == this.diagnostic.bluetoothState.POWERED_ON){\n      // do something\n    } else {\n      // do something else\n    }\n  }).catch(e => console.error(e));\n\n```\n\n",
    "platforms": [
      "Android",
      "iOS",
      "Windows"
    ],
    "repo": "https://github.com/dpa99c/cordova-diagnostic-plugin",
    "cordovaPlugin": {
      "name": "cordova.plugins.diagnostic"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/dialogs",
    "displayName": "Dialogs",
    "description": "\nThis plugin gives you ability to access and customize the device native dialogs.\n\nRequires Cordova plugin: `cordova-plugin-dialogs`. For more info, please see the [Dialogs plugin docs](https://github.com/apache/cordova-plugin-dialogs).\n",
    "usage": "\n```typescript\nimport { Dialogs } from '@awesome-cordova-plugins/dialogs/ngx';\n\nconstructor(private dialogs: Dialogs) { }\n\n...\n\nthis.dialogs.alert('Hello world')\n  .then(() => console.log('Dialog dismissed'))\n  .catch(e => console.log('Error displaying dialog', e));\n\n\n```",
    "platforms": [
      "Amazon Fire OS",
      "Android",
      "Browser",
      "iOS",
      "Windows"
    ],
    "repo": "https://github.com/apache/cordova-plugin-dialogs",
    "cordovaPlugin": {
      "name": "cordova-plugin-dialogs"
    },
    "premierSlug": "dialogs"
  },
  {
    "packageName": "@awesome-cordova-plugins/dns",
    "displayName": "DNS",
    "description": "A plugin for Apache Cordova that enables applications to manually resolve hostnames into an underlying network address. This is mostly useful for determining whether there is a problem with the device's DNS server configuration.\n",
    "usage": "\n```typescript\nimport { DNS } from '@awesome-cordova-plugins/dns/ngx';\n\n\nconstructor(private dns: DNS) { }\n\n...\nthis.dns.resolve(hostname)\n  .then(\n    address => console.log('Resolved ' + hostname + ' to ' + address),\n    error => console.log('Failed to resolve ' + hostname + ': ' + error)\n  );\n\n```\n",
    "platforms": [
      "Android"
    ],
    "repo": "https://bitbucket.org/zegeba/cordova-plugin-dns",
    "cordovaPlugin": {
      "name": "cordova-plugin-dns"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/document-picker",
    "displayName": "iOS DocumentPicker",
    "description": "\n\nOpens the file picker on iOS for the user to select a file, returns a file URI.\nAllows the user to upload files from iCloud\n",
    "usage": "\n```typescript\nimport { DocumentPicker } from '@awesome-cordova-plugins/document-picker/ngx';\n\nconstructor(private docPicker: DocumentPicker) { }\n\n...\n\nthis.docPicker.getFile('all')\n  .then(uri => console.log(uri))\n  .catch(e => console.log(e));\n\n```\n",
    "platforms": [
      "iOS"
    ],
    "repo": "https://github.com/iampossible/Cordova-DocPicker",
    "cordovaPlugin": {
      "name": "cordova-plugin-documentpicker.DocumentPicker"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/document-scanner",
    "displayName": "Document Scanner",
    "description": "\nThis plugin processes images of documents, compensating for perspective.\n",
    "usage": "\n```typescript\nimport { DocumentScanner, DocumentScannerOptions } from '@awesome-cordova-plugins/document-scanner';\n\n\nconstructor(private documentScanner: DocumentScanner) { }\n\n...\n\nlet opts: DocumentScannerOptions = {};\nthis.documentScanner.scanDocument(opts)\n  .then((res: string) => console.log(res))\n  .catch((error: any) => console.error(error));\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/NeutrinosPlatform/cordova-plugin-document-scanner",
    "cordovaPlugin": {
      "name": "cordova-plugin-document-scanner"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/document-viewer",
    "displayName": "Document Viewer",
    "description": "\nThis plugin offers a slim API to view PDF files which are either stored in the apps assets folder (/www/*) or in any other file system directory available via the cordova file plugin.\n",
    "usage": "\n```typescript\nimport { DocumentViewer } from '@awesome-cordova-plugins/document-viewer/ngx';\n\n\nconstructor(private document: DocumentViewer) { }\n\n...\nconst options: DocumentViewerOptions = {\n  title: 'My PDF'\n}\n\nthis.document.viewDocument('assets/myFile.pdf', 'application/pdf', options)\n\n```\n",
    "platforms": [
      "Android",
      "iOS",
      "Windows"
    ],
    "repo": "https://github.com/sitewaerts/cordova-plugin-document-viewer",
    "cordovaPlugin": {
      "name": "cordova-plugin-document-viewer"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/email-composer",
    "displayName": "Email Composer",
    "description": "\n\nRequires Cordova plugin: cordova-plugin-email-composer. For more info, please see the [Email Composer plugin docs](https://github.com/hypery2k/cordova-email-plugin).\n\n",
    "usage": "\n```typescript\nimport { EmailComposer } from '@awesome-cordova-plugins/email-composer/ngx';\n\nconstructor(private emailComposer: EmailComposer) { }\n\n...\n\n\nthis.emailComposer.getClients().then((apps: []) => {\n   // Returns an array of configured email clients for the device\n});\n\nthis.emailComposer.hasClient().then(app, (isValid: boolean) => {\n if (isValid) {\n   // Now we know we have a valid email client configured\n   // Not specifying an app will return true if at least one email client is configured\n }\n});\n\nthis.emailComposer.hasAccount().then((isValid: boolean) => {\n if (isValid) {\n   // Now we know we have a valid email account configured\n }\n});\n\nthis.emailComposer.isAvailable().then(app, (available: boolean) => {\n if(available) {\n   // Now we know we can send an email, calls hasClient and hasAccount\n   // Not specifying an app will return true if at least one email client is configured\n }\n});\n\nlet email = {\n  to: 'max@mustermann.de',\n  cc: 'erika@mustermann.de',\n  bcc: ['john@doe.com', 'jane@doe.com'],\n  attachments: [\n    'file://img/logo.png',\n    'res://icon.png',\n    'base64:icon.png//iVBORw0KGgoAAAANSUhEUg...',\n    'file://README.pdf'\n  ],\n  subject: 'Cordova Icons',\n  body: 'How are you? Nice greetings from Leipzig',\n  isHtml: true\n}\n\n// Send a text message using default options\nthis.emailComposer.open(email);\n```\n\nYou can also assign aliases to email apps\n```ts\n// add alias\nthis.email.addAlias('gmail', 'com.google.android.gm');\n\n// then use alias when sending email\nthis.email.open({\n  app: 'gmail',\n  ...\n});\n```",
    "platforms": [
      "Amazon Fire OS",
      "Android",
      "Browser",
      "iOS",
      "Windows",
      "macOS"
    ],
    "repo": "https://github.com/katzer/cordova-plugin-email-composer",
    "cordovaPlugin": {
      "name": "cordova-plugin-email-composer"
    },
    "premierSlug": "email-composer"
  },
  {
    "packageName": "@awesome-cordova-plugins/fabric",
    "displayName": "Answers",
    "description": "\nAPI for interacting with the Answers kit.\n\nhttps://docs.fabric.io/crashlytics/index.html\n",
    "usage": "\n```typescript\nimport { Answers } from '@awesome-cordova-plugins/fabric/ngx';\n\n\nconstructor(private answers: Answers) { }\n\n...\n\nthis.answers.sendCustomEvent('SomeCustomEvent', { some: \"attributes\" })\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://www.npmjs.com/package/cordova-fabric-plugin",
    "installVariables": [
      "FABRIC_API_KEY",
      "FABRIC_API_SECRET"
    ],
    "cordovaPlugin": {
      "name": "cordova-fabric-plugin"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/facebook",
    "displayName": "Facebook",
    "description": "\nUse the Facebook Connect plugin to obtain access to the native FB application on iOS and Android.\n\nRequires Cordova plugin: `cordova-plugin-facebook-connect`. For more info, please see the [Facebook Connect](https://github.com/cordova-plugin-facebook-connect/cordova-plugin-facebook-connect).\n\n#### Installation\n\n To use the FB plugin, you first have to create a new Facebook App inside of the Facebook developer portal at [https://developers.facebook.com/apps](https://developers.facebook.com/apps).\n\n[![fb-getstarted-1](/img/docs/native/Facebook/1.png)](https://developers.facebook.com/apps/)\n\nRetrieve the `App ID` and `App Name`.\n\n[![fb-getstarted-2](/img/docs/native/Facebook/2.png)](https://developers.facebook.com/apps/)\n\nThen type in the following command in your Terminal, where APP_ID and APP_NAME are the values from the Facebook Developer portal.\n\n```bash\n ionic cordova plugin add cordova-plugin-facebook-connect --variable APP_ID=\"123456789\" --variable APP_NAME=\"myApplication\"\n```\n\nAfter, you'll need to add the native platforms you'll be using to your app in the Facebook Developer portal under your app's Settings:\n\n[![fb-getstarted-3](/img/docs/native/Facebook/3.png)](https://developers.facebook.com/apps/)\n\nClick `'Add Platform'`.\n\n[![fb-getstarted-4](/img/docs/native/Facebook/4.png)](https://developers.facebook.com/apps/)\n\nAt this point you'll need to open your project's [`config.xml`](https://cordova.apache.org/docs/en/latest/config_ref/index.html) file, found in the root directory of your project.\n\nTake note of the `id` for the next step:\n```\n<widget id=\"com.mycompany.testapp\" version=\"0.0.1\" xmlns=\"http://www.w3.org/ns/widgets\" xmlns:cdv=\"http://cordova.apache.org/ns/1.0\">\n```\n\nYou can also edit the `id` to whatever you'd like it to be.\n\n#### iOS Install\nUnder 'Bundle ID', add the `id` from your `config.xml` file:\n\n[![fb-getstarted-5](/img/docs/native/Facebook/5.png)](https://developers.facebook.com/apps/)\n\n\n#### Android Install\nUnder 'Google Play Package Name', add the `id` from your `config.xml` file:\n\n[![fb-getstarted-6](/img/docs/native/Facebook/6.png)](https://developers.facebook.com/apps/)\n\n\nAnd that's it! You can now make calls to Facebook using the plugin.\n\n## Events\n\nApp events allow you to understand the makeup of users engaging with your app, measure the performance of your Facebook mobile app ads, and reach specific sets of your users with Facebook mobile app ads.\n\n- [iOS] [https://developers.facebook.com/docs/ios/app-events](https://developers.facebook.com/docs/ios/app-events)\n- [Android] [https://developers.facebook.com/docs/android/app-events](https://developers.facebook.com/docs/android/app-events)\n- [JS] Does not have an Events API, so the plugin functions are empty and will return an automatic success\n\nActivation events are automatically tracked for you in the plugin.\n\nEvents are listed on the [insights page](https://www.facebook.com/insights/).\n\nFor tracking events, see `logEvent` and `logPurchase`.\n",
    "usage": "\n```typescript\nimport { Facebook, FacebookLoginResponse } from '@awesome-cordova-plugins/facebook/ngx';\n\nconstructor(private fb: Facebook) { }\n\n...\n\nthis.fb.login(['public_profile', 'user_friends', 'email'])\n  .then((res: FacebookLoginResponse) => console.log('Logged into Facebook!', res))\n  .catch(e => console.log('Error logging into Facebook', e));\n\n\nthis.fb.logEvent(this.fb.EVENTS.EVENT_NAME_ADDED_TO_CART);\n\n```\n\n",
    "platforms": [
      "Android",
      "iOS",
      "Browser"
    ],
    "repo": "https://github.com/cordova-plugin-facebook-connect/cordova-plugin-facebook-connect",
    "installVariables": [
      "APP_ID",
      "APP_NAME"
    ],
    "cordovaPlugin": {
      "name": "cordova-plugin-facebook-connect"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/fcm",
    "displayName": "FCM",
    "description": "\nProvides basic functionality for Firebase Cloud Messaging\n",
    "usage": "\n```typescript\nimport { FCM } from '@awesome-cordova-plugins/fcm/ngx';\n\nconstructor(private fcm: FCM) {}\n\n...\n\nthis.fcm.subscribeToTopic('marketing');\n\nthis.fcm.getToken().then(token => {\n  backend.registerToken(token);\n});\n\nthis.fcm.onNotification().subscribe(data => {\n  if(data.wasTapped){\n    console.log(\"Received in background\");\n  } else {\n    console.log(\"Received in foreground\");\n  };\n});\n\nthis.fcm.onTokenRefresh().subscribe(token => {\n  backend.registerToken(token);\n});\n\nthis.fcm.hasPermission().then(hasPermission => {\n  if (hasPermission) {\n    console.log(\"Has permission!\");\n  }\n})\n\nthis.fcm.clearAllNotifications();\n\nthis.fcm.unsubscribeFromTopic('marketing');\n\n```",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/andrehtissot/cordova-plugin-fcm-with-dependecy-updated",
    "cordovaPlugin": {
      "name": "cordova-plugin-fcm-with-dependecy-updated"
    },
    "capacitorIncompatible": true
  },
  {
    "packageName": "@awesome-cordova-plugins/file-opener",
    "displayName": "File Opener",
    "description": "\nThis plugin will open a file on your device file system with its default application.\n",
    "usage": "\n```typescript\nimport { FileOpener } from '@awesome-cordova-plugins/file-opener/ngx';\n\nconstructor(private fileOpener: FileOpener) { }\n\n...\n\nthis.fileOpener.open('path/to/file.pdf', 'application/pdf')\n  .then(() => console.log('File is opened'))\n  .catch(e => console.log('Error opening file', e));\n\nthis.fileOpener.showOpenWithDialog('path/to/file.pdf', 'application/pdf')\n  .then(() => console.log('File is opened'))\n  .catch(e => console.log('Error opening file', e));\n\n```\n",
    "platforms": [
      "Android",
      "iOS",
      "Windows",
      "Windows Phone 8"
    ],
    "repo": "https://github.com/pwlin/cordova-plugin-file-opener2",
    "cordovaPlugin": {
      "name": "cordova-plugin-file-opener2"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/file-path",
    "displayName": "File Path",
    "description": "\n\nThis plugin allows you to resolve the native filesystem path for Android content URIs and is based on code in the aFileChooser library.\n",
    "usage": "\n```typescript\nimport { FilePath } from '@awesome-cordova-plugins/file-path/ngx';\n\nconstructor(private filePath: FilePath) { }\n\n...\n\nthis.filePath.resolveNativePath(path)\n  .then(filePath => console.log(filePath))\n  .catch(err => console.log(err));\n\n```\n",
    "platforms": [
      "Android"
    ],
    "repo": "https://github.com/hiddentao/cordova-plugin-filepath",
    "cordovaPlugin": {
      "name": "cordova-plugin-filepath"
    },
    "premierSlug": "filesystem"
  },
  {
    "packageName": "@awesome-cordova-plugins/file-transfer",
    "displayName": "File Transfer\n",
    "description": "\nThis plugin allows you to upload and download files.\n",
    "usage": "\n```typescript\nimport { FileTransfer, FileUploadOptions, FileTransferObject } from '@awesome-cordova-plugins/file-transfer/ngx';\nimport { File } from '@awesome-cordova-plugins/file';\n\nconstructor(private transfer: FileTransfer, private file: File) { }\n\n...\n\nconst fileTransfer: FileTransferObject = this.transfer.create();\n\n// Upload a file:\nfileTransfer.upload(..).then(..).catch(..);\n\n// Download a file:\nfileTransfer.download(..).then(..).catch(..);\n\n// Abort active transfer:\nfileTransfer.abort();\n\n// full example\nupload() {\n  let options: FileUploadOptions = {\n     fileKey: 'file',\n     fileName: 'name.jpg',\n     headers: {}\n     .....\n  }\n\n  fileTransfer.upload('<file path>', '<api endpoint>', options)\n   .then((data) => {\n     // success\n   }, (err) => {\n     // error\n   })\n}\n\ndownload() {\n  const url = 'http://www.example.com/file.pdf';\n  fileTransfer.download(url, this.file.dataDirectory + 'file.pdf').then((entry) => {\n    console.log('download complete: ' + entry.toURL());\n  }, (error) => {\n    // handle error\n  });\n}\n\n```\n\nTo store files in a different/publicly accessible directory, please refer to the following link\nhttps://github.com/apache/cordova-plugin-file#where-to-store-files\n",
    "platforms": [
      "Amazon Fire OS",
      "Android",
      "Browser",
      "iOS",
      "Ubuntu",
      "Windows",
      "Windows Phone"
    ],
    "repo": "https://github.com/apache/cordova-plugin-file-transfer",
    "cordovaPlugin": {
      "name": "cordova-plugin-file-transfer"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/file",
    "displayName": "File",
    "description": "\nThis plugin implements a File API allowing read/write access to files residing on the device.\n\nThe File class implements static convenience functions to access files and directories.\n\nExample:\n```\nimport { File } from '@awesome-cordova-plugins/file/ngx';\n\nconstructor(private file: File) { }\n\n...\n\nthis.file.checkDir(this.file.dataDirectory, 'mydir').then(_ => console.log('Directory exists')).catch(err =>\n  console.log('Directory doesn't exist'));\n\n```\n\n This plugin is based on several specs, including : The HTML5 File API http: //www.w3.org/TR/FileAPI/\n The (now-defunct) Directories and System extensions Latest: http: //www.w3.org/TR/2012/WD-file-system-api-20120417/\n Although most of the plugin code was written when an earlier spec was current: http:\n  //www.w3.org/TR/2011/WD-file-system-api-20110419/ It also implements the FileWriter spec : http:\n  //dev.w3.org/2009/dap/file-system/file-writer.html",
    "platforms": [
      "Android",
      "Browser",
      "iOS",
      "macOS",
      "Windows"
    ],
    "repo": "https://github.com/apache/cordova-plugin-file",
    "cordovaPlugin": {
      "name": "cordova-plugin-file"
    },
    "premierSlug": "filesystem"
  },
  {
    "packageName": "@awesome-cordova-plugins/firebase-analytics",
    "displayName": "Firebase Analytics",
    "description": "\nCordova plugin for Firebase Analytics\n\nGo to firebase console and export google-services.json and GoogleService-Info.plist. Put those files into the root of your cordova app folder.\n\nNOTE: on iOS in order to collect demographic, age, gender data etc. you should additionally include AdSupport.framework into your project.\n\n## Using capacitor?\nFor Android you'll have to add in __android/app/src/main/AndroidManfiest.xml__ under `<application>`\n```\n<meta-data\n     tools:replace=\"android:value\"\n     android:name=\"firebase_analytics_collection_enabled\"\n     android:value=\"true\"/>\n\n<meta-data\n     tools:replace=\"android:value\"\n     android:name=\"google_analytics_automatic_screen_reporting_enabled\"\n     android:value=\"false\"/>\n```\n\nAnd in the same file, you'll have to add `xmlns:tools=\"http://schemas.android.com/tools\"` to your _manifest_ tag.\n",
    "usage": "\n```typescript\nimport { FirebaseAnalytics } from '@awesome-cordova-plugins/firebase-analytics/ngx';\n\n\nconstructor(private firebaseAnalytics: FirebaseAnalytics) { }\n\n...\n\nthis.firebaseAnalytics.logEvent('page_view', {page: \"dashboard\"})\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/chemerisuk/cordova-plugin-firebase-analytics",
    "cordovaPlugin": {
      "name": "cordova-plugin-firebase-analytics"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/firebase-authentication",
    "displayName": "Firebase Authentication",
    "description": "\nCordova plugin for Firebase Authentication\n",
    "usage": "\n```typescript\nimport { FirebaseAuthentication } from '@awesome-cordova-plugins/firebase-authentication/ngx';\n\n\nconstructor(private firebaseAuthentication: FirebaseAuthentication) { }\n\n...\n\n\nthis.firebaseAuthentication.createUserWithEmailAndPassword('test@gmail.com', '123')\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/chemerisuk/cordova-plugin-firebase-authentication",
    "installVariables": [
      "FIREBASE_AUTH_VERSION"
    ],
    "cordovaPlugin": {
      "name": "cordova-plugin-firebase-authentication"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/firebase-config",
    "displayName": "Firebase Config",
    "description": "\nCordova plugin for Firebase Config\n",
    "usage": "\n```typescript\nimport { FirebaseConfig } from '@awesome-cordova-plugins/firebase-config/ngx';\n\n\nconstructor(private firebaseConfig: FirebaseConfig) { }\n\n...\n\n\nthis.firebaseConfig.getBoolean('my_key')\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/chemerisuk/cordova-plugin-firebase-config",
    "cordovaPlugin": {
      "name": "cordova-plugin-firebase-config"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/firebase-crash",
    "displayName": "FirebaseCrash",
    "description": "\nThis plugin brings crash reporting from Google Firebase to your Cordova project! Android and iOS supported.\n",
    "usage": "\n```typescript\nimport { FirebaseCrash } from '@awesome-cordova-plugins/firebase-crash';\n\nconstructor(private firebaseCrash: FirebaseCrash) { }\n\n...\n\nthis.firebaseCrash.setUserId('123456789');\nthis.firebaseCrash.log('message');\nthis.firebaseCrash.logError('non fatal exception');\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/chemerisuk/cordova-plugin-firebase-crash",
    "cordovaPlugin": {
      "name": "cordova-plugin-firebase-crash"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/firebase-crashlytics",
    "displayName": "Firebase Crashlytics",
    "description": "\nA Google Firebase Crashlytics plugin to enable capture of crash reports.\n",
    "usage": "\n```typescript\nimport { FirebaseCrashlytics } from '@awesome-cordova-plugins/firebase-crashlytics/ngx';\n\n\nconstructor(private firebaseCrashlytics: FirebaseCrashlytics) { }\n\n...\n\n\nconst crashlytics = this.firebaseCrashlytics.initialise();\ncrashlytics.logException('my caught exception');\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/ReallySmallSoftware/cordova-plugin-firebase-crashlytics",
    "installVariables": [
      "ANDROID_FIREBASE_CORE_VERSION"
    ],
    "cordovaPlugin": {
      "name": "cordova-plugin-firebase-crashlytics"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/firebase-dynamic-links",
    "displayName": "Firebase Dynamic Links",
    "description": "\nCordova plugin for Firebase Dynamic Links\n\nVariables APP_DOMAIN and APP_PATH specify web URL where your app will start an activity to handle the link. They also used to setup support for App Indexing.\nGo to firebase console and export google-services.json and GoogleService-Info.plist. Put those files into the root of your cordova app folder.\n\nPreferences:\n\nPreferences GoogleIOSClientId and GoogleAndroidClientId are used to setup dynamic links when you have an app for several platforms.\nYou can find values at your GoogleService-Info.plist (key ANDROID_CLIENT_ID) and google-services.json (key client[0].oauth_client[0].client_id).\n\nconfig.xml:\n```xml\n<platform name=\"ios\">\n    <preference name=\"GoogleIOSClientId\" value=\"...\" />\n</platform>\n<platform name=\"android\">\n    <preference name=\"GoogleAndroidClientId\" value=\"...\" />\n</platform>\n```",
    "usage": "\n```typescript\nimport { FirebaseDynamicLinks } from '@awesome-cordova-plugins/firebase-dynamic-links/ngx';\n\n\nconstructor(private firebaseDynamicLinks: FirebaseDynamicLinks) { }\n\n...\n// Handle the logic here after opening the app with the Dynamic link\nthis.firebaseDynamicLinks.onDynamicLink()\n  .subscribe((res: any) => console.log(res), (error:any) => console.log(error));\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/chemerisuk/cordova-plugin-firebase-dynamiclinks",
    "installVariables": [
      "APP_DOMAIN",
      "APP_PATH"
    ],
    "cordovaPlugin": {
      "name": " cordova-plugin-firebase-dynamiclinks"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/firebase-messaging",
    "displayName": "Firebase Messaging",
    "description": "\nCordova plugin for Firebase Messaging\n",
    "usage": "\n```typescript\nimport { FirebaseMessaging } from '@awesome-cordova-plugins/firebase-messaging/ngx';\n\n\nconstructor(private firebaseMessaging: FirebaseMessaging) { }\n\n...\n\n\nthis.firebaseMessaging.logEvent('page_view', {page: \"dashboard\"})\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n\n```",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/chemerisuk/cordova-plugin-firebase-messaging",
    "cordovaPlugin": {
      "name": "cordova-plugin-firebase-messaging"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/firebase-vision",
    "displayName": "Firebase Vision",
    "description": "\nCordova plugin for Firebase MLKit Vision\n",
    "usage": "\n```typescript\nimport { FirebaseVision } from '@awesome-cordova-plugins/firebase-vision/ngx';\n\n\nconstructor(private firebaseVision: FirebaseVision) { }\n\n...\n\n\nthis.firebaseVision.onDeviceTextRecognizer(FILE_URI)\n  .then((res: string) => console.log(res))\n  .catch((error: string) => console.error(error));\n\nthis.firebaseVision.barcodeDetector(FILE_URI)\n  .then((res: Barcode[]) => console.log(res))\n  .catch((error: string) => console.error(error));\n\nthis.firebaseVision.imageLabeler(FILE_URI)\n  .then((res: ImageLabel[]) => console.log(res))\n  .catch((error: string) => console.error(error));\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/alon22/cordova-plugin-firebase-mlvision",
    "cordovaPlugin": {
      "name": "cordova-plugin-firebase-mlvision"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/firebase-x",
    "displayName": "Firebase X",
    "description": "\nThis plugin brings push notifications, analytics, event tracking, crash reporting and more from Google Firebase to your Cordova project! Android and iOS supported.\nIt is a maintained fork from unmaintained ionic-navite plugin called Firebase.\n",
    "usage": "\n```typescript\nimport { FirebaseX } from '@awesome-cordova-plugins/firebase-x/ngx';\n\n\nconstructor(private firebaseX: FirebaseX) { }\n\n...\n\n\nthis.firebaseX.getToken()\n  .then(token => console.log(`The token is ${token}`)) // save the token server-side and use it to push notifications to this device\n  .catch(error => console.error('Error getting token', error));\n\nthis.firebaseX.onMessageReceived()\n  .subscribe(data => console.log(`User opened a notification ${data}`));\n\nthis.firebaseX.onTokenRefresh()\n  .subscribe((token: string) => console.log(`Got a new token ${token}`));\n```",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/dpa99c/cordova-plugin-firebasex",
    "cordovaPlugin": {
      "name": "cordova-plugin-firebasex"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/firebase",
    "displayName": "Firebase",
    "description": "\nThis plugin brings push notifications, analytics, event tracking, crash reporting and more from Google Firebase to your Cordova project! Android and iOS supported (including iOS 10).\n",
    "usage": "\n```typescript\nimport { Firebase } from '@awesome-cordova-plugins/firebase/ngx';\n\nconstructor(private firebase: Firebase) { }\n\n...\n\nthis.firebase.getToken()\n  .then(token => console.log(`The token is ${token}`)) // save the token server-side and use it to push notifications to this device\n  .catch(error => console.error('Error getting token', error));\n\nthis.firebase.onNotificationOpen()\n   .subscribe(data => console.log(`User opened a notification ${data}`));\n\nthis.firebase.onTokenRefresh()\n  .subscribe((token: string) => console.log(`Got a new token ${token}`));\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/arnesson/cordova-plugin-firebase",
    "cordovaPlugin": {
      "name": "cordova-plugin-firebase"
    },
    "capacitorIncompatible": true
  },
  {
    "packageName": "@awesome-cordova-plugins/flashlight",
    "displayName": "Flashlight",
    "description": "This plugin allows you to switch the flashlight / torch of the device on and off.\n\nRequires Cordova plugin: `cordova-plugin-flashlight`. For more info, please see the [Flashlight plugin docs](https://github.com/EddyVerbruggen/Flashlight-PhoneGap-Plugin).\n",
    "usage": "\n```typescript\nimport { Flashlight } from '@awesome-cordova-plugins/flashlight/ngx';\n\nconstructor(private flashlight: Flashlight) { }\n\n...\n\nthis.flashlight.switchOn();\n\n```\n",
    "platforms": [
      "Android",
      "iOS",
      "Windows Phone 8"
    ],
    "repo": "https://github.com/EddyVerbruggen/Flashlight-PhoneGap-Plugin",
    "cordovaPlugin": {
      "name": "cordova-plugin-flashlight"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/foreground-service",
    "displayName": "Foreground Service",
    "description": "\nThis plugin allows for android devices to continue running services in the background, using a\nforeground ongoing notification. This is targeted towards use with plugins such as\n'cordova-geolocation' that will not run while the app is in the background on android API 26+.\n\nFor android API 28+, the following xml snippet should be inserted into ```config.xml```:\n\n```\n...\n<platform name=\"android\">\n  <config-file parent=\"/*\" target=\"AndroidManifest.xml\">\n    <uses-permission android:name=\"android.permission.FOREGROUND_SERVICE\" />\n  </config-file>\n  ...\n```",
    "usage": "\n```typescript\nimport { ForegroundService } from '@awesome-cordova-plugins/foreground-service/ngx';\n\n\nconstructor(public foregroundService: ForegroundService) { }\n\n...\n\nstartService() {\n // Notification importance is optional, the default is 1 - Low (no sound or vibration)\n this.foregroundService.start('GPS Running', 'Background Service', 'drawable/fsicon');\n}\n\nstopService() {\n // Disable the foreground service\n this.foregroundService.stop();\n}\n\n```\n",
    "platforms": [
      "Android"
    ],
    "repo": "https://github.com/DavidBriglio/cordova-plugin-foreground-service",
    "cordovaPlugin": {
      "name": "cordova-plugin-foreground-service"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/ftp",
    "displayName": "FTP",
    "description": "\nThis cordova plugin is created to use ftp (client) in web/js.\n",
    "usage": "\n```typescript\nimport { FTP } from '@awesome-cordova-plugins/ftp/ngx';\n\n\nconstructor(private fTP: FTP) { }\n\n...\n\n\nthis.fTP.connect('ftp_host', 'ftp_user', 'ftp_password')\n  .then((res: any) => console.log('Login successful', res))\n  .catch((error: any) => console.error(error));\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/xfally/cordova-plugin-ftp",
    "cordovaPlugin": {
      "name": "cordova-plugin-ftp"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/gao-de-location",
    "displayName": "Gao De Location",
    "description": "\nBecause the original GPS positioning uses Google Browser positioning, and Google withdraws from China, resulting in GPS Android positioning can not be positioned.\nGaode location can directly return address informationGaode location can directly return address information\n",
    "usage": "\n```typescript\nimport { GaoDeLocation } from '@awesome-cordova-plugins/gao-de-location/ngx';\n\n\nconstructor(private gaoDeLocation: GaoDeLocation) { }\n\n\nconst positionOptions: PositionOptions = {\n    androidOption: {\n     locationMode: LocationModeEnum.Hight_Accuracy,\n     gpsFirst: false,\n      HttpTimeOut: 30000,\n      interval: 2000,\n      needAddress: true,\n      onceLocation: false,\n      onceLocationLatest: false,\n      locationProtocol: LocationProtocolEnum.HTTP,\n      sensorEnable: false,\n      wifiScan: true,\n      locationCacheEnable: true\n    }, iosOption: {\n      desiredAccuracy: DesiredAccuracyEnum.kCLLocationAccuracyBest,\n      pausesLocationUpdatesAutomatically: 'YES',\n      allowsBackgroundLocationUpdates: 'NO',\n      locationTimeout: 10,\n      reGeocodeTimeout: 5,\n    }\n  };\nconst positionRes: PositionRes = await this.gaoDeLocation.getCurrentPosition(positionOptions).catch((e: any) => {\n    console.log(e);\n  }) || null;\nconsole.log(JSON.stringify(positionRes));\n\n\nthis.gaoDeLocation.startSerialLocation(positionOptions).subscribe((positionRes: PositionRes) => {\n   console.log(JSON.stringify(positionRes));\n});\n\nconst positionRes: any = this.gaoDeLocation.stopSerialLocation().catch((e) => {\n    console.log(e);\n  }) || null;\nconsole.log(JSON.stringify(positionRes));\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/waliu/cordova-plugin-gaodelocation-chenyu.git",
    "installVariables": [
      "ANDROID_API_KEY",
      "IOS_API_KEY"
    ],
    "cordovaPlugin": {
      "name": "cordova-plugin-gaodelocation-chenyu"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/ge-tui-sdk-plugin",
    "displayName": "Ge Tui Sdk Plugin",
    "description": "\nThis plugin does something\n",
    "usage": "\n```typescript\nimport { GeTuiSdkPlugin } from '@awesome-cordova-plugins/ge-tui-sdk-plugin';\n\n\nconstructor(private geTuiSdkPlugin: GeTuiSdkPlugin) { }\n\n this.geTuiSdkPlugin.callback_init((res) => { console.log(res)});\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n this.geTuiSdkPlugin.initialize();\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n this.geTuiSdkPlugin.getClientId();\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n this.geTuiSdkPlugin.getVersion();\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "git@github.com:GetuiLaboratory/cordova-plugin-getuisdk.git",
    "installVariables": [
      "PUSH_APPID",
      "PUSH_APPKEY",
      "PUSH_APPSECRET"
    ],
    "cordovaPlugin": {
      "name": "cordova-plugin-getuisdk"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/geolocation",
    "displayName": "Geolocation",
    "description": "\nThis plugin provides information about the device's location, such as latitude and longitude. Common sources of location information include Global Positioning System (GPS) and location inferred from network signals such as IP address, RFID, WiFi and Bluetooth MAC addresses, and GSM/CDMA cell IDs.\n\n This API is based on the W3C Geolocation API Specification, and only executes on devices that don't already provide an implementation.\n\nFor iOS you have to add this configuration to your configuration.xml file\n```xml\n<edit-config file=\"*-Info.plist\" mode=\"merge\" target=\"NSLocationWhenInUseUsageDescription\">\n   <string>We use your location for full functionality of certain app features.</string>\n</edit-config>\n```\n\n",
    "usage": "\n\n```typescript\nimport { Geolocation } from '@awesome-cordova-plugins/geolocation/ngx';\n\n...\n\nconstructor(private geolocation: Geolocation) {}\n\n...\n\nthis.geolocation.getCurrentPosition().then((resp) => {\n // resp.coords.latitude\n // resp.coords.longitude\n}).catch((error) => {\n  console.log('Error getting location', error);\n});\n\nlet watch = this.geolocation.watchPosition();\nwatch.subscribe((data) => {\n // data can be a set of coordinates, or an error (if an error occurred).\n // data.coords.latitude\n // data.coords.longitude\n});\n```",
    "platforms": [
      "Amazon Fire OS",
      "Android",
      "Browser",
      "iOS",
      "Windows"
    ],
    "repo": "https://github.com/apache/cordova-plugin-geolocation",
    "installVariables": [
      "GEOLOCATION_USAGE_DESCRIPTION"
    ],
    "cordovaPlugin": {
      "name": "cordova-plugin-geolocation"
    },
    "premierSlug": "geolocation"
  },
  {
    "packageName": "@awesome-cordova-plugins/globalization",
    "displayName": "Globalization",
    "description": "\nThis plugin obtains information and performs operations specific to the user's locale, language, and timezone.\n",
    "usage": "\n```typescript\nimport { Globalization } from '@awesome-cordova-plugins/globalization/ngx';\n\nconstructor(private globalization: Globalization) { }\n\n\n...\n\n\nthis.globalization.getPreferredLanguage()\n  .then(res => console.log(res))\n  .catch(e => console.log(e));\n\n\n```",
    "platforms": [
      "Amazon Fire OS",
      "Android",
      "Browser",
      "iOS",
      "Windows"
    ],
    "repo": "https://github.com/apache/cordova-plugin-globalization",
    "cordovaPlugin": {
      "name": "cordova-plugin-globalization"
    },
    "premierSlug": "globalization"
  },
  {
    "packageName": "@awesome-cordova-plugins/google-analytics",
    "displayName": "Google Analytics",
    "description": "\nThis plugin connects to Google's native Universal Analytics SDK\nPrerequisites:\n- A Cordova 3.0+ project for iOS and/or Android\n- A Mobile App property through the Google Analytics Admin Console\n- (Android) Google Play Services SDK installed via [Android SDK Manager](https://developer.android.com/sdk/installing/adding-packages.html)",
    "usage": "\n```typescript\nimport { GoogleAnalytics } from '@awesome-cordova-plugins/google-analytics/ngx';\n\nconstructor(private ga: GoogleAnalytics) { }\n\n...\n\nthis.ga.startTrackerWithId('YOUR_TRACKER_ID')\n   .then(() => {\n     console.log('Google analytics is ready now');\n      this.ga.trackView('test');\n     // Tracker is ready\n     // You can now track pages or set additional information such as AppVersion or UserId\n   })\n   .catch(e => console.log('Error starting GoogleAnalytics', e));\n\n\n```\n",
    "platforms": [
      "Android",
      "Browser",
      "iOS",
      "Windows Phone 8"
    ],
    "repo": "https://github.com/danwilson/google-analytics-plugin",
    "cordovaPlugin": {
      "name": "cordova-plugin-google-analytics"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/google-nearby",
    "displayName": "Google Nearby",
    "description": "\nThis plugin adds support for the Google Nearby Messages API.\n",
    "usage": "\n```typescript\nimport { GoogleNearby } from '@awesome-cordova-plugins/google-nearby/ngx';\n\n\nconstructor(private googleNearby: GoogleNearby) { }\n\nthis.googleNearby.publish('Hello')\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n\nthis.googleNearby.subscribe()\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n```\n",
    "platforms": [
      "Android"
    ],
    "repo": "https://github.com/hahahannes/cordova-plugin-google-nearby",
    "installVariables": [
      "API_KEY"
    ],
    "cordovaPlugin": {
      "name": "cordova-plugin-google-nearby"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/google-plus",
    "displayName": "Google Plus",
    "description": "",
    "usage": "\n```typescript\nimport { GooglePlus } from '@awesome-cordova-plugins/google-plus/ngx';\n\nconstructor(private googlePlus: GooglePlus) { }\n\n...\n\nthis.googlePlus.login({})\n  .then(res => console.log(res))\n  .catch(err => console.error(err));\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/EddyVerbruggen/cordova-plugin-googleplus",
    "installVariables": [
      "REVERSED_CLIENT_ID"
    ],
    "cordovaPlugin": {
      "name": "cordova-plugin-googleplus"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/header-color",
    "displayName": "Header Color",
    "description": "\nCordova plugin to change color of header in Android Multitask View\n",
    "usage": "\n```typescript\nimport { HeaderColor } from '@awesome-cordova-plugins/header-color/ngx';\n\nconstructor(private headerColor: HeaderColor) { }\n\n...\n\nthis.headerColor.tint('#becb29');\n```\n",
    "platforms": [
      "Android"
    ],
    "repo": "https://github.com/tomloprod/cordova-plugin-headercolor",
    "cordovaPlugin": {
      "name": "cordova-plugin-headercolor"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/health-kit",
    "displayName": "Health Kit",
    "description": "\nThe HealthKit plugin allows you to read data from and write data to the iOS 8+ HealthKit framework.\nAny data saved shows up in the iOS Health app and is available for other iOS apps.\n",
    "usage": "\n```typescript\nimport { HealthKit } from '@awesome-cordova-plugins/health-kit/ngx';\n\n\nconstructor(private healthKit: HealthKit) { }\n\n...\n```\n",
    "platforms": [
      "iOS"
    ],
    "repo": "https://github.com/Telerik-Verified-Plugins/HealthKit",
    "cordovaPlugin": {
      "name": "com.telerik.plugins.healthkit"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/health",
    "displayName": "Health",
    "description": "\nA plugin that abstracts fitness and health repositories like Apple HealthKit or Google Fit.\n",
    "usage": "\n```typescript\nimport { Health } from '@awesome-cordova-plugins/health/ngx';\n\n\nconstructor(private health: Health) { }\n\n...\n\nthis.health.isAvailable()\n.then((available:boolean) => {\n  console.log(available);\n  this.health.requestAuthorization([\n    'distance', 'nutrition',  //read and write permissions\n    {\n      read: ['steps'],       //read only permission\n      write: ['height', 'weight']  //write only permission\n    }\n  ])\n  .then(res => console.log(res))\n  .catch(e => console.log(e));\n})\n.catch(e => console.log(e));\n\n```\nSee description at https://github.com/dariosalvi78/cordova-plugin-health for a full list of Datatypes and see examples.\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/dariosalvi78/cordova-plugin-health",
    "cordovaPlugin": {
      "name": "cordova-plugin-health"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/http",
    "displayName": "HTTP",
    "description": "\nCordova / Phonegap plugin for communicating with HTTP servers. Supports iOS and Android.\n\nAdvantages over Javascript requests:\n- SSL / TLS Pinning\n- CORS restrictions do not apply\n- Handling of HTTP code 401 - read more at [Issue CB-2415](https://issues.apache.org/jira/browse/CB-2415)\n",
    "usage": "\n```typescript\nimport { HTTP } from '@awesome-cordova-plugins/http/ngx';\n\nconstructor(private http: HTTP) {}\n\n...\n\nthis.http.get('http://ionic.io', {}, {})\n  .then(data => {\n\n    console.log(data.status);\n    console.log(data.data); // data received by server\n    console.log(data.headers);\n\n  })\n  .catch(error => {\n\n    console.log(error.status);\n    console.log(error.error); // error message as string\n    console.log(error.headers);\n\n  });\n\n```",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/silkimen/cordova-plugin-advanced-http",
    "cordovaPlugin": {
      "name": "cordova-plugin-advanced-http"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/iamport-cordova",
    "displayName": "Iamport Cordova",
    "description": "\nCordova plugin that integrates with and handles multiple payment gateways.\n",
    "usage": "\n```typescript\nimport { IamportCordova } from '@awesome-cordova-plugins/iamport-cordova/ngx';\n\n\nconstructor(private iamportCordova: IamportCordova) { }\n\n...\n\n\nthis.iamportCordova.functionName('Hello', 123)\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n\n```\n",
    "platforms": [
      "ios",
      "android"
    ],
    "repo": "https://github.com/iamport/iamport-cordova",
    "cordovaPlugin": {
      "name": "iamport-cordova"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/ibeacon",
    "displayName": "IBeacon",
    "description": "\nThis plugin provides functions for working with iBeacons.\n\n The plugin's API closely mimics the one exposed through the [CLLocationManager](https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManager_Class/index.html) introduced in iOS 7.\n",
    "usage": "\n\n```typescript\nimport { IBeacon } from '@awesome-cordova-plugins/ibeacon/ngx';\n\nconstructor(private ibeacon: IBeacon) { }\n\n...\n\n\n// Request permission to use location on iOS\nthis.ibeacon.requestAlwaysAuthorization();\n// create a new delegate and register it with the native layer\nlet delegate = this.ibeacon.Delegate();\n\n// Subscribe to some of the delegate's event handlers\ndelegate.didRangeBeaconsInRegion()\n  .subscribe(\n    data => console.log('didRangeBeaconsInRegion: ', data),\n    error => console.error()\n  );\ndelegate.didStartMonitoringForRegion()\n  .subscribe(\n    data => console.log('didStartMonitoringForRegion: ', data),\n    error => console.error()\n  );\ndelegate.didEnterRegion()\n  .subscribe(\n    data => {\n      console.log('didEnterRegion: ', data);\n    }\n  );\n\nlet beaconRegion = this.ibeacon.BeaconRegion('deskBeacon','F7826DA6-ASDF-ASDF-8024-BC5B71E0893E');\n\nthis.ibeacon.startMonitoringForRegion(beaconRegion)\n  .then(\n    () => console.log('Native layer received the request to monitoring'),\n    error => console.error('Native layer failed to begin monitoring: ', error)\n  );\n```",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/petermetz/cordova-plugin-ibeacon",
    "cordovaPlugin": {
      "name": "cordova-plugin-ibeacon"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/image-picker",
    "displayName": "Image Picker",
    "description": "\nCordova Plugin For Multiple Image Selection\n\nRequires Cordova plugin: `cordova-plugin-image-picker`.\nFor more info, please see the https://github.com/Telerik-Verified-Plugins/ImagePicker\n",
    "usage": "\n```typescript\nimport { ImagePicker } from '@awesome-cordova-plugins/image-picker/ngx';\n\n\nconstructor(private imagePicker: ImagePicker) { }\n\n...\n\nthis.imagePicker.getPictures(options).then((results) => {\n  for (var i = 0; i < results.length; i++) {\n      console.log('Image URI: ' + results[i]);\n  }\n}, (err) => { });\n\n```",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/Telerik-Verified-Plugins/ImagePicker",
    "installVariables": [
      "PHOTO_LIBRARY_USAGE_DESCRIPTION"
    ],
    "cordovaPlugin": {
      "name": "cordova-plugin-telerik-imagepicker"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/imap",
    "displayName": "Imap",
    "description": "\nThis plugin will enable an Ionic application to use the IMAP (Internet Message Access Protocol) features.\nThis plugin is in Beta version and it offers support only for Android.\nThe plugin uses Java Mail API.\nPlanned improvements and support for iOS.\n",
    "usage": "\n```typescript\nimport { Imap } from '@awesome-cordova-plugins/imap/ngx';\n\n\nconstructor(private imap: Imap) { }\n\n...\n\n\nthis.imap.connect({\n host: 'imap.gmail.com',\n user: 'my_email@gmail.com',\n password: 'my-pass'\n})\n  .then((res: Connection) => console.log(res))\n  .catch((error) => console.error(error));\n\n\n\n this.imap.disconnect()\n  .then((res: boolean) => console.log(res))\n  .catch((error: any) => console.error(error));\n\n\n\nthis.imap.isConnected()\n  .then((res: boolean) => console.log(res))\n  .catch((error: any) => console.error(error));\n\n Note: Connected to an IMAP service is REQUIRED to be able to get data from the below functions.\n\n\n  this.imap.listMailFolders()\n  .then((res: boolean) => console.log(res))\n  .catch((error: any) => console.error(error));\n\n\n  this.imap.getMessageCountByFolderName('INBOX')\n  .then((res: number) => {\n  // Returns the count of the messages in the folder as a result\n   console.log(res)\n  })\n  .catch((error: any) => {\n    console.error(error)\n  });\n\n\n\n  this.imap.searchMessagesByDatePeriod('INBOX', 1601503200000, Comparison.GE)\n  .then((res: number[]) => {\n  // Returns array with messages' consecutive numbers\n  // ex. [1207, 1208, 1209]\n   console.log(res)\n  })\n  .catch((error: any) => {\n    console.error(error)\n  });\n\n\n  this.imap.listMessagesHeadersByConsecutiveNumber('INBOX', 1200, 1280)\n  .then((res: Message[]) => {\n  //  Returns array with messages' headers data\n   console.log(res)\n  })\n  .catch((error: any) => {\n    console.error(error)\n  });\n\n\n  this.imap.listMessagesHeadersByDate('INBOX', 1601503200000, Comparison.GE)\n  .then((res: Message[]) => {\n  // Returns array with messages' headers data\n   console.log(res)\n  })\n  .catch((error: any) => {\n    console.error(error)\n  });\n\n\n  this.imap.getFullMessageData('INBOX', 1205)\n  .then((res: Message) => {\n  // Returns \"Message\" object with the full message data including attachments.\n   console.log(res)\n  })\n  .catch((error: any) => {\n    console.error(error)\n  });\n\n\n  this.imap.copyToFolder('INBOX', 'Spam', [1204, 1205, 1206, 1207])\n  .then((res: boolean) => {\n  // Returns \"true\" if the process is successful, else returns \"false\".\n   console.log(res)\n  })\n  .catch((error: any) => {\n    console.error(error)\n  });\n\n\n  * Sets a flag on a message\n  * \"setFlag()\" can be used for deleting messages setting the Delete flag to \"FlagEnum.DELETED\"\n  this.imap.setFlag('INBOX', [1206, 1205, 1204], FlagEnum.SEEN, true)\n  .then((res: ModificationResult) => {\n\n   // res.status - return true or false based on the deletion success\n\n  //res.modifiedMessages - for ex.[1206, 1205, 1204];\n\n  })\n  .catch((error: any) => {\n    console.error(error)\n  });\n\n```\n",
    "platforms": [
      "Android"
    ],
    "repo": "https://github.com/aleksandar888/cordova-plugin-imap.git",
    "cordovaPlugin": {
      "name": "cordova-plugin-imap"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/in-app-browser",
    "displayName": "In App Browser",
    "description": "Launches in app Browser",
    "usage": "\n```typescript\nimport { InAppBrowser } from '@awesome-cordova-plugins/in-app-browser/ngx';\n\nconstructor(private iab: InAppBrowser) { }\n\n\n...\n\n\nconst browser = this.iab.create('https://ionicframework.com/');\n\nbrowser.executeScript(...);\n\nbrowser.insertCSS(...);\nbrowser.on('loadstop').subscribe(event => {\n   browser.insertCSS({ code: \"body{color: red;\" });\n});\n\nbrowser.close();\n\n```",
    "platforms": [
      "AmazonFire OS",
      "Android",
      "Browser",
      "iOS",
      "macOS",
      "Windows"
    ],
    "repo": "https://github.com/apache/cordova-plugin-inappbrowser",
    "cordovaPlugin": {
      "name": "cordova-plugin-inappbrowser"
    },
    "premierSlug": "inappbrowser"
  },
  {
    "packageName": "@awesome-cordova-plugins/in-app-purchase-2",
    "displayName": "In App Purchase 2",
    "description": "\nIn-App Purchase on iOS, Android, Windows, macOS and XBox.\n\n## Features\n\n|  | ios | android | win-8 | win-10/uwp | mac |\n|--|--|--|--|--|--|\n| consumables | ✅ | ✅ | ✅ | ✅ | ✅ |\n| non consumables | ✅ | ✅ | ✅ | ✅ | ✅ |\n| subscriptions | ✅ | ✅ | ✅ | ✅ | ✅ |\n| restore purchases | ✅ | ✅ | ✅ | ✅ | ✅ |\n| receipt validations | ✅ | ✅ |  | ✅ | ✅ |\n| downloadable content | ✅ |   |   |   | ✅ |\n| introductory prices | ✅ | ✅ |   | ✅ | ✅ |\n\nSupports:\n\n - **iOS** version 7.0 or higher.\n - **Android** version 2.2 (API level 8) or higher\n   - with Google Play client version 3.9.16 or higher\n - **Windows** Store/Phone 8.1 or higher\n - **Windows 10 Mobile**\n - **macOS** version 10\n - **Xbox One**\n   - (and any platform supporting Microsoft's UWP)\n",
    "usage": "\n```typescript\nimport { InAppPurchase2 } from '@awesome-cordova-plugins/in-app-purchase-2/ngx';\n\nconstructor(public platform: Platform, private store: InAppPurchase2) {\n  platform.ready().then(() => {\n   this.store.register({\n     id: \"my_product_id\",\n     type: this.store.NON_RENEWING_SUBSCRIPTION,\n   });\n   this.store.when(\"my_product_id\")\n     .approved(p => p.verify())\n     .verified(p => p.finish());\n   this.store.refresh();\n  });\n}\n\n...\n\nthis.store.order(\"my_product_id\");\n\n```\n\n## Full example\n\n```typescript\n // After platform ready\n this.store.verbosity = this.store.DEBUG;\n this.store.register({\n   id: \"my_product_id\",\n   type: this.store.PAID_SUBSCRIPTION,\n });\n\n // Register event handlers for the specific product\n this.store.when(\"my_product_id\").registered( (product: IAPProduct) => {\n   console.log('Registered: ' + JSON.stringify(product));\n });\n\n // Updated\n this.store.when(\"my_product_id\").updated( (product: IAPProduct) => {\n   console.log('Updated' + JSON.stringify(product));\n });\n\n // User closed the native purchase dialog\n this.store.when(\"my_product_id\").cancelled( (product) => {\n     console.error('Purchase was Cancelled');\n });\n\n // Track all store errors\n this.store.error( (err) => {\n   console.error('Store Error ' + JSON.stringify(err));\n });\n\n // Run some code only when the store is ready to be used\n this.store.ready(() =>  {\n   console.log('Store is ready');\n   console.log('Products: ' + JSON.stringify(this.store.products));\n   console.log(JSON.stringify(this.store.get(\"my_product_id\")));\n });\n\n // Refresh the status of in-app products\n this.store.refresh();\n\n ...\n\n // To make a purchase\n this.store.order(\"my_product_id\");\n\n```\n\n## Philosophy\n\nThe API is mostly events based. As a user of this plugin,\nyou will have to register listeners to changes happening to the products\nyou register.\n\nThe core of the listening mechanism is the `when()` method. It allows you to\nbe notified of changes to one or a set of products using a query mechanism:\n```typescript\n this.store.when(\"product\").updated(refreshScreen); // match any product\n this.store.when(\"full_version\").owned(unlockApp); // match a specific product\n this.store.when(\"subscription\").approved(serverCheck); // match all subscriptions\n this.store.when(\"downloadable content\").downloaded(showContent);\n```\n\nThe `updated` event is fired whenever one of the fields of a product is\nchanged (its `owned` status for instance).\n\nThis event provides a generic way to track the statuses of your purchases,\nto unlock features when needed and to refresh your views accordingly.\n\n## Registering products\n\nThe store needs to know the type and identifiers of your products before you\ncan use them in your code.\n\nUse `store.register()` to define them before your first call to `store.refresh()`.\n\nOnce registered, you can use `store.get()` to retrieve an `IAPProduct` object.\n\n```typescript\n this.store.register({\n   id: \"my_consumable1\",\n   type: this.store.CONSUMABLE\n });\n ...\n const p = this.store.get(\"my_consumable1\");\n```\n\nThe product `id` and `type` have to match products defined in your\nApple, Google or Microsoft developer consoles.\n\nLearn more about it [from the wiki](https://github.com/j3k0/cordova-plugin-purchase/wiki).\n\n## Displaying products\n\nRight after you registered your products, nothing much is known about them\nexcept their `id`, `type` and an optional `alias`.\n\nWhen you perform the initial call to `store.refresh()`, the platforms' server will\nbe contacted to load informations about the registered products: human\nreadable `title` and `description`, `price`, etc.\n\nThis isn't an optional step, store owners require you\nto display information about a product exactly as retrieved from their server: no\nhard-coding of price and title allowed! This is also convenient for you\nas you can change the price of your items knowing that it'll be reflected instantly\non your clients' devices.\n\nNote that the information may not be available when the first view that needs\nthem appears on screen. For you, the best option is to have your view monitor\nchanges made to the product.\n\n## Purchasing\n\n#### initiate a purchase\n\nPurchases are initiated using the `store.order(\"some_product_id\")` method.\n\nThe store will manage the internal purchase flow. It'll end:\n\n - with an `approved` event. The product enters the `APPROVED` state.\n - with a `cancelled` event. The product gets back to the `VALID` state.\n - with an `error` event. The product gets back to the `VALID` state.\n\nSee the product life-cycle section for details about product states.\n\n#### finish a purchase\n\nOnce the transaction is approved, the product still isn't owned: the store needs\nconfirmation that the purchase was delivered before closing the transaction.\n\nTo confirm delivery, you'll use the `product.finish()` method.\n\n#### example usage\n\nDuring initialization:\n```typescript\nthis.store.when(\"extra_chapter\").approved((product: IAPProduct) => {\n  // download the feature\n  app.downloadExtraChapter()\n  .then(() => product.finish());\n});\n```\n\nWhen the purchase button is clicked:\n```typescript\nthis.store.order(\"extra_chapter\");\n```\n\n#### un-finished purchases\n\nIf your app wasn't able to deliver the content, `product.finish()` won't be called.\n\nDon't worry: the `approved` event will be re-triggered the next time you\ncall `store.refresh()`, which can very well be the next time\nthe application starts. Pending transactions are persistant.\n\n#### simple case\n\nIn the most simple case, where:\n\n - delivery of purchases is only local ;\n - you don't want (or need) to implement receipt validation ;\n\nYou may just want to finish all purchases automatically. You can do it this way:\n```js\nthis.store.when(\"product\").approved((p: IAPProduct) => p.finish());\n```\n\nNOTE: the \"product\" query will match any purchases (see \"queries\" to learn more details about queries).\n\n## Receipt validation\n\nTo get the most up-to-date information about purchases (in case a purchase have been canceled, or a subscription renewed),\nyou should implement server side receipt validation.\n\nThis also protects you against fake \"purchases\", made by some users using\n\"free in-app purchase\" apps on their devices.\n\nWhen a purchase has been approved by the store, it's enriched with\ntransaction information (see `product.transaction` attribute).\n\nTo verify a purchase you'll have to do three things:\n\n - configure the validator.\n - call `product.verify()` from the `approved` event, before finishing the transaction.\n - finish the transaction when transaction is `verified`.\n\n**Shameless Plug**: this is a feature many users struggle with, so as the author of this plugin, we can provide it to you as-a-service: https://billing.fovea.cc/\n(which is free until you start making serious money)\n\n#### example using a validation URL\n\n```js\nthis.store.validator = \"https://billing.fovea.cc/\";\n\nthis.store.when(\"my stuff\")\n  .approved((p: IAPProduct) => p.verify())\n  .verified((p: IAPProduct) => p.finish());\n```\n\n## Subscriptions\n\nFor subscription, you MUST implement remote receipt validation.\n\nWhen the receipt validator returns a `store.PURCHASE_EXPIRED` error code, the subscription will\nautomatically loose its `owned` status.\n\nTypically, you'll enable and disable access to your content this way.\n```typescript\nthis.store.when(\"my_subcription\").updated((product: IAPProduct) => {\n  if (product.owned)\n    app.subscriberMode();\n  else\n    app.guestMode();\n});\n```\n\n## Product life-cycle\n\nA product will change state during the application execution.\n\nFind below a diagram of the different states a product can pass by.\n\n```\nREGISTERED +--> INVALID\n           |\n           +--> VALID +--> REQUESTED +--> INITIATED +-+\n                                                      |\n                ^      +------------------------------+\n                |      |\n                |      |             +--> DOWNLOADING +--> DOWNLOADED +\n                |      |             |                                |\n                |      +--> APPROVED +--------------------------------+--> FINISHED +--> OWNED\n                |                                                             |\n                +-------------------------------------------------------------+\n\n#### Notes\n\n - When finished, a consumable product will get back to the `VALID` state, while other will enter the `OWNED` state.\n - Any error in the purchase process will bring a product back to the `VALID` state.\n - During application startup, products may go instantly from `REGISTERED` to `APPROVED` or `OWNED`, for example if they are purchased non-consumables or non-expired subscriptions.\n - Non-Renewing Subscriptions are iOS products only. Please see the [iOS Non Renewing Subscriptions documentation](https://github.com/j3k0/cordova-plugin-purchase/blob/master/doc/ios.md#non-renewing) for a detailed explanation.\n\n## events\n\n - `loaded(IAPProduct)`\n   - Called when product data is loaded from the store.\n - `updated(IAPProduct)`\n   - Called when any change occured to a product.\n - `error(err)`\n   - Called when an order failed.\n   - The `err` parameter is an error object\n - `approved(IAPProduct)`\n   - Called when a product order is approved.\n - `owned(IAPProduct)`\n   - Called when a non-consumable product or subscription is owned.\n - `cancelled(IAPProduct)`\n   - Called when a product order is cancelled by the user.\n - `refunded(IAPProduct)`\n   - Called when an order is refunded by the user.\n - Actually, all other product states have their promise\n   - `registered`, `valid`, `invalid`, `requested`,\n     `initiated` and `finished`\n - `verified(IAPProduct)`\n   - Called when receipt validation successful\n - `unverified(IAPProduct)`\n   - Called when receipt verification failed\n - `expired(IAPProduct)`\n   - Called when validation find a subscription to be expired\n - `downloading(IAPProduct, progress, time_remaining)`\n   - Called when content download is started\n - `downloaded(IAPProduct)`\n   - Called when content download has successfully completed\n\n## Learn More\n\n - [GitHub](https://github.com/j3k0/cordova-plugin-purchase)\n - [GitBook](https://purchase.cordova.fovea.cc/)\n - [Wiki](https://github.com/j3k0/cordova-plugin-purchase/wiki)\n - [API reference](https://github.com/j3k0/cordova-plugin-purchase/blob/master/doc/api.md)\n\n## Technical Support or Questions\n\nIf you have questions or need help integrating In-App Purchase, [Open an Issue on GitHub](https://github.com/j3k0/cordova-plugin-purchase/issues) or email us at _support@fovea.cc_.\n\n@interfaces\nIAPProduct\nIAPProductOptions\nIAPProductEvents\n```\n",
    "platforms": [
      "iOS",
      "Android",
      "Windows"
    ],
    "repo": "https://github.com/j3k0/cordova-plugin-purchase",
    "cordovaPlugin": {
      "name": "cordova-plugin-purchase"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/in-app-review",
    "displayName": "In App Review",
    "description": "\nThis plugin does use the iOS class SKStore​Review​Controller to open the inApp review popup available since iOS 10.3\n\nThis functionality only works on iOS devices\n\n",
    "usage": "\n```typescript\nimport { InAppReview } from '@awesome-cordova-plugins/in-app-review/ngx';\n\n\nconstructor(private inAppReview: InAppReview) { }\n\n...\n\n\nthis.inAppReview.requestReview()\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n\n```\n",
    "platforms": [
      "iOS"
    ],
    "repo": "https://github.com/omaxlive/com.omarben.inappreview",
    "cordovaPlugin": {
      "name": "com.omarben.inappreview"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/insomnia",
    "displayName": "Insomnia",
    "description": "\nPrevent the screen of the mobile device from falling asleep.\n",
    "usage": "\n```typescript\nimport { Insomnia } from '@awesome-cordova-plugins/insomnia/ngx';\n\nconstructor(private insomnia: Insomnia) { }\n\n...\n\nthis.insomnia.keepAwake()\n  .then(\n    () => console.log('success'),\n    () => console.log('error')\n  );\n\nthis.insomnia.allowSleepAgain()\n  .then(\n    () => console.log('success'),\n    () => console.log('error')\n  );\n```\n\n",
    "platforms": [
      "Android",
      "Browser",
      "Firefox OS",
      "iOS",
      "Windows",
      "Windows Phone 8"
    ],
    "repo": "https://github.com/EddyVerbruggen/Insomnia-PhoneGap-Plugin",
    "cordovaPlugin": {
      "name": "cordova-plugin-insomnia"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/instagram",
    "displayName": "Instagram",
    "description": "Share a photo with the instagram app\n",
    "usage": "\n```typescript\nimport { Instagram } from '@awesome-cordova-plugins/instagram/ngx';\n\nconstructor(private instagram: Instagram) { }\n\n...\n\nthis.instagram.share('data:image/png;uhduhf3hfif33', 'Caption')\n  .then(() => console.log('Shared!'))\n  .catch((error: any) => console.error(error));\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/vstirbu/InstagramPlugin",
    "cordovaPlugin": {
      "name": "cordova-instagram-plugin"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/intercom",
    "displayName": "Intercom",
    "description": "\nThis is a plugin that allows your Ionic app to use Intercom for iOS and/or Intercom for Android.\nFollow the offical documentation to setup this plugin correctly: https://developers.intercom.com/docs/cordova-phonegap-configuration\n",
    "usage": "\n```typescript\nimport { Intercom } from '@awesome-cordova-plugins/intercom/ngx';\n\n\nconstructor(private intercom: Intercom) { }\n\n...\n\nthis.intercom.registerUnidentifiedUser();\n...\nthis.intercom.registerForPush();\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/intercom/intercom-cordova",
    "cordovaPlugin": {
      "name": "cordova-plugin-intercom"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/ionic-webview",
    "displayName": "Ionic Webview",
    "description": "\nAccess Web View utilities.\n\nRequires the Cordova plugin: `cordova-plugin-ionic-webview` > 2.0. For more info, please see the [Ionic Web View](https://github.com/ionic-team/cordova-plugin-ionic-webview) repository.\n",
    "usage": "\n```typescript\nimport { WebView } from '@awesome-cordova-plugins/ionic-webview/ngx';\n\n\nconstructor(private webview: WebView) { }\n\n...\n\nimg = this.webview.convertFileSrc('file:///Users/dan/camera-image-12345.png')\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/ionic-team/cordova-plugin-ionic-webview",
    "cordovaPlugin": {
      "name": "cordova-plugin-ionic-webview"
    },
    "capacitorIncompatible": true
  },
  {
    "packageName": "@awesome-cordova-plugins/ios-aswebauthenticationsession-api",
    "displayName": "ios-aswebauthenticationsession-api",
    "description": "\nPlugin for iOS 12 ASWebAuthenticationSession API\n",
    "usage": "\n```typescript\nimport { IosASWebauthenticationSession } from '@awesome-cordova-plugins/ios-aswebauthenticationsession-api/ngx';\n\n\nconstructor(private IosASWebauthenticationSession: ios-aswebauthenticationsession-api) { }\n\n...\n\n\nthis.IosASWebauthenticationSession.start(callbackUrl, authorizeURL)\n  .then((redirectUrl: string) => console.log(redirectUrl))\n  .catch((error: any) => console.error(error));\n\n```\n",
    "platforms": [
      "iOS"
    ],
    "repo": "https://github.com/jwelker110/cordova-plugin-ios-aswebauthenticationsession-api",
    "cordovaPlugin": {
      "name": "cordova-plugin-ios-aswebauthenticationsession-api"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/is-debug",
    "displayName": "Is Debug",
    "description": "\nDetect if the app is running in debug mode or not.\nDebug mode is when the app is built and installed locally via xcode / eclipse / the cordova cli etc, compared to release mode when the app was downloaded from the app / play store via an end user.\n",
    "usage": "\n```typescript\nimport { IsDebug } from '@awesome-cordova-plugins/is-debug/ngx';\n\nconstructor(private isDebug: IsDebug) { }\n\n...\n\nthis.isDebug.getIsDebug()\n  .then(isDebug => console.log('Is debug:', isDebug))\n  .catch(err => console.error(err));\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/mattlewis92/cordova-plugin-is-debug",
    "cordovaPlugin": {
      "name": "cordova-plugin-is-debug"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/keyboard",
    "displayName": "Keyboard",
    "description": "\nKeyboard plugin for Cordova.\n\nRequires Cordova plugin: `cordova-plugin-ionic-keyboard`. For more info, please see the [Keyboard plugin docs](https://github.com/ionic-team/cordova-plugin-ionic-keyboard).\n",
    "usage": "\n```typescript\nimport { Keyboard } from '@awesome-cordova-plugins/keyboard/ngx';\n\nconstructor(private keyboard: Keyboard) { }\n\n...\n\nthis.keyboard.show();\n\nthis.keyboard.hide();\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/ionic-team/cordova-plugin-ionic-keyboard",
    "cordovaPlugin": {
      "name": "cordova-plugin-ionic-keyboard"
    },
    "premierSlug": "keyboard",
    "capacitorIncompatible": true
  },
  {
    "packageName": "@awesome-cordova-plugins/keychain",
    "displayName": "Keychain",
    "description": "\nGet and set data in the iOS Keychain\n\nRequires Cordova plugin: `cordova-plugin-ios-keychain`. For more info, please see the [Keychain plugin docs](https://github.com/ionic-team/cordova-plugin-ios-keychain).\n\nSee also [Secure Storage](https://ionicframework.com/docs/native/secure-storage/) for more supported platforms.\n",
    "usage": "\n```typescript\nimport { Keychain } from '@awesome-cordova-plugins/keychain/ngx';\n\nconstructor(private keychain: Keychain) { }\n\n...\n\nthis.keychain.set(key, value).then(() => {\n  this.keychain.get(key)\n    .then(value => console.log('Got value', value))\n    .catch(err => console.error('Error getting', err));\n})\n.catch(err => console.error('Error setting', err));\n```\n",
    "platforms": [
      "iOS"
    ],
    "repo": "https://github.com/ionic-team/cordova-plugin-ios-keychain",
    "cordovaPlugin": {
      "name": "cordova-plugin-ios-keychain"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/kommunicate",
    "displayName": "Kommunicate",
    "description": "\nThe plugin for the Kommunicate SDK.\nWith the help of this plugin, you can easily add human + bot chat support functionality to you app.\nRefer to: TODO: insert site link\nFor documentation: TODO: insert link\n",
    "usage": "\n```typescript\nimport { Kommunicate } from '@awesome-cordova-plugins/Kommunicate';\n\nconstructor(private kommunicate: Kommunicate) { }\n//also add [..., Kommunicate, ... ] inside the providers array, if required\n\nvar kmUser = {\n   userId : 'randomstring',\n   authenticationTypeId : 1\n};\n\nthis.kommunicate.login(kmUser)\n  .then((res: any) => console.log(\"Sucessfully logged in.\" + res))\n  .catch((error: any) => console.error(\"Error logging in.\" + error));\n\nvar conversationObject = {\n   isUnique : false\n};\n\nthis.kommunicate.conversationBuilder(converationObject)\n  .then((clientChannelKey: any) => console.log(\"Kommunicate create conversation successful the clientChannelKey is : \" + clientChannelKey))\n  .catch((error: any) => console.error(\"Error creating conversation.\" + error));\n\n```\n",
    "platforms": [
      "Android",
      "Browser",
      "iOS"
    ],
    "repo": "https://github.com/Kommunicate-io/Kommunicate-Cordova-Ionic-PhoneGap-Chat-Plugin",
    "cordovaPlugin": {
      "name": "kommunicate-cordova-plugin"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/launch-navigator",
    "displayName": "Launch Navigator",
    "description": "\nRequires Cordova plugin: uk.co.workingedge.phonegap.plugin.launchnavigator. For more info, please see the [LaunchNavigator plugin docs](https://github.com/dpa99c/phonegap-launch-navigator).\n",
    "usage": "\nPlease refer to the plugin's repo for detailed usage. This docs page only explains the Native wrapper.\n\n```typescript\nimport { LaunchNavigator, LaunchNavigatorOptions } from '@awesome-cordova-plugins/launch-navigator/ngx';\n\nconstructor(private launchNavigator: LaunchNavigator) { }\n\n...\n\nlet options: LaunchNavigatorOptions = {\n  start: 'London, ON',\n  app: LaunchNavigator.APPS.UBER\n}\n\nthis.launchNavigator.navigate('Toronto, ON', options)\n  .then(\n    success => console.log('Launched navigator'),\n    error => console.log('Error launching navigator', error)\n  );\n```",
    "platforms": [
      "Android",
      "iOS",
      "Windows",
      "Windows Phone 8"
    ],
    "repo": "https://github.com/dpa99c/phonegap-launch-navigator",
    "cordovaPlugin": {
      "name": "uk.co.workingedge.phonegap.plugin.launchnavigator"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/launch-review",
    "displayName": "Launch Review",
    "description": "\n\nAssists in leaving user reviews/ratings in the App Stores.\n- Launches the platform's App Store page for the current app in order for the user to leave a review.\n- On iOS (10.3 and above) invokes the native in-app rating dialog which allows a user to rate your app without needing to open the App Store.\n",
    "usage": "\n```typescript\nimport { LaunchReview } from '@awesome-cordova-plugins/launch-review/ngx';\n\nconstructor(private launchReview: LaunchReview) { }\n\n...\n\nthis.launchReview.launch()\n  .then(() => console.log('Successfully launched store app'));\n\nif(this.launchReview.isRatingSupported()){\n  this.launchReview.rating()\n    .then(() => console.log('Successfully launched rating dialog'));\n}\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/dpa99c/cordova-launch-review",
    "cordovaPlugin": {
      "name": "cordova-launch-review"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/line-login",
    "displayName": "Line Login",
    "description": "\nThe function login, logs out, acquires, verifies, and refreshes the access token. The version of LineSDK you are using is as follows.\n",
    "usage": "\n```typescript\nimport { LineLogin } from '@awesome-cordova-plugins/line-login/ngx';\n\n\nconstructor(private lineLogin: LineLogin) { }\n\n...\n\n\nthis.lineLogin.initialize({ channel_id: \"xxxxxxxxxx\" })\n\nthis.lineLogin.login()\n  .then(result => console.log(result))\n  .catch(error => console.log(error))\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/nrikiji/cordova-line-login-plugin",
    "installVariables": [
      "LINE_CHANNEL_ID"
    ],
    "cordovaPlugin": {
      "name": "cordova-line-login-plugin"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/local-backup",
    "displayName": "LocalBackup",
    "description": "\nThis plugin to create local backup\n",
    "usage": "\n```typescript\nimport { LocalBackup } from '@awesome-cordova-plugins/local-backup/ngx';\n\n\nconstructor(private localBackup: LocalBackup) { }\n\n...\n\n\nthis.localBackup.create({data: {key: 'value'}})\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/MaximBelov/cordova-plugin-local-backup",
    "cordovaPlugin": {
      "name": "cordova-plugin-local-backup"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/local-notifications",
    "displayName": "Local Notifications",
    "description": "\nThis plugin allows you to display local notifications on the device\n",
    "usage": "\n```typescript\nimport { LocalNotifications } from '@awesome-cordova-plugins/local-notifications/ngx';\n\n\nconstructor(private localNotifications: LocalNotifications) { }\n\n...\n\n\n// Schedule a single notification\nthis.localNotifications.schedule({\n  id: 1,\n  text: 'Single ILocalNotification',\n  sound: isAndroid? 'file://sound.mp3': 'file://beep.caf',\n  data: { secret: key }\n});\n\n\n// Schedule multiple notifications\nthis.localNotifications.schedule([{\n   id: 1,\n   text: 'Multi ILocalNotification 1',\n   sound: isAndroid ? 'file://sound.mp3': 'file://beep.caf',\n   data: { secret:key }\n  },{\n   id: 2,\n   title: 'Local ILocalNotification Example',\n   text: 'Multi ILocalNotification 2',\n   icon: 'http://example.com/icon.png'\n}]);\n\n\n// Schedule delayed notification\nthis.localNotifications.schedule({\n   text: 'Delayed ILocalNotification',\n   trigger: {at: new Date(new Date().getTime() + 3600)},\n   led: 'FF0000',\n   sound: null\n});\n```",
    "platforms": [
      "Android",
      "iOS",
      "Windows"
    ],
    "repo": "https://github.com/katzer/cordova-plugin-local-notifications",
    "cordovaPlugin": {
      "name": "cordova-plugin-local-notification"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/location-accuracy",
    "displayName": "Location Accuracy",
    "description": "\nThis Cordova/Phonegap plugin for Android and iOS to request enabling/changing of Location Services by triggering a native dialog from within the app, avoiding the need for the user to leave your app to change location settings manually.\n",
    "usage": "\n```typescript\nimport { LocationAccuracy } from '@awesome-cordova-plugins/location-accuracy/ngx';\n\nconstructor(private locationAccuracy: LocationAccuracy) { }\n\n...\n\nthis.locationAccuracy.canRequest().then((canRequest: boolean) => {\n\n  if(canRequest) {\n    // the accuracy option will be ignored by iOS\n    this.locationAccuracy.request(this.locationAccuracy.REQUEST_PRIORITY_HIGH_ACCURACY).then(\n      () => console.log('Request successful'),\n      error => console.log('Error requesting location permissions', error)\n    );\n  }\n\n});\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/dpa99c/cordova-plugin-request-location-accuracy",
    "cordovaPlugin": {
      "name": "cordova-plugin-request-location-accuracy"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/lottie-splash-screen",
    "displayName": "Lottie Splash Screen",
    "description": "\nCordova plugin to show bodymovin/Lottie animations as the splash screen with Airbnb's Lottie wrapper\n",
    "usage": "\n```typescript\nimport { LottieSplashScreen } from '@awesome-cordova-plugins/lottie-splash-screen/ngx';\n\n\nconstructor(private lottieSplashScreen: LottieSplashScreen) { }\n\n...\n\n\nthis.lottieSplashScreen.show('www/lottie/animation.json', false, 1024, 768)\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/timbru31/cordova-plugin-lottie-splashscreen",
    "installVariables": [],
    "cordovaPlugin": {
      "name": "cordova-plugin-lottie-splashscreen"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/media-capture",
    "displayName": "Media Capture",
    "description": "\nThis plugin provides access to the device's audio, image, and video capture capabilities.\n\nRequires Cordova plugin: `cordova-plugin-media-capture`. For more info, please see the [Media Capture plugin docs](https://github.com/apache/cordova-plugin-media-capture).\n",
    "usage": "\n```typescript\nimport { MediaCapture, MediaFile, CaptureError, CaptureImageOptions } from '@awesome-cordova-plugins/media-capture/ngx';\n\n\nconstructor(private mediaCapture: MediaCapture) { }\n\n...\n\n\nlet options: CaptureImageOptions = { limit: 3 }\nthis.mediaCapture.captureImage(options)\n  .then(\n    (data: MediaFile[]) => console.log(data),\n    (err: CaptureError) => console.error(err)\n  );\n\n```",
    "platforms": [
      "Android",
      "Browser",
      "iOS",
      "Windows"
    ],
    "repo": "https://github.com/apache/cordova-plugin-media-capture",
    "cordovaPlugin": {
      "name": "cordova-plugin-media-capture"
    },
    "premierSlug": "media-capture"
  },
  {
    "packageName": "@awesome-cordova-plugins/media",
    "displayName": "Media",
    "description": "\nThis plugin provides the ability to record and play back audio files on a device.\n",
    "usage": "\n```typescript\nimport { Media, MediaObject } from '@awesome-cordova-plugins/media/ngx';\n\n\nconstructor(private media: Media) { }\n\n\n...\n\n\n// Create a Media instance.  Expects path to file or url as argument\n// We can optionally pass a second argument to track the status of the media\n\nconst file: MediaObject = this.media.create('file.mp3');\n\n// to listen to plugin events:\n\nfile.onStatusUpdate.subscribe(status => console.log(status)); // fires when file status changes\n\nfile.onSuccess.subscribe(() => console.log('Action is successful'));\n\nfile.onError.subscribe(error => console.log('Error!', error));\n\n// play the file\nfile.play();\n\n// pause the file\nfile.pause();\n\n// get current playback position\nfile.getCurrentPosition().then((position) => {\n  console.log(position);\n});\n\n// get file duration\nlet duration = file.getDuration();\nconsole.log(duration);\n\n// skip to 10 seconds (expects int value in ms)\nfile.seekTo(10000);\n\n// stop playing the file\nfile.stop();\n\n// release the native audio resource\n// Platform Quirks:\n// iOS simply create a new instance and the old one will be overwritten\n// Android you must call release() to destroy instances of media when you are done\nfile.release();\n\n\n\n// Recording to a file\nconst file: MediaObject = this.media.create('path/to/file.mp3');\n\nfile.startRecord();\n\nfile.stopRecord();\n\n\n```\n\nSome hints if you are using iOS and recording doesn't work:\n1.) Try to use a absolute file path but remove beginning \"file://\".\nThen it looks like: `/var/mobile/Containers/Data/Application/AF438B8B-7724-4FBB-8E69-083463224FC4/tmp/my_file.m4a`\nExample: `this.media.create(this.file.tempDirectory.replace(/^file:\\/\\//, '') + 'my_file.m4a')`\n2.) If that's not working, too, create the file before using.\nExample:\n```typescript\nimport { Media, MediaObject } from '@awesome-cordova-plugins/media/ngx';\nimport { File } from '@awesome-cordova-plugins/file/ngx';\n\n...\n\nconstructor(private media: Media, private file: File) { }\n\n...\n\nthis.file.createFile(this.file.tempDirectory, 'my_file.m4a', true).then(() => {\n  let file = this.media.create(this.file.tempDirectory.replace(/^file:\\/\\//, '') + 'my_file.m4a');\n  file.startRecord();\n  window.setTimeout(() => file.stopRecord(), 10000);\n});\n```\n\nYou can find the reasons here: https://github.com/ionic-team/ionic-native/issues/1452#issuecomment-299605906",
    "platforms": [
      "Android",
      "Browser",
      "iOS",
      "Windows"
    ],
    "repo": "https://github.com/apache/cordova-plugin-media",
    "cordovaPlugin": {
      "name": "cordova-plugin-media"
    },
    "premierSlug": "media"
  },
  {
    "packageName": "@awesome-cordova-plugins/metrix",
    "displayName": "Metrix",
    "description": "\nThis is the Ionic Cordova SDK of Metrix™. You can read more about Metrix™ at metrix.ir.\n\nRequires Cordova plugin: `ir.metrix.sdk`. For more info, please see the [Metrix Cordova SDK](https://github.com/metrixorg/MetrixSDK-CordovaPlugin)\n",
    "usage": "\n```typescript\n import { Metrix, MetrixConfig } from '@awesome-cordova-plugins/metrix';\n\n constructor(private metrix: Metrix) { }\n\n ...\n\n const config = new MetrixConfig('APP-ID-HERE');\n // Set other config properties.\n metrix.create(config);\n\n```",
    "platforms": [
      "Android"
    ],
    "repo": "https://github.com/metrixorg/MetrixSDK-CordovaPlugin",
    "cordovaPlugin": {
      "name": "ir.metrix.sdk"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/mixpanel",
    "displayName": "Mixpanel",
    "description": "\nCordova Plugin that wraps Mixpanel SDK for Android and iOS\n",
    "usage": "\n```typescript\nimport { Mixpanel } from '@awesome-cordova-plugins/mixpanel/ngx';\n\nconstructor(private mixpanel: Mixpanel, private mixpanelPeople: MixpanelPeople) { }\n\n...\n\nthis.mixpanel.init(token)\n  .then(onSuccess)\n  .catch(onError);\n\n```",
    "platforms": [
      "Android",
      "Browser",
      "iOS"
    ],
    "repo": "https://github.com/samzilverberg/cordova-mixpanel-plugin",
    "cordovaPlugin": {
      "name": "cordova-plugin-mixpanel"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/mlkit-translate",
    "displayName": "MLKitTranslate",
    "description": "\nPlugin that implements MLKit Translation and Language Identification features.\n",
    "usage": "\n```typescript\nimport { MLKitTranslate } from '@awesome-cordova-plugins/ml-kit-translate';\n\n\nconstructor(private mlkitTranslate: MLKitTranslate) { }\n\n...\n\nthis.mlkitTranslate.translate('Hello', 'en', 'es')\n  .then((resultText: string) => console.log(res))\n  .catch((error: string) => console.error(error));\n\n@interfaces\nLanguageModel\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/rigelglen/cordova-plugin-mlkit-translate",
    "cordovaPlugin": {
      "name": "cordova-plugin-mlkit-translate"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/mobile-messaging",
    "displayName": "Mobile Messaging",
    "description": "\nMobile Messaging SDK is designed and developed to easily enable push notification channel in your mobile application.\nIn almost no time of implementation you get push notification in your application and access to the features of [Infobip IP Messaging Platform](https://portal.infobip.com/push/).\nThis document describes library integration steps for your Cordova project.\n\nFor more info see [Cordova plugin docs](https://github.com/infobip/mobile-messaging-cordova-plugin)\n",
    "usage": "\n```typescript\nimport { MobileMessaging } from '@awesome-cordova-plugins/mobile-messaging/ngx';\n\n\nconstructor(private mobileMessaging: MobileMessaging) { }\n\n...\n\n\n this.mobileMessaging.init({\n   applicationCode: '<your_application_code>',\n   geofencingEnabled: '<true/false>',\n   defaultMessageStorage: '<true/false>',\n   ios: {\n     notificationTypes: ['alert', 'badge', 'sound']\n   },\n   android: {\n     notificationIcon: <String; a resource name for a status bar icon (without extension), located in '/platforms/android/app/src/main/res/mipmap'>,\n     multipleNotifications: <Boolean; set to 'true' to enable multiple notifications>,\n     notificationAccentColor: <String; set to hex color value in format '#RRGGBB' or '#AARRGGBB'>\n    }}, (err) => {\n     ...\n   });\n\n this.mobileMessaging.register('messageReceived').subscribe((message: Message) => {\n   ...\n });\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/infobip/mobile-messaging-cordova-plugin",
    "cordovaPlugin": {
      "name": "com-infobip-plugins-mobilemessaging"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/multiple-document-picker",
    "displayName": "Multiple Documents Picker",
    "description": "\nThis plugin allows users to pick multiple documents/images at once\n",
    "usage": "\n```typescript\nimport { MultipleDocumentsPicker } from '@awesome-cordova-plugins/multiple-document-picker/ngx';\n\n\nconstructor(private multipleDocumentsPicker: MultipleDocumentsPicker) { }\n\n...\n\n\nthis.multipleDocumentsPicker.pick(1)\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/akeotech/cordova-plugin-multiple-documents-picker",
    "cordovaPlugin": {
      "name": "cordova-plugin-multiple-documents-picker"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/music-controls",
    "displayName": "Music Controls",
    "description": "\nMusic controls for Cordova applications.\nDisplay a 'media' notification with play/pause, previous, next buttons, allowing the user to control the play.\nHandle also headset event (plug, unplug, headset button).\n",
    "usage": "\n```typescript\nimport { MusicControls } from '@awesome-cordova-plugins/music-controls/ngx';\n\nconstructor(private musicControls: MusicControls) { }\n\n...\n\nthis.musicControls.create({\n  track       : 'Time is Running Out',        // optional, default : ''\n  artist      : 'Muse',                       // optional, default : ''\n  cover       : 'albums/absolution.jpg',      // optional, default : nothing\n  // cover can be a local path (use fullpath 'file:///storage/emulated/...', or only 'my_image.jpg' if my_image.jpg is in the www folder of your app)\n  //           or a remote url ('http://...', 'https://...', 'ftp://...')\n  isPlaying   : true,                         // optional, default : true\n  dismissable : true,                         // optional, default : false\n\n  // hide previous/next/close buttons:\n  hasPrev   : false,      // show previous button, optional, default: true\n  hasNext   : false,      // show next button, optional, default: true\n  hasClose  : true,       // show close button, optional, default: false\n\n// iOS only, optional\n  album       : 'Absolution',     // optional, default: ''\n  duration : 60, // optional, default: 0\n  elapsed : 10, // optional, default: 0\n  hasSkipForward : true,  // show skip forward button, optional, default: false\n  hasSkipBackward : true, // show skip backward button, optional, default: false\n  skipForwardInterval: 15, // display number for skip forward, optional, default: 0\n  skipBackwardInterval: 15, // display number for skip backward, optional, default: 0\n  hasScrubbing: false, // enable scrubbing from control center and lockscreen progress bar, optional\n\n  // Android only, optional\n  // text displayed in the status bar when the notification (and the ticker) are updated, optional\n  ticker    : 'Now playing \"Time is Running Out\"',\n  // All icons default to their built-in android equivalents\n  playIcon: 'media_play',\n  pauseIcon: 'media_pause',\n  prevIcon: 'media_prev',\n  nextIcon: 'media_next',\n  closeIcon: 'media_close',\n  notificationIcon: 'notification'\n });\n\n this.musicControls.subscribe().subscribe(action => {\n\n   function events(action) {\n     const message = JSON.parse(action).message;\n     \tswitch(message) {\n     \t\tcase 'music-controls-next':\n     \t\t\t// Do something\n     \t\t\tbreak;\n     \t\tcase 'music-controls-previous':\n     \t\t\t// Do something\n     \t\t\tbreak;\n     \t\tcase 'music-controls-pause':\n     \t\t\t// Do something\n     \t\t\tbreak;\n     \t\tcase 'music-controls-play':\n     \t\t\t// Do something\n     \t\t\tbreak;\n     \t\tcase 'music-controls-destroy':\n     \t\t\t// Do something\n     \t\t\tbreak;\n\n         // External controls (iOS only)\n         case 'music-controls-toggle-play-pause' :\n     \t\t\t// Do something\n     \t\t\tbreak;\n         case 'music-controls-seek-to':\n           const seekToInSeconds = JSON.parse(action).position;\n           this.musicControls.updateElapsed({\n             elapsed: seekToInSeconds,\n             isPlaying: true\n           });\n           // Do something\n           break;\n         case 'music-controls-skip-forward':\n           // Do something\n           break;\n         case 'music-controls-skip-backward':\n           // Do something\n           break;\n\n     \t\t// Headset events (Android only)\n     \t\t// All media button events are listed below\n     \t\tcase 'music-controls-media-button' :\n     \t\t\t// Do something\n     \t\t\tbreak;\n     \t\tcase 'music-controls-headset-unplugged':\n     \t\t\t// Do something\n     \t\t\tbreak;\n     \t\tcase 'music-controls-headset-plugged':\n     \t\t\t// Do something\n     \t\t\tbreak;\n     \t\tdefault:\n     \t\t\tbreak;\n     \t}\n     }\n    });\n\n this.musicControls.listen(); // activates the observable above\n\n this.musicControls.updateIsPlaying(true);\n\n\n```",
    "platforms": [
      "Android",
      "iOS",
      "Windows"
    ],
    "repo": "https://github.com/ghenry22/cordova-plugin-music-controls2",
    "cordovaPlugin": {
      "name": "cordova-plugin-music-controls2"
    },
    "capacitorIncompatible": true
  },
  {
    "packageName": "@awesome-cordova-plugins/native-audio",
    "displayName": "Native Audio",
    "description": "Native Audio Playback",
    "usage": "\n```typescript\nimport { NativeAudio } from '@awesome-cordova-plugins/native-audio/ngx';\n\nconstructor(private nativeAudio: NativeAudio) { }\n\n...\n\nthis.nativeAudio.preloadSimple('uniqueId1', 'path/to/file.mp3').then(onSuccess, onError);\nthis.nativeAudio.preloadComplex('uniqueId2', 'path/to/file2.mp3', 1, 1, 0).then(onSuccess, onError);\n\nthis.nativeAudio.play('uniqueId1').then(onSuccess, onError);\n\n// can optionally pass a callback to be called when the file is done playing\nthis.nativeAudio.play('uniqueId1', () => console.log('uniqueId1 is done playing'));\n\nthis.nativeAudio.loop('uniqueId2').then(onSuccess, onError);\n\nthis.nativeAudio.setVolumeForComplexAsset('uniqueId2', 0.6).then(onSuccess,onError);\n\nthis.nativeAudio.stop('uniqueId1').then(onSuccess,onError);\n\nthis.nativeAudio.unload('uniqueId1').then(onSuccess,onError);\n\n```\n",
    "platforms": [
      "Android",
      "Browser",
      "iOS"
    ],
    "repo": "https://github.com/floatinghotpot/cordova-plugin-nativeaudio",
    "cordovaPlugin": {
      "name": "cordova-plugin-nativeaudio"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/native-geocoder",
    "displayName": "Native Geocoder",
    "description": "\nCordova plugin for native forward and reverse geocoding\n",
    "usage": "\n```typescript\nimport { NativeGeocoder, NativeGeocoderResult, NativeGeocoderOptions } from '@awesome-cordova-plugins/native-geocoder/ngx';\n\nconstructor(private nativeGeocoder: NativeGeocoder) { }\n\n...\n\nlet options: NativeGeocoderOptions = {\n    useLocale: true,\n    maxResults: 5\n};\n\nthis.nativeGeocoder.reverseGeocode(52.5072095, 13.1452818, options)\n  .then((result: NativeGeocoderResult[]) => console.log(JSON.stringify(result[0])))\n  .catch((error: any) => console.log(error));\n\nthis.nativeGeocoder.forwardGeocode('Berlin', options)\n  .then((result: NativeGeocoderResult[]) => console.log('The coordinates are latitude=' + result[0].latitude + ' and longitude=' + result[0].longitude))\n  .catch((error: any) => console.log(error));\n```",
    "platforms": [
      "iOS",
      "Android"
    ],
    "repo": "https://github.com/sebastianbaar/cordova-plugin-nativegeocoder",
    "cordovaPlugin": {
      "name": "cordova-plugin-nativegeocoder"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/native-keyboard",
    "displayName": "Native Keyboard",
    "description": "\nA cross platform WhatsApp / Messenger / Slack -style keyboard even. For your Cordova app.\n\n",
    "usage": "\n```\nimport { NativeKeyboard } from '@awesome-cordova-plugins/native-keyboard/ngx';\n\n\nconstructor(private nativeKeyboard: NativeKeyboard) { }\n\n...\n\n\n```",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/EddyVerbruggen/cordova-plugin-native-keyboard",
    "cordovaPlugin": {
      "name": "cordova-plugin-native-keyboard"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/native-page-transitions",
    "displayName": "Native Page Transitions",
    "description": "\nThe Native Page Transitions plugin uses native hardware acceleration to animate your transitions between views. You have complete control over the type of transition, the duration, and direction.\n",
    "usage": "\n```typescript\nimport { NativePageTransitions, NativeTransitionOptions } from '@awesome-cordova-plugins/native-page-transitions/ngx';\n\nconstructor(private nativePageTransitions: NativePageTransitions) { }\n\n...\n\n\n// example of adding a transition when a page/modal closes\nionViewWillLeave() {\n\n let options: NativeTransitionOptions = {\n    direction: 'up',\n    duration: 500,\n    slowdownfactor: 3,\n    slidePixels: 20,\n    iosdelay: 100,\n    androiddelay: 150,\n    fixedPixelsTop: 0,\n    fixedPixelsBottom: 60\n   }\n\n this.nativePageTransitions.slide(options)\n   .then(onSuccess)\n   .catch(onError);\n\n}\n\n\n// example of adding a transition when pushing a new page\nopenPage(page: any) {\n\n  this.nativePageTransitions.slide(options);\n  this.navCtrl.push(page);\n\n}\n\n```\n",
    "platforms": [
      "Android",
      "iOS",
      "Windows Phone 8"
    ],
    "repo": "https://github.com/Telerik-Verified-Plugins/NativePageTransitions",
    "cordovaPlugin": {
      "name": "com.telerik.plugins.nativepagetransitions"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/native-storage",
    "displayName": "Native Storage",
    "description": "Native storage of variables in Android and iOS\n",
    "usage": "\n```typescript\nimport { NativeStorage } from '@awesome-cordova-plugins/native-storage/ngx';\n\nconstructor(private nativeStorage: NativeStorage) { }\n\n...\n\nthis.nativeStorage.setItem('myitem', {property: 'value', anotherProperty: 'anotherValue'})\n  .then(\n    () => console.log('Stored item!'),\n    error => console.error('Error storing item', error)\n  );\n\nthis.nativeStorage.getItem('myitem')\n  .then(\n    data => console.log(data),\n    error => console.error(error)\n  );\n```\n",
    "platforms": [
      "Android",
      "Browser",
      "iOS",
      "macOS",
      "Windows"
    ],
    "repo": "https://github.com/TheCocoaProject/cordova-plugin-nativestorage",
    "cordovaPlugin": {
      "name": "cordova-plugin-nativestorage"
    },
    "premierSlug": "nativestorage"
  },
  {
    "packageName": "@awesome-cordova-plugins/network-interface",
    "displayName": "Network Interface",
    "description": "\nNetwork interface information plugin for Cordova/PhoneGap that supports Android, Blackberry 10, Browser, iOS, and Windows Phone 8.\n",
    "usage": "\n```typescript\nimport { NetworkInterface } from '@awesome-cordova-plugins/network-interface/ngx';\n\nconstructor( private networkInterface: NetworkInterface ) {\n\n  this.networkInterface.getWiFiIPAddress()\n    .then(address => console.info(`IP: ${address.ip}, Subnet: ${address.subnet}`))\n    .catch(error => console.error(`Unable to get IP: ${error}`));\n\n  this.networkInterface.getCarrierIPAddress()\n    .then(address => console.info(`IP: ${address.ip}, Subnet: ${address.subnet}`))\n    .catch(error => console.error(`Unable to get IP: ${error}`));\n\n  const url = 'www.github.com';\n  this.networkInterface.getHttpProxyInformation(url)\n    .then(proxy => console.info(`Type: ${proxy.type}, Host: ${proxy.host}, Port: ${proxy.port}`))\n    .catch(error => console.error(`Unable to get proxy info: ${error}`));\n}\n```\n",
    "platforms": [
      "Android",
      "BlackBerry 10",
      "Browser",
      "iOS",
      "Windows",
      "Windows Phone"
    ],
    "repo": "https://github.com/salbahra/cordova-plugin-networkinterface",
    "cordovaPlugin": {
      "name": "cordova-plugin-networkinterface"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/network",
    "displayName": "Network",
    "description": "\nRequires Cordova plugin: cordova-plugin-network-information. For more info, please see the [Network plugin docs](https://github.com/apache/cordova-plugin-network-information).\n",
    "usage": "\n```typescript\nimport { Network } from '@awesome-cordova-plugins/network/ngx';\n\nconstructor(private network: Network) { }\n\n...\n\n// watch network for a disconnection\nlet disconnectSubscription = this.network.onDisconnect().subscribe(() => {\n  console.log('network was disconnected :-(');\n});\n\n// stop disconnect watch\ndisconnectSubscription.unsubscribe();\n\n\n// watch network for a connection\nlet connectSubscription = this.network.onConnect().subscribe(() => {\n  console.log('network connected!');\n  // We just got a connection but we need to wait briefly\n   // before we determine the connection type. Might need to wait.\n  // prior to doing any api requests as well.\n  setTimeout(() => {\n    if (this.network.type === 'wifi') {\n      console.log('we got a wifi connection, woohoo!');\n    }\n  }, 3000);\n});\n\n// stop connect watch\nconnectSubscription.unsubscribe();\n\n```",
    "platforms": [
      "Amazon Fire OS",
      "Android",
      "Browser",
      "iOS",
      "Windows"
    ],
    "repo": "https://github.com/apache/cordova-plugin-network-information",
    "cordovaPlugin": {
      "name": "cordova-plugin-network-information"
    },
    "premierSlug": "network-information"
  },
  {
    "packageName": "@awesome-cordova-plugins/nfc",
    "displayName": "NFC",
    "description": "\nThe NFC plugin allows you to read and write NFC tags. You can also beam to, and receive from, other NFC enabled devices.\n\nUse to\n- read data from NFC tags\n- write data to NFC tags\n- send data to other NFC enabled devices\n- receive data from NFC devices\n\nThis plugin uses NDEF (NFC Data Exchange Format) for maximum compatibilty between NFC devices, tag types, and operating systems.\n",
    "usage": "\n```typescript\nimport { NFC, Ndef } from '@awesome-cordova-plugins/nfc/ngx';\n\nconstructor(private nfc: NFC, private ndef: Ndef) { }\n\n...\n\n// Read NFC Tag - Android\n// Once the reader mode is enabled, any tags that are scanned are sent to the subscriber\n let flags = this.nfc.FLAG_READER_NFC_A | this.nfc.FLAG_READER_NFC_V;\n this.readerMode$ = this.nfc.readerMode(flags).subscribe(\n     tag => console.log(JSON.stringify(tag)),\n     err => console.log('Error reading tag', err)\n );\n\n// Read NFC Tag - iOS\n// On iOS, a NFC reader session takes control from your app while scanning tags then returns a tag\ntry {\n    let tag = await this.nfc.scanNdef();\n    console.log(JSON.stringify(tag));\n } catch (err) {\n     console.log('Error reading tag', err);\n }\n\n```\n\nFor more details on NFC tag operations see https://github.com/chariotsolutions/phonegap-nfc\n",
    "platforms": [
      "Android",
      "iOS",
      "Windows"
    ],
    "repo": "https://github.com/chariotsolutions/phonegap-nfc",
    "cordovaPlugin": {
      "name": "phonegap-nfc"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/ocr",
    "displayName": "OCR",
    "description": "\nThis plugin attempts to identify and extract text from an image.\nPlease note: This plugin depends on the GoogleMobileVision pod which is referencing UIWebview, that has been deprecated by Apple.\nDon't use this plugin in an app intended for App Store as you will get a review rejection from Apple: `Deprecated API Usage — Apple will stop accepting submissions of apps that use UIWebView APIs`\nFor more info, please see the following Github issue [Google Mobile Vision relying on deprecated UIWebview](https://github.com/NeutrinosPlatform/cordova-plugin-mobile-ocr/issues/27).",
    "usage": "\n```typescript\nimport { OCR, OCRSourceType } from '@awesome-cordova-plugins/ocr/ngx';\n\n\nconstructor(private ocr: OCR) { }\n\n...\n\nthis.ocr.recText(OCRSourceType.NORMFILEURL, \"file://path/to/image.png\")\n  .then((res: OCRResult) => console.log(JSON.stringify(res)))\n  .catch((error: any) => console.error(error));\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/NeutrinosPlatform/cordova-plugin-mobile-ocr",
    "cordovaPlugin": {
      "name": "cordova-plugin-mobile-ocr"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/onesignal",
    "displayName": "OneSignal",
    "description": "\nThe OneSignal plugin is an client implementation for using the [OneSignal](https://onesignal.com/) Service.\nOneSignal is a simple implementation for delivering push notifications.\n\nPlease view the official [OneSignal Ionic SDK Installation](https://documentation.onesignal.com/docs/ionic-sdk-setup) guide\nfor more information.\n\n#### Icons\nIf you want to use generated icons with command `ionic cordova resources`:\n\n1. Add a file to your `hooks` directory called `copy_android_notification_icons.js`\n\n2. Configure the hook in your config.xml\n```\n    <platform name=\"android\">\n        <hook type=\"after_prepare\" src=\"hooks/copy_android_notification_icons.js\" />\n    </platform>\n```\n\n3. Put the following code in it:\n\n```\n#!/usr/bin/env node\n\nvar fs = require('fs');\nvar path = require('path');\n\nvar filestocopy = [{\n    \"resources/android/icon/drawable-hdpi-icon.png\":\n        \"platforms/android/app/src/main/res/drawable-hdpi/ic_stat_onesignal_default.png\"\n}, {\n    \"resources/android/icon/drawable-mdpi-icon.png\":\n        \"platforms/android/app/src/main/res/drawable-mdpi/ic_stat_onesignal_default.png\"\n}, {\n    \"resources/android/icon/drawable-xhdpi-icon.png\":\n        \"platforms/android/app/src/main/res/drawable-xhdpi/ic_stat_onesignal_default.png\"\n}, {\n    \"resources/android/icon/drawable-xxhdpi-icon.png\":\n        \"platforms/android/app/src/main/res/drawable-xxhdpi/ic_stat_onesignal_default.png\"\n}, {\n    \"resources/android/icon/drawable-xxxhdpi-icon.png\":\n        \"platforms/android/app/src/main/res/drawable-xxxhdpi/ic_stat_onesignal_default.png\"\n} ];\n\nmodule.exports = function(context) {\n\n    // no need to configure below\n    var rootdir = context.opts.projectRoot;\n\n    filestocopy.forEach(function(obj) {\n        Object.keys(obj).forEach(function(key) {\n            var val = obj[key];\n            var srcfile = path.join(rootdir, key);\n            var destfile = path.join(rootdir, val);\n            console.log(\"copying \"+srcfile+\" to \"+destfile);\n            var destdir = path.dirname(destfile);\n            if (fs.existsSync(srcfile) && fs.existsSync(destdir)) {\n                fs.createReadStream(srcfile).pipe(\n                    fs.createWriteStream(destfile));\n            }\n        });\n    });\n\n};\n```\n\n3. From the root of your project make the file executable:\n`$ chmod +x hooks/copy_android_notification_icons.js`\n\n",
    "usage": "\n```typescript\nimport { OneSignal } from '@awesome-cordova-plugins/onesignal/ngx';\n\nconstructor(private oneSignal: OneSignal) { }\n\n...\n\nthis.oneSignal.startInit('b2f7f966-d8cc-11e4-bed1-df8f05be55ba', '703322744261');\n\nthis.oneSignal.inFocusDisplaying(this.oneSignal.OSInFocusDisplayOption.InAppAlert);\n\nthis.oneSignal.handleNotificationReceived().subscribe(() => {\n // do something when notification is received\n});\n\nthis.oneSignal.handleNotificationOpened().subscribe(() => {\n  // do something when a notification is opened\n});\n\nthis.oneSignal.endInit();\n```",
    "platforms": [
      "Amazon Fire OS",
      "Android",
      "iOS",
      "Windows"
    ],
    "repo": "https://github.com/OneSignal/OneSignal-Cordova-SDK",
    "cordovaPlugin": {
      "name": "onesignal-cordova-plugin"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/open-native-settings",
    "displayName": "Open Native Settings",
    "description": "\nPlugin to open native screens of iOS/android settings",
    "usage": "\nYou can open any of these settings:\n```\n \"about\", // ios\n \"accessibility\", // ios, android\n \"account\", // ios, android\n \"airplane_mode\", // ios, android\n \"apn\", // android\n \"application_details\", // ios, android\n \"application_development\", // android\n \"application\", // android\n \"autolock\", // ios\n \"battery_optimization\", // android\n \"bluetooth\", // ios, android\n \"castle\", // ios\n \"captioning\", // android\n \"cast\", // android\n \"cellular_usage\", // ios\n \"configuration_list\", // ios\n \"data_roaming\", // android\n \"date\", // ios, android\n \"display\", // ios, android\n \"dream\", // android\n \"facetime\", // ios\n \"home\", // android\n \"keyboard\", // ios, android\n \"keyboard_subtype\", // android\n \"locale\", // ios, android\n\"location\", // ios, android\n\"locations\", // ios\n\"manage_all_applications\", // android\n\"manage_applications\", // android\n\"memory_card\", // android\n\"music\", // ios\n\"music_equalizer\", // ios\n\"music_volume\", // ios\n\"network\", // ios, android\n\"nike_ipod\", // ios\n\"nfcsharing\", // android\n\"nfc_payment\", // android\n\"nfc_settings\", // android\n\"notes\", // ios\n\"notification_id\", // ios\n\"passbook\", // ios\n\"phone\", // ios\n\"photos\", // ios\n\"print\", // android\n\"privacy\", // android\n\"quick_launch\", // android\n\"reset\", // ios\n\"ringtone\", // ios\n\"browser\", // ios\n\"search\", // ios, android\n\"security\", // android\n\"settings\", // ios, android\n\"show_regulatory_info\",\n\"sound\", // ios, android\n\"software_update\", // ios\n\"storage\", // ios, android\n\"store\", // ios, android\n\"sync\", // android\n\"tethering\", // ios\n\"twitter\", // ios\n\"touch\", // ios\n\"usage\", // ios, android\n\"user_dictionary\", // android\n\"video\", // ios\n\"voice_input\", // android\n\"vpn\", // ios\n\"wallpaper\", // ios\n\"wifi_ip\", // android\n\"wifi\", // ios, android\n\"wireless\" // android\n ```\n```typescript\nimport { OpenNativeSettings } from '@awesome-cordova-plugins/open-native-settings/ngx';\n\n\nconstructor(private openNativeSettings: OpenNativeSettings) { }\n\n...\n\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/guyromb/Cordova-open-native-settings",
    "cordovaPlugin": {
      "name": "cordova-open-native-settings"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/openalpr",
    "displayName": "OpenALPR",
    "description": "\nThis Cordova plugin adds support for the OpenALPR (Automatic License Plate Recognition) library, which provides support for retrieving the license plate from a picture.\n",
    "usage": "\n```typescript\nimport { OpenALPR, OpenALPROptions, OpenALPRResult } from '@awesome-cordova-plugins/openalpr/ngx';\n\n\nconstructor(private openALPR: OpenALPR) { }\n\nconst scanOptions: OpenALPROptions = {\n   country: this.openALPR.Country.EU,\n   amount: 3\n}\n\n// To get imageData, you can use the @awesome-cordova-plugins/camera module for example. It works with DestinationType.FILE_URI and DATA_URL\n\nthis.openALPR.scan(imageData, scanOptions)\n  .then((res: [OpenALPRResult]) => console.log(res))\n  .catch((error: Error) => console.error(error));\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/iMicknl/cordova-plugin-openalpr",
    "cordovaPlugin": {
      "name": "cordova-plugin-openalpr"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/paytabs",
    "displayName": "PayTabs",
    "description": "\nA plugin that allows you to use PayTabs's Native SDKs for Android and iOS.\n",
    "usage": "\n```typescript\nimport { PayTabs } from '@awesome-cordova-plugins/paytabs/ngx';\n\nconstructor(private paytabs: PayTabs) { }\n\n...\nlet billingDetails: PaymentSDKBillingDetails = {\n   name: \"John Smith\",\n   email: \"email@domain.com\",\n   phone: \"+201111111111\",\n   addressLine: \"Address line\",\n   city: \"Dubai\",\n   state: \"Dubai\",\n   countryCode: \"AE\",\n   zip: \"1234\"\n };\n\nvar configuration: PaymentSDKConfiguration = {\n   profileID: \"*profile id*\",\n   serverKey: \"*server key*\",\n   clientKey: \"*cleint key*\",\n   cartID: \"12345\",\n   currency: \"USD\",\n   cartDescription: \"Flowers\",\n   merchantCountryCode: \"ae\",\n   merchantName: \"Flowers Store\",\n   amount: 20,\n   screenTitle:\"Pay with Card\",\n   billingDetails: billingDetails\n }\n\nthis.paytabs.startCardPayment(configuration)\n               .then(result => console.log(result))\n               .catch(error => console.error(error));\n\nthis.paytabs.startApplePayPayment(configuration)\n               .then(result => console.log(result))\n               .catch(error => console.error(error));\n\nthis.paytabs.startAlternativePaymentMethod(configuration)\n               .then(result => console.log(result))\n               .catch(error => console.error(error));\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/paytabscom/paytabs-cordova",
    "cordovaPlugin": {
      "name": "com.paytabs.cordova.plugin"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/pdf-generator",
    "displayName": "PDFGenerator",
    "description": "\nSimple plugin to generate (offline) pdf. The plugin transforms HTML to PDF and also provide the mechanism to share the pdf to other apps like Mail, etc.\n",
    "usage": "\n```typescript\nimport { PDFGenerator } from '@awesome-cordova-plugins/pdf-generator';\n\nconstructor(private pdfGenerator: PDFGenerator) { }\n\n...\n\nthis.pdfGenerator.fromURL(url, options).then(base64String => console.log(base64String));\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/cesarvr/pdf-generator",
    "cordovaPlugin": {
      "name": "cordova-pdf-generator"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/photo-library",
    "displayName": "Photo Library",
    "description": "\nThe PhotoLibrary plugin allows access to photos from device by url. So you can use plain img tag to display photos and their thumbnails, and different 3rd party libraries as well.\nSaving photos and videos to the library is also supported.\ncdvphotolibrary urls should be trusted by Angular. See plugin homepage to learn how.\n",
    "usage": "\n```typescript\nimport { PhotoLibrary } from '@awesome-cordova-plugins/photo-library/ngx';\n\nconstructor(private photoLibrary: PhotoLibrary) { }\n\nthis.photoLibrary.requestAuthorization().then(() => {\n  this.photoLibrary.getLibrary().subscribe({\n    next: library => {\n      library.forEach(function(libraryItem) {\n        console.log(libraryItem.id);          // ID of the photo\n        console.log(libraryItem.photoURL);    // Cross-platform access to photo\n        console.log(libraryItem.thumbnailURL);// Cross-platform access to thumbnail\n        console.log(libraryItem.fileName);\n        console.log(libraryItem.width);\n        console.log(libraryItem.height);\n        console.log(libraryItem.creationDate);\n        console.log(libraryItem.latitude);\n        console.log(libraryItem.longitude);\n        console.log(libraryItem.albumIds);    // array of ids of appropriate AlbumItem, only of includeAlbumsData was used\n      });\n    },\n    error: err => { console.log('could not get photos'); },\n    complete: () => { console.log('done getting photos'); }\n  });\n})\n.catch(err => console.log('permissions weren\\'t granted'));\n\n```\n",
    "platforms": [
      "Android",
      "Browser",
      "iOS"
    ],
    "repo": "https://github.com/terikon/cordova-plugin-photo-library",
    "installVariables": [
      "PHOTO_LIBRARY_USAGE_DESCRIPTION"
    ],
    "cordovaPlugin": {
      "name": "cordova-plugin-photo-library"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/photo-viewer",
    "displayName": "Photo Viewer",
    "description": "This plugin can display your image in full screen with the ability to pan, zoom, and share the image.",
    "usage": "\n```typescript\nimport { PhotoViewer } from '@awesome-cordova-plugins/photo-viewer/ngx';\n\nconstructor(private photoViewer: PhotoViewer) { }\n\n...\n\nthis.photoViewer.show('https://mysite.com/path/to/image.jpg');\n\nthis.photoViewer.show('https://mysite.com/path/to/image.jpg', 'My image title', {share: false});\n\nthis.photoViewer.show('https://mysecuresite.com/path/to/image.jpg', 'My image title', {share: false, headers: '{username:foo,password:bar}'});\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/sarriaroman/photoviewer",
    "cordovaPlugin": {
      "name": "com-sarriaroman-photoviewer"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/pollfish",
    "displayName": "Pollfish",
    "description": "\nPollfish Ionic Native plugin wrapper\n",
    "usage": "\n```typescript\nimport { Pollfish } from '@awesome-cordova-plugins/pollfish/ngx';\n\n\nconstructor(private pollfish: Pollfish) { }\n\n...\n\nthis.pollfish.init(false, false, 'YOUR_API_KEY', 1, 8, 'REQUEST_UUID', false);\n\nthis.pollfish.initWithUserAttributes(false, false, 'YOUR_API_KEY', 1, 8, 'REQUEST_UUID', false, {\n 'gender': '1',\n ...\n});\n\nthis.pollfish.showPollfish();\n\nthis.pollfish.hidePollfish();\n\n// Event Listeners\n\nthis.pollfish.setEventCallback(pollfish.EventListener.OnPollfishSurveyReceived, (surveyInfo) => {\n console.log(\"Survey Received: \" + JSON.stringify(surveyInfo));\n});\n\nthis.pollfish.setEventCallback(pollfish.EventListener.OnPollfishSurveyCompleted, (result) => {\n console.log(\"Survey Completed: \" + JSON.stringify(surveyInfo));\n});\n\nthis.pollfish.setEventCallback(pollfish.EventListener.OnPollfishUserNotEligible, (_) => {\n console.log(\"Pollfish User Not Eligible\");\n});\n\nthis.pollfish.setEventCallback(pollfish.EventListener.OnPollfishSurveyNotAvailable, (_) => {\n console.log(\"Pollfish Survey not available\");\n});\n\nthis.pollfish.setEventCallback(pollfish.EventListener.OnPollfishOpened, (_) => {\n console.log(\"Pollfish Survey panel is open\");\n});\n\nthis.pollfish.setEventCallback(pollfish.EventListener.OnPollfishClosed, (_) => {\n console.log(\"Pollfish Survey panel is closed\");\n});\n\nthis.pollfish.setEventCallback(pollfish.EventListener.OnPollfishUserRejectedSurvey, (_) => {\n console.log(\"Pollfish User Rejected Survey\");\n});\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/pollfish/cordova-plugin-pollfish",
    "cordovaPlugin": {
      "name": "com.pollfish.cordova_plugin"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/power-optimization",
    "displayName": "Power Optimization",
    "description": "\nAndroid Custom Roms made sometimes your apps unfunctional due to being killed in the background, notification messages do not appearing or your services being killed by agressive power saving mode.\nThe Power Optimization plugin give you android PowerManager methods with cordova.\n",
    "usage": "\n```typescript\nimport { PowerOptimization } from '@awesome-cordova-plugins/power-optimization/ngx';\n\nconstructor(private powerOptimization: PowerOptimization) { }\n\n...\n\nthis.powerOptimization.IsIgnoringBatteryOptimizations()\n  .then(onSuccess)\n  .catch(onError);\n\n```\n",
    "platforms": [
      "Android"
    ],
    "repo": "https://github.com/snt1017/cordova-plugin-power-optimization",
    "cordovaPlugin": {
      "name": "cordova-plugin-power-optimization"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/printer",
    "displayName": "Printer",
    "description": "Prints documents or HTML rendered content",
    "usage": "\n```typescript\nimport { Printer, PrintOptions } from '@awesome-cordova-plugins/printer/ngx';\n\nconstructor(private printer: Printer) { }\n\n...\n\nthis.printer.isAvailable().then(onSuccess, onError);\n\nlet options: PrintOptions = {\n     name: 'MyDocument',\n     duplex: true,\n     orientation: 'landscape',\n     monochrome: true\n}\n\nthis.printer.print(content, options).then(onSuccess, onError);\n```",
    "platforms": [
      "Android",
      "iOS",
      "Windows"
    ],
    "repo": "https://github.com/katzer/cordova-plugin-printer",
    "cordovaPlugin": {
      "name": "cordova-plugin-printer"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/pspdfkit-cordova",
    "displayName": "PSPDFKit-Cordova",
    "description": "\nThe official plugin to use PSPDFKit with Cordova and Ionic.\n",
    "usage": "\n```typescript\nimport { PSPDFKit } from '@awesome-cordova-plugins/pspdfkit-cordova/ngx';\n\n\nconstructor(private pspdfkit: PSPDFKit) { }\n\n...\n\n// Set your license key here.\nthis.pspdfkit.setLicenseKey(\"YOUR KEY\");\n\n// Show a PDF in single page mode, with a black background.\nthis.pspdfkit.present('document.pdf', {pageMode: 'single', backgroundColor: \"black\"})\n  .then(result => {\n     console.log(result); // Success\n  })\n  .catch(error => {\n     console.log(error); // Failed\n  });\n}\n\n// Scroll to page at index 1.\nthis.pspdfkit.setPage(1, true);\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/PSPDFKit/PSPDFKit-Cordova",
    "cordovaPlugin": {
      "name": "pspdfkit-cordova"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/purchases",
    "displayName": "Purchases",
    "description": "\nPurchases is a cross platform solution for managing in-app subscriptions. A backend is also provided via [RevenueCat](https://www.revenuecat.com)\n\n## Features\n|     | RevenueCat                                                                                                                                                   |\n| --- | ------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| ✅  | Server-side receipt validation                                                                                                                               |\n| ➡️  | [Webhooks](https://docs.revenuecat.com/docs/webhooks) - enhanced server-to-server communication with events for purchases, renewals, cancellations, and more |\n| 🎯  | Subscription status tracking - know whether a user is subscribed whether they're on iOS, Android or web                                                      |\n| 📊  | Analytics - automatic calculation of metrics like conversion, mrr, and churn                                                                                 |\n| 📝  | [Online documentation](https://docs.revenuecat.com/docs) up to date                                                                                          |\n| 🔀  | [Integrations](https://www.revenuecat.com/integrations) - over a dozen integrations to easily send purchase data where you need it                           |\n| 💯  | Well maintained - [frequent releases](https://github.com/RevenueCat/cordova-plugin-purchases/releases)                                                                  |\n| 📮  | Great support - [Help Center](https://revenuecat.zendesk.com)                                                                                           |\n| 🤩  | Awesome [new features](https://trello.com/b/RZRnWRbI/revenuecat-product-roadmap)                                                                             |\n\n## Getting Started\n\nFor more detailed information, you can view our complete documentation at [docs.revenuecat.com](https://docs.revenuecat.com/docs).\n",
    "usage": "\n#### 1. Get a RevenueCat API key\n\nLog in to the [RevenueCat dashboard](https://app.revenuecat.com) and obtain a free API key for your application.\n\n#### 2. Initialize the SDK\n\nYou should only configure _Purchases_ once (usually on app launch) as soon as your app has a unique user id for your user. This can be when a user logs in if you have accounts or on launch if you can generate a random user identifier.\n\n```typescript\n import { Platform } from \"@ionic/angular\";\n import { Purchases } from \"@awesome-cordova-plugins/purchases/ngx\";\n\n constructor(public platform: Platform, private purchases: Purchases) {\n     platform.ready().then(() => {\n         this.purchases.setDebugLogsEnabled(true); // Enable to get debug logs\n         this.purchases.setup(\"my_api_key\", \"my_app_user_id\");\n     }\n }\n```\n\n#### 3. Quickstart\nPlease follow the [Quickstart Guide](https://docs.revenuecat.com/docs/) for more information on how to use the SDK\n\n### Requirements\nRequires XCode 11.0+ and minimum target iOS 9.0+\nThis plugin has been tested with cordova-plugin-purchases@\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/RevenueCat/cordova-plugin-purchases",
    "cordovaPlugin": {
      "name": "cordova-plugin-purchases@2.3.0"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/push",
    "displayName": "Push",
    "description": "\nRegister and receive push notifications.\n\nRequires Cordova plugin: `phonegap-plugin-push`. For more info, please see the [Push plugin docs](https://github.com/phonegap/phonegap-plugin-push).\n\nFor TypeScript users, see the [Push plugin docs about using TypeScript for custom notifications](https://github.com/phonegap/phonegap-plugin-push/blob/master/docs/TYPESCRIPT.md).\n",
    "usage": "\n```typescript\nimport { Push, PushObject, PushOptions } from '@awesome-cordova-plugins/push/ngx';\n\nconstructor(private push: Push) { }\n\n...\n\n\n// to check if we have permission\nthis.push.hasPermission()\n  .then((res: any) => {\n\n    if (res.isEnabled) {\n      console.log('We have permission to send push notifications');\n    } else {\n      console.log('We do not have permission to send push notifications');\n    }\n\n  });\n\n// Create a channel (Android O and above). You'll need to provide the id, description and importance properties.\nthis.push.createChannel({\n id: \"testchannel1\",\n description: \"My first test channel\",\n // The importance property goes from 1 = Lowest, 2 = Low, 3 = Normal, 4 = High and 5 = Highest.\n importance: 3,\n //badge is used to if badge appears on the app icon see https://developer.android.com/reference/android/app/NotificationChannel.html#setShowBadge(boolean).\n //false = no badge on app icon.\n //true = badge on app icon\n badge: false\n}).then(() => console.log('Channel created'));\n\n// Delete a channel (Android O and above)\nthis.push.deleteChannel('testchannel1').then(() => console.log('Channel deleted'));\n\n// Return a list of currently configured channels\nthis.push.listChannels().then((channels) => console.log('List of channels', channels))\n\n// to initialize push notifications\n\nconst options: PushOptions = {\n   android: {},\n   ios: {\n       alert: 'true',\n       badge: true,\n       sound: 'false'\n   },\n   windows: {},\n   browser: {\n       pushServiceURL: 'http://push.api.phonegap.com/v1/push'\n   }\n}\n\nconst pushObject: PushObject = this.push.init(options);\n\n\npushObject.on('notification').subscribe((notification: any) => console.log('Received a notification', notification));\n\npushObject.on('registration').subscribe((registration: any) => console.log('Device registered', registration));\n\npushObject.on('error').subscribe(error => console.error('Error with Push plugin', error));\n\n\n```\n",
    "platforms": [
      "Android",
      "Browser",
      "iOS",
      "Windows"
    ],
    "repo": "https://github.com/phonegap/phonegap-plugin-push",
    "cordovaPlugin": {
      "name": "phonegap-plugin-push"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/pushape-push",
    "displayName": "PushapePush",
    "description": "\nRegister and receive push notifications.\nThis plugin extends functionalities of Push native plugin in order to use it with Pushape service.\n\nPushape service: @link https://glue-labs.com/pushape-invio-notifiche-push-ios-android-api-sdk\n\nRequires Cordova plugin: `pushape-cordova-push`. For more info, please see the [Pushape plugin docs](https://github.com/gluelabs/pushape-cordova-push).\n\nFor TypeScript users, see the [Pushape plugin docs about using TypeScript for custom notifications](https://github.com/gluelabs/pushape-cordova-push/blob/master/docs/PUSHAPE_TYPESCRIPT.md).\n",
    "usage": "\n```typescript\nimport { PushapePush } from '@awesome-cordova-plugins/pushape-push/ngx';\n\n\nconstructor(private readonly pushapePush: PushapePush) { }\n\n...\n\n\n\n```\n",
    "platforms": [
      "Android",
      "Browser",
      "iOS"
    ],
    "repo": "https://github.com/gluelabs/pushape-cordova-push",
    "cordovaPlugin": {
      "name": "pushape-cordova-push"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/safari-view-controller",
    "displayName": "Safari View Controller",
    "description": "\nFor displaying read-only web content.\n\nRequires Cordova plugin: `cordova-plugin-safariviewcontroller`. For more info, please see the [Safari View Controller plugin docs](https://github.com/EddyVerbruggen/cordova-plugin-safariviewcontroller).\n",
    "usage": "\n```typescript\nimport { SafariViewController } from '@awesome-cordova-plugins/safari-view-controller/ngx';\n\nconstructor(private safariViewController: SafariViewController) { }\n\n...\n\nthis.safariViewController.isAvailable()\n  .then((available: boolean) => {\n      if (available) {\n\n        this.safariViewController.show({\n          url: 'http://ionic.io',\n          hidden: false,\n          animated: false,\n          transition: 'curl',\n          enterReaderModeIfAvailable: true,\n          tintColor: '#ff0000'\n        })\n        .subscribe((result: any) => {\n            if(result.event === 'opened') console.log('Opened');\n            else if(result.event === 'loaded') console.log('Loaded');\n            else if(result.event === 'closed') console.log('Closed');\n          },\n          (error: any) => console.error(error)\n        );\n\n      } else {\n        // use fallback browser, example InAppBrowser\n      }\n    }\n  );\n```",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/EddyVerbruggen/cordova-plugin-safariviewcontroller",
    "cordovaPlugin": {
      "name": "cordova-plugin-safariviewcontroller"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/screen-orientation",
    "displayName": "Screen Orientation",
    "description": "\nCordova plugin to set/lock the screen orientation in a common way.\n\nRequires Cordova plugin: `cordova-plugin-screen-orientation`. For more info, please see the [Screen Orientation plugin docs](https://github.com/apache/cordova-plugin-screen-orientation).\n",
    "usage": "\n```typescript\nimport { ScreenOrientation } from '@awesome-cordova-plugins/screen-orientation/ngx';\n\nconstructor(private screenOrientation: ScreenOrientation) { }\n\n...\n\n\n// get current\nconsole.log(this.screenOrientation.type); // logs the current orientation, example: 'landscape'\n\n// set to landscape\nthis.screenOrientation.lock(this.screenOrientation.ORIENTATIONS.LANDSCAPE);\n\n// allow user rotate\nthis.screenOrientation.unlock();\n\n// detect orientation changes\nthis.screenOrientation.onChange().subscribe(\n   () => {\n       console.log(\"Orientation Changed\");\n   }\n);\n\n```\n",
    "platforms": [
      "Android",
      "iOS",
      "Windows"
    ],
    "repo": "https://github.com/apache/cordova-plugin-screen-orientation",
    "cordovaPlugin": {
      "name": "cordova-plugin-screen-orientation"
    },
    "premierSlug": "screen-orientation"
  },
  {
    "packageName": "@awesome-cordova-plugins/service-discovery",
    "displayName": "ServiceDiscovery",
    "description": "\nSimple plugin to get any SSDP / UPnP / DLNA service on a local network\n",
    "usage": "\n```typescript\nimport { ServiceDiscovery } from '@awesome-cordova-plugins/service-discovery';\n\n\nconstructor(private serviceDiscovery: ServiceDiscovery) { }\n\n...\n\n\nthis.serviceDiscovery.getNetworkServices('ssdp:all')\n  .then(devices => console.log(devices))\n  .catch(error => console.error(error));\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/scottdermott/cordova-plugin-discovery",
    "cordovaPlugin": {
      "name": "cordova-plugin-discovery"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/shake",
    "displayName": "Shake",
    "description": "Handles shake gesture",
    "usage": "\n```typescript\nimport { Shake } from '@awesome-cordova-plugins/shake/ngx';\n\nconstructor(private shake: Shake) { }\n\n...\n\nconst watch = this.shake.startWatch(60).subscribe(() => {\n  // do something\n  });\n\nwatch.unsubscribe();\n```\n",
    "platforms": [
      "iOS"
    ],
    "repo": "https://github.com/leecrossley/cordova-plugin-shake",
    "cordovaPlugin": {
      "name": "cordova-plugin-shake"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/sign-in-with-apple",
    "displayName": "Sign In With Apple",
    "description": "\nSign in with Apple makes it easy for users to sign in to your apps and websites using their Apple ID.\nInstead of filling out forms, verifying email addresses, and choosing new passwords,\nthey can use Sign in with Apple to set up an account and start using your app right away.\nAll accounts are protected with two-factor authentication for superior security,\nand Apple will not track users’ activity in your app or website.\n*Source:* https://developer.apple.com/sign-in-with-apple/\n",
    "usage": "\n```typescript\nimport { SignInWithApple, AppleSignInResponse, AppleSignInErrorResponse, ASAuthorizationAppleIDRequest } from '@awesome-cordova-plugins/sign-in-with-apple/ngx';\n\n\nconstructor(private signInWithApple: SignInWithApple) { }\n\n...\n\n\n  this.signInWithApple.signin({\n    requestedScopes: [\n      ASAuthorizationAppleIDRequest.ASAuthorizationScopeFullName,\n      ASAuthorizationAppleIDRequest.ASAuthorizationScopeEmail\n    ]\n  })\n  .then((res: AppleSignInResponse) => {\n    // https://developer.apple.com/documentation/signinwithapplerestapi/verifying_a_user\n    alert('Send token to apple for verification: ' + res.identityToken);\n    console.log(res);\n  })\n  .catch((error: AppleSignInErrorResponse) => {\n    alert(error.code + ' ' + error.localizedDescription);\n    console.error(error);\n  });\n\n```\n",
    "platforms": [
      "iOS"
    ],
    "repo": "https://github.com/twogate/cordova-plugin-sign-in-with-apple",
    "cordovaPlugin": {
      "name": "cordova-plugin-sign-in-with-apple"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/smartlook",
    "displayName": "Smartlook",
    "description": "\nOfficial Smartlook SDK plugin.\nFull documentation can be found here: https://smartlook.github.io/docs/sdk/ionic/\n",
    "usage": "\n```typescript\nimport { Smartlook, SmartlookSetupConfig } from '@awesome-cordova-plugins/smartlook/ngx';\n\n...\n\n@Component( ... )\nexport class AppComponent {\n    constructor(private smartlook: Smartlook) {\n       this.platform.ready().then(() => {\n           this.smartlook.setupAndStartRecording(new SmartlookSetupConfig(\"YOUR API KEY\"));\n       }\n    }\n}\n```",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/smartlook/cordova-smartlook.git",
    "cordovaPlugin": {
      "name": "https://github.com/smartlook/cordova-smartlook.git"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/sms-retriever",
    "displayName": "Sms Retriever",
    "description": "\nThis plugin retrives the SMS which arrive without requiring READ permissions.\n",
    "usage": "\n```typescript\nimport { SmsRetriever } from '@awesome-cordova-plugins/sms-retriever';\n\n\nconstructor(private smsRetriever: SmsRetriever) { }\n\n...\n\n\nthis.smsRetriever.getAppHash()\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\nthis.smsRetriever.startWatching()\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n\n```\n",
    "platforms": [
      "Android"
    ],
    "repo": "https://github.com/hanatharesh2712/ionic-native-sms-retriever-plugin-master",
    "installVariables": [
      "PLAY_SERVICES_VERSION"
    ],
    "cordovaPlugin": {
      "name": "cordova-plugin-sms-retriever-manager"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/sms",
    "displayName": "SMS",
    "description": "\n\nRequires Cordova plugin: cordova-sms-plugin. For more info, please see the [SMS plugin docs](https://github.com/cordova-sms/cordova-sms-plugin).\n",
    "usage": "\n```typescript\nimport { SMS } from '@awesome-cordova-plugins/sms/ngx';\n\nconstructor(private sms: SMS) { }\n\n\n...\n\n\n// Send a text message using default options\nthis.sms.send('416123456', 'Hello world!');\n```",
    "platforms": [
      "Android",
      "iOS",
      "Windows",
      "Windows Phone 8"
    ],
    "repo": "https://github.com/cordova-sms/cordova-sms-plugin",
    "cordovaPlugin": {
      "name": "cordova-sms-plugin"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/social-sharing",
    "displayName": "Social Sharing",
    "description": "\nShare text, files, images, and links via social networks, sms, and email.\n\nFor Browser usage check out the Web Share API docs: https://github.com/EddyVerbruggen/SocialSharing-PhoneGap-Plugin#5-web-share-api\n",
    "usage": "\n```typescript\nimport { SocialSharing } from '@awesome-cordova-plugins/social-sharing/ngx';\n\nconstructor(private socialSharing: SocialSharing) { }\n\n...\n\n// Check if sharing via email is supported\nthis.socialSharing.canShareViaEmail().then(() => {\n  // Sharing via email is possible\n}).catch(() => {\n  // Sharing via email is not possible\n});\n\n// Share via email\nthis.socialSharing.shareViaEmail('Body', 'Subject', ['recipient@example.org']).then(() => {\n  // Success!\n}).catch(() => {\n  // Error!\n});\n```\n",
    "platforms": [
      "Android",
      "Browser",
      "iOS",
      "Windows",
      "Windows Phone"
    ],
    "repo": "https://github.com/EddyVerbruggen/SocialSharing-PhoneGap-Plugin",
    "cordovaPlugin": {
      "name": "cordova-plugin-x-socialsharing"
    },
    "premierSlug": "social-sharing"
  },
  {
    "packageName": "@awesome-cordova-plugins/speech-recognition",
    "displayName": "Speech Recognition",
    "description": "\nThis plugin does speech recognition using cloud services\n",
    "usage": "\n```typescript\nimport { SpeechRecognition } from '@awesome-cordova-plugins/speech-recognition/ngx';\n\nconstructor(private speechRecognition: SpeechRecognition) { }\n\n...\n\n\n\n// Check feature available\nthis.speechRecognition.isRecognitionAvailable()\n  .then((available: boolean) => console.log(available))\n\n// Start the recognition process\nthis.speechRecognition.startListening(options)\n  .subscribe(\n    (matches: string[]) => console.log(matches),\n    (onerror) => console.log('error:', onerror)\n  )\n\n// Stop the recognition process (iOS only)\nthis.speechRecognition.stopListening()\n\n// Get the list of supported languages\nthis.speechRecognition.getSupportedLanguages()\n  .then(\n    (languages: string[]) => console.log(languages),\n    (error) => console.log(error)\n  )\n\n// Check permission\nthis.speechRecognition.hasPermission()\n  .then((hasPermission: boolean) => console.log(hasPermission))\n\n// Request permissions\nthis.speechRecognition.requestPermission()\n  .then(\n    () => console.log('Granted'),\n    () => console.log('Denied')\n  )\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/pbakondy/cordova-plugin-speechrecognition",
    "cordovaPlugin": {
      "name": "cordova-plugin-speechrecognition"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/spinner-dialog",
    "displayName": "Spinner Dialog",
    "description": "\nCordova plugin for showing a native spinner based on Paldom/SpinnerDialog.\n\nRequires Cordova plugin: `cordova-plugin-native-spinner`. For more info, please see the [Spinner Dialog plugin docs](https://github.com/greybax/cordova-plugin-native-spinner).\n",
    "usage": "\n```typescript\nimport { SpinnerDialog } from '@awesome-cordova-plugins/spinner-dialog/ngx';\n\nconstructor(private spinnerDialog: SpinnerDialog) { }\n\n...\n\nthis.spinnerDialog.show();\n\nthis.spinnerDialog.hide();\n```",
    "platforms": [
      "Android",
      "iOS",
      "Windows Phone 8",
      "Windows"
    ],
    "repo": "https://github.com/greybax/cordova-plugin-native-spinner",
    "cordovaPlugin": {
      "name": "cordova-plugin-native-spinner"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/splash-screen",
    "displayName": "Splash Screen",
    "description": "This plugin displays and hides a splash screen during application launch. The methods below allows showing and hiding the splashscreen after the app has loaded.",
    "usage": "\n```typescript\nimport { SplashScreen } from '@awesome-cordova-plugins/splash-screen/ngx';\n\nconstructor(private splashScreen: SplashScreen) { }\n\n...\n\nthis.splashScreen.show();\n\nthis.splashScreen.hide();\n```\n",
    "platforms": [
      "Amazon Fire OS",
      "Android",
      "iOS",
      "Windows"
    ],
    "repo": "https://github.com/apache/cordova-plugin-splashscreen",
    "cordovaPlugin": {
      "name": "cordova-plugin-splashscreen"
    },
    "premierSlug": "splashscreen",
    "capacitorIncompatible": true
  },
  {
    "packageName": "@awesome-cordova-plugins/spotify-auth",
    "displayName": "Spotify Auth",
    "description": "\nCordova plugin for authenticating with Spotify\n> https://github.com/Festify/cordova-spotify-oauth\n",
    "usage": "\n```typescript\nimport { SpotifyAuth } from '@awesome-cordova-plugins/spotify-auth/ngx';\n\n// [...]\n\nconstructor(private spotifyAuth: SpotifyAuth) { }\n\n// [...]\n\nconst config = {\n  clientId: \"<SPOTIFY CLIENT ID>\",\n  redirectUrl: \"<REDIRECT URL, MUST MATCH WITH AUTH ENDPOINT AND SPOTIFY DEV CONSOLE>\",\n  scopes: [\"streaming\"], // see Spotify Dev console for all scopes\n  tokenExchangeUrl: \"<URL OF TOKEN EXCHANGE HTTP ENDPOINT>\",\n  tokenRefreshUrl: \"<URL OF TOKEN REFRESH HTTP ENDPOINT>\",\n};\n\n...\n\nthis.spotifyAuth.authorize(config)\n  .then(({ accessToken, expiresAt }) => {\n    console.log(`Got an access token, its ${accessToken}!`);\n    console.log(`Its going to expire in ${expiresAt - Date.now()}ms.`);\n  });\n\n// [...]\n\nthis.spotifyAuth.forget();\n\n// [...]\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/Festify/cordova-spotify-oauth",
    "installVariables": [
      "LOCAL_STORAGE_KEY"
    ],
    "cordovaPlugin": {
      "name": "cordova-spotify-oauth"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/sqlite-db-copy",
    "displayName": "Sqlite Db Copy",
    "description": "\nThis plugin does something\n",
    "usage": "\n```typescript\nimport { SqliteDbCopy } from '@awesome-cordova-plugins/sqlite-db-copy/ngx';\n\n\nconstructor(private sqliteDbCopy: SqliteDbCopy) { }\n\n...\n\n\nthis.sqliteDbCopy.copy('sample.db', 0)\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/an-rahulpandey/cordova-plugin-dbcopy",
    "cordovaPlugin": {
      "name": "cordova-plugin-dbcopy"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/sqlite-porter",
    "displayName": "SQLite Porter",
    "description": "\nThis Cordova/Phonegap plugin can be used to import/export to/from a SQLite database using either SQL or JSON.\n",
    "usage": "\n```typescript\nimport { SQLitePorter } from '@awesome-cordova-plugins/sqlite-porter/ngx';\n\n\nconstructor(private sqlitePorter: SQLitePorter) { }\n\n...\n\nlet db = window.openDatabase('Test', '1.0', 'TestDB', 1 * 1024);\n// or we can use SQLite plugin\n// we will assume that we injected SQLite into this component as sqlite\nthis.sqlite.create({\n  name: 'data.db',\n  location: 'default'\n})\n  .then((db: any) => {\n    let dbInstance = db._objectInstance;\n    // we can pass db._objectInstance as the database option in all SQLitePorter methods\n  });\n\n\nlet sql = 'CREATE TABLE Artist ([Id] PRIMARY KEY, [Title]);' +\n           'INSERT INTO Artist(Id,Title) VALUES (\"1\",\"Fred\");';\n\nthis.sqlitePorter.importSqlToDb(db, sql)\n  .then(() => console.log('Imported'))\n  .catch(e => console.error(e));\n\n\n```\n",
    "platforms": [
      "Amazon Fire OS",
      "Android",
      "BlackBerry 10",
      "Browser",
      "iOS",
      "Tizen",
      "Windows",
      "Windows Phone"
    ],
    "repo": "https://github.com/dpa99c/cordova-sqlite-porter",
    "cordovaPlugin": {
      "name": "uk.co.workingedge.cordova.plugin.sqliteporter"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/sqlite",
    "displayName": "SQLite\n",
    "description": "\nAccess SQLite databases on the device.\n",
    "usage": "\n\n```typescript\nimport { SQLite, SQLiteObject } from '@awesome-cordova-plugins/sqlite/ngx';\n\nconstructor(private sqlite: SQLite) { }\n\n...\n\nthis.sqlite.create({\n  name: 'data.db',\n  location: 'default'\n})\n  .then((db: SQLiteObject) => {\n\n\n    db.executeSql('create table danceMoves(name VARCHAR(32))', [])\n      .then(() => console.log('Executed SQL'))\n      .catch(e => console.log(e));\n\n\n  })\n  .catch(e => console.log(e));\n\n```\n",
    "platforms": [
      "Android",
      "iOS",
      "macOS",
      "Windows"
    ],
    "repo": "https://github.com/litehelpers/Cordova-sqlite-storage",
    "cordovaPlugin": {
      "name": "cordova-sqlite-storage"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/star-prnt",
    "displayName": "StarPRNT",
    "description": "\n* Ionic Native wrappers for the starprnt cordova plugin for Star Micronics Bluetooth/LAN printers\n",
    "usage": "\n```typescript\nimport { StarPRNT } from '@awesome-cordova-plugins/star-prnt/ngx';\n\n\nconstructor(private starprnt: StarPRNT) { }\n\n...\n\n\nthis.starprnt.portDiscovery('all')\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/auctifera-josed/starprnt",
    "cordovaPlugin": {
      "name": "cordova-plugin-starprnt"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/status-bar",
    "displayName": "Status Bar",
    "description": "\nManage the appearance of the native status bar.\n\nRequires Cordova plugin: `cordova-plugin-statusbar`. For more info, please see the [StatusBar plugin docs](https://github.com/apache/cordova-plugin-statusbar).\n",
    "usage": "\n```typescript\nimport { StatusBar } from '@awesome-cordova-plugins/status-bar/ngx';\n\nconstructor(private statusBar: StatusBar) { }\n\n...\n\n// let status bar overlay webview\nthis.statusBar.overlaysWebView(true);\n\n// set status bar to white\nthis.statusBar.backgroundColorByHexString('#ffffff');\n```\n\n",
    "platforms": [
      "Android",
      "iOS",
      "Windows"
    ],
    "repo": "https://github.com/apache/cordova-plugin-statusbar",
    "cordovaPlugin": {
      "name": "cordova-plugin-statusbar"
    },
    "premierSlug": "statusbar",
    "capacitorIncompatible": true
  },
  {
    "packageName": "@awesome-cordova-plugins/streaming-media",
    "displayName": "Streaming Media",
    "description": "\nThis plugin allows you to stream audio and video in a fullscreen, native player on iOS and Android.\n",
    "usage": "\n```typescript\nimport { StreamingMedia, StreamingVideoOptions } from '@awesome-cordova-plugins/streaming-media/ngx';\n\nconstructor(private streamingMedia: StreamingMedia) { }\n\nlet options: StreamingVideoOptions = {\n  successCallback: () => { console.log('Video played') },\n  errorCallback: (e) => { console.log('Error streaming') },\n  orientation: 'landscape',\n  shouldAutoClose: true,\n  controls: false\n};\n\nthis.streamingMedia.playVideo('https://path/to/video/stream', options);\n\n```",
    "platforms": [
      "Amazon Fire OS",
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/nchutchind/cordova-plugin-streaming-media",
    "cordovaPlugin": {
      "name": "cordova-plugin-streaming-media"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/stripe",
    "displayName": "Stripe",
    "description": "\nA plugin that allows you to use Stripe's Native SDKs for Android and iOS.\n",
    "usage": "\n```typescript\nimport { Stripe } from '@awesome-cordova-plugins/stripe/ngx';\n\nconstructor(private stripe: Stripe) { }\n\n...\n\nthis.stripe.setPublishableKey('my_publishable_key');\n\nlet card = {\n number: '4242424242424242',\n expMonth: 12,\n expYear: 2020,\n cvc: '220'\n}\n\nthis.stripe.createCardToken(card)\n   .then(token => console.log(token.id))\n   .catch(error => console.error(error));\n\n```\n",
    "platforms": [
      "Android",
      "Browser",
      "iOS"
    ],
    "repo": "https://github.com/zyramedia/cordova-plugin-stripe",
    "cordovaPlugin": {
      "name": "cordova-plugin-stripe"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/sum-up",
    "displayName": "SumUp",
    "description": "\nPlugin to communicate with a SumUp payment terminal\n",
    "usage": "\n```typescript\nimport { SumUp } from '@awesome-cordova-plugins/sum-up';\n\n\nconstructor(private sumUp: SumUp) { }\n\nconst sumUpKeys: SumUpKeys = new SumUpKeys();\nsumUpKeys.affiliateKey = 'YOUR_API_KEY'; // if not provided in installation\nsumUpKeys.accessToken = 'YOUR_ACCESS_TOKEN';\n\nthis.sumUp.login(sumUpKeys)\n  .then((res: SumUpResponse) => console.log(res))\n  .catch((error: SumUpResponse) => console.error(error));\n\n this.sumUp.auth('YOUR_ACCESS_TOKEN')\n  .then((res: SumUpResponse) => console.log(res))\n  .catch((error: SumUpResponse) => console.error(error));\n\n this.sumUp.getSettings()\n  .then((res: SumUpResponse) => console.log(res))\n  .catch((error: SumUpResponse) => console.error(error));\n\n this.sumUp.logout()\n  .then((res: SumUpResponse) => console.log(res))\n  .catch((error: SumUpResponse) => console.error(error));\n\n this.sumUp.isLoggedIn()\n  .then((res: SumUpLoginStatus) => console.log(res))\n  .catch((error: SumUpLoginStatus) => console.error(error));\n\n this.sumUp.prepare()\n  .then((res: SumUpResponse) => console.log(res))\n  .catch((error: SumUpResponse) => console.error(error));\n\nthis.sumUp.closeConnection()\n  .then((res: SumUpResponse) => console.log(res))\n  .catch((error: SumUpResponse) => console.error(error));\n\nthis.sumUp.pay(10.0, 'EUR')\n  .then((res: SumUpPayment) => console.log(res))\n  .catch((error: SumUpPayment) => console.error(error));\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/mariusbackes/cordova-plugin-sumup",
    "installVariables": [
      "SUMUP_API_KEY"
    ],
    "cordovaPlugin": {
      "name": "cordova-sumup-plugin"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/system-alert-window-permission",
    "displayName": "System Alert Window Permission",
    "description": "\nThis plugin does something\n",
    "usage": "\n```typescript\nimport { SystemAlertWindowPermission } from '@awesome-cordova-plugins/system-alert-window-permission/ngx';\n\n\nconstructor(private systemAlertWindowPermission: SystemAlertWindowPermission) { }\n\n...\n\n\nthis.systemAlertWindowPermission.hasPermission()\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n\nthis.systemAlertWindowPermission.requestPermission()\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n\n```\n",
    "platforms": [
      "Android"
    ],
    "repo": "https://github.com/MaximBelov/cordova-plugin-system-alert-window-permission.git",
    "cordovaPlugin": {
      "name": "cordova-plugin-system-alert-window-permission"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/taptic-engine",
    "displayName": "Taptic Engine",
    "description": "\nAn Ionic plugin to use Taptic Engine API on iPhone 7, 7 Plus or newer.\n",
    "usage": "\n```typescript\nimport { TapticEngine } from '@awesome-cordova-plugins/taptic-engine/ngx';\n\n...\n\nconstructor(private taptic: TapticEngine) { }\n\n...\n\nthis.taptic.selection();\n\nthis.taptic.notification();\n\nthis.taptic.impact();\n\n```\n",
    "platforms": [
      "iOS"
    ],
    "repo": "https://github.com/EddyVerbruggen/cordova-plugin-taptic-engine",
    "cordovaPlugin": {
      "name": "cordova-plugin-taptic-engine"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/tealium-adidentifier",
    "displayName": "TealiumAdIdentifier",
    "description": "\nThis module depends on the [Tealium Cordova Plugin](https://github.com/tealium/cordova-plugin). Without it, this module will not do anything.\nMakes the IDFA and Google Ad Identifier available in the Tealium data layer.\n",
    "usage": "\n```\nimport { TealiumAdIdentifier } from '@awesome-cordova-plugins/tealium-adidentifier/ngx';\n\n\nconstructor(private adIdentifier: TealiumAdIdentifier) { }\n\n...\n\n\nthis.adIdentifier.setPersistent(\"main\");\nthis.adIdentifier.setVolatile(\"main\");\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/Tealium/cordova-plugin",
    "cordovaPlugin": {
      "name": "tealium-cordova-adidentifier"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/tealium-installreferrer",
    "displayName": "TealiumInstallReferrer",
    "description": "\nThis module depends on the [Tealium Cordova Plugin](https://github.com/tealium/cordova-plugin). Without it, this module will not do anything.\nImplements a Broadcast Receiver for the INSTALL_REFERRER intent.\n",
    "usage": "\n```\nimport { TealiumInstallReferrer } from '@awesome-cordova-plugins/tealium-installreferrer/ngx';\n\n\nconstructor(private installReferrer: TealiumInstallReferrer) { }\n\n\nthis.installReferrer.setPersistent(\"main\");\nthis.installReferrer.setVolatile(\"main\");\n\n\n\n```\n",
    "platforms": [
      "Android"
    ],
    "repo": "https://github.com/Tealium/cordova-plugin",
    "cordovaPlugin": {
      "name": "tealium-cordova-installreferrer"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/tealium",
    "displayName": "Tealium",
    "description": "\nThis plugin provides a TypeScript wrapper around the [Tealium](https://www.tealium.com) Cordova plugin for Ionic Native.\n\nFor full documentation, see [https://community.tealiumiq.com/t5/Mobile-Libraries/Tealium-for-Cordova/ta-p/17618](https://community.tealiumiq.com/t5/Mobile-Libraries/Tealium-for-Cordova/ta-p/17618)",
    "usage": "\n```\nimport { Tealium, TealConfig } from '@awesome-cordova-plugins/tealium/ngx';\n\n\nconstructor(private tealium: Tealium) { }\n\n...\n\nlet tealConfig: TealConfig = {\n account: \"<your-account>\",\n profile: \"<your-profile>\",\n environment: \"<your-environment>\", // usually \"dev\", \"qa\" or \"prod\"\n isLifecycleEnabled: \"true\", // pass \"false\" to disable lifecycle tracking\n isCrashReporterEnabled: \"false\", // pass \"true\" to enable crash reporter (Android only)\n instance: \"<your-instance-name\" // an arbitrary instance name. use the same instance name for all subsequent API calls\n}\n\nthis.tealium.init(tealConfig).then(()=>{\n  this.tealium.trackView({\"screen_name\": \"homescreen\"});\n});\n\n```",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/Tealium/cordova-plugin",
    "cordovaPlugin": {
      "name": "tealium-cordova-plugin"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/text-to-speech-advanced",
    "displayName": "Text To Speech Advanced",
    "description": "\nText to Speech plugin\n",
    "usage": "\n```typescript\nimport { TextToSpeechAdvanced } from '@awesome-cordova-plugins/text-to-speech-advanced/ngx';\n\nconstructor(private tts: TextToSpeechAdvanced) { }\n\n...\n\nthis.tts.speak('Hello World')\n  .then(() => console.log('Success'))\n  .catch((reason: any) => console.log(reason));\n\n```",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/spasma/cordova-plugin-tts-advanced",
    "cordovaPlugin": {
      "name": "cordova-plugin-tts-advanced"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/theme-detection",
    "displayName": "Theme Detection",
    "description": "\nCordova plugin to detect whether dark mode is enabled or not\n",
    "usage": "\n```typescript\nimport { ThemeDetection } from '@awesome-cordova-plugins/theme-detection';\n\n\nconstructor(private themeDetection: ThemeDetection) { }\n\n...\n\nthis.themeDetection.isAvailable()\n  .then((res: ThemeDetectionResponse) => {\n     if(res.value) {\n       this.themeDetection.isDarkModeEnabled().then((res: ThemeDetectionResponse) => {\n         console.log(res);\n       })\n       .catch((error: any) => console.error(error));\n     }\n  })\n  .catch((error: any) => console.error(error));\n\n```\n",
    "platforms": [
      "iOS",
      "Android"
    ],
    "repo": "https://github.com/mariusbackes/cordova-plugin-theme-detection",
    "installVariables": [],
    "cordovaPlugin": {
      "name": "cordova-plugin-theme-detection"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/three-dee-touch",
    "displayName": "3D Touch",
    "description": "\nThe 3D Touch plugin adds 3D Touch capabilities to your Cordova app.\n\nRequires Cordova plugin: `cordova-plugin-3dtouch`. For more info, please see the [3D Touch plugin docs](https://github.com/EddyVerbruggen/cordova-plugin-3dtouch).\n",
    "usage": "\nPlease do refer to the original plugin's repo for detailed usage. The usage example here might not be sufficient.\n```typescript\nimport { ThreeDeeTouch, ThreeDeeTouchQuickAction, ThreeDeeTouchForceTouch } from '@awesome-cordova-plugins/three-dee-touch/ngx';\n\nconstructor(private threeDeeTouch: ThreeDeeTouch) { }\n\n...\n\nthis.threeDeeTouch.isAvailable().then(isAvailable => console.log('3D Touch available? ' + isAvailable));\n\nthis.threeDeeTouch.watchForceTouches()\n  .subscribe(\n    (data: ThreeDeeTouchForceTouch) => {\n      console.log('Force touch %' + data.force);\n      console.log('Force touch timestamp: ' + data.timestamp);\n      console.log('Force touch x: ' + data.x);\n      console.log('Force touch y: ' + data.y);\n    }\n  );\n\n\nlet actions: ThreeDeeTouchQuickAction[] = [\n  {\n    type: 'checkin',\n    title: 'Check in',\n    subtitle: 'Quickly check in',\n    iconType: 'Compose'\n  },\n  {\n    type: 'share',\n    title: 'Share',\n    subtitle: 'Share like you care',\n    iconType: 'Share'\n  },\n  {\n    type: 'search',\n    title: 'Search',\n    iconType: 'Search'\n  },\n  {\n    title: 'Show favorites',\n    iconTemplate: 'HeartTemplate'\n  }\n];\n\nthis.threeDeeTouch.configureQuickActions(actions);\n\nthis.threeDeeTouch.onHomeIconPressed().subscribe(\n (payload) => {\n   // returns an object that is the button you presed\n   console.log('Pressed the ${payload.title} button')\n   console.log(payload.type)\n\n }\n)\n```",
    "platforms": [
      "iOS"
    ],
    "repo": "https://github.com/EddyVerbruggen/cordova-plugin-3dtouch",
    "cordovaPlugin": {
      "name": "cordova-plugin-3dtouch"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/toast",
    "displayName": "Toast",
    "description": "\nThis plugin allows you to show a native Toast (a little text popup) on iOS, Android and WP8. It's great for showing a non intrusive native notification which is guaranteed always in the viewport of the browser.\n\nRequires Cordova plugin: `cordova-plugin-x-toast`. For more info, please see the [Toast plugin docs](https://github.com/EddyVerbruggen/Toast-PhoneGap-Plugin).\n",
    "usage": "\n```typescript\nimport { Toast } from '@awesome-cordova-plugins/toast/ngx';\n\nconstructor(private toast: Toast) { }\n\n...\n\nthis.toast.show(`I'm a toast`, '5000', 'center').subscribe(\n  toast => {\n    console.log(toast);\n  }\n);\n```",
    "platforms": [
      "Android",
      "BlackBerry 10",
      "iOS",
      "Windows",
      "Windows Phone 8"
    ],
    "repo": "https://github.com/EddyVerbruggen/Toast-PhoneGap-Plugin",
    "cordovaPlugin": {
      "name": "cordova-plugin-x-toast"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/touch-id",
    "displayName": "Touch ID",
    "description": "\nScan the fingerprint of a user with the TouchID sensor.\n\nRequires Cordova plugin: `cordova-plugin-touch-id`. For more info, please see the [TouchID plugin docs](https://github.com/EddyVerbruggen/cordova-plugin-touch-id).\n",
    "usage": "\n```typescript\nimport { TouchID } from '@awesome-cordova-plugins/touch-id/ngx';\n\nconstructor(private touchId: TouchID) { }\n\n...\n\nthis.touchId.isAvailable()\n  .then(\n    res => console.log('TouchID is available!'),\n    err => console.error('TouchID is not available', err)\n  );\n\nthis.touchId.verifyFingerprint('Scan your fingerprint please')\n  .then(\n    res => console.log('Ok', res),\n    err => console.error('Error', err)\n  );\n```\n\n### Error Codes\n\nThe plugin will reject for various reasons. Your app will most likely need to respond to the cases differently.\n\nHere is a list of some of the error codes:\n\n -  `-1` - Fingerprint scan failed more than 3 times\n -  `-2` or `-128` - User tapped the 'Cancel' button\n -  `-3` - User tapped the 'Enter Passcode' or 'Enter Password' button\n -  `-4` - The scan was cancelled by the system (Home button for example)\n -  `-6` - TouchID is not Available\n -  `-8` - TouchID is locked out from too many tries\n",
    "platforms": [
      "iOS"
    ],
    "repo": "https://github.com/EddyVerbruggen/cordova-plugin-touch-id",
    "cordovaPlugin": {
      "name": "cordova-plugin-touch-id"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/unvired-cordova-sdk",
    "displayName": "Unvired Cordova SDK",
    "description": "\nThis plugin lets you build apps which connect to Unvired Mobile Platform (UMP).\n-\niOS Requirements\n-\nUpdate your Cocoapods repo before you install the plugin.\n```\n$ pod repo update\n```\n-\nBrowser Requirements\n-\nAfter you install the plugin, for Ionic/Angular projects, please add a reference to the following JS files within <head></head> section of index.html.\n```\n<script src=\"assets/js/sql.js\"></script>\n<script src=\"assets/js/kernel.js\"></script>\n<script src=\"assets/js/winstore-jscompat.js\"></script>\n<script src=\"assets/js/jquery-3.2.1.js\"></script>\n```",
    "usage": "\n```typescript\nimport { UnviredCordovaSDK } from '@awesome-cordova-plugins/unvired-cordova-sdk/ngx';\n\n\nconstructor(private unviredSDK: UnviredCordovaSDK) { }\n\n...\n// This is usually done in app.component.ts of your app.\n// Before you can interact with UMP, you need to initialize the SDK and authenticate with UMP.\n// SDK Initialization\nlet loginParameters = new LoginParameters()\nloginParameters.appName = 'UNVIRED_DIGITAL_FORMS'\nloginParameters.metadataPath = '../assets/metadata.json'\nlet loginResult: LoginResult\ntry {\n  loginResult = await this.unviredSDK.login(loginParameters)\n}\ncatch (error) {\n  this.unviredSDK.logError(\"AppComponent\", \"Initialize\", \"Error during login: \" + error)\n}\n\n\nswitch (loginResult.type) {\ncase LoginListenerType.auth_activation_required:\n// App is not activated. i.e, User is using the app for the very first time.\n// App needs to be activated before it can interact with UMP.\n// At this point of time, you basically navigate to a login screen & accept username / password from the user.\n// Set the username & password to loginParameters object and call authenticateAndActivate\ntry {\n // Execute this block of code in a login screen.\nlet loginParameters = new LoginParameters();\nloginParameters.url = '<UMP_URL>';\nloginParameters.company = '<Company>';\nloginParameters.username = '<Username>';\nloginParameters.password = '<Password>';\nloginParameters.loginType = LoginType.unvired;\nlet authenticateActivateResult: AuthenticateActivateResult = await this.unviredSDK.authenticateAndActivate(loginParameters);\nif (authenticateActivateResult.type === AuthenticateAndActivateResultType.auth_activation_success) {\n// App is fully setup. Navigate to your app's home screen.\n} else if (authenticateActivateResult.type === AuthenticateAndActivateResultType.auth_activation_error) {\nconsole.log(\"Error during login: \" + authenticateActivateResult.error)\n} catch (error) {\nthis.unviredSDK.logError('LoginPage', 'auth_activation_required', 'ERROR: ' + error);\n}\nbreak;\n\n\n\ncase LoginListenerType.app_requires_login:\n// App is already activated. But, the user needs to enter credentials because the setting LOCAL_PASSWORD is set to YES in Unvired Admin Cockpit.\n// To set LOCAL_PASSWORD property for your app, contact your administrator.\ntry {\n // Execute this block of code in a login screen.\n let loginParameters = new LoginParameters()\n loginParameters.username = '<Username>';\n loginParameters.password = '<Password>';\n let authenticateLocalResult: AuthenticateLocalResult = await this.unviredSDK.authenticateLocal(loginParameters);\n if (authenticateLocalResult.type === AuthenticateLocalResultType.login_success) {\n // App is fully setup. Navigate to your app's home screen.\n } else if (authenticateLocalResult.type === AuthenticateLocalResultType.login_error) {\n  console.log(\"Error during local login: \" + authenticateActivateResult.error)\n } catch (error) {\n  this.unviredSDK.logError('LoginPage', 'app_requires_login', 'ERROR: ' + error);\n}\nbreak;\n\n\n\ncase login_success:\n// The setting LOCAL_PASSWORD is set to false.\n// App is fully initialized. Users can interact with the UMP\n// Navigate to Home screen\nbreak;\n}\n\n\n\n\n\n// Synchronization APIs\n// Example 1: Make a Sync RQST call\n```\nawait this.unviredSDK.syncForeground(RequestType.RQST, {\"CUSTOMER_HEADER\": {\"CUST_NO\" : \"007\", \"CUST_NAME\" : \"James Bond\"}}, '', 'PA_GET_CUSTOMER_DETAILS', true)\n```\n\n// Example 2: Make a Sync QUERY / PULL call\n```\nawait this.unviredSDK.syncForeground(RequestType.QUERY, '', {\"CUSTOMER_SEARCH_CONTEXT\":[{\"CUSTOMER_SEARCH_HEADER\":{\"CUST_NO\":\"007\"}}]}, 'PA_SEARCH_CUSTOMER', true)\n```\n\nExample 3: Make a Async RQST call\n```\nawait this.unviredSDK.syncBackground(RequestType.RQST, {\"CUSTOMER_HEADER\": {\"CUST_NO\" : \"007\", \"CUST_NAME\" : \"James Bond\"}}, '', 'PA_GET_CUSTOMER_DETAILS', 'CUSTOMER', beLID, false)\n```\n\nExample 4: Make a Async QUERY / PULL call\n```\nawait this.unviredSDK.syncBackground(RequestType.QUERY, '', {\"CUSTOMER_SEARCH_CONTEXT\":[{\"CUSTOMER_SEARCH_HEADER\":{\"CUST_NO\":\"007\"}}]}, 'PA_SEARCH_CUSTOMER', '', '', true)\n```\n\n// Note: Subscribe to NotificationListener to get updates on data processing in background\n// However, only one screen can listen to background data updates at any point of time.\nthis.unviredSDK.registerNotifListener().subscribe( data => {\nswitch (data.type) {\ncase NotificationListenerType.dataSend:\nbreak;\ncase NotificationListenerType.dataChanged:\nbreak;\ncase NotificationListenerType.dataReceived:\nbreak;\n.\n.\n.\n}})\n\n\n\n\n\n// Database APIs\n// Insert a record onto database\nthis.unviredsdk.dbInsert(\"CUSTOMER_HEADER\", {\"NAME\":\"James Bond\",\"CUST_NO\":\"007\"}, true);\n\n// Update a record in database\nthis.unviredSDK.dbUpdate('CUSTOMER_HEADER', {\"NAME\":\"John Doe\",\"CUST_NO\":\"008\"}, \"CUST_NO = '007'\")\n\n// Delete a record in database\nthis.unviredSDK.dbDelete('CUSTOMER_HEADER', \"CUST_NO = '007'\")\n\n// Execute a SQL Query\nthis.unviredSDK.dbExecuteStatement('SELECT * FROM CUSTOMER_HEADER WHERE CUSTOMER_ID = \"007\"')\n",
    "platforms": [
      "iOS",
      "Android",
      "Windows",
      "Browser"
    ],
    "repo": "https://github.com/unvired/cordova-plugin-unvired-sdk/",
    "installVariables": [],
    "cordovaPlugin": {
      "name": "cordova-plugin-unvired-sdk"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/uptime",
    "displayName": "Uptime",
    "description": "\nThis plugin provides the time spent in milliseconds since boot (uptime).\n",
    "usage": "\n```typescript\nimport { Uptime } from '@awesome-cordova-plugins/uptime/ngx';\n\nconstructor(private uptime: Uptime) { }\n\n...\n\nthis.uptime.getUptime(includeDeepSleep)\n  .then(uptime => console.log(uptime))\n  .catch(error => console.log(error));\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/s1lviu/cordova-plugin-uptime",
    "cordovaPlugin": {
      "name": "cordova-plugin-uptime"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/urbanairship",
    "displayName": "UrbanAirShip",
    "description": "\nThis plugin does something\n",
    "usage": "\n```typescript\nimport { UrbanAirShip } from '@awesome-cordova-plugins/urbanairship/ngx';\n\n\nconstructor(private urbanAirShip: UrbanAirShip) { }\n\n...\n\n\nthis.urbanAirShip.takeOff(config)\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://www.npmjs.com/package/urbanairship-cordova",
    "cordovaPlugin": {
      "name": "urbanairship-cordova"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/usabilla-cordova-sdk",
    "displayName": "Usabilla",
    "description": "\nUsabilla SDK is designed and developed to collect feedback from your users with great ease and flexibility through your mobile application.\nThis document describes library integration steps for your Cordova project.\n\nFor more info see [Cordova plugin docs](https://github.com/usabilla/usabilla-u4a-cordova)\n",
    "usage": "\n```typescript\nimport { Usabilla } from '@awesome-cordova-plugins/usabilla-cordova-sdk/ngx';\n\n\nconstructor(private usabilla: Usabilla) { }\n\n...\n\n\n this.usabilla.initialize(\n   appID: '<your_application_id>',\n   custom_vars: {\n     \"key\": \"value\"\n   });\n\n this.usabilla.loadFeedbackForm(\n   formID : '<your_form_id>'\n   );\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/usabilla/usabilla-u4a-cordova",
    "cordovaPlugin": {
      "name": "usabilla-cordova"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/vibes",
    "displayName": "Vibes",
    "description": "\nThis plugin enables integration with the Vibes Push SDK to your Cordova project with Android and iOS supported.\n",
    "usage": "\n```typescript\nimport { Vibes } from '@awesome-cordova-plugins/vibes/ngx';\n\n\nconstructor(private vibes: Vibes) { }\n\n...\n\n\nthis.vibes.registerDevice()\n  .then((res: any) => console.log(`device registration success: ${res}`)) // retrieve and save the device_id from `res` JSON object\n  .catch((error: any) => console.error('Error registering device', error));\n\nthis.vibes.registerPush()\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error('Error registering push', error));\n\nthis.vibes.getVibesDeviceInfo()\n  .then((res: any) => console.log(res)) // retrieve the `device_id` and `push_token` from the JSON object\n  .catch((error: any) => console.error('Error retrieving deviceinfo', error));\n\nthis.vibes.fetchInboxMessages()\n  .then((res: any) => console.log(res)) // fetches inbox messages for this person.\n  .catch((error: any) => console.error('Error fetching inbox messages for this person', error));\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/vibes/vibes-cordova.git",
    "installVariables": [
      "VIBES_APP_ID",
      "VIBES_API_URL"
    ],
    "cordovaPlugin": {
      "name": "vibes-cordova"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/vibration",
    "displayName": "Vibration",
    "description": "Vibrates the device",
    "usage": "\n```typescript\nimport { Vibration } from '@awesome-cordova-plugins/vibration/ngx';\n\nconstructor(private vibration: Vibration) { }\n\n...\n\n// Vibrate the device for a second\n// Duration is ignored on iOS.\nthis.vibration.vibrate(1000);\n\n// Vibrate 2 seconds\n// Pause for 1 second\n// Vibrate for 2 seconds\n// Patterns work on Android and Windows only\nthis.vibration.vibrate([2000,1000,2000]);\n\n// Stop any current vibrations immediately\n// Works on Android and Windows only\nthis.vibration.vibrate(0);\n```\n",
    "platforms": [
      "Android",
      "iOS",
      "Windows"
    ],
    "repo": "https://github.com/apache/cordova-plugin-vibration",
    "cordovaPlugin": {
      "name": "cordova-plugin-vibration"
    },
    "premierSlug": "vibration"
  },
  {
    "packageName": "@awesome-cordova-plugins/video-editor",
    "displayName": "Video Editor",
    "description": "Edit videos using native device APIs\n",
    "usage": "\n```typescript\nimport { VideoEditor } from '@awesome-cordova-plugins/video-editor/ngx';\n\nconstructor(private videoEditor: VideoEditor) { }\n\n...\n\nthis.videoEditor.transcodeVideo({\n  fileUri: '/path/to/input.mov',\n  outputFileName: 'output.mp4',\n  outputFileType: VideoEditor.OutputFileType.MPEG4\n})\n.then((fileUri: string) => console.log('video transcode success', fileUri))\n.catch((error: any) => console.log('video transcode error', error));\n\n```",
    "platforms": [
      "Android",
      "iOS",
      "Windows",
      "Windows Phone 8"
    ],
    "repo": "https://github.com/jbavari/cordova-plugin-video-editor",
    "cordovaPlugin": {
      "name": "cordova-plugin-video-editor"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/video-player",
    "displayName": "Video Player",
    "description": "\nA Cordova plugin that simply allows you to immediately play a video in fullscreen mode.\n\nRequires Cordova plugin: `com.moust.cordova.videoplayer`. For more info, please see the [VideoPlayer plugin docs](https://github.com/moust/cordova-plugin-videoplayer).\n",
    "usage": "\n```typescript\nimport { VideoPlayer } from '@awesome-cordova-plugins/video-player/ngx';\n\nconstructor(private videoPlayer: VideoPlayer) { }\n\n...\n\n// Playing a video.\nthis.videoPlayer.play('file:///android_asset/www/movie.mp4').then(() => {\n console.log('video completed');\n}).catch(err => {\n console.log(err);\n});\n\n```",
    "platforms": [
      "Android"
    ],
    "repo": "https://github.com/moust/cordova-plugin-videoplayer",
    "cordovaPlugin": {
      "name": "https://github.com/moust/cordova-plugin-videoplayer.git"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/web-intent",
    "displayName": "Web Intent",
    "description": "\nThis Plugin provides a general purpose shim layer for the Android intent mechanism, exposing various ways to handle sending and receiving intents.",
    "usage": "\nFor usage information please refer to the plugin's Github repo.\n\n```typescript\nimport { WebIntent } from '@awesome-cordova-plugins/web-intent/ngx';\n\nconstructor(private webIntent: WebIntent) { }\n\n...\n\nconst options = {\n  action: this.webIntent.ACTION_VIEW,\n  url: 'path/to/file',\n  type: 'application/vnd.android.package-archive'\n}\n\nthis.webIntent.startActivity(options).then(onSuccess, onError);\n\n```",
    "platforms": [
      "Android"
    ],
    "repo": "https://github.com/darryncampbell/darryncampbell-cordova-plugin-intent",
    "cordovaPlugin": {
      "name": "com-darryncampbell-cordova-plugin-intent"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/web-server",
    "displayName": "Web Server",
    "description": "\nThis plugin allows you to start a local dynamic content web server for android and iOS devices.\n",
    "usage": "\n```typescript\nimport { WebServer } from '@awesome-cordova-plugins/web-server/ngx';\n\n\nconstructor(private webServer: WebServer) { }\n\n...\n\nthis.webServer.onRequest().subscribe(data => {\n  console.log(data);\n  const res: Response = {\n    status: 200,\n    body: '',\n    headers: {\n      'Content-Type': 'text/html'\n    }\n  };\n\n  this.webServer.sendResponse(data.requestId, res)\n    .catch((error: any) => console.error(error));\n});\n\nthis.webServer.start(80)\n  .catch((error: any) => console.error(error));\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/nguyenthanh1995/cordova-plugin-webserver2.git",
    "cordovaPlugin": {
      "name": "cordova-plugin-webserver2"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/web-socket-server",
    "displayName": "WebSocket Server",
    "description": "\nThis plugin allows you to run a single, lightweight, barebone WebSocket Server.\n",
    "usage": "\n```typescript\nimport { WebSocketServer } from '@awesome-cordova-plugins/web-socket-server';\n\nconstructor(private wsserver: WebSocketServer) { }\n\n...\n\n// start websocket server\nthis.wsserver.start(8888, {}).subscribe({\n  next: server => console.log(`Listening on ${server.addr}:${server.port}`),\n  error: error => console.log(`Unexpected error`, error);\n});\n\n// watch for any messages\nthis.wsserver.watchMessage().subscribe(result => {\n  console.log(`Received message ${result.msg} from ${result.conn.uuid}`);\n});\n\n// send message to connection with specified uuid\nthis.wsserver.send({ uuid: '8e7c4f48-de68-4b6f-8fca-1067a353968d' }, 'Hello World');\n\n// stop websocket server\nthis.wsserver.stop().then(server => {\n  console.log(`Stop listening on ${server.addr}:${server.port}`);\n});\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/becvert/cordova-plugin-websocket-server",
    "cordovaPlugin": {
      "name": "cordova-plugin-websocket-server"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/webengage",
    "displayName": "Webengage",
    "description": "\nIonic-Native wrapper that wraps Webengage Cordova plugin for Android and iOS\n",
    "usage": "\n```typescript\nimport { Webengage, WebengageUser, WebengagePush, WebengageNotification } from '@awesome-cordova-plugins/webengage/ngx';\n\n\nconstructor(private webengage: Webengage, private webengageUser: WebengageUser, private webengagePush: WebengagePush, private webengageNotification: WebengageNotification ) { }\n\n...\n\nthis.webengage.engage();\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/WebEngage/cordova-plugin",
    "cordovaPlugin": {
      "name": "cordova-plugin-webengage"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/wechat",
    "displayName": "Wechat",
    "description": "\nA cordova plugin, a JS version of Wechat SDK\n",
    "usage": "\n```typescript\nimport { Wechat } from '@awesome-cordova-plugins/wechat/ngx';\n\n\nconstructor(private wechat: Wechat) { }\n\n...\n\n\nthis.wechat.functionName('Hello', 123)\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/xu-li/cordova-plugin-wechat.git",
    "installVariables": [
      "wechatappid"
    ],
    "cordovaPlugin": {
      "name": "cordova-plugin-wechat"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/wheel-selector",
    "displayName": "WheelSelector Plugin",
    "description": "Native wheel selector for Cordova (Android/iOS).\n",
    "usage": "\n```\nimport { WheelSelector } from '@awesome-cordova-plugins/wheel-selector/ngx';\n\n\nconstructor(private selector: WheelSelector) { }\n\n...\n\nconst jsonData = {\n  numbers: [\n   { description: \"1\" },\n    { description: \"2\" },\n    { description: \"3\" }\n  ],\n  fruits: [\n    { description: \"Apple\" },\n    { description: \"Banana\" },\n    { description: \"Tangerine\" }\n  ],\n  firstNames: [\n    { name: \"Fred\", id: '1' },\n    { name: \"Jane\", id: '2' },\n    { name: \"Bob\", id: '3' },\n    { name: \"Earl\", id: '4' },\n    { name: \"Eunice\", id: '5' }\n  ],\n  lastNames: [\n    { name: \"Johnson\", id: '100' },\n    { name: \"Doe\", id: '101' },\n    { name: \"Kinishiwa\", id: '102' },\n    { name: \"Gordon\", id: '103' },\n    { name: \"Smith\", id: '104' }\n  ]\n}\n\n...\n\n// basic number selection, index is always returned in the result\n selectANumber() {\n   this.selector.show({\n     title: \"How Many?\",\n     items: [\n       this.jsonData.numbers\n     ],\n   }).then(\n     result => {\n       console.log(result[0].description + ' at index: ' + result[0].index);\n     },\n     err => console.log('Error: ', err)\n     );\n }\n\n ...\n\n // basic selection, setting initial displayed default values: '3' 'Banana'\n selectFruit() {\n   this.selector.show({\n     title: \"How Much?\",\n     items: [\n       this.jsonData.numbers, this.jsonData.fruits\n     ],\n     positiveButtonText: \"Ok\",\n     negativeButtonText: \"Nope\",\n     defaultItems: [\n \t  {index:0, value: this.jsonData.numbers[2].description},\n \t  {index: 1, value: this.jsonData.fruits[3].description}\n \t]\n   }).then(\n     result => {\n       console.log(result[0].description + ' ' + result[1].description);\n     },\n     err => console.log('Error: ' + JSON.stringify(err))\n     );\n }\n\n ...\n\n // more complex as overrides which key to display\n // then retrieve properties from original data\n selectNamesUsingDisplayKey() {\n   this.selector.show({\n     title: \"Who?\",\n     items: [\n       this.jsonData.firstNames, this.jsonData.lastNames\n     ],\n     displayKey: 'name',\n     defaultItems: [\n \t  {index:0, value: this.jsonData.firstNames[2].name},\n       {index: 0, value: this.jsonData.lastNames[3].name}\n     ]\n   }).then(\n     result => {\n       console.log(result[0].name + ' (id= ' + this.jsonData.firstNames[result[0].index].id + '), ' +\n         result[1].name + ' (id=' + this.jsonData.lastNames[result[1].index].id + ')');\n     },\n     err => console.log('Error: ' + JSON.stringify(err))\n     );\n }\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/jasonmamy/cordova-wheel-selector-plugin",
    "cordovaPlugin": {
      "name": "cordova-wheel-selector-plugin"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/wifi-wizard-2",
    "displayName": "WifiWizard2",
    "description": "\nWifiWizard2 enables Wifi management for both Android and iOS applications within Cordova/Phonegap projects.\n\nThis project is a fork of the WifiWizard plugin with fixes and updates, as well as patches taken from the Cordova Network Manager plugin.\n",
    "usage": "\n```typescript\nimport { WifiWizard2 } from '@awesome-cordova-plugins/wifi-wizard-2/ngx';\n\n\nconstructor(private wifiWizard2: WifiWizard2) { }\n\n\n# Global Functions\n These are functions that can be used by both Android and iOS applications\n ```typescript\n this.wifiWizard2.getConnectedSSID()\n ```\n - Returns connected network SSID (only if connected) in success callback, otherwise fail callback will be called (if not connected or unable to retrieve)\n - This does **NOT** return the BSSID if unable to obtain SSID (like original WifiWizard did)\n ```typescript\n this.wifiWizard2.getConnectedBSSID()\n ```\n - Same as above, except BSSID (mac) is returned\n\n ```typescript\n this.wifiWizard2.timeout(delay)\n ```\n - `delay` should be time in milliseconds to delay\n - Helper async timeout delay, `delay` is optional, default is 2000ms = 2 seconds\n - This method always returns a resolved promise after the delay, it will never reject or throw an error\n\n **Example inside async function**\n ```typescript\n async function example(){\n    await this.wifiWizard2.timeout(4000);\n    // do something after 4 seconds\n}\n ```\n\n **Example inside standard non-async function**\n ```typescript\n function example(){\n    this.wifiWizard2.timeout(4000).then( function(){\n        // do something after waiting 4 seconds\n    }):\n}\n ```\n\n **Thrown Errors**\n\n - `TIMEOUT_WAITING_FOR_SCAN` on timeout waiting for scan 10 seconds +\n - `SCAN_FAILED` if unable to start scan\n\n # iOS Functions\n For functionality, you need to note the following:\n - Connect/Disconnect only works for iOS11+\n - Can't run in the simulator so you need to attach an actual device when building with xCode\n - Will ensure 'HotspotConfiguration' and 'NetworkExtensions' capabilities are added to your xCode project\n - To connect to open network omit `ssidPassword` or call with `false`\n\n ```typescript\n this.wifiWizard2.iOSConnectNetwork(ssid, ssidPassword)\n ```\n ```typescript\n this.wifiWizard2.iOSDisconnectNetwork(ssid)\n ```\n\n # Android Functions\n - **WifiWizard2** *will automagically try to enable WiFi if it's disabled when calling any android related methods that require WiFi to be enabled*\n\n ## Connect vs Enable\n When writing Android Java code, there is no `connect` methods, you basically either `enable` or `disable` a network. In the original versions of WifiWizard the `connect` method would basically just call `enable` in Android.\n I have changed the way this works in WifiWizard2 version 3.0.0+, converting it to a helper method to eliminate having to call `formatWifiConfig` then `add` and then `enable` ... the `connect` method will now automatically call `formatWifiConfig`, then call `add` to either add or update the network configuration, and then call `enable`.\n If the connect method is unable to update existing network configuration (added by user or other apps), but there is a valid network ID, it will still attempt to enable that network ID.\n\n ```typescript\n this.wifiWizard2.connect(ssid, bindAll, password, algorithm, isHiddenSSID)\n ```\n - `ssid` should be the SSID to connect to *required*\n - `bindAll` should be set to `true` to tell Android to route all connections from your Android app, through the wifi connection (default is `false`) *optional*\n - See `WifiWizard2.enable` for more details regarding `bindAll` feature\n - `algorithm` and `password` is not required if connecting to an open network\n - Currently `WPA` and `WEP` are only supported algorithms\n - For `WPA2` just pass `WPA` as the algorithm\n - Set `isHiddenSSID` to `true` if the network you're connecting to is hidden\n - These arguments are the same as for `formatWifiConfig`\n - This method essentially calls `formatWifiConfig` then `add` then `enable`\n - If unable to update network configuration (was added by user or other app), but a valid network ID exists, this method will still attempt to enable the network\n - Promise will not be returned until method has verified that connection to WiFi was in completed state (waits up to 60 seconds)\n\n **Thrown Errors**\n\n\n - `CONNECT_FAILED_TIMEOUT` unable to verify connection, timed out after 60 seconds\n - `INVALID_NETWORK_ID_TO_CONNECT` Unable to connect based on generated wifi config\n - `INTERPUT_EXCEPT_WHILE_CONNECTING` Interupt exception while waiting for connection\n\n\n\n ## Disconnect vs Disable\n Same as above for Connect vs Enable, except in this situation, `disconnect` will first disable the network, and then attempt to remove it (if SSID is passed)\n\n ```typescript\n this.wifiWizard2.disconnect(ssid)\n ```\n - `ssid` can either be an SSID (string) or a network ID (integer)\n - `ssid` is **OPTIONAL** .. if not passed, will disconnect current WiFi (almost all Android versions now will just automatically reconnect to last wifi after disconnecting)\n - If `ssid` is provided, this method will first attempt to `disable` and then `remove` the network\n - If you do not want to remove network configuration, use `disable` instead\n\n **Thrown Errors**\n\n - `DISCONNECT_NET_REMOVE_ERROR` Android returned error when removing wifi configuration\n - `DISCONNECT_NET_DISABLE_ERROR` Unable to connect based on generated wifi config\n - `DISCONNECT_NET_ID_NOT_FOUND` Unable to determine network ID to disconnect/remove (from passed SSID)\n - `ERROR_DISCONNECT` - Android error disconnecting wifi (only when SSID is not passed)\n\n ```typescript\n this.wifiWizard2.formatWifiConfig(ssid, password, algorithm, isHiddenSSID)\n ```\n - `algorithm` and `password` is not required if connecting to an open network\n - Currently `WPA` and `WEP` are only supported algorithms\n - For `WPA2` just pass `WPA` as the algorithm\n - Set `isHiddenSSID` to `true` if the network you're connecting to is hidden\n ```typescript\n this.wifiWizard2.formatWPAConfig(ssid, password, isHiddenSSID)\n ```\n - This is just a helper method that calls `WifiWizard2.formatWifiConfig( ssid, password, 'WPA', isHiddenSSID );`\n\n ```typescript\n this.wifiWizard2.add(wifi)\n ```\n - `wifi` must be an object formatted by `formatWifiConfig`, this **must** be done before calling `enable`\n\n **Thrown Errors**\n\n - `AUTH_TYPE_NOT_SUPPORTED` - Invalid auth type specified\n - `ERROR_ADDING_NETWORK` - Android returned `-1` specifying error adding network\n - `ERROR_UPDATING_NETWORK` - Same as above, except an existing network ID was found, and unable to update it\n\n ```typescript\n this.wifiWizard2.remove(ssid)\n ```\n - `ssid` can either be an SSID (string) or a network ID (integer)\n - Please note, most newer versions of Android will only allow wifi to be removed if created by your application\n\n **Thrown Errors**\n\n - `UNABLE_TO_REMOVE` Android returned failure in removing network\n - `REMOVE_NETWORK_NOT_FOUND` Unable to determine network ID from passed SSID\n\n\n ```typescript\n this.wifiWizard2.listNetworks()\n ```\n\n ```typescript\n this.wifiWizard2.scan([options])\n ```\n - Same as calling `startScan` and then `getScanResults`, except this method will only resolve the promise after the scan completes and returns the results.\n\n ```typescript\n this.wifiWizard2.startScan()\n ```\n - It is recommended to just use the `scan` method instead of `startScan`\n\n **Thrown Errors**\n\n - `STARTSCAN_FAILED` Android returned failure in starting scan\n\n\n ```typescript\n this.wifiWizard2.getScanResults([options])\n ```\n - `getScanResults` should only be called after calling `startScan` (it is recommended to use `scan` instead as this starts the scan, then returns the results)\n - `[options]` is optional, if you do not want to specify, just pass `success` callback as first parameter, and `fail` callback as second parameter\n - Retrieves a list of the available networks as an array of objects and passes them to the function listHandler. The format of the array is:\n ```typescript\n networks = [\n {   \"level\": signal_level, // raw RSSI value\n        \"SSID\": ssid, // SSID as string, with escaped double quotes: \"\\\"ssid name\\\"\"\n        \"BSSID\": bssid // MAC address of WiFi router as string\n        \"frequency\": frequency of the access point channel in MHz\n        \"capabilities\": capabilities // Describes the authentication, key management, and encryption schemes supported by the access point.\n        \"timestamp\": timestamp // timestamp of when the scan was completed\n        \"channelWidth\":\n        \"centerFreq0\":\n        \"centerFreq1\":\n    }\n ]\n ```\n - `channelWidth` `centerFreq0` and `centerFreq1` are only supported on API > 23 (Marshmallow), any older API will return null for these values\n\n An options object may be passed. Currently, the only supported option is `numLevels`, and it has the following behavior:\n\n - if `(n == true || n < 2)`, `*.getScanResults({numLevels: n})` will return data as before, split in 5 levels;\n - if `(n > 1)`, `*.getScanResults({numLevels: n})` will calculate the signal level, split in n levels;\n - if `(n == false)`, `*.getScanResults({numLevels: n})` will use the raw signal level;\n\n ```typescript\n this.wifiWizard2.isWifiEnabled()\n ```\n - Returns boolean value of whether Wifi is enabled or not\n ```typescript\n this.wifiWizard2.setWifiEnabled(enabled)\n ```\n - Pass `true` for `enabled` parameter to set Wifi enabled\n - You do not need to call this function to set WiFi enabled to call other methods that require wifi enabled.  This plugin will automagically enable WiFi if a method is called that requires WiFi to be enabled.\n\n **Thrown Errors**\n\n - `ERROR_SETWIFIENABLED` wifi state does not match call (enable or disable)\n\n ```typescript\n this.wifiWizard2.getConnectedNetworkID()\n ```\n - Returns currently connected network ID in success callback (only if connected), otherwise fail callback will be called\n\n **Thrown Errors**\n\n - `GET_CONNECTED_NET_ID_ERROR` Unable to determine currently connected network ID (may not be connected)\n\n ## New to 3.1.1+\n ```typescript\n this.wifiWizard2.resetBindAll()\n ```\n - Disable bindAll to WiFi network without disconnecting from WiFi\n\n ```typescript\n this.wifiWizard2.setBindAll()\n ```\n - Enable bindAll to WiFi network without disconnecting from WiFi\n\n ```typescript\n this.wifiWizard2.canConnectToInternet()\n ```\n\n - Returns boolean, true or false, if device is able to connect to https://www.google.com via HTTP connection (since ping is unreliable)\n - Unknown errors will still be thrown like all other async functions\n - If you called `connect` or `enable` and passed `true` for `bindAll`, your application will force the ping through wifi connection.\n - If you did not pass `true` (or passed `false`) for `bindAll`, and the wifi does not have internet connection, Android Lollipop+ (API 21+) will use cell connection to ping (due to Android using cell connection when wifi does not have internet) [More Details](https://android-developers.googleblog.com/2016/07/connecting-your-app-to-wi-fi-device.html)\n\n\n ```typescript\n this.wifiWizard2.canConnectToRouter()\n ```\n - As `canPingWifiRouter` is notoriously unreliable, this method uses HTTP connection to test if able to connect to router (as most routers should have web server running on port 80)\n - Unknown errors will still be thrown like all other async functions\n - This is useful for testing to make sure that your Android app is able to connect to the private network after connecting to WiFi\n - This was added for testing the `bindAll` feature to support issues with Android Lollipop+ (API 21+) not routing calls through WiFi if WiFi does not have internet connection [See Android Blog](https://android-developers.googleblog.com/2016/07/connecting-your-app-to-wi-fi-device.html)\n - Attempts to connect router IP HTTP server on port 80 (example: `http://192.168.0.1/` where `192.168.0.1` is the automatically detected IP address)\n\n ## New to 3.0.0+\n ```typescript\n this.wifiWizard2.isConnectedToInternet()\n ```\n\n - Returns boolean, true or false, if device is able to ping 8.8.8.8\n - Unknown errors will still be thrown like all other async functions\n - If you called `connect` or `enable` and passed `true` for `bindAll`, your application will force the ping through wifi connection.\n - If you did not pass `true` (or passed `false`) for `bindAll`, and the wifi does not have internet connection, Android Lollipop+ (API 21+) will use cell connection to ping (due to Android using cell connection when wifi does not have internet) [More Details](https://android-developers.googleblog.com/2016/07/connecting-your-app-to-wi-fi-device.html)\n\n ```typescript\n this.wifiWizard2.canPingWifiRouter()\n ```\n\n - Returns boolean, true or false, if device is able to ping the connected WiFi router IP (obtained from DHCP info)\n - Version 3.1.1+ uses HTTP connection to test if able to connect to router (as ping previous did not work)\n - Unknown errors will still be thrown like all other async functions\n - This is useful for testing to make sure that your Android app is able to connect to the private network after connecting to WiFi\n - This was added for testing the `bindAll` feature to support issues with Android Lollipop+ (API 21+) not routing calls through WiFi if WiFi does not have internet connection [See Android Blog](https://android-developers.googleblog.com/2016/07/connecting-your-app-to-wi-fi-device.html)\n\n ```typescript\n this.wifiWizard2.enableWifi()\n ```\n\n ```typescript\n this.wifiWizard2.disableWifi()\n ```\n\n ```typescript\n this.wifiWizard2.getWifiIP()\n ```\n - Returns IPv4 address of currently connected WiFi, or rejects promise if IP not found or wifi not connected\n\n ```typescript\n this.wifiWizard2.getWifiRouterIP()\n ```\n - Returns IPv4 WiFi router IP from currently connected WiFi, or rejects promise if unable to determine, or wifi not connected\n\n **Thrown Errors**\n\n - `NO_VALID_IP_IDENTIFIED` if unable to determine a valid IP (ip returned from device is `0.0.0.0`)\n\n ```typescript\n this.wifiWizard2.getWifiIPInfo()\n ```\n - Returns a JSON object with IPv4 address and subnet `{\"ip\": \"192.168.1.2\", \"subnet\": \"255.255.255.0\" }` or rejected promise if not found or not connected\n **Thrown Errors**\n\n - `NO_VALID_IP_IDENTIFIED` if unable to determine a valid IP (ip returned from device is `0.0.0.0`)\n\n ```typescript\n this.wifiWizard2.reconnect()\n ```\n - Reconnect to the currently active access point, **if we are currently disconnected.**\n\n **Thrown Errors**\n\n - `ERROR_RECONNECT` Android returned error when reconnecting\n\n ```typescript\n this.wifiWizard2.reassociate()\n ```\n - Reconnect to the currently active access point, **even if we are already connected.**\n\n **Thrown Errors**\n\n - `ERROR_REASSOCIATE` Android returned error when reassociating\n\n\n ```typescript\n this.wifiWizard2.getSSIDNetworkID(ssid)\n ```\n - Get Android Network ID from passed SSID\n\n ```typescript\n this.wifiWizard2.disable(ssid)\n ```\n - `ssid` can either be an SSID (string) or a network ID (integer)\n - Disable the passed SSID network\n - Please note that most newer versions of Android will only allow you to disable networks created by your application\n\n **Thrown Errors**\n\n - `UNABLE_TO_DISABLE` Android returned failure in disabling network\n - `DISABLE_NETWORK_NOT_FOUND` Unable to determine network ID from passed SSID to disable\n\n\n ```typescript\n this.wifiWizard2.requestPermission()\n ```\n - Request `ACCESS_FINE_LOCATION` permssion\n - This Android permission is required to run `scan`, `startStart` and `getScanResults`\n - You can request permission by running this function manually, or WifiWizard2 will automagically request permission when one of the functions above is called\n\n **Thrown Errors**\n\n - `PERMISSION_DENIED` user denied permission on device\n\n\n ```typescript\n this.wifiWizard2.enable(ssid, bindAll, waitForConnection)\n ```\n - `ssid` can either be an SSID (string) or a network ID (integer)\n - `bindAll` should be set to `true` to tell Android to route all connections from your Android app, through the wifi connection\n - Android Lollipop+ (API 21+) will not route connections to the WiFi device if it does not have internet connection.  Passing `true` to `bindAll` will force Android to route connections from your Android app through Wifi, regardless of internet connection.\n - If you are having problems connecting to a local IP through WiFi because it does not have internet, try enabling `bindAll` and this should fix the problem.\n - During my testing, some versions of Android (5.0 - 7.1.2) would still route connections through WiFi without internet, but it was random that some versions would and would not work.\n - Testing Android Oreo+ (8.0.0+) if wifi does not have internet, 100% of the time it would NOT route connections through WiFi, so you *must* enable this for Oreo or newer to route connections from your application through wifi without internet.\n - When `bindAll` is enabled, *ALL* connections from your app will be routed through WiFi, until you call `disconnect` or `disable`\n - See the Google Android Blog for [More Details](https://android-developers.googleblog.com/2016/07/connecting-your-app-to-wi-fi-device.html)\n - This feature *ONLY* works for Android Lollipop+ (API 21+), if device is running API older than 21, `bindall` will be ignored (as API older than 21 does this by default)\n - Enable the passed SSID network\n - You **MUST** call `WifiWizard2.add(wifi)` before calling `enable` as the wifi configuration must exist before you can enable it (or previously used `connect` without calling `disconnect`)\n - This method does NOT wait or verify connection to wifi network, pass `true` to `waitForConnection` to only return promise once connection is verified in COMPLETED state to specific `ssid`\n\n **Thrown Errors**\n\n `UNABLE_TO_ENABLE` - Android returned `-1` signifying failure enabling\n\n # Installation\n\n ## Master\n\n Run ```cordova plugin add https://github.com/tripflex/wifiwizard2```\n\n To install from the master branch (latest on GitHub)\n\n To install a specific branch (add `#tag` replacing `tag` with tag from this repo, example:\n ```cordova plugin add https://github.com/tripflex/wifiwizard2#v3.1.1```\n\n Find available tags here:\n https://github.com/tripflex/WifiWizard2/tags\n\n\n If you are wanting to have the latest and greatest stable version, then run the 'Releases' command below.\n\n ## Releases\n Run ```cordova plugin add cordova-plugin-wifiwizard2```\n\n ## Meteor\n To install and use this plugin in a Meteor project, you have to specify the exact version from NPM repository:\n [https://www.npmjs.com/package/cordova-plugin-wifiwizard2](https://www.npmjs.com/package/cordova-plugin-wifiwizard2)\n\n As of April 4th 2019, the latest version is 3.1.1:\n\n ```meteor add cordova:cordova-plugin-wifiwizard2@3.1.1```\n\n # Errors/Rejections\n Methods now return formatted string errors as detailed below, instead of returning generic error messages.  This allows you to check yourself what specific error was returned, and customize the error message.\n In an upcoming release I may add easy ways to override generic messages, or set your own, but for now, errors returned can be found below each method/function.\n\n ## Generic **Thrown Errors**\n `WIFI_NOT_ENABLED`\n ```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/tripflex/WifiWizard2",
    "cordovaPlugin": {
      "name": "cordova-plugin-wifiwizard2"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/wonderpush",
    "displayName": "Push Notifications - WonderPush",
    "description": "\n\nSend unlimited push notifications to iOS and Android devices.\n\nGet started in minutes: [Ionic Quickstart Guide](https://docs.wonderpush.com/docs/ionic-quickstart).\n\nAdvanced segmentation, automation and personalization of push messages for €1 per 1000 subscribers.\n\nRequires the Cordova plugin `wonderpush-cordova-sdk`.\n\n[WonderPush push notifications](https://www.wonderpush.com) are the most effective way\nto retain your users and grow your audience while remaining fully GDPR compliant.\n",
    "usage": "\n```typescript\nimport { WonderPush } from '@awesome-cordova-plugins/wonderpush';\n\n\nconstructor(private wonderPush: WonderPush) { }\n\n...\n\n// Subscribe user\nthis.wonderPush.subscribeToNotifications()\n  .then(() => console.log(\"User subscribed to notifications\"))\n  .catch((error: any) => console.error(error));\n\n\n// Send an event (a purchase in this example)\nthis.wonderPush.sendEvent('purchase', {\n  float_price: 12.99,\n  string_sku: \"X123456\"\n});\n\n// Tag users (as customers)\nthis.wonderPush.addTag('customer');\n\n// Personalize\n// 1. Store user details.\n// 2. Use those details to create segments.\n// 3. Include those details in your notifications.\nthis.wonderPush.putProperties({\n  string_name: 'John D.',\n  int_age: 24\n});\n\n// GDPR\n// 1. set REQUIRES_USER_CONSENT=true to enable GDPR compliance.\n// 2. WonderPush doesn't start until setUserConsent(true) is called.\nconst onClick = (userConsent: boolean) => this.wonderPush.setUserConsent(userConsent);\n\n// Listen to notification clicks\ndocument.addEventListener('wonderpush.notificationOpen', function(event) {\n  console.log('Notification opened', event.notification);\n  if (event.notificationType === 'data') {\n    console.log('Silent notification', event.notification);\n  }\n});\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/wonderpush/wonderpush-cordova-sdk",
    "installVariables": [
      "CLIENT_ID",
      "CLIENT_SECRET"
    ],
    "cordovaPlugin": {
      "name": "wonderpush-cordova-sdk"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/youtube-video-player",
    "displayName": "Youtube Video Player",
    "description": "\nPlays YouTube videos in Native YouTube App\n",
    "usage": "\nFor Android 5.0+ you will need to add the following to config.xml\n```xml\n<preference name=\"YouTubeDataApiKey\" value=\"[YOUR YOUTUBE API]\" />\n```\nFor more information: https://developers.google.com/youtube/v3/getting-started\n\n\n```typescript\nimport { YoutubeVideoPlayer } from '@awesome-cordova-plugins/youtube-video-player/ngx';\n\nconstructor(private youtube: YoutubeVideoPlayer) { }\n\n...\n\n\nthis.youtube.openVideo('myvideoid');\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/ihadeed/CordovaYoutubeVideoPlayer",
    "cordovaPlugin": {
      "name": "cordova-plugin-youtube-video-player"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/zbar",
    "displayName": "ZBar",
    "description": "\nThe ZBar Scanner Plugin allows you to scan 2d barcodes.\n\nRequires Cordova plugin: `cordova-plugin-cszbar`. For more info, please see the [zBar plugin docs](https://github.com/tjwoon/csZBar).\n",
    "usage": "\n```typescript\nimport { ZBar, ZBarOptions } from '@awesome-cordova-plugins/zbar/ngx';\n\nconstructor(private zbar: ZBar) { }\n\n...\n\nlet options: ZBarOptions = {\n      flash: 'off',\n      drawSight: false\n    }\n\nthis.zbar.scan(options)\n   .then(result => {\n      console.log(result); // Scanned code\n   })\n   .catch(error => {\n      console.log(error); // Error message\n   });\n\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/tjwoon/csZBar",
    "cordovaPlugin": {
      "name": "cordova-plugin-cszbar"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/zeroconf",
    "displayName": "Zeroconf",
    "description": "\nThis plugin allows you to browse and publish Zeroconf/Bonjour/mDNS services.",
    "usage": "\n```typescript\nimport { Zeroconf } from '@awesome-cordova-plugins/zeroconf/ngx';\n\nconstructor(private zeroconf: Zeroconf) { }\n\n...\n\n// watch for services of a specified type\nthis.zeroconf.watch('_http._tcp.', 'local.').subscribe(result => {\n  if (result.action == 'added') {\n    console.log('service added', result.service);\n  } else {\n    console.log('service removed', result.service);\n  }\n});\n\n// publish a zeroconf service of your own\nthis.zeroconf.register('_http._tcp.', 'local.', 'Becvert\\'s iPad', 80, {\n  'foo': 'bar'\n}).then(result => {\n  console.log('Service registered', result.service);\n});\n\n\n// unregister your service\nthis.zeroconf.unregister('_http._tcp.', 'local.', 'Becvert\\'s iPad');\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/becvert/cordova-plugin-zeroconf",
    "cordovaPlugin": {
      "name": "cordova-plugin-zeroconf"
    }
  },
  {
    "packageName": "@awesome-cordova-plugins/zoom",
    "displayName": "Zoom",
    "description": "\nA Cordova plugin to use Zoom Video Conferencing services on Cordova applications.\n",
    "usage": "\n```typescript\nimport { Zoom } from '@awesome-cordova-plugins/zoom';\n\n\nconstructor(private zoomService: Zoom) { }\n\n...\n\n// Initialize Zoom SDK, need to be called when app fired up.\nthis.zoomService.initialize(API_KEY, API_SECRET)\n  .then((success: any) => console.log(success))\n  .catch((error: any) => console.log(error));\n\n// Log user in with Zoom username and password.\nthis.zoomService.login(userName, password)\n  .then((success: any) => console.log(success))\n  .catch((error: any) => console.log(error));\n\n// Log user out.\nthis.zoomService.logout()\n  .then((success: boolean) => console.log(success))\n  .catch((error: any) => console.log(error));\n\n// Check whether user is logged in.\nthis.zoomService.isLoggedIn()\n  .then((success: boolean) => console.log(success))\n  .catch((error: any) => console.log(error));\n\n// meeting options (Only available for Android)\nlet options = {\n\"no_driving_mode\":true,\n\"no_invite\":true,\n\"no_meeting_end_message\":true,\n\"no_titlebar\":false,\n\"no_bottom_toolbar\":false,\n\"no_dial_in_via_phone\":true,\n\"no_dial_out_to_phone\":true,\n\"no_disconnect_audio\":true,\n\"no_share\":true,\n\"no_audio\":true,\n\"no_video\":true,\n\"no_meeting_error_message\":true\n};\n\n// Join meeting.\nthis.zoomService.joinMeeting(meetingNumber, meetingPassword, displayName, options)\n  .then((success: any) => console.log(success))\n  .catch((error: any) => console.log(error));\n\n// Start an existing meeting for non-login user.\nthis.zoomService.startMeetingWithZAK(meetingNumber, displayName, zoomToken, zoomAccessToken, userId, options)\n  .then((success: any) => console.log(success))\n  .catch((error: any) => console.log(error));\n\n// Start an existing meeting for logged in user.\nthis.zoomService.startMeeting(meetingNumber, vanityId, options)\n  .then((success: any) => console.log(success))\n  .catch((error: any) => console.log(error));\n\n// Start an instant meeting for logged in user.\nthis.zoomService.startInstantMeeting()\n  .then((success: anu) => console.log(success))\n  .catch((error: any) => console.log(error));\n\n// Set language.\nthis.zoomService.setLanguage(\"en-US\")\n  .then((success: any) => console.log(success))\n  .catch((error: any) => console.log(error));\n```\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "repo": "https://github.com/zoom/zoom-sdk-ionic",
    "cordovaPlugin": {
      "name": "cordova.plugin.zoom"
    }
  }
]