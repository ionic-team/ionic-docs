[
  {
    "name": "@ionic-native/abbyy-rtr",
    "displayName": "ABBYY Real-Time Recognition",
    "description": "<p>This plugin allows to use the Text Capture and Data Capture features of ABBYY Real-Time Recognition SDK (RTR SDK) in apps.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { AbbyyRTR } from '@ionic-native/abbyy-rtr/ngx';\n\n\nconstructor(private abbyyRTR: AbbyyRTR) { }\n\n...\n\n\nthis.abbyyRTR.startTextCapture(options)\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n\n\nthis.abbyyRTR.startDataCapture(options)\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n\n```\n",
    "repo": "https://github.com/abbyysdk/RTR-SDK.Cordova",
    "cordovaPlugin": {
      "name": "cordova-plugin-abbyy-rtr-sdk"
    }
  },
  {
    "name": "@ionic-native/action-sheet",
    "displayName": "Action Sheet",
    "description": "<p>The ActionSheet plugin shows a native list of options the user can choose from.</p>\n",
    "platforms": [
      "Android",
      "Browser",
      "iOS",
      "Windows",
      "Windows Phone 8"
    ],
    "usage": "\n```typescript\nimport { ActionSheet, ActionSheetOptions } from '@ionic-native/action-sheet/ngx';\n\nconstructor(private actionSheet: ActionSheet) { }\n\n...\n\n\nlet buttonLabels = ['Share via Facebook', 'Share via Twitter'];\n\nconst options: ActionSheetOptions = {\n  title: 'What do you want with this image?',\n  subtitle: 'Choose an action',\n  buttonLabels: buttonLabels,\n  addCancelButtonWithLabel: 'Cancel',\n  addDestructiveButtonWithLabel: 'Delete',\n  androidTheme: this.actionSheet.ANDROID_THEMES.THEME_HOLO_DARK,\n  destructiveButtonLast: true\n}\n\nthis.actionSheet.show(options).then((buttonIndex: number) => {\n  console.log('Button pressed: ' + buttonIndex);\n});\n```",
    "repo": "https://github.com/EddyVerbruggen/cordova-plugin-actionsheet",
    "cordovaPlugin": {
      "name": "cordova-plugin-actionsheet"
    }
  },
  {
    "name": "@ionic-native/adjust",
    "displayName": "Adjust",
    "description": "<p>This is the Ionic Cordova SDK of Adjust™. You can read more about Adjust™ at adjust.com.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\n import { Adjust, AdjustConfig, AdjustEnvironment } from '@ionic-native/adjust/ngx';\n\n constructor(private adjust: Adjust) { }\n\n ...\n\n const config = new AdjustConfig('APP-TOKEN-HERE', AdjustEnvironment.Sandbox);\n config.logLevel = AdjustLogLevel.Verbose;\n // Set other config properties.\n adjust.create(config);\n\n```",
    "repo": "https://github.com/adjust/cordova_sdk",
    "cordovaPlugin": {
      "name": "com.adjust.sdk"
    }
  },
  {
    "name": "@ionic-native/admob-free",
    "displayName": "AdMob Free",
    "description": "<p>A free, no ad-sharing version of Google AdMob plugin for Cordova.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { AdMobFree, AdMobFreeBannerConfig } from '@ionic-native/admob-free/ngx';\n\n\nconstructor(private admobFree: AdMobFree) { }\n\n\n...\n\n\nconst bannerConfig: AdMobFreeBannerConfig = {\n // add your config here\n // for the sake of this example we will just use the test config\n isTesting: true,\n autoShow: true\n};\nthis.admobFree.banner.config(bannerConfig);\n\nthis.admobFree.banner.prepare()\n  .then(() => {\n    // banner Ad is ready\n    // if we set autoShow to false, then we will need to call the show method here\n  })\n  .catch(e => console.log(e));\n\n\n```",
    "repo": "https://github.com/ratson/cordova-plugin-admob-free",
    "cordovaPlugin": {
      "name": "cordova-plugin-admob-free"
    }
  },
  {
    "name": "@ionic-native/admob-plus",
    "displayName": "AdMob Plus",
    "description": "<p>AdMob Plus is the successor of cordova-plugin-admob-free, which provides a cleaner API and build with modern tools.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": null,
    "repo": "https://github.com/admob-plus/admob-plus",
    "cordovaPlugin": {
      "name": "cordova-admob-plus"
    }
  },
  {
    "name": "@ionic-native/admob-pro",
    "displayName": "AdMob Pro",
    "description": "<p>Plugin for Google Ads, including AdMob / DFP (DoubleClick for publisher) and mediations to other Ad networks.</p>\n",
    "platforms": [
      "Android",
      "iOS",
      "Windows Phone 8"
    ],
    "usage": "\n```typescript\nimport { AdMobPro } from '@ionic-native/admob-pro/ngx';\nimport { Platform } from '@ionic/angular';\n\nconstructor(private admob: AdMobPro, private platform: Platform ) { }\n\nionViewDidLoad() {\n  this.admob.onAdDismiss()\n    .subscribe(() => { console.log('User dismissed ad'); });\n}\n\nonClick() {\n  let adId;\n  if(this.platform.is('android')) {\n    adId = 'YOUR_ADID_ANDROID';\n  } else if (this.platform.is('ios')) {\n    adId = 'YOUR_ADID_IOS';\n  }\n  this.admob.prepareInterstitial({adId: adId})\n    .then(() => { this.admob.showInterstitial(); });\n}\n\n```\n",
    "repo": "https://github.com/floatinghotpot/cordova-admob-pro",
    "cordovaPlugin": {
      "name": "cordova-plugin-admobpro"
    }
  },
  {
    "name": "@ionic-native/admob",
    "displayName": "Admob",
    "description": "<p>Most complete Admob plugin with support for <a href=\"http://www.tappx.com/?h=dec334d63287772de859bdb4e977fce6\">Tappx</a> ads. Monetize your apps and games with AdMob ads, using latest Google AdMob SDK. With this plugin you can show AdMob ads easily!</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { Admob, AdmobOptions } from '@ionic-native/admob/ngx';\n\n\nconstructor(private admob: Admob) {\n    // Admob options config\n    const admobOptions: AdmobOptions = {\n      publisherId: 'XXX-XXXX-XXXX',\n      interstitialAdId: 'XXX-XXXX-XXXX',\n      rewardedAdId: 'XXX-XXXX-XXXX',\n      isTesting: true,\n      autoShowBanner: false,\n      autoShowInterstitial: false,\n      autoShowRewarded: false,\n      adSize: this.admob.AD_SIZE.BANNER\n    };\n\n    // Set admob options\n    this.admob.setOptions(admobOptions)\n      .then(() => console.log('Admob options have been successfully set'))\n      .catch(err => console.error('Error setting admob options:', err));\n}\n\n\n\n// (Optionally) Load banner ad, in order to have it ready to show\nthis.admob.createBannerView()\n  .then(() => console.log('Banner ad loaded'))\n  .catch(err => console.error('Error loading banner ad:', err));\n\n\n// Show banner ad (createBannerView must be called before and onAdLoaded() event raised)\nthis.admob.onAdLoaded().subscribe((ad) => {\n  if (ad.adType === this.admob.AD_TYPE.BANNER) {\n    this.admob.showBannerAd()\n      .then(() => console.log('Banner ad shown'))\n      .catch(err => console.error('Error showing banner ad:', err));\n  }\n});\n\n\n// Hide banner ad, but do not destroy it, so it can be shown later on\n// See destroyBannerView in order to hide and destroy banner ad\nthis.admob.showBannerAd(false)\n  .then(() => console.log('Banner ad hidden'))\n  .catch(err => console.error('Error hiding banner ad:', err));\n\n\n\n// Request an interstitial ad, in order to be shown later on\n// It is possible to autoshow it via options parameter, see docs\nthis.admob.requestInterstitialAd()\n  .then(() => console.log('Interstitial ad loaded'))\n  .catch(err => console.error('Error loading interstitial ad:', err));\n\n\n// Show an interstitial ad (requestInterstitialAd must be called before)\nthis.admob.onAdLoaded().subscribe((ad) => {\n  if (ad.adType === this.admob.AD_TYPE.INTERSTITIAL) {\n    this.admob.showInterstitialAd()\n      .then(() => console.log('Interstitial ad shown'))\n      .catch(err => console.error('Error showing interstitial ad:', err));\n  }\n});\n\n\n// Request a rewarded ad\nthis.admob.requestRewardedAd()\n  .then(() => console.log('Rewarded ad loaded'))\n  .catch(err => console.error('Error loading rewarded ad:', err));\n\n\n// Show rewarded ad (requestRewardedAd must be called before)\nthis.admob.onAdLoaded().subscribe((ad) => {\n  if (ad.adType === this.admob.AD_TYPE.REWARDED) {\n    this.admob.showRewardedAd()\n      .then(() => console.log('Rewarded ad shown'))\n      .catch(err => console.error('Error showing rewarded ad:', err));\n  }\n});\n\n\n// Hide and destroy banner or interstitial ad\nthis.admob.destroyBannerView()\n  .then(() => console.log('Banner or interstitial ad destroyed'))\n  .catch(err => console.error('Error destroying banner or interstitial ad:', err));\n\n\n\n// On Ad loaded event\nthis.admob.onAdLoaded().subscribe((ad) => {\n  if (ad.adType === this.admob.AD_TYPE.BANNER) {\n    console.log('Banner ad is loaded');\n    this.admob.showBannerAd();\n  } else if (ad.adType === this.admob.AD_TYPE.INTERSTITIAL) {\n    console.log('Interstitial ad is loaded');\n    this.admob.showInterstitialAd();\n  } else if (ad.adType === this.admob.AD_TYPE.REWARDED) {\n    console.log('Rewarded ad is loaded');\n    this.admob.showRewardedAd();\n  }\n});\n\n\n\n// On ad failed to load\nthis.admob.onAdFailedToLoad().subscribe(err => console.log('Error loading ad:', err));\n\n\n\n// On interstitial ad opened\nthis.admob.onAdOpened().subscribe(() => console.log('Interstitial ad opened'));\n\n\n\n// On interstitial ad closed\nthis.admob.onAdClosed().subscribe(() => console.log('Interstitial ad closed'));\n\n\n\n// On ad clicked and left application\nthis.admob.onAdLeftApplication().subscribe(() => console.log('Ad lefted application'));\n\n\n\n// On user ad rewarded\nthis.admob.onRewardedAd().subscribe(() => console.log('The user has been rewarded'));\n\n\n\n// On rewarded ad video started\nthis.admob.onRewardedAdVideoStarted().subscribe(() => console.log('Rewarded ad vieo started'));\n\n\n\n// On rewarded ad video completed\nthis.admob.onRewardedAdVideoCompleted().subscribe(() => console.log('Rewarded ad video completed'));\n\n```\n",
    "repo": "https://github.com/appfeel/admob-google-cordova",
    "cordovaPlugin": {
      "name": "cordova-admob"
    }
  },
  {
    "name": "@ionic-native/aes-256",
    "displayName": "AES256",
    "description": "<p>This cordova ionic plugin allows you to perform AES 256 encryption and decryption on the plain text. It&#39;s a cross-platform plugin which supports both Android and iOS. The encryption and decryption are performed on the device native layer so that the performance is much faster.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { AES256 } from '@ionic-native/aes-256/ngx';\n\nprivate secureKey: string;\nprivate secureIV: string;\n\nconstructor(private aes256: AES256) {\n   this.generateSecureKeyAndIV(); // To generate the random secureKey and secureIV\n}\n\n...\n\nasync generateSecureKeyAndIV() {\n   this.secureKey = await this.aes256.generateSecureKey('random password 12345'); // Returns a 32 bytes string\n   this.secureIV = await this.aes256.generateSecureIV('random password 12345'); // Returns a 16 bytes string\n}\n\nthis.aes256.encrypt(this.secureKey, this.secureIV, 'testdata')\n  .then(res => console.log('Encrypted Data: ',res))\n  .catch((error: any) => console.error(error));\n\nthis.aes256.decrypt(this.secureKey, this.secureIV, 'encryptedData')\n  .then(res => console.log('Decrypted Data : ',res))\n  .catch((error: any) => console.error(error));\n\n\n* this.aes256.generateSecureKey('random password 12345')\n  .then(res => console.log('Secure Key : ',res))\n  .catch((error: any) => console.error(error));\n\n\n* this.aes256.generateSecureIV('random password 12345')\n  .then(res => console.log('Secure IV : ',res))\n  .catch((error: any) => console.error(error));\n\n```\n",
    "repo": "https://github.com/Ideas2IT/cordova-aes256",
    "cordovaPlugin": {
      "name": "cordova-plugin-aes256-encryption"
    }
  },
  {
    "name": "@ionic-native/alipay",
    "displayName": "Alipay",
    "description": "<p>This plugin facilitates the usage of Alipay 支付宝 in an Ionic apps with the integrated AlipaySDK dated on 20180601.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { Alipay } from '@ionic-native/alipay/ngx';\n\nconstructor(private alipay: Alipay) {\n\n//alipayOrder is a string that has been generated and signed by the server side.\nthis.alipay.pay(alipayOrder)\n   .then(result => {\n      console.log(result); // Success\n   })\n   .catch(error => {\n      console.log(error); // Failed\n   });\n\n}\n\n```\n",
    "repo": "https://github.com/jing-zhou/cordova-plugin-alipay",
    "cordovaPlugin": {
      "name": "cordova-plugin-gubnoi-alipay"
    }
  },
  {
    "name": "@ionic-native/analytics-firebase",
    "displayName": "Analytics Firebase",
    "description": "<p>Google Analytics Firebase plugin for Ionic Native apps.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { AnalyticsFirebase } from '@ionic-native/analytics-firebase';\n\n\nconstructor(private analyticsFirebase: AnalyticsFirebase) { }\n\n// Track an event with default events and params\nconst eventParams = {};\neventParams[this.analyticsFirebase.DEFAULT_PARAMS.LEVEL] = 29;\nthis.analyticsFirebase.logEvent(this.analyticsFirebase.DEFAULT_EVENTS.LEVEL_UP, eventParams)\n  .then(() => console.log('Event successfully tracked'))\n  .catch(err => console.log('Error tracking event:', err));\n\n// Track an event with custom events and params\nconst eventParams = {};\neventParams['my-prop'] = 29;\nthis.analyticsFirebase.logEvent('my-event', eventParams)\n  .then(() => console.log('Event successfully tracked'))\n  .catch(err => console.log('Error tracking event:', err));\n\n\n// Reset analytics data\nthis.analyticsFirebase.resetAnalyticsData()\n  .then(() => console.log('Analytics data have been reset'))\n  .catch(err => console.log('Error resetting analytics data:', err));\n\n\n// Track a screen view\nthis.analyticsFirebase.setCurrentScreen('Home')\n  .then(() => console.log('View successfully tracked'))\n  .catch(err => console.log('Error tracking view:', err));\n\n\n// Set user id\nthis.analyticsFirebase.setUserId('USER-ID')\n  .then(() => console.log('User id successfully set'))\n  .catch(err => console.log('Error setting user id:', err));\n\n\n// Set user property from default properties\nthis.analyticsFirebase.setUserProperty('KEY', 'VALUE')\n  .then(() => console.log('User property successfully set'))\n  .catch(err => console.log('Error setting user property:', err));\n\n```\n",
    "repo": "https://github.com/appfeel/analytics-google",
    "cordovaPlugin": {
      "name": "cordova-plugin-analytics"
    }
  },
  {
    "name": "@ionic-native/android-exoplayer",
    "displayName": "Android ExoPlayer",
    "description": "<p>Cordova media player plugin using Google&#39;s ExoPlayer framework.</p>\n",
    "platforms": [
      "Android"
    ],
    "usage": "\n```typescript\nimport { AndroidExoPlayer } from '@ionic-native/android-exoplayer/ngx';\n\nconstructor(private androidExoPlayer: AndroidExoPlayer) { }\n\n...\n\nthis.androidExoPlayer.show({url: 'http://www.youtube.com/api/manifest/dash/id/bf5bb2419360daf1/source/youtube'});\n\n```\n",
    "repo": "https://github.com/frontyard/cordova-plugin-exoplayer",
    "cordovaPlugin": {
      "name": "cordova-plugin-exoplayer"
    }
  },
  {
    "name": "@ionic-native/android-fingerprint-auth",
    "displayName": "Android Fingerprint Auth",
    "description": "<p>This plugin will open a native dialog fragment prompting the user to authenticate using their fingerprint. If the device has a secure lockscreen (pattern, PIN, or password), the user may opt to authenticate using that method as a backup.</p>\n",
    "platforms": [
      "Android"
    ],
    "usage": "\n```typescript\nimport { AndroidFingerprintAuth } from '@ionic-native/android-fingerprint-auth/ngx';\n\nconstructor(private androidFingerprintAuth: AndroidFingerprintAuth) { }\n\n...\n\n\nthis.androidFingerprintAuth.isAvailable()\n  .then((result)=> {\n    if(result.isAvailable){\n      // it is available\n\n      this.androidFingerprintAuth.encrypt({ clientId: 'myAppName', username: 'myUsername', password: 'myPassword' })\n        .then(result => {\n           if (result.withFingerprint) {\n               console.log('Successfully encrypted credentials.');\n               console.log('Encrypted credentials: ' + result.token);\n           } else if (result.withBackup) {\n             console.log('Successfully authenticated with backup password!');\n           } else console.log('Didn\\'t authenticate!');\n        })\n        .catch(error => {\n           if (error === this.androidFingerprintAuth.ERRORS.FINGERPRINT_CANCELLED) {\n             console.log('Fingerprint authentication cancelled');\n           } else console.error(error)\n        });\n\n    } else {\n      // fingerprint auth isn't available\n    }\n  })\n  .catch(error => console.error(error));\n```",
    "repo": "https://github.com/mjwheatley/cordova-plugin-android-fingerprint-auth",
    "cordovaPlugin": {
      "name": "cordova-plugin-android-fingerprint-auth"
    }
  },
  {
    "name": "@ionic-native/android-full-screen",
    "displayName": "Android Full Screen",
    "description": "<p>This plugin enables developers to offer users a true full screen experience in their Cordova and PhoneGap apps for Android. Using Android 4.0+, you can use true full screen in &quot;lean mode&quot;, the way you see in apps like YouTube, expanding the app right to the edges of the screen, hiding the status and navigation bars until the user next interacts. This is ideally suited to video or cut-scene content. In Android 4.4+, however, you can now enter true full screen, fully interactive immersive mode. In this mode, your app will remain in true full screen until you choose otherwise; users can swipe down from the top of the screen to temporarily display the system UI.</p>\n",
    "platforms": [
      "Android"
    ],
    "usage": "\n```typescript\nimport { AndroidFullScreen } from '@ionic-native/android-full-screen/ngx';\n\nconstructor(private androidFullScreen: AndroidFullScreen) { }\n\n...\n\nthis.androidFullScreen.isImmersiveModeSupported()\n  .then(() => console.log('Immersive mode supported'))\n  .catch(err => console.log(err));\n\n```\n",
    "repo": "https://github.com/mesmotronic/cordova-plugin-fullscreen",
    "cordovaPlugin": {
      "name": "cordova-plugin-fullscreen"
    }
  },
  {
    "name": "@ionic-native/android-permissions",
    "displayName": "Android Permissions",
    "description": "<p>This plugin is designed to support Android new permissions checking mechanism.</p>\n",
    "platforms": [
      "Android"
    ],
    "usage": "\n```\nimport { AndroidPermissions } from '@ionic-native/android-permissions/ngx';\n\n\nconstructor(private androidPermissions: AndroidPermissions) { }\n\n...\n\nthis.androidPermissions.checkPermission(this.androidPermissions.PERMISSION.CAMERA).then(\n  result => console.log('Has permission?',result.hasPermission),\n  err => this.androidPermissions.requestPermission(this.androidPermissions.PERMISSION.CAMERA)\n);\n\nthis.androidPermissions.requestPermissions([this.androidPermissions.PERMISSION.CAMERA, this.androidPermissions.PERMISSION.GET_ACCOUNTS]);\n\n```\n\nAndroid 26 and above: due to Android 26's changes to permissions handling (permissions are requested at time of use rather than at runtime,) if your app does not include any functions (eg. other Ionic Native plugins) that utilize a particular permission, then `requestPermission()` and `requestPermissions()` will resolve immediately with no prompt shown to the user.  Thus, you must include a function utilizing the feature you would like to use before requesting permission for it.\n",
    "repo": "https://github.com/NeoLSN/cordova-plugin-android-permissions",
    "cordovaPlugin": {
      "name": "cordova-plugin-android-permissions"
    }
  },
  {
    "name": "@ionic-native/app-availability",
    "displayName": "App Availability",
    "description": "<p>This plugin allows you to check if an app is installed on the user&#39;s device. It requires an URI Scheme (e.g. twitter://) on iOS or a Package Name (e.g com.twitter.android) on Android.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { AppAvailability } from '@ionic-native/app-availability/ngx';\nimport { Platform } from 'ionic-angular';\n\nconstructor(private appAvailability: AppAvailability, private platform: Platform) { }\n\n...\n\nlet app;\n\nif (this.platform.is('ios')) {\n  app = 'twitter://';\n} else if (this.platform.is('android')) {\n  app = 'com.twitter.android';\n}\n\nthis.appAvailability.check(app)\n  .then(\n    (yes: boolean) => console.log(app + ' is available'),\n    (no: boolean) => console.log(app + ' is NOT available')\n  );\n```\n",
    "repo": "https://github.com/ohh2ahh/AppAvailability",
    "cordovaPlugin": {
      "name": "cordova-plugin-appavailability"
    }
  },
  {
    "name": "@ionic-native/app-center-analytics",
    "displayName": "App Center Analytics",
    "description": "<p>App Center Analytics helps you understand user behavior and customer engagement to improve your app. The SDK automatically captures session count and device properties like model, OS version, etc. You can define your own custom events to measure things that matter to you. All the information captured is available in the App Center portal for you to analyze the data.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { AppCenterAnalytics } from '@ionic-native/app-center-analytics/ngx';\n\n\nconstructor(private appCenterAnalytics: AppCenterAnalytics) { }\n\n...\n\nthis.appCenterAnalytics.setEnabled(true).then(() => {\n   this.appCenterAnalytics.trackEvent('My Event', { TEST: 'HELLO_WORLD' }).then(() => {\n       console.log('Custom event tracked');\n   });\n});\n\n```",
    "repo": null,
    "cordovaPlugin": {
      "name": "cordova-plugin-appcenter-analytics"
    }
  },
  {
    "name": "@ionic-native/app-center-crashes",
    "displayName": "App Center Crashes",
    "description": "<p>App Center Analytics helps you understand user behavior and customer engagement to improve your app. The SDK automatically captures session count and device properties like model, OS version, etc. You can define your own custom events to measure things that matter to you. All the information captured is available in the App Center portal for you to analyze the data.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { AppCenterCrashes } from '@ionic-native/app-center-crashes/ngx';\n\n\nconstructor(private AppCenterCrashes: AppCenterCrashes) { }\n\n...\n\nthis.AppCenterCrashes.setEnabled(true).then(() => {\n   this.AppCenterCrashes.lastSessionCrashReport().then(report => {\n       console.log('Crash report', report);\n   });\n});\n\n```",
    "repo": null,
    "cordovaPlugin": {
      "name": "cordova-plugin-appcenter-crashes"
    }
  },
  {
    "name": "@ionic-native/app-center-push",
    "displayName": "App Center Push",
    "description": "<p>For more info, please see <a href=\"https://docs.microsoft.com/en-us/appcenter/sdk/push/cordova\">https://docs.microsoft.com/en-us/appcenter/sdk/push/cordova</a></p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { AppCenterPush } from '@ionic-native/app-center-push/ngx';\n\n\nconstructor(private appCenterPush: AppCenterPush) { }\n\n...\n\nthis.appCenterPush.setEnabled(true).then(() => {\n   this.appCenterPush.addEventListener('My Event').subscribe(pushNotification => {\n       console.log('Recived push notification', pushNotification);\n   });\n});\n\n```\n",
    "repo": null,
    "cordovaPlugin": {
      "name": "cordova-plugin-appcenter-push"
    }
  },
  {
    "name": "@ionic-native/app-minimize",
    "displayName": "App Minimize",
    "description": "<p>AppMinimize is a plugin to minimize the application on android devices</p>\n",
    "platforms": [
      "Android"
    ],
    "usage": "\n```typescript\nimport { Platfrom } from '@ionic/angular';\nimport { AppMinimize } from '@ionic-native/app-minimize/ngx';\n\n\nconstructor(private platform: Platform, private appMinimize: AppMinimize) { }\n\n...\n\nthis.platform.registerBackButtonAction(() => {\n   this.appMinimize.minimize();\n});\n\n```\n",
    "repo": "https://github.com/tomloprod/cordova-plugin-appminimize",
    "cordovaPlugin": {
      "name": "cordova-plugin-appminimize"
    }
  },
  {
    "name": "@ionic-native/app-preferences",
    "displayName": "App Preferences",
    "description": "<p>This plugin allows you to read and write app preferences</p>\n",
    "platforms": [],
    "usage": "\n```typescript\nimport { AppPreferences } from '@ionic-native/app-preferences/ngx';\n\nconstructor(private appPreferences: AppPreferences) { }\n\n...\n\nthis.appPreferences.fetch('key').then((res) => { console.log(res); });\n\n```\n\n",
    "repo": "https://github.com/apla/me.apla.cordova.app-preferences",
    "cordovaPlugin": {
      "name": "cordova-plugin-app-preferences"
    }
  },
  {
    "name": "@ionic-native/app-rate",
    "displayName": "App Rate",
    "description": "<p>The AppRate plugin makes it easy to prompt the user to rate your app, either now, later, or never.</p>\n",
    "platforms": [
      "Android",
      "BlackBerry 10",
      "iOS",
      "Windows"
    ],
    "usage": "\n```typescript\nimport { AppRate } from '@ionic-native/app-rate/ngx';\n\nconstructor(private appRate: AppRate) { }\n\n...\n// set certain preferences\nthis.appRate.preferences.storeAppURL = {\n  ios: '<app_id>',\n  android: 'market://details?id=<package_name>',\n  windows: 'ms-windows-store://review/?ProductId=<store_id>'\n}\n\nthis.appRate.promptForRating(true);\n\n// or, override the whole preferences object\nthis.appRate.preferences = {\n  usesUntilPrompt: 3,\n  storeAppURL: {\n   ios: '<app_id>',\n   android: 'market://details?id=<package_name>',\n   windows: 'ms-windows-store://review/?ProductId=<store_id>'\n  }\n}\n\nthis.appRate.promptForRating(false);\n```\n",
    "repo": "https://github.com/pushandplay/cordova-plugin-apprate",
    "cordovaPlugin": {
      "name": "cordova-plugin-apprate"
    }
  },
  {
    "name": "@ionic-native/app-update",
    "displayName": "App Update",
    "description": "<p>This plugin does self-update for android</p>\n",
    "platforms": [
      "Android"
    ],
    "usage": "\n\nYou should first host an XML file on your server with the following data in it:\n```xml\n<update>\n    <version>302048</version>\n    <name>APK Name</name>\n    <url>https://your-remote-api.com/YourApp.apk</url>\n</update>\n```\n\nThen use the following code:\n\n```typescript\nimport { AppUpdate } from '@ionic-native/app-update/ngx';\n\nconstructor(private appUpdate: AppUpdate) {\n\n   const updateUrl = 'https://your-remote-api.com/update.xml';\n   this.appUpdate.checkAppUpdate(updateUrl).then(() => { console.log('Update available') });\n\n}\n```\n\nThe plugin will compare the app version and update it automatically if the API has a newer version to install.",
    "repo": "https://github.com/vaenow/cordova-plugin-app-update",
    "cordovaPlugin": {
      "name": "cordova-plugin-app-update"
    }
  },
  {
    "name": "@ionic-native/app-version",
    "displayName": "App Version",
    "description": "<p>Reads the version of your app from the target build settings.</p>\n",
    "platforms": [
      "Android",
      "iOS",
      "Windows"
    ],
    "usage": "\n```typescript\nimport { AppVersion } from '@ionic-native/app-version/ngx';\n\nconstructor(private appVersion: AppVersion) { }\n\n...\n\n\nthis.appVersion.getAppName();\nthis.appVersion.getPackageName();\nthis.appVersion.getVersionCode();\nthis.appVersion.getVersionNumber();\n\n```\n",
    "repo": "https://github.com/whiteoctober/cordova-plugin-app-version",
    "cordovaPlugin": {
      "name": "cordova-plugin-app-version"
    }
  },
  {
    "name": "@ionic-native/apple-pay",
    "displayName": "Apple Pay",
    "description": "<p>A dependency free Cordova plugin to provide Apple Pay functionality.</p>\n",
    "platforms": [
      "iOS"
    ],
    "usage": "\n```typescript\nimport { ApplePay } from '@ionic-native/apple-pay/ngx';\n\n\nconstructor(private applePay: ApplePay) { }\n\n...\nasync applePay() {\n  // This block is optional -- only if you need to update order items/shipping\n  // methods in response to shipping method selections\n  this.applePay.startListeningForShippingContactSelection()\n    .subscribe(async selection => {\n      try {\n        await this.applePay.updateItemsAndShippingMethods({\n          items: getFromSelection(selection),\n          shippingMethods: getFromSelection(selection),\n        });\n      }\n      catch {\n        // handle update items error\n      }\n    });\n\n  try {\n    const applePayTransaction = await this.applePay.makePaymentRequest({\n      items,\n      shippingMethods,\n      merchantIdentifier,\n      currencyCode,\n      countryCode,\n      billingAddressRequirement: ['name', 'email', 'phone'],\n      shippingAddressRequirement: 'none',\n      shippingType: 'shipping'\n    });\n\n    const transactionStatus = await completeTransactionWithMerchant(applePayTransaction);\n    await this.applePay.completeLastTransaction(transactionStatus);\n  } catch {\n    // handle payment request error\n    // Can also handle stop complete transaction but these should normally not occur\n  }\n\n  // only if you started listening before\n  await this.applePay.stopListeningForShippingContactSelection();\n}\n```\n",
    "repo": "https://github.com/samkelleher/cordova-plugin-applepay",
    "cordovaPlugin": {
      "name": "cordova-plugin-applepay"
    }
  },
  {
    "name": "@ionic-native/apple-wallet",
    "displayName": "Apple Wallet",
    "description": "<p>A Cordova plugin that enables users from Add Payment Cards to their Apple Wallet.</p>\n",
    "platforms": [
      "iOS"
    ],
    "usage": "\n```typescript\nimport { AppleWallet } from '@ionic-native/apple-wallet/ngx';\n\n\nconstructor(private appleWallet: AppleWallet) { }\n\n...\n\n\nthis.appleWallet.available()\n .then((res) => {\n   // res is a boolean value, either true or false\n   console.log(\"Is Apple Wallet available? \", res);\n  })\n .catch((message) => {\n   console.error(\"ERROR AVAILBLE>> \", message);\n });\n\n...\n\nlet data: cardData = {\n   cardholderName: 'Test User',\n   primaryAccountNumberSuffix: '1234',\n   localizedDescription: 'Description of payment card',\n   paymentNetwork: 'VISA'\n }\n\nthis.appleWallet.startAddPaymentPass(data: cardData)\n .then((res) => {\n   console.log(\"startAddPaymentPass success response \", res);\n  })\n .catch((err) => {\n   console.error(\"startAddPaymentPass ERROR response\", err);\n });\n\n...\n\nlet data: encryptedCardData = {\n   activationData: 'encoded Base64 activationData from your server',\n   encryptedPassData: 'encoded Base64 encryptedPassData from your server',\n   wrappedKey: 'encoded Base64 wrappedKey from your server',\n }\n\nthis.appleWallet.encryptedCardData(data: encryptedCardData)\n .then((res) => {\n   console.log(\"completeAddCardToAppleWallet success response \", res);\n  })\n .catch((err) => {\n   console.error(\"completeAddCardToAppleWallet ERROR response\", err);\n });\n\n```",
    "repo": "https://github.com/tomavic/cordova-apple-wallet",
    "cordovaPlugin": {
      "name": "cordova-apple-wallet"
    }
  },
  {
    "name": "@ionic-native/appodeal",
    "displayName": "Appodeal",
    "description": "<p>Plugin to serve ads through native Appodeal SDKs</p>\n",
    "platforms": [
      "iOS",
      "Android"
    ],
    "usage": "\n```typescript\nimport { Appodeal } from '@ionic-native/appodeal/ngx';\n\nconstructor(private appodeal: Appodeal) {\n\n   const appKey = '<your app key>';\n   appodeal.initialize(appKey, appodeal.AD_TYPES.REWARDED_VIDEO);\n   appodeal.show(appodeal.AD_TYPES.REWARDED_VIDEO);\n\n}\n```\n",
    "repo": "https://github.com/appodeal/appodeal-cordova-plugin",
    "cordovaPlugin": {
      "name": "https://github.com/appodeal/appodeal-cordova-plugin.git"
    }
  },
  {
    "name": "@ionic-native/appsflyer",
    "displayName": "Appsflyer",
    "description": "<p>Appsflyer Cordova SDK support for Attribution</p>\n",
    "platforms": [
      "iOS",
      "Android"
    ],
    "usage": "\n```typescript\nimport { Appsflyer } from '@ionic-native/appsflyer/ngx';\n\n\nconstructor(private appsflyer: Appsflyer) { }\n\n...\n\n\nthis.appsflyer.initSdk(options);\n\n```\n",
    "repo": "https://github.com/AppsFlyerSDK/cordova-plugin-appsflyer-sdk",
    "cordovaPlugin": {
      "name": "cordova-plugin-appsflyer-sdk"
    }
  },
  {
    "name": "@ionic-native/audio-management",
    "displayName": "Audio Management",
    "description": "<p>A Cordova plugin to manage volume of audio streams for: ring, music, notification and system. Possible ringer values for those streams are: silent, vibrate and normal.</p>\n",
    "platforms": [
      "Android"
    ],
    "usage": "\n```typescript\nimport { AudioManagement } from '@ionic-native/audio-management/ngx';\n\n\nconstructor(public audioman: AudioManagement) { }\n\n...\n\nsetAudioMode() {\n this.audioman.setAudioMode(AudioManagement.AudioMode.NORMAL)\n   .then(() => {\n    console.log('Device audio mode is now NORMAL');\n   })\n   .catch((reason) => {\n     console.log(reason);\n   });\n}\n\ngetAudioMode() {\n this.audioman.getAudioMode()\n   .then((value: AudioManagement.AudioModeReturn) => {\n    console.log('Device audio mode is ' + value.label + ' (' + value.audioMode + ')');\n   })\n   .catch((reason) => {\n     console.log(reason);\n   });\n}\n\n```",
    "repo": "https://github.com/clovelCed/cordova-plugin-audiomanagement",
    "cordovaPlugin": {
      "name": "clovelced-plugin-audiomanagement"
    }
  },
  {
    "name": "@ionic-native/autostart",
    "displayName": "Autostart",
    "description": "<p>This plugin automatically starts your Android app after every boot or auto-update. You can enable or disable the autostart function in your app.</p>\n",
    "platforms": [
      "Android"
    ],
    "usage": "\n```typescript\nimport { Autostart } from '@ionic-native/autostart/ngx';\n\n\nconstructor(private autostart: Autostart) { }\n\n...\n\nthis.autostart.enable();\n\nthis.autostart.disable();\n\n```\n",
    "repo": "https://github.com/ToniKorin/cordova-plugin-autostart",
    "cordovaPlugin": {
      "name": "cordova-plugin-autostart"
    }
  },
  {
    "name": "@ionic-native/background-fetch",
    "displayName": "Background Fetch",
    "description": "<p>iOS Background Fetch Implementation. See: <a href=\"https://developer.apple.com/reference/uikit/uiapplication#1657399\">https://developer.apple.com/reference/uikit/uiapplication#1657399</a> iOS Background Fetch is basically an API which wakes up your app about every 15 minutes (during the user&#39;s prime-time hours) and provides your app exactly 30s of background running-time. This plugin will execute your provided callbackFn whenever a background-fetch event occurs. There is no way to increase the rate which a fetch-event occurs and this plugin sets the rate to the most frequent possible value of UIApplicationBackgroundFetchIntervalMinimum -- iOS determines the rate automatically based upon device usage and time-of-day (ie: fetch-rate is about ~15min during prime-time hours; less frequently when the user is presumed to be sleeping, at 3am for example). For more detail, please see <a href=\"https://github.com/transistorsoft/cordova-plugin-background-fetch\">https://github.com/transistorsoft/cordova-plugin-background-fetch</a></p>\n",
    "platforms": [
      "iOS"
    ],
    "usage": "\n\n```typescript\nimport { BackgroundFetch, BackgroundFetchConfig } from '@ionic-native/background-fetch/ngx';\n\n\nconstructor(private backgroundFetch: BackgroundFetch) {\n\n  const config: BackgroundFetchConfig = {\n    stopOnTerminate: false, // Set true to cease background-fetch from operating after user \"closes\" the app. Defaults to true.\n  }\n\n  backgroundFetch.configure(config)\n     .then(() => {\n         console.log('Background Fetch initialized');\n\n         this.backgroundFetch.finish();\n\n     })\n     .catch(e => console.log('Error initializing background fetch', e));\n\n  // Start the background-fetch API. Your callbackFn provided to #configure will be executed each time a background-fetch event occurs. NOTE the #configure method automatically calls #start. You do not have to call this method after you #configure the plugin\n  backgroundFetch.start();\n\n  // Stop the background-fetch API from firing fetch events. Your callbackFn provided to #configure will no longer be executed.\n  backgroundFetch.stop();\n\n\n}\n\n```",
    "repo": "https://github.com/transistorsoft/cordova-plugin-background-fetch",
    "cordovaPlugin": {
      "name": "cordova-plugin-background-fetch"
    }
  },
  {
    "name": "@ionic-native/background-geolocation",
    "displayName": "Background Geolocation",
    "description": "<p>This plugin provides foreground and background geolocation with battery-saving &quot;circular region monitoring&quot; and &quot;stop detection&quot;. For more detail, please see <a href=\"https://github.com/mauron85/cordova-plugin-background-geolocation\">https://github.com/mauron85/cordova-plugin-background-geolocation</a></p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n\nBackgroundGeolocation must be called within app.ts and or before Geolocation. Otherwise the platform will not ask you for background tracking permission.\n\n```typescript\nimport { BackgroundGeolocation, BackgroundGeolocationConfig, BackgroundGeolocationResponse } from '@ionic-native/background-geolocation';\n\nconstructor(private backgroundGeolocation: BackgroundGeolocation) { }\n\n...\n\nconst config: BackgroundGeolocationConfig = {\n            desiredAccuracy: 10,\n            stationaryRadius: 20,\n            distanceFilter: 30,\n            debug: true, //  enable this hear sounds for background-geolocation life-cycle.\n            stopOnTerminate: false, // enable this to clear background location settings when the app terminates\n    };\n\nthis.backgroundGeolocation.configure(config)\n  .subscribe((location: BackgroundGeolocationResponse) => {\n\n    console.log(location);\n\n    // IMPORTANT:  You must execute the finish method here to inform the native plugin that you're finished,\n    // and the background-task may be completed.  You must do this regardless if your HTTP request is successful or not.\n    // IF YOU DON'T, ios will CRASH YOUR APP for spending too much time in the background.\n    this.backgroundGeolocation.finish(); // FOR IOS ONLY\n\n  });\n\n// start recording location\nthis.backgroundGeolocation.start();\n\n// If you wish to turn OFF background-tracking, call the #stop method.\nthis.backgroundGeolocation.stop();\n\n```",
    "repo": "https://github.com/mauron85/cordova-plugin-background-geolocation",
    "cordovaPlugin": {
      "name": "cordova-plugin-mauron85-background-geolocation@alpha"
    }
  },
  {
    "name": "@ionic-native/background-mode",
    "displayName": "Background Mode",
    "description": "<p>Cordova plugin to prevent the app from going to sleep while in background. Requires Cordova plugin: cordova-plugin-background-mode. For more info about plugin, visit: <a href=\"https://github.com/katzer/cordova-plugin-background-mode\">https://github.com/katzer/cordova-plugin-background-mode</a></p>\n",
    "platforms": [
      "AmazonFire OS",
      "Android",
      "Browser",
      "iOS",
      "Windows"
    ],
    "usage": "\n```typescript\nimport { BackgroundMode } from '@ionic-native/background-mode/ngx';\n\nconstructor(private backgroundMode: BackgroundMode) { }\n\n...\n\nthis.backgroundMode.enable();\n```\n",
    "repo": "https://github.com/katzer/cordova-plugin-background-mode",
    "cordovaPlugin": {
      "name": "cordova-plugin-background-mode"
    }
  },
  {
    "name": "@ionic-native/backlight",
    "displayName": "Backlight",
    "description": "<p>This plugin adds turning on/off the device backlight.</p>\n",
    "platforms": [
      "Android"
    ],
    "usage": "\n```typescript\nimport { Backlight } from '@ionic-native/backlight/ngx';\n\nconstructor(private backlight: Backlight) { }\n\n...\n\n// Turn backlight on\nthis.backlight.on().then(() => console.log('backlight on'));\n\n// Turn backlight off\nthis.backlight.off().then(() => console.log('backlight off'));\n\n```\n",
    "repo": "https://github.com/mebibou/cordova-plugin-backlight",
    "cordovaPlugin": {
      "name": "cordova-plugin-backlight"
    }
  },
  {
    "name": "@ionic-native/badge",
    "displayName": "Badge",
    "description": "<p>The essential purpose of badge numbers is to enable an application to inform its users that it has something for them — for example, unread messages — when the application isn’t running in the foreground.</p>\n",
    "platforms": [
      "Android",
      "Browser",
      "iOS",
      "Windows"
    ],
    "usage": "\n```typescript\nimport { Badge } from '@ionic-native/badge/ngx';\n\nconstructor(private badge: Badge) { }\n\n...\n\nthis.badge.set(10);\nthis.badge.increase(1);\nthis.badge.clear();\n```\n",
    "repo": "https://github.com/katzer/cordova-plugin-badge",
    "cordovaPlugin": {
      "name": "cordova-plugin-badge"
    }
  },
  {
    "name": "@ionic-native/baidu-push",
    "displayName": "Baidu Push",
    "description": "<p>This plugin faciliates the use of Baidu Push notifications.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { BaiduPush } from '@ionic-native/baidu-push/ngx';\n\n\nconstructor(private baiduPush: BaiduPush) { }\n\n...\n\nthis.baiduPush.startWork('xxxxxx')\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n\n```",
    "repo": "https://github.com/Ti-webdev/cordova-plugin-push-baidu.git",
    "cordovaPlugin": {
      "name": "cordova-plugin-push-baidu"
    }
  },
  {
    "name": "@ionic-native/barcode-scanner",
    "displayName": "Barcode Scanner",
    "description": "<p>The Barcode Scanner Plugin opens a camera view and automatically scans a barcode, returning the data back to you.</p>\n",
    "platforms": [
      "Android",
      "BlackBerry 10",
      "Browser",
      "iOS",
      "Windows"
    ],
    "usage": "\n```typescript\nimport { BarcodeScanner } from '@ionic-native/barcode-scanner/ngx';\n\nconstructor(private barcodeScanner: BarcodeScanner) { }\n\n...\n\n\nthis.barcodeScanner.scan().then(barcodeData => {\n console.log('Barcode data', barcodeData);\n}).catch(err => {\n\tconsole.log('Error', err);\n});\n```",
    "repo": "https://github.com/phonegap/phonegap-plugin-barcodescanner",
    "cordovaPlugin": {
      "name": "phonegap-plugin-barcodescanner"
    }
  },
  {
    "name": "@ionic-native/base64-to-gallery",
    "displayName": "Base64 To Gallery",
    "description": "<p>This plugin allows you to save base64 data as a png image into the device</p>\n",
    "platforms": [
      "Android",
      "iOS",
      "Windows Phone 8"
    ],
    "usage": "\n```typescript\nimport { Base64ToGallery } from '@ionic-native/base64-to-gallery/ngx';\n\nconstructor(private base64ToGallery: Base64ToGallery) { }\n\n\n...\n\n\nthis.base64ToGallery.base64ToGallery(base64Data, { prefix: '_img' }).then(\n  res => console.log('Saved image to gallery ', res),\n  err => console.log('Error saving image to gallery ', err)\n);\n```",
    "repo": "https://github.com/Nexxa/cordova-base64-to-gallery",
    "cordovaPlugin": {
      "name": "cordova-base64-to-gallery"
    }
  },
  {
    "name": "@ionic-native/base64",
    "displayName": "Base64",
    "description": "<p>This Plugin is used to encode base64 of any file, it uses js code for iOS, but in case of android it uses native code to handle android versions lower than v.3</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { Base64 } from '@ionic-native/base64/ngx';\n\nconstructor(private base64: Base64) { }\n\n...\n\nlet filePath: string = 'file:///...';\nthis.base64.encodeFile(filePath).then((base64File: string) => {\n  console.log(base64File);\n}, (err) => {\n  console.log(err);\n});\n\n```\n",
    "repo": "https://github.com/hazemhagrass/phonegap-base64",
    "cordovaPlugin": {
      "name": "com-badrit-base64"
    }
  },
  {
    "name": "@ionic-native/battery-status",
    "displayName": "Battery Status",
    "description": "<p>Requires Cordova plugin: cordova-plugin-batterystatus. For more info, please see the <a href=\"https://github.com/apache/cordova-plugin-battery-status\">BatteryStatus plugin docs</a>.</p>\n",
    "platforms": [
      "iOS",
      "Android",
      "Windows",
      "Browser"
    ],
    "usage": "\n```typescript\nimport { BatteryStatus } from '@ionic-native/battery-status/ngx';\n\nconstructor(private batteryStatus: BatteryStatus) { }\n\n...\n\n\n// watch change in battery status\nconst subscription = this.batteryStatus.onChange().subscribe(status => {\n   console.log(status.level, status.isPlugged);\n});\n\n// stop watch\nsubscription.unsubscribe();\n\n```",
    "repo": "https://github.com/apache/cordova-plugin-battery-status",
    "cordovaPlugin": {
      "name": "cordova-plugin-battery-status"
    }
  },
  {
    "name": "@ionic-native/ble",
    "displayName": "BLE",
    "description": "<p>This plugin enables communication between a phone and Bluetooth Low Energy (BLE) peripherals.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n\n```typescript\n\nimport { BLE } from '@ionic-native/ble/ngx';\n\nconstructor(private ble: BLE) { }\n\n```\n\n## Peripheral Data\n\nPeripheral Data is passed to the success callback when scanning and connecting. Limited data is passed when scanning.\n\n```typescript\n  {\n      'name': 'Battery Demo',\n      'id': '20:FF:D0:FF:D1:C0',\n      'advertising': [2,1,6,3,3,15,24,8,9,66,97,116,116,101,114,121],\n      'rssi': -55\n  }\n```\nAfter connecting, the peripheral object also includes service, characteristic and descriptor information.\n\n```typescript\n  {\n      'name': 'Battery Demo',\n      'id': '20:FF:D0:FF:D1:C0',\n      'advertising': [2,1,6,3,3,15,24,8,9,66,97,116,116,101,114,121],\n      'rssi': -55,\n      'services': [\n          '1800',\n          '1801',\n          '180f'\n      ],\n      'characteristics': [\n          {\n              'service': '1800',\n              'characteristic': '2a00',\n              'properties': [\n                  'Read'\n              ]\n          },\n          {\n              'service': '1800',\n              'characteristic': '2a01',\n              'properties': [\n                  'Read'\n              ]\n          },\n          {\n              'service': '1801',\n              'characteristic': '2a05',\n              'properties': [\n                  'Read'\n              ]\n          },\n          {\n              'service': '180f',\n              'characteristic': '2a19',\n              'properties': [\n                  'Read'\n              ],\n              'descriptors': [\n                  {\n                      'uuid': '2901'\n                  },\n                  {\n                      'uuid': '2904'\n                  }\n              ]\n          }\n      ]\n  }\n```\n\n## Advertising Data\nBluetooth advertising data is returned in when scanning for devices. The format varies depending on your platform. On Android advertising data will be the raw advertising bytes. iOS does not allow access to raw advertising data, so a dictionary of data is returned.\n\nThe advertising information for both Android and iOS appears to be a combination of advertising data and scan response data.\n\n### Android\n\n```typescript\n  {\n      'name': 'demo',\n      'id': '00:1A:7D:DA:71:13',\n      'advertising': ArrayBuffer,\n     'rssi': -37\n }\n```\n\nConvert the advertising info to a Uint8Array for processing. `var adData = new Uint8Array(peripheral.advertising)`\n\n### iOS\n\nNote that iOS uses the string value of the constants for the [Advertisement Data Retrieval Keys](https://developer.apple.com/library/ios/documentation/CoreBluetooth/Reference/CBCentralManagerDelegate_Protocol/index.html#//apple_ref/doc/constant_group/Advertisement_Data_Retrieval_Keys). This will likely change in the future.\n\n```typescript\n  {\n      'name': 'demo',\n      'id': 'D8479A4F-7517-BCD3-91B5-3302B2F81802',\n      'advertising': {\n          'kCBAdvDataChannel': 37,\n          'kCBAdvDataServiceData': {\n              'FED8': {\n                  'byteLength': 7 // data not shown\n              }\n          },\n          'kCBAdvDataLocalName': 'demo',\n          'kCBAdvDataServiceUUIDs': ['FED8'],\n          'kCBAdvDataManufacturerData': {\n              'byteLength': 7  // data not shown\n          },\n          'kCBAdvDataTxPowerLevel': 32,\n          'kCBAdvDataIsConnectable': true\n      },\n      'rssi': -53\n  }\n```\n\n## Typed Arrays\n\nThis plugin uses typed Arrays or ArrayBuffers for sending and receiving data.\n\nThis means that you need convert your data to ArrayBuffers before sending and from ArrayBuffers when receiving.\n\n```typescript\n  // ASCII only\n  function stringToBytes(string) {\n     var array = new Uint8Array(string.length);\n     for (var i = 0, l = string.length; i < l; i++) {\n         array[i] = string.charCodeAt(i);\n      }\n      return array.buffer;\n  }\n\n  // ASCII only\n  function bytesToString(buffer) {\n      return String.fromCharCode.apply(null, new Uint8Array(buffer));\n  }\n```\nYou can read more about typed arrays in these articles on [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays) and [HTML5 Rocks](http://www.html5rocks.com/en/tutorials/webgl/typed_arrays/).\n\n## UUIDs\n\nUUIDs are always strings and not numbers. Some 16-bit UUIDs, such as '2220' look like integers, but they're not. (The integer 2220 is 0x8AC in hex.) This isn't a problem with 128 bit UUIDs since they look like strings 82b9e6e1-593a-456f-be9b-9215160ebcac. All 16-bit UUIDs should also be passed to methods as strings.\n",
    "repo": "https://github.com/don/cordova-plugin-ble-central",
    "cordovaPlugin": {
      "name": "cordova-plugin-ble-central"
    }
  },
  {
    "name": "@ionic-native/blinkid",
    "displayName": "BlinkId",
    "description": "<p>Microblink SDK wrapper for barcode and document scanning. See the blinkid-phonegap repository for available recognizers and other settings</p>\n",
    "platforms": [
      "iOS",
      "Android"
    ],
    "usage": "\n```typescript\nimport { BlinkId, RecognizerResultState } from '@ionic-native/blinkid/ngx';\n\nconstructor(private blinkId: BlinkId) { }\n\n...\n\nconst overlaySettings = new this.blinkId.DocumentOverlaySettings();\n\nconst usdlRecognizer = new this.blinkId.UsdlRecognizer();\nconst usdlSuccessFrameGrabber = new this.blinkId.SuccessFrameGrabberRecognizer(usdlRecognizer);\n\nconst barcodeRecognizer = new this.blinkId.BarcodeRecognizer();\nbarcodeRecognizer.scanPdf417 = true;\n\nconst recognizerCollection = new this.blinkId.RecognizerCollection([\n  usdlSuccessFrameGrabber,\n  barcodeRecognizer,\n]);\n\nconst canceled = await this.blinkId.scanWithCamera(\n  overlaySettings,\n  recognizerCollection,\n  { ios: IOS_LICENSE_KEY, android: ANDROID_LICENSE_KEY },\n);\n\nif (!canceled) {\n  if (usdlRecognizer.result.resultState === RecognizerResultState.valid) {\n    const successFrame = usdlSuccessFrameGrabber.result.successFrame;\n    if (successFrame) {\n      this.base64Img = `data:image/jpg;base64, ${successFrame}`;\n      this.fields = usdlRecognizer.result.fields;\n    }\n  } else {\n    this.barcodeStringData = barcodeRecognizer.result.stringData;\n  }\n}\n```\n",
    "repo": "https://github.com/BlinkID/blinkid-phonegap",
    "cordovaPlugin": {
      "name": "blinkid-cordova"
    }
  },
  {
    "name": "@ionic-native/blinkup",
    "displayName": "BlinkUp",
    "description": "<p>Electric Imp BlinkUp ionic plugin.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { BlinkUp } from '@ionic-native/blinkup/ngx';\n\nconst options = <BlinkUpWifiOptions>{\n   apiKey: 'API_KEY',\n   timeoutMs: 60000,\n   ssid: 'MY_SSID',\n   password: 'MY_PASSWORD'\n }\n BlinkUp.flashWifiBlinkUp(options).subscribe(\n    (result) => console.log('Done'),\n    (error) => console.log(error)\n  )\n```\n",
    "repo": "https://github.com/SensorShare/cordova-plugin-blinkup",
    "cordovaPlugin": {
      "name": "cordova-plugin-blinkup"
    }
  },
  {
    "name": "@ionic-native/bluetooth-le",
    "displayName": "BluetoothLE",
    "description": "<p>This plugin has the most complete implementation for interacting with Bluetooth LE devices on Android, iOS and partially Windows. It&#39;s a wrap around <a href=\"https://github.com/randdusing/cordova-plugin-bluetoothle/blob/master/readme.md\">randdusing/cordova-plugin-bluetoothle</a> cordova plugin for Ionic. It supports peripheral <strong>and</strong> central modes and covers most of the API methods available on Android and iOS.</p>\n",
    "platforms": [
      "Android",
      "iOS] // Array of platforms supported",
      "example: [Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { BluetoothLE } from '@ionic-native/bluetooth-le/ngx';\n\n\nconstructor(public bluetoothle: BluetoothLE, public plt: Platform) {\n\n this.plt.ready().then((readySource) => {\n\n   console.log('Platform ready from', readySource);\n\n   this.bluetoothle.initialize().then(ble => {\n     console.log('ble', ble.status) // logs 'enabled'\n   });\n\n  });\n}\n\n```\n\n",
    "repo": "https://github.com/randdusing/cordova-plugin-bluetoothle",
    "cordovaPlugin": {
      "name": "cordova-plugin-bluetoothle"
    }
  },
  {
    "name": "@ionic-native/bluetooth-serial",
    "displayName": "Bluetooth Serial",
    "description": "<p>This plugin enables serial communication over Bluetooth. It was written for communicating between Android or iOS and an Arduino (not Android to Android or iOS to iOS).</p>\n",
    "platforms": [
      "Android",
      "iOS",
      "Windows Phone 8"
    ],
    "usage": "\n```typescript\nimport { BluetoothSerial } from '@ionic-native/bluetooth-serial/ngx';\n\nconstructor(private bluetoothSerial: BluetoothSerial) { }\n\n\n// Write a string\nthis.bluetoothSerial.write('hello world').then(success, failure);\n\n// Array of int or bytes\nthis.bluetoothSerial.write([186, 220, 222]).then(success, failure);\n\n// Typed Array\nvar data = new Uint8Array(4);\ndata[0] = 0x41;\ndata[1] = 0x42;\ndata[2] = 0x43;\ndata[3] = 0x44;\nthis.bluetoothSerial.write(data).then(success, failure);\n\n// Array Buffer\nthis.bluetoothSerial.write(data.buffer).then(success, failure);\n```\n",
    "repo": "https://github.com/don/BluetoothSerial",
    "cordovaPlugin": {
      "name": "cordova-plugin-bluetooth-serial"
    }
  },
  {
    "name": "@ionic-native/braintree",
    "displayName": "Braintree",
    "description": "<p>This plugin enables the use of the Braintree Drop-In Payments UI in your Ionic applications on Android and iOS, using the native Drop-In UI for each platform (not the Javascript SDK).</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { Braintree, ApplePayOptions, PaymentUIOptions } from '@ionic-native/braintree/ngx';\n\nconstructor(private braintree: Braintree) { }\n\n...\n\n// Your Braintree `Tokenization Key` from the Braintree dashboard.\n// Alternatively you can also generate this token server-side\n// using a client ID in order to allow users to use stored payment methods.\n// See the [Braintree Client Token documentation](https://developers.braintreepayments.com/reference/request/client-token/generate/node#customer_id) for details.\nconst BRAINTREE_TOKEN = '<YOUR_BRAINTREE_TOKEN>';\n\n// NOTE: Do not provide this unless you have configured your Apple Developer account\n// as well as your Braintree merchant account, otherwise the Braintree module will fail.\nconst appleOptions: ApplePayOptions = {\n  merchantId: '<YOUR MERCHANT ID>',\n  currency: 'USD',\n  country: 'US'\n}\n\nconst paymentOptions: PaymentUIOptions = {\n  amount: '14.99',\n  primaryDescription: 'Your product or service (per /item, /month, /week, etc)',\n}\n\nthis.braintree.initialize(BRAINTREE_TOKEN)\n  .then(() => this.braintree.setupApplePay(appleOptions))\n  .then(() => this.braintree.presentDropInPaymentUI(paymentOptions))\n  .then((result: PaymentUIResult) => {\n    if (result.userCancelled) {\n      console.log(\"User cancelled payment dialog.\");\n    } else {\n      console.log(\"User successfully completed payment!\");\n      console.log(\"Payment Nonce: \" + result.nonce);\n      console.log(\"Payment Result.\", result);\n    }\n  })\n  .catch((error: string) => console.error(error));\n\n```\n",
    "repo": "https://github.com/taracque/cordova-plugin-braintree",
    "cordovaPlugin": {
      "name": "cordova-plugin-braintree"
    }
  },
  {
    "name": "@ionic-native/branch-io",
    "displayName": "BranchIo",
    "description": "<p>Branch.io is an attribution service for deeplinking and invitation links</p>\n",
    "platforms": [
      "iOS",
      "Android"
    ],
    "usage": "\n```\nimport { BranchIo } from '@ionic-native/branch-io/ngx';\n\n\nconstructor(private branch: BranchIo) { }\n\n```\n",
    "repo": null,
    "cordovaPlugin": {
      "name": "branch-cordova-sdk"
    }
  },
  {
    "name": "@ionic-native/brightness",
    "displayName": "Brightness",
    "description": "<p>The Brightness plugin let you control the display brightness of your device.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { Brightness } from '@ionic-native/brightness/ngx';\n\nconstructor(private brightness: Brightness) { }\n\n...\n\nlet brightnessValue = 0.8;\nthis.brightness.setBrightness(brightnessValue);\n```\n\n",
    "repo": "https://github.com/mgcrea/cordova-plugin-brightness",
    "cordovaPlugin": {
      "name": "cordova-plugin-brightness"
    }
  },
  {
    "name": "@ionic-native/broadcaster",
    "displayName": "Broadcaster",
    "description": "<p>This plugin adds exchanging events between native code and your app.</p>\n",
    "platforms": [
      "Android",
      "iOS",
      "Browser"
    ],
    "usage": "\n```typescript\nimport { Broadcaster } from '@ionic-native/broadcaster/ngx';\n\nconstructor(private broadcaster: Broadcaster) { }\n\n...\n\n// Listen to events from Native\nthis.broadcaster.addEventListener('eventName').subscribe((event) => console.log(event));\n\n// Send event to Native\nthis.broadcaster.fireNativeEvent('eventName', {}).then(() => console.log('success'));\n\n```\n",
    "repo": "https://github.com/bsorrentino/cordova-broadcaster",
    "cordovaPlugin": {
      "name": "cordova-plugin-broadcaster"
    }
  },
  {
    "name": "@ionic-native/browser-tab",
    "displayName": "Browser Tab",
    "description": "<p>This plugin provides an interface to in-app browser tabs that exist on some mobile platforms, specifically <a href=\"http://developer.android.com/tools/support-library/features.html#custom-tabs\">Custom Tabs</a> on Android (including the <a href=\"https://developer.chrome.com/multidevice/android/customtabs\">Chrome Custom Tabs</a> implementation), and <a href=\"https://developer.apple.com/library/ios/documentation/SafariServices/Reference/SFSafariViewController_Ref/\">SFSafariViewController</a> on iOS.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { BrowserTab } from '@ionic-native/browser-tab/ngx';\n\nconstructor(private browserTab: BrowserTab) {\n\n  browserTab.isAvailable()\n    .then(isAvailable => {\n      if (isAvailable) {\n        browserTab.openUrl('https://ionic.io');\n      } else {\n        // open URL with InAppBrowser instead or SafariViewController\n      }\n    });\n}\n\n```\n",
    "repo": "https://github.com/google/cordova-plugin-browsertab",
    "cordovaPlugin": {
      "name": "cordova-plugin-browsertab"
    }
  },
  {
    "name": "@ionic-native/calendar",
    "displayName": "Calendar",
    "description": "<p>This plugin allows you to add events to the Calendar of the mobile device.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { Calendar } from '@ionic-native/calendar/ngx';\n\nconstructor(private calendar: Calendar) { }\n\n\nthis.calendar.createCalendar('MyCalendar').then(\n  (msg) => { console.log(msg); },\n  (err) => { console.log(err); }\n);\n```",
    "repo": "https://github.com/EddyVerbruggen/Calendar-PhoneGap-Plugin",
    "cordovaPlugin": {
      "name": "cordova-plugin-calendar"
    }
  },
  {
    "name": "@ionic-native/call-directory",
    "displayName": "Call Directory",
    "description": "<p>This plugin can add phone numbers to an Callkit call directory extension. Call <code>reloadExtension</code> after using <code>addIdentification</code> and <code>removeIdentification</code> to process the changes in the call directory extension.</p>\n",
    "platforms": [
      "iOS"
    ],
    "usage": "\n```typescript\nimport { CallDirectory } from '@ionic-native/call-directory/ngx';\n\n\nconstructor(private callDirectory: CallDirectory) { }\n\n\nlet items = [{label: \"Hello\", number: \"123\"}];\nthis.callDirectory.addIdentification(items)\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n\nthis.callDirectory.reloadExtension()\n  .then(res: string) => console.log(res))\n  .catch((error: any) => console.error(error));\n```\n",
    "repo": "https://github.com/GEDYSIntraWare/cordova-plugin-call-directory",
    "cordovaPlugin": {
      "name": "cordova-plugin-call-directory"
    }
  },
  {
    "name": "@ionic-native/call-log",
    "displayName": "Call Log",
    "description": "<p>This plugin access the call history on a device and that can be filtered</p>\n",
    "platforms": [
      "Android"
    ],
    "usage": "\n```typescript\nimport { CallLog } from '@ionic-native/call-log/ngx';\n\n\nconstructor(private callLog: CallLog) { }\n\n````",
    "repo": "https://github.com/creacore-team/cordova-plugin-calllog",
    "cordovaPlugin": {
      "name": "cordova-plugin-calllog"
    }
  },
  {
    "name": "@ionic-native/call-number",
    "displayName": "Call Number",
    "description": "<p>Call a number directly from your Cordova/Ionic application. <strong>NOTE</strong>: The iOS Simulator (and maybe Android Simulators) do not provide access to the phone subsystem.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { CallNumber } from '@ionic-native/call-number/ngx';\n\nconstructor(private callNumber: CallNumber) { }\n\n...\n\n\nthis.callNumber.callNumber(\"18001010101\", true)\n  .then(res => console.log('Launched dialer!', res))\n  .catch(err => console.log('Error launching dialer', err));\n\n```\n",
    "repo": "https://github.com/Rohfosho/CordovaCallNumberPlugin",
    "cordovaPlugin": {
      "name": "call-number"
    }
  },
  {
    "name": "@ionic-native/camera-preview",
    "displayName": "Camera Preview",
    "description": "<p>Showing camera preview in HTML</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { CameraPreview, CameraPreviewPictureOptions, CameraPreviewOptions, CameraPreviewDimensions } from '@ionic-native/camera-preview/ngx';\n\nconstructor(private cameraPreview: CameraPreview) { }\n\n...\n\n// camera options (Size and location). In the following example, the preview uses the rear camera and display the preview in the back of the webview\nconst cameraPreviewOpts: CameraPreviewOptions = {\n  x: 0,\n  y: 0,\n  width: window.screen.width,\n  height: window.screen.height,\n  camera: 'rear',\n  tapPhoto: true,\n  previewDrag: true,\n  toBack: true,\n  alpha: 1\n}\n\n// start camera\nthis.cameraPreview.startCamera(cameraPreviewOpts).then(\n  (res) => {\n    console.log(res)\n  },\n  (err) => {\n    console.log(err)\n  });\n\n// Set the handler to run every time we take a picture\nthis.cameraPreview.setOnPictureTakenHandler().subscribe((result) => {\n  console.log(result);\n  // do something with the result\n});\n\n\n// picture options\nconst pictureOpts: CameraPreviewPictureOptions = {\n  width: 1280,\n  height: 1280,\n  quality: 85\n}\n\n// take a picture\nthis.cameraPreview.takePicture(this.pictureOpts).then((imageData) => {\n  this.picture = 'data:image/jpeg;base64,' + imageData;\n}, (err) => {\n  console.log(err);\n  this.picture = 'assets/img/test.jpg';\n});\n\n\n// Switch camera\nthis.cameraPreview.switchCamera();\n\n// set color effect to negative\nthis.cameraPreview.setColorEffect('negative');\n\n// Stop the camera preview\nthis.cameraPreview.stopCamera();\n\n```\n",
    "repo": null,
    "cordovaPlugin": {
      "name": "cordova-plugin-camera-preview"
    }
  },
  {
    "name": "@ionic-native/camera",
    "displayName": "Camera",
    "description": "<p>Take a photo or capture video.</p>\n",
    "platforms": [
      "Android",
      "Browser",
      "iOS",
      "Windows"
    ],
    "usage": "\n```typescript\nimport { Camera, CameraOptions } from '@ionic-native/camera/ngx';\n\nconstructor(private camera: Camera) { }\n\n...\n\n\nconst options: CameraOptions = {\n  quality: 100,\n  destinationType: this.camera.DestinationType.FILE_URI,\n  encodingType: this.camera.EncodingType.JPEG,\n  mediaType: this.camera.MediaType.PICTURE\n}\n\nthis.camera.getPicture(options).then((imageData) => {\n // imageData is either a base64 encoded string or a file URI\n // If it's base64 (DATA_URL):\n let base64Image = 'data:image/jpeg;base64,' + imageData;\n}, (err) => {\n // Handle error\n});\n```",
    "repo": "https://github.com/apache/cordova-plugin-camera",
    "cordovaPlugin": {
      "name": "cordova-plugin-camera"
    }
  },
  {
    "name": "@ionic-native/card-io",
    "displayName": "Card IO",
    "description": "",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\nThis plug-in exposes card.io credit card scanning.\n\n**NOTE**: If you would like to actually process a credit card charge, you might be interested in the [PayPal Cordova Plug-in](https://github.com/paypal/PayPal-Cordova-Plugin).\n\nRequires Cordova plugin: `card.io.cordova.mobilesdk`. For more info, please see the [Card IO plugin docs](https://github.com/card-io/card.io-Cordova-Plugin).\n\nNote: For use with iOS 10 + When building your app with the iOS 10 SDK +, you have to add some info to the info.plist file. This is due to increased security in iOS 10. Go to your app directory and search for the <your app name>Info.plist file. Add the following lines in the main <dict> element.\n```xml\n<key>NSCameraUsageDescription</key>\n<string>To scan credit cards.</string>\n```\n```typescript\nimport { CardIO } from '@ionic-native/card-io/ngx';\n\nconstructor(private cardIO: CardIO) { }\n\n...\n\n\nthis.cardIO.canScan()\n  .then(\n    (res: boolean) => {\n      if(res){\n        let options = {\n          requireExpiry: true,\n          requireCVV: false,\n          requirePostalCode: false\n        };\n        this.cardIO.scan(options);\n      }\n    }\n  );\n```",
    "repo": "https://github.com/card-io/card.io-Cordova-Plugin",
    "cordovaPlugin": {
      "name": "card.io.cordova.mobilesdk"
    }
  },
  {
    "name": "@ionic-native/chooser",
    "displayName": "Chooser",
    "description": "<p>File chooser plugin for Cordova.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { Chooser } from '@ionic-native/chooser/ngx';\n\n\nconstructor(private chooser: Chooser) { }\n\n...\n\n\nthis.chooser.getFile()\n  .then(file => console.log(file ? file.name : 'canceled'))\n  .catch((error: any) => console.error(error));\n\n```\n",
    "repo": "https://github.com/cyph/cordova-plugin-chooser",
    "cordovaPlugin": {
      "name": "cordova-plugin-chooser"
    }
  },
  {
    "name": "@ionic-native/class-kit",
    "displayName": "Class Kit",
    "description": "<p>Plugin for using Apple&#39;s ClassKit framework.</p>\n",
    "platforms": [
      "iOS"
    ],
    "usage": "\n```typescript\nimport { ClassKit, CCKContext, CCKBinaryItem, CCKQuantityItem, CCKScoreItem, CCKContextTopic, CCKContextType, CCKBinaryType } from '@ionic-native/class-kit/ngx';\n\n// Init contexts defined in XML file 'CCK-contexts.xml'\nconstructor( ..., private classKit: ClassKit) {\n  platform.ready().then(() => {\n    classKit.initContextsFromXml(\"classkitplugin://\")\n      .then(() => console.log(\"success\"))\n      .catch(e => console.log(\"error: \", e));\n  });\n}\n\n...\n\n// Init context with identifier path\nconst context: CCKContext = {\n  identifierPath: [\"parent_title_one\", \"child_one\", \"child_one_correct_quiz\"],\n  title: \"child one correct quiz\",\n  type: CCKContextType.exercise,\n  topic: CCKContextTopic.science,\n  displayOrder: 0\n};\n\nthis.classKit.addContext(\"classkitplugin://\", context)\n   .then(() => console.log(\"success\"))\n   .catch(e => console.log(\"error: \", e));\n\n\n// Remove all contexts\nthis.classKit.removeContexts()\n   .then(() => console.log(\"success\"))\n   .catch(e => console.log(\"error: \", e));\n\n\n// Remove context with identifier path\nthis.classKit.removeContext([\"parent_title_one\", \"child_one\", \"child_one_correct_quiz\"])\n   .then(() => console.log(\"success\"))\n   .catch(e => console.log(\"error: \", e));\n\n\n// Begin a new activity or restart an activity for a given context\nthis.classKit.beginActivity([\"parent_title_one\", \"child_two\", \"child_two_quiz\"], false)\n   .then(() => console.log(\"success\"))\n   .catch(e => console.log(\"error: \", e));\n\n\n// Adds a progress range to the active given activity\nthis.classKit.setProgressRange(0, 0.66)\n   .then(() => console.log(\"success\"))\n   .catch(e => console.log(\"error: \", e));\n\n\n// Adds a progress to the active given activity\nthis.classKit.setProgress(0.66)\n   .then(() => console.log(\"success\"))\n   .catch(e => console.log(\"error: \", e));\n\n\n// Adds activity information that is true or false, pass or fail, yes or no\nconst binaryItem: CCKBinaryItem = {\n  identifier: \"child_two_quiz_IDENTIFIER_1\",\n  title: \"CHILD TWO QUIZ 1\",\n  type: CCKBinaryType.trueFalse,\n  isCorrect: isCorrect,\n  isPrimaryActivityItem: false\n};\n\nthis.classKit.setBinaryItem(binaryItem)\n   .then(() => console.log(\"success\"))\n   .catch(e => console.log(\"error: \", e));\n\n\n// Adds activity information that signifies a score out of a possible maximum\nconst scoreItem: CCKScoreItem = {\n  identifier: \"total_score\",\n  title: \"Total Score :-)\",\n  score: 0.66,\n  maxScore: 1.0,\n  isPrimaryActivityItem: true\n};\n\nthis.classKit.setScoreItem(scoreItem)\n   .then(() => console.log(\"success\"))\n   .catch(e => console.log(\"error: \", e));\n\n\n// Activity information that signifies a quantity\nconst quantityItem: CCKQuantityItem = {\n   identifier: \"quantity_item_hints\",\n   title: \"Hints\",\n   quantity: 12,\n   isPrimaryActivityItem: false\n};\n\nthis.classKit.setQuantityItem(quantityItem)\n   .then(() => console.log(\"success\"))\n   .catch(e => console.log(\"error: \", e));\n\n```\n",
    "repo": "https://github.com/sebastianbaar/cordova-plugin-classkit.git",
    "cordovaPlugin": {
      "name": "cordova-plugin-classkit"
    }
  },
  {
    "name": "@ionic-native/clevertap",
    "displayName": "CleverTap",
    "description": "<p>Cordova Plugin that wraps CleverTap SDK for Android and iOS</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { CleverTap } from '@ionic-native/clevertap/ngx';\n\nconstructor(private clevertap: CleverTap) { }\n\n```\n",
    "repo": "https://github.com/CleverTap/clevertap-cordova",
    "cordovaPlugin": {
      "name": "clevertap-cordova"
    }
  },
  {
    "name": "@ionic-native/clipboard",
    "displayName": "Clipboard",
    "description": "<p>Clipboard management plugin for Cordova that supports iOS, Android, and Windows Phone 8.</p>\n",
    "platforms": [
      "Android",
      "iOS",
      "Windows Phone 8"
    ],
    "usage": "\n```typescript\nimport { Clipboard } from '@ionic-native/clipboard/ngx';\n\nconstructor(private clipboard: Clipboard) { }\n\n...\n\n\nthis.clipboard.copy('Hello world');\n\nthis.clipboard.paste().then(\n   (resolve: string) => {\n      alert(resolve);\n    },\n    (reject: string) => {\n      alert('Error: ' + reject);\n    }\n  );\n\nthis.clipboard.clear();\n```\n",
    "repo": "https://github.com/ihadeed/cordova-clipboard",
    "cordovaPlugin": {
      "name": "cordova-clipboard"
    }
  },
  {
    "name": "@ionic-native/cloud-settings",
    "displayName": "Cloud Settings",
    "description": "<p>Stores app settings in cloud storage so if the user re-installs the app or installs it on a different device, the settings will be restored and available in the new installation.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { CloudSettings } from '@ionic-native/cloud-settings/ngx';\n\n\nconstructor(private cloudSettings: CloudSettings) { }\n\n...\n\nthis.cloudSettings.exists()\n  .then((exists: boolean) => console.log(\"Saved settings exist: \" + exists) )\n\nthis.cloudSettings.load()\n  .then((settings: any) => this.settings = settings)\n  .catch((error: any) => console.error(error));\n\nthis.cloudSettings.save(this.settings)\n  .then((savedSettings: any) => console.log(\"Saved settings: \" + JSON.stringify(savedSettings)))\n  .catch((error: any) => console.error(error));\n\n```\n",
    "repo": "https://github.com/dpa99c/cordova-plugin-cloud-settings",
    "cordovaPlugin": {
      "name": "cordova-plugin-cloud-settings"
    }
  },
  {
    "name": "@ionic-native/code-push",
    "displayName": "Code Push",
    "description": "<p>CodePush plugin for Cordova by Microsoft that supports iOS and Android.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { CodePush } from '@ionic-native/code-push/ngx';\n\nconstructor(private codePush: CodePush) { }\n\n...\n\n// note - mostly error & completed methods of observable will not fire\n// as syncStatus will contain the current state of the update\nthis.codePush.sync().subscribe((syncStatus) => console.log(syncStatus));\n\nconst downloadProgress = (progress) => { console.log(`Downloaded ${progress.receivedBytes} of ${progress.totalBytes}`); }\nthis.codePush.sync({}, downloadProgress).subscribe((syncStatus) => console.log(syncStatus));\n\n```\n",
    "repo": "https://github.com/Microsoft/cordova-plugin-code-push",
    "cordovaPlugin": {
      "name": "cordova-plugin-code-push"
    }
  },
  {
    "name": "@ionic-native/colored-browser-tabs",
    "displayName": "Colored Browser Tabs",
    "description": "<p>This plugin opens Chrome Custom Tabs on Android or SafariViewController on iOS</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { ColoredBrowserTabs } from '@ionic-native/colored-browser-tabs/ngx';\n\n\nconstructor(private browserTabs: ColoredBrowserTabs) { }\n\n...\n\n\nthis.browserTabs.openTab('www.example.url', '#ffffff')\n  .subscribe()\n\nthis.browserTabs.openTabWithAnimation('www.example.url', 'slide_x', '#ffffff')\n  .subscribe()\n\n```\n",
    "repo": "https://github.com/TobyEb/cordova-plugin-colored-browser-tabs",
    "cordovaPlugin": {
      "name": "cordova-plugin-colored-browser-tabs"
    }
  },
  {
    "name": "@ionic-native/contacts",
    "displayName": "Contacts",
    "description": "<p>Access and manage Contacts on the device.</p>\n",
    "platforms": [],
    "usage": "\n\n```typescript\nimport { Contacts, Contact, ContactField, ContactName } from '@ionic-native/contacts/ngx';\n\nconstructor(private contacts: Contacts) { }\n\nlet contact: Contact = this.contacts.create();\n\ncontact.name = new ContactName(null, 'Smith', 'John');\ncontact.phoneNumbers = [new ContactField('mobile', '6471234567')];\ncontact.save().then(\n  () => console.log('Contact saved!', contact),\n  (error: any) => console.error('Error saving contact.', error)\n);\n\n```",
    "repo": "https://github.com/apache/cordova-plugin-contacts",
    "cordovaPlugin": {
      "name": "cordova-plugin-contacts"
    }
  },
  {
    "name": "@ionic-native/couchbase-lite",
    "displayName": "Couchbase Lite",
    "description": "<p>Plugin to install Couchbase Lite in your PhoneGap app on iOS or Android</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { CouchbaseLite } from '@ionic-native/couchbase-lite/ngx';\nimport { Http } from '@angular/http';\nimport { Observable } from 'rxjs'\nconstructor(private couchbase: CouchbaseLite, private platform:Platform,private _http:Http) {\n   this.initMethod();\n}\nurl:string;\ninitMethod() {\n   this.couchbase.getURL().then((url)=> {\n       this.url = url;\n   })\n}\ngetUrl() {\n     return this.url;\n}\n// DATABASES //\ncreateDatabase(database_name:string) {\n     let url = this.getUrl();\n     url = url+database_name;\n     return this._http\n       .put(url)\n       .map(data => { this.results = data['results'] })\n       .catch((error:any) => {\n          return Observable.throw(error.json() || 'Couchbase Lite error');\n        })\n }\ndeleteDatabase(database_name:string) {\n     let url = this.getUrl();\n     url = url+database_name;\n     return this._http\n       .delete(url)\n       .map(data => { this.results = data['results'] })\n       .catch((error:any) => {\n          return Observable.throw(error.json() || 'Couchbase Lite error');\n       })\n}\ngetAllDbs() {\n     let url = this.getUrl();\n     url = url+'_all_dbs';\n     return this._http\n       .get(url)\n       .map(data => { this.results = data['results'] })\n       .catch((error:any) => {\n          return Observable.throw(error.json() || 'Couchbase Lite error');\n       })\n}\n// DOCUMENTS //\ngetAllDocuments(database_name:string){\n     let url = this.getUrl();\n     // include_docs=true will include a doc inside response, it is false by default\n     url = url + database_name + '/_all_docs?include_docs=true';\n     return this._http\n       .get(url)\n       .map(data => { this.results = data['results'] })\n       .catch((error:any) => {\n          return Observable.throw(error.json() || 'Couchbase Lite error');\n       })        .\n}\ncreateDocument(database_name:string,document){\n     let url = this.getUrl();\n     url = url + database_name;\n     return this._http\n       .post(url,document)\n       .map(data => { this.results = data['results'] })\n       .catch((error:any) => {\n          return Observable.throw(error.json() || 'Couchbase Lite error');\n       })        .\n}\nlet document = {\n   _id:'You can either specify the document ID (must be string) else couchbase generates one for your doc',\n   data:{name:'sandman',age:25,city:pune}\n }\ncreateDocument('justbe', document);\n// successful response\n{ \"id\": \"string\",\"rev\": \"string\",\"ok\": true }\nupdateDocument(database_name:string,document){\n     let url = this.getUrl();\n     url = url + database_name + '/' + document._id;\n     return this._http\n       .put(url,document)\n       .map(data => { this.results = data['results'] })\n       .catch((error:any) => {\n          return Observable.throw(error.json() || 'Couchbase Lite error');\n       })        .\n}\n// for updation of document your document must contain most recent rev(revision) id.\n// for each updation of document new rev id is get generated\n// successful response\n{ \"id\": \"string\",\"rev\": \"string(new revision id)\",\"ok\": true }\ndeleteDocument(database_name:string,document){\n     let url = this.getUrl();\n     url = url + database_name + '/' + document._id +'?rev='+doc._rev;\n     return this._http\n       .delete(url)\n       .map(data => { this.results = data['results'] })\n       .catch((error:any) => {\n          return Observable.throw(error.json() || 'Couchbase Lite error');\n       })        .\n}\n\n\n```\n",
    "repo": "https://github.com/couchbaselabs/Couchbase-Lite-PhoneGap-Plugin",
    "cordovaPlugin": {
      "name": "couchbase-lite-phonegap-plugin"
    }
  },
  {
    "name": "@ionic-native/crop",
    "displayName": "Crop",
    "description": "<p>Crops images</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { Crop } from '@ionic-native/crop/ngx';\n\nconstructor(private crop: Crop) { }\n\n...\n\nthis.crop.crop('path/to/image.jpg', {quality: 75})\n  .then(\n    newImage => console.log('new image path is: ' + newImage),\n    error => console.error('Error cropping image', error)\n  );\n```",
    "repo": "https://github.com/jeduan/cordova-plugin-crop",
    "cordovaPlugin": {
      "name": "cordova-plugin-crop"
    }
  },
  {
    "name": "@ionic-native/date-picker",
    "displayName": "Date Picker",
    "description": "<p>The DatePicker plugin allows the user to fetch date or time using native dialogs.</p>\n",
    "platforms": [
      "Android",
      "iOS",
      "Windows"
    ],
    "usage": "\n```typescript\nimport { DatePicker } from '@ionic-native/date-picker/ngx';\n\nconstructor(private datePicker: DatePicker) { }\n\n\n...\n\n\nthis.datePicker.show({\n  date: new Date(),\n  mode: 'date',\n  androidTheme: this.datePicker.ANDROID_THEMES.THEME_HOLO_DARK\n}).then(\n  date => console.log('Got date: ', date),\n  err => console.log('Error occurred while getting date: ', err)\n);\n```",
    "repo": "https://github.com/VitaliiBlagodir/cordova-plugin-datepicker",
    "cordovaPlugin": {
      "name": "cordova-plugin-datepicker"
    }
  },
  {
    "name": "@ionic-native/db-meter",
    "displayName": "DB Meter",
    "description": "<p>This plugin defines a global DBMeter object, which permits to get the decibel values from the microphone.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { DBMeter } from '@ionic-native/db-meter/ngx';\n\nconstructor(private dbMeter: DBMeter) { }\n\n...\n\n\n// Start listening\nlet subscription = this.dbMeter.start().subscribe(\n  data => console.log(data)\n);\n\n// Check if we are listening\nthis.dbMeter.isListening().then(\n  isListening => console.log(isListening)\n);\n\n// Stop listening\nsubscription.unsubscribe();\n\n// Delete DBMeter instance from memory\nthis.dbMeter.delete().then(\n  () => console.log('Deleted DB Meter instance'),\n  error => console.log('Error occurred while deleting DB Meter instance')\n);\n```\n",
    "repo": "https://github.com/akofman/cordova-plugin-dbmeter",
    "cordovaPlugin": {
      "name": "cordova-plugin-dbmeter"
    }
  },
  {
    "name": "@ionic-native/deeplinks",
    "displayName": "Deeplinks",
    "description": "<p>This plugin handles deeplinks on iOS and Android for both custom URL scheme links and Universal App Links.</p>\n",
    "platforms": [
      "Android",
      "Browser",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { Deeplinks } from '@ionic-native/deeplinks/ngx';\n\nconstructor(private deeplinks: Deeplinks) { }\n\nthis.deeplinks.route({\n     '/about-us': AboutPage,\n     '/universal-links-test': AboutPage,\n     '/products/:productId': ProductPage\n   }).subscribe(match => {\n     // match.$route - the route we matched, which is the matched entry from the arguments to route()\n     // match.$args - the args passed in the link\n     // match.$link - the full link data\n     console.log('Successfully matched route', match);\n   }, nomatch => {\n     // nomatch.$link - the full link data\n     console.error('Got a deeplink that didn\\'t match', nomatch);\n   });\n```\n\nAlternatively, if you're using Ionic, there's a convenience method that takes a reference to a `NavController` and handles\nthe actual navigation for you:\n\n```typescript\nthis.deeplinks.routeWithNavController(this.navController, {\n  '/about-us': AboutPage,\n  '/products/:productId': ProductPage\n}).subscribe(match => {\n    // match.$route - the route we matched, which is the matched entry from the arguments to route()\n    // match.$args - the args passed in the link\n    // match.$link - the full link data\n    console.log('Successfully matched route', match);\n  }, nomatch => {\n    // nomatch.$link - the full link data\n    console.error('Got a deeplink that didn\\'t match', nomatch);\n  });\n```\n\nSee the [Ionic Deeplinks Demo](https://github.com/ionic-team/ionic2-deeplinks-demo/blob/master/app/app.ts) for an example of how to\nretrieve the `NavController` reference at runtime.\n",
    "repo": "https://github.com/ionic-team/ionic-plugin-deeplinks",
    "cordovaPlugin": {
      "name": "ionic-plugin-deeplinks"
    }
  },
  {
    "name": "@ionic-native/device-accounts",
    "displayName": "Device Accounts",
    "description": "<p>Gets the Google accounts associated with the Android device</p>\n",
    "platforms": [
      "Android"
    ],
    "usage": "\n```typescript\nimport { DeviceAccounts } from '@ionic-native/device-accounts/ngx';\n\nconstructor(private deviceAccounts: DeviceAccounts) { }\n\n...\n\nthis.deviceAccounts.get()\n  .then(accounts => console.log(accounts))\n  .catch(error => console.error(error));\n\n```",
    "repo": "https://github.com/danielsogl/cordova-device-accounts",
    "cordovaPlugin": {
      "name": "cordova-device-accounts"
    }
  },
  {
    "name": "@ionic-native/device-feedback",
    "displayName": "Device Feedback",
    "description": "<p>Plugin that lets you provide haptic or acoustic feedback on Android devices.</p>\n",
    "platforms": [
      "Android"
    ],
    "usage": "\n```typescript\nimport { DeviceFeedback } from '@ionic-native/device-feedback/ngx';\n\nconstructor(private deviceFeedback: DeviceFeedback) { }\n\n...\n\n\nthis.deviceFeedback.acoustic();\n\nthis.deviceFeedback.haptic(0);\n\nthis.deviceFeedback.isFeedbackEnabled().then(feedback => {\n    console.log(feedback);\n    // {\n    //   acoustic: true,\n    //   haptic: true\n    // }\n  });\n\n```",
    "repo": "https://github.com/VVelda/device-feedback",
    "cordovaPlugin": {
      "name": "cordova-plugin-velda-devicefeedback"
    }
  },
  {
    "name": "@ionic-native/device-motion",
    "displayName": "Device Motion",
    "description": "<p>Requires Cordova plugin: <code>cordova-plugin-device-motion</code>. For more info, please see the <a href=\"https://github.com/apache/cordova-plugin-device-motion\">Device Motion docs</a>.</p>\n",
    "platforms": [],
    "usage": "\n```typescript\nimport { DeviceMotion, DeviceMotionAccelerationData } from '@ionic-native/device-motion/ngx';\n\nconstructor(private deviceMotion: DeviceMotion) { }\n\n...\n\n// Get the device current acceleration\nthis.deviceMotion.getCurrentAcceleration().then(\n  (acceleration: DeviceMotionAccelerationData) => console.log(acceleration),\n  (error: any) => console.log(error)\n);\n\n// Watch device acceleration\nvar subscription = this.deviceMotion.watchAcceleration().subscribe((acceleration: DeviceMotionAccelerationData) => {\n  console.log(acceleration);\n});\n\n// Stop watch\nsubscription.unsubscribe();\n\n```",
    "repo": "https://github.com/apache/cordova-plugin-device-motion",
    "cordovaPlugin": {
      "name": "cordova-plugin-device-motion"
    }
  },
  {
    "name": "@ionic-native/device-orientation",
    "displayName": "Device Orientation",
    "description": "<p>Requires Cordova plugin: <code>cordova-plugin-device-orientation</code>. For more info, please see the <a href=\"https://github.com/apache/cordova-plugin-device-orientation\">Device Orientation docs</a>.</p>\n",
    "platforms": [],
    "usage": "\n```typescript\n// DeviceOrientationCompassHeading is an interface for compass\nimport { DeviceOrientation, DeviceOrientationCompassHeading } from '@ionic-native/device-orientation/ngx';\n\nconstructor(private deviceOrientation: DeviceOrientation) { }\n\n...\n\n// Get the device current compass heading\nthis.deviceOrientation.getCurrentHeading().then(\n  (data: DeviceOrientationCompassHeading) => console.log(data),\n  (error: any) => console.log(error)\n);\n\n// Watch the device compass heading change\nvar subscription = this.deviceOrientation.watchHeading().subscribe(\n  (data: DeviceOrientationCompassHeading) => console.log(data)\n);\n\n// Stop watching heading change\nsubscription.unsubscribe();\n```",
    "repo": "https://github.com/apache/cordova-plugin-device-orientation",
    "cordovaPlugin": {
      "name": "cordova-plugin-device-orientation"
    }
  },
  {
    "name": "@ionic-native/device",
    "displayName": "Device",
    "description": "<p>Access information about the underlying device and platform.</p>\n",
    "platforms": [
      "Android",
      "Browser",
      "iOS",
      "macOS",
      "Windows"
    ],
    "usage": "\n```typescript\nimport { Device } from '@ionic-native/device/ngx';\n\nconstructor(private device: Device) { }\n\n...\n\nconsole.log('Device UUID is: ' + this.device.uuid);\n```\n",
    "repo": "https://github.com/apache/cordova-plugin-device",
    "cordovaPlugin": {
      "name": "cordova-plugin-device"
    }
  },
  {
    "name": "@ionic-native/diagnostic",
    "displayName": "Diagnostic",
    "description": "<p>Checks whether device hardware features are enabled or available to the app, e.g. camera, GPS, wifi</p>\n",
    "platforms": [
      "Android",
      "iOS",
      "Windows"
    ],
    "usage": "\n```typescript\nimport { Diagnostic } from '@ionic-native/diagnostic/ngx';\n\nconstructor(private diagnostic: Diagnostic) { }\n\n...\n\nlet successCallback = (isAvailable) => { console.log('Is available? ' + isAvailable); }\nlet errorCallback = (e) => console.error(e);\n\nthis.diagnostic.isCameraAvailable().then(successCallback).catch(errorCallback);\n\nthis.diagnostic.isBluetoothAvailable().then(successCallback, errorCallback);\n\n\nthis.diagnostic.getBluetoothState()\n  .then((state) => {\n    if (state == this.diagnostic.bluetoothState.POWERED_ON){\n      // do something\n    } else {\n      // do something else\n    }\n  }).catch(e => console.error(e));\n\n```\n\n",
    "repo": "https://github.com/dpa99c/cordova-diagnostic-plugin",
    "cordovaPlugin": {
      "name": "cordova.plugins.diagnostic"
    }
  },
  {
    "name": "@ionic-native/dialogs",
    "displayName": "Dialogs",
    "description": "<p>This plugin gives you ability to access and customize the device native dialogs.</p>\n",
    "platforms": [
      "Amazon Fire OS",
      "Android",
      "Browser",
      "iOS",
      "Windows"
    ],
    "usage": "\n```typescript\nimport { Dialogs } from '@ionic-native/dialogs/ngx';\n\nconstructor(private dialogs: Dialogs) { }\n\n...\n\nthis.dialogs.alert('Hello world')\n  .then(() => console.log('Dialog dismissed'))\n  .catch(e => console.log('Error displaying dialog', e));\n\n\n```",
    "repo": "https://github.com/apache/cordova-plugin-dialogs",
    "cordovaPlugin": {
      "name": "cordova-plugin-dialogs"
    }
  },
  {
    "name": "@ionic-native/dns",
    "displayName": "DNS",
    "description": "<p>A plugin for Apache Cordova that enables applications to manually resolve hostnames into an underlying network address. This is mostly useful for determining whether there is a problem with the device&#39;s DNS server configuration.</p>\n",
    "platforms": [
      "Android"
    ],
    "usage": "\n```typescript\nimport { DNS } from '@ionic-native/dns/ngx';\n\n\nconstructor(private dns: DNS) { }\n\n...\nthis.dns.resolve(hostname)\n  .then(\n    address => console.log('Resolved ' + hostname + ' to ' + address),\n    error => console.log('Failed to resolve ' + hostname + ': ' + error)\n  );\n\n```\n",
    "repo": "https://bitbucket.org/zegeba/cordova-plugin-dns",
    "cordovaPlugin": {
      "name": "cordova-plugin-dns"
    }
  },
  {
    "name": "@ionic-native/document-picker",
    "displayName": "iOS DocumentPicker",
    "description": "<p>Opens the file picker on iOS for the user to select a file, returns a file URI. Allows the user to upload files from iCloud</p>\n",
    "platforms": [
      "iOS"
    ],
    "usage": "\n```typescript\nimport { DocumentPicker } from '@ionic-native/document-picker/ngx';\n\nconstructor(private docPicker: DocumentPicker) { }\n\n...\n\nthis.docPicker.getFile('all')\n  .then(uri => console.log(uri))\n  .catch(e => console.log(e));\n\n```\n",
    "repo": "https://github.com/iampossible/Cordova-DocPicker",
    "cordovaPlugin": {
      "name": "cordova-plugin-documentpicker.DocumentPicker"
    }
  },
  {
    "name": "@ionic-native/document-viewer",
    "displayName": "Document Viewer",
    "description": "<p>This plugin offers a slim API to view PDF files which are either stored in the apps assets folder (/www/*) or in any other file system directory available via the cordova file plugin.</p>\n",
    "platforms": [
      "Android",
      "iOS",
      "Windows"
    ],
    "usage": "\n```typescript\nimport { DocumentViewer } from '@ionic-native/document-viewer/ngx';\n\n\nconstructor(private document: DocumentViewer) { }\n\n...\nconst options: DocumentViewerOptions = {\n  title: 'My PDF'\n}\n\nthis.document.viewDocument('assets/myFile.pdf', 'application/pdf', options)\n\n```\n",
    "repo": "https://github.com/sitewaerts/cordova-plugin-document-viewer",
    "cordovaPlugin": {
      "name": "cordova-plugin-document-viewer"
    }
  },
  {
    "name": "@ionic-native/downloader",
    "displayName": "Downloader",
    "description": "<p>This plugin is designed to support downloading files using Android DownloadManager.</p>\n",
    "platforms": [
      "Android"
    ],
    "usage": "\n```typescript\nimport { Downloader } from '@ionic-native/downloader/ngx';\n\n\nconstructor(private downloader: Downloader) { }\n\n...\n\n   var request: DownloadRequest = {\n          uri: YOUR_URI,\n          title: 'MyDownload',\n          description: '',\n          mimeType: '',\n          visibleInDownloadsUi: true,\n          notificationVisibility: NotificationVisibility.VisibleNotifyCompleted,\n          destinationInExternalFilesDir: {\n              dirType: 'Downloads',\n              subPath: 'MyFile.apk'\n          }\n      };\n\n\n  this.downloader.download(request)\n  \t\t\t.then((location: string) => console.log('File downloaded at:'+location))\n  \t\t\t.catch((error: any) => console.error(error));\n\n```",
    "repo": "https://github.com/Luka313/integrator-cordova-plugin-downloader.git",
    "cordovaPlugin": {
      "name": "integrator-cordova-plugin-downloader"
    }
  },
  {
    "name": "@ionic-native/email-composer",
    "displayName": "Email Composer",
    "description": "<p>Requires Cordova plugin: cordova-plugin-email-composer. For more info, please see the <a href=\"https://github.com/hypery2k/cordova-email-plugin\">Email Composer plugin docs</a>.</p>\n",
    "platforms": [
      "Amazon Fire OS",
      "Android",
      "Browser",
      "iOS",
      "Windows",
      "macOS"
    ],
    "usage": "\n```typescript\nimport { EmailComposer } from '@ionic-native/email-composer/ngx';\n\nconstructor(private emailComposer: EmailComposer) { }\n\n...\n\n\nthis.emailComposer.isAvailable().then((available: boolean) =>{\n if(available) {\n   //Now we know we can send\n }\n});\n\nlet email = {\n  to: 'max@mustermann.de',\n  cc: 'erika@mustermann.de',\n  bcc: ['john@doe.com', 'jane@doe.com'],\n  attachments: [\n    'file://img/logo.png',\n    'res://icon.png',\n    'base64:icon.png//iVBORw0KGgoAAAANSUhEUg...',\n    'file://README.pdf'\n  ],\n  subject: 'Cordova Icons',\n  body: 'How are you? Nice greetings from Leipzig',\n  isHtml: true\n}\n\n// Send a text message using default options\nthis.emailComposer.open(email);\n```\n\nYou can also assign aliases to email apps\n```ts\n// add alias\nthis.email.addAlias('gmail', 'com.google.android.gm');\n\n// then use alias when sending email\nthis.email.open({\n  app: 'gmail',\n  ...\n});\n```",
    "repo": "https://github.com/katzer/cordova-plugin-email-composer",
    "cordovaPlugin": {
      "name": "cordova-plugin-email-composer"
    }
  },
  {
    "name": "@ionic-native/estimote-beacons",
    "displayName": "Estimote Beacons\n",
    "description": "<p>This plugin enables communication between a phone and Estimote Beacons peripherals.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { EstimoteBeacons } from '@ionic-native/estimote-beacons/ngx';\n\nconstructor(private eb: EstimoteBeacons) { }\n\n...\n\nthis.eb.requestAlwaysAuthorization();\n\nthis.eb.enableAnalytics(true);\n\n```\n",
    "repo": "https://github.com/evothings/phonegap-estimotebeacons",
    "cordovaPlugin": {
      "name": "cordova-plugin-estimote"
    }
  },
  {
    "name": "@ionic-native/extended-device-information",
    "displayName": "Extended Device Information",
    "description": "<p>Retrieves additional device information from the Device Hardware  - memory  - cpumhz  - totalstorage  - freestorage</p>\n",
    "platforms": [
      "Android"
    ],
    "usage": "\n```typescript\nimport { ExtendedDeviceInformation } from '@ionic-native/extended-device-information/ngx';\n\n\nconstructor(private extendedDeviceInformation: ExtendedDeviceInformation) { }\n\n...\n\nconsole.log('The Memory is: ' + this.extendedDeviceInformation.memory);\n```\n",
    "repo": null,
    "cordovaPlugin": {
      "name": "cordova-plugin-extended-device-information"
    }
  },
  {
    "name": "@ionic-native/fabric",
    "displayName": "Answers",
    "description": "<p>API for interacting with the Answers kit.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { Answers } from '@ionic-native/fabric/ngx';\n\n\nconstructor(private answers: Answers) { }\n\n...\n\nthis.answers.sendCustomEvent('SomeCustomEvent', { some: \"attributes\" })\n\n```\n",
    "repo": "https://www.npmjs.com/package/cordova-fabric-plugin",
    "cordovaPlugin": {
      "name": "cordova-fabric-plugin"
    }
  },
  {
    "name": "@ionic-native/fabric",
    "displayName": "Crashlytics",
    "description": "<p>API for interacting with the Crashlytics kit.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { Crashlytics } from '@ionic-native/fabric/ngx';\n\n\nconstructor(private crashlytics: Crashlytics) { }\n\n...\n\ntry {\n await this.loadData();\n} catch (e) {\n this.crashlytics.addLog(\"Error while loading data\");\n this.crashlytics.sendNonFatalCrash(e.message || e);\n}\n\n```\n",
    "repo": "https://www.npmjs.com/package/cordova-fabric-plugin",
    "cordovaPlugin": {
      "name": "cordova-fabric-plugin"
    }
  },
  {
    "name": "@ionic-native/facebook",
    "displayName": "Facebook",
    "description": "<p>Use the Facebook Connect plugin to obtain access to the native FB application on iOS and Android.</p>\n",
    "platforms": [
      "Android",
      "iOS",
      "Browser"
    ],
    "usage": "\n```typescript\nimport { Facebook, FacebookLoginResponse } from '@ionic-native/facebook/ngx';\n\nconstructor(private fb: Facebook) { }\n\n...\n\nthis.fb.login(['public_profile', 'user_friends', 'email'])\n  .then((res: FacebookLoginResponse) => console.log('Logged into Facebook!', res))\n  .catch(e => console.log('Error logging into Facebook', e));\n\n\nthis.fb.logEvent(this.fb.EVENTS.EVENT_NAME_ADDED_TO_CART);\n\n```\n\n",
    "repo": "https://github.com/jeduan/cordova-plugin-facebook4",
    "cordovaPlugin": {
      "name": "cordova-plugin-facebook4"
    }
  },
  {
    "name": "@ionic-native/fcm",
    "displayName": "FCM",
    "description": "<p>Provides basic functionality for Firebase Cloud Messaging</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { FCM } from '@ionic-native/fcm/ngx';\n\nconstructor(private fcm: FCM) {}\n\n...\n\nthis.fcm.subscribeToTopic('marketing');\n\nthis.fcm.getToken().then(token => {\n  backend.registerToken(token);\n});\n\nthis.fcm.onNotification().subscribe(data => {\n  if(data.wasTapped){\n    console.log(\"Received in background\");\n  } else {\n    console.log(\"Received in foreground\");\n  };\n});\n\nthis.fcm.onTokenRefresh().subscribe(token => {\n  backend.registerToken(token);\n});\n\nthis.fcm.unsubscribeFromTopic('marketing');\n\n```",
    "repo": "https://github.com/andrehtissot/cordova-plugin-fcm-with-dependecy-updated",
    "cordovaPlugin": {
      "name": "cordova-plugin-fcm-with-dependecy-updated"
    }
  },
  {
    "name": "@ionic-native/file-chooser",
    "displayName": "File Chooser",
    "description": "<p>Opens the file picker on Android for the user to select a file, returns a file URI.</p>\n",
    "platforms": [
      "Android"
    ],
    "usage": "\n```typescript\nimport { FileChooser } from '@ionic-native/file-chooser/ngx';\n\nconstructor(private fileChooser: FileChooser) { }\n\n...\n\nthis.fileChooser.open()\n  .then(uri => console.log(uri))\n  .catch(e => console.log(e));\n\n```\n",
    "repo": "https://github.com/ihadeed/cordova-filechooser",
    "cordovaPlugin": {
      "name": "cordova-plugin-filechooser"
    }
  },
  {
    "name": "@ionic-native/file-encryption",
    "displayName": "File Encryption",
    "description": "<p>Simple file encryption for Cordova.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { FileEncryption } from '@ionic-native/file-encryption/ngx';\n\n\nconstructor(private fileEncryption: FileEncryption) { }\n\n...\n\nthis.fileEncryption.decrypt('assets/json/topSecret.json', 'secretKey');\n\nthis.fileEncryption.encrypt('assets/json/topSecret.json', 'secretKey');\n\n```\n",
    "repo": "https://github.com/disusered/cordova-safe",
    "cordovaPlugin": {
      "name": "cordova-safe"
    }
  },
  {
    "name": "@ionic-native/file-opener",
    "displayName": "File Opener",
    "description": "<p>This plugin will open a file on your device file system with its default application.</p>\n",
    "platforms": [
      "Android",
      "iOS",
      "Windows",
      "Windows Phone 8"
    ],
    "usage": "\n```typescript\nimport { FileOpener } from '@ionic-native/file-opener/ngx';\n\nconstructor(private fileOpener: FileOpener) { }\n\n...\n\nthis.fileOpener.open('path/to/file.pdf', 'application/pdf')\n  .then(() => console.log('File is opened'))\n  .catch(e => console.log('Error opening file', e));\n\n```\n",
    "repo": "https://github.com/pwlin/cordova-plugin-file-opener2",
    "cordovaPlugin": {
      "name": "cordova-plugin-file-opener2"
    }
  },
  {
    "name": "@ionic-native/file-path",
    "displayName": "File Path",
    "description": "<p>This plugin allows you to resolve the native filesystem path for Android content URIs and is based on code in the aFileChooser library.</p>\n",
    "platforms": [
      "Android"
    ],
    "usage": "\n```typescript\nimport { FilePath } from '@ionic-native/file-path/ngx';\n\nconstructor(private filePath: FilePath) { }\n\n...\n\nthis.filePath.resolveNativePath(path)\n  .then(filePath => console.log(filePath))\n  .catch(err => console.log(err));\n\n```\n",
    "repo": "https://github.com/hiddentao/cordova-plugin-filepath",
    "cordovaPlugin": {
      "name": "cordova-plugin-filepath"
    }
  },
  {
    "name": "@ionic-native/file-picker",
    "displayName": "iOS File Picker",
    "description": "<p>Opens the file picker on iOS for the user to select a file, returns a file URI.</p>\n",
    "platforms": [
      "iOS"
    ],
    "usage": "\n```typescript\nimport { IOSFilePicker } from '@ionic-native/file-picker/ngx';\n\nconstructor(private filePicker: IOSFilePicker) { }\n\n...\n\nthis.filePicker.pickFile()\n  .then(uri => console.log(uri))\n  .catch(err => console.log('Error', err));\n\n```",
    "repo": "https://github.com/jcesarmobile/FilePicker-Phonegap-iOS-Plugin",
    "cordovaPlugin": {
      "name": "cordova-plugin-filepicker"
    }
  },
  {
    "name": "@ionic-native/file-transfer",
    "displayName": "File Transfer\n",
    "description": "<p>This plugin allows you to upload and download files.</p>\n",
    "platforms": [],
    "usage": "\n```typescript\nimport { FileTransfer, FileUploadOptions, FileTransferObject } from '@ionic-native/file-transfer/ngx';\nimport { File } from '@ionic-native/file';\n\nconstructor(private transfer: FileTransfer, private file: File) { }\n\n...\n\nconst fileTransfer: FileTransferObject = this.transfer.create();\n\n// Upload a file:\nfileTransfer.upload(..).then(..).catch(..);\n\n// Download a file:\nfileTransfer.download(..).then(..).catch(..);\n\n// Abort active transfer:\nfileTransfer.abort();\n\n// full example\nupload() {\n  let options: FileUploadOptions = {\n     fileKey: 'file',\n     fileName: 'name.jpg',\n     headers: {}\n     .....\n  }\n\n  fileTransfer.upload('<file path>', '<api endpoint>', options)\n   .then((data) => {\n     // success\n   }, (err) => {\n     // error\n   })\n}\n\ndownload() {\n  const url = 'http://www.example.com/file.pdf';\n  fileTransfer.download(url, this.file.dataDirectory + 'file.pdf').then((entry) => {\n    console.log('download complete: ' + entry.toURL());\n  }, (error) => {\n    // handle error\n  });\n}\n\n```\n\nTo store files in a different/publicly accessible directory, please refer to the following link\nhttps://github.com/apache/cordova-plugin-file#where-to-store-files\n",
    "repo": "https://github.com/apache/cordova-plugin-file-transfer",
    "cordovaPlugin": {
      "name": "cordova-plugin-file-transfer"
    }
  },
  {
    "name": "@ionic-native/file",
    "displayName": "File",
    "description": "<p>This plugin implements a File API allowing read/write access to files residing on the device.</p>\n",
    "platforms": [
      "Android",
      "Browser",
      "iOS",
      "macOS",
      "Windows"
    ],
    "usage": null,
    "repo": "https://github.com/apache/cordova-plugin-file",
    "cordovaPlugin": {
      "name": "cordova-plugin-file"
    }
  },
  {
    "name": "@ionic-native/fingerprint-aio",
    "displayName": "Fingerprint AIO",
    "description": "<p>Use simple fingerprint authentication on Android and iOS. Requires Cordova plugin: cordova-plugin-fingerprint-aio. For more info about plugin, vist: <a href=\"https://github.com/NiklasMerz/cordova-plugin-fingerprint-aio\">https://github.com/NiklasMerz/cordova-plugin-fingerprint-aio</a></p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { FingerprintAIO } from '@ionic-native/fingerprint-aio/ngx';\n\nconstructor(private faio: FingerprintAIO) { }\n\n...\n\nthis.faio.show({\n    clientId: 'Fingerprint-Demo',\n    clientSecret: 'password', //Only necessary for Android\n    disableBackup:true,  //Only for Android(optional)\n    localizedFallbackTitle: 'Use Pin', //Only for iOS\n    localizedReason: 'Please authenticate' //Only for iOS\n})\n.then((result: any) => console.log(result))\n.catch((error: any) => console.log(error));\n\n```",
    "repo": "https://github.com/NiklasMerz/cordova-plugin-fingerprint-aio",
    "cordovaPlugin": {
      "name": "cordova-plugin-fingerprint-aio"
    }
  },
  {
    "name": "@ionic-native/firebase-analytics",
    "displayName": "Firebase Analytics",
    "description": "<p>Cordova plugin for Firebase Analytics</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { FirebaseAnalytics } from '@ionic-native/firebase-analytics/ngx';\n\n\nconstructor(private firebaseAnalytics: FirebaseAnalytics) { }\n\n...\n\nthis.firebaseAnalytics.logEvent('page_view', {page: \"dashboard\"})\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n\n```\n",
    "repo": "https://github.com/chemerisuk/cordova-plugin-firebase-analytics",
    "cordovaPlugin": {
      "name": "cordova-plugin-firebase-analytics"
    }
  },
  {
    "name": "@ionic-native/firebase-authentication",
    "displayName": "Firebase Authentication",
    "description": "<p>Cordova plugin for Firebase Authentication</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { FirebaseAuthentication } from '@ionic-native/firebase-authentication/ngx';\n\n\nconstructor(private firebaseAuthentication: FirebaseAuthentication) { }\n\n...\n\n\nthis.firebaseAuthentication.createUserWithEmailAndPassword('test@gmail.com', '123')\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n\n```\n",
    "repo": "https://github.com/chemerisuk/cordova-plugin-firebase-authentication",
    "cordovaPlugin": {
      "name": "cordova-plugin-firebase-authentication"
    }
  },
  {
    "name": "@ionic-native/firebase-config",
    "displayName": "Firebase Config",
    "description": "<p>Cordova plugin for Firebase Config</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { FirebaseConfig } from '@ionic-native/firebase-config/ngx';\n\n\nconstructor(private firebaseConfig: FirebaseConfig) { }\n\n...\n\n\nthis.firebaseConfig.getBoolean('my_key')\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n\n```\n",
    "repo": "https://github.com/chemerisuk/cordova-plugin-firebase-config",
    "cordovaPlugin": {
      "name": "cordova-plugin-firebase-config"
    }
  },
  {
    "name": "@ionic-native/firebase-dynamic-links",
    "displayName": "Firebase Dynamic Links",
    "description": "<p>Cordova plugin for Firebase Dynamic Links</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { FirebaseDynamicLinks } from '@ionic-native/firebase-dynamic-links/ngx';\n\n\nconstructor(private firebaseDynamicLinks: FirebaseDynamicLinks) { }\n\n...\n// Handle the logic here after opening the app with the Dynamic link\nthis.firebaseDynamicLinks.onDynamicLink()\n  .subscribe((res: any) => console.log(res), (error:any) => console.log(error));\n```\n",
    "repo": "https://github.com/chemerisuk/cordova-plugin-firebase-dynamiclinks",
    "cordovaPlugin": {
      "name": " cordova-plugin-firebase-dynamiclinks"
    }
  },
  {
    "name": "@ionic-native/firebase-messaging",
    "displayName": "Firebase Messaging",
    "description": "<p>Cordova plugin for Firebase Messaging</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { FirebaseMessaging } from '@ionic-native/firebase-messaging/ngx';\n\n\nconstructor(private firebaseMessaging: FirebaseMessaging) { }\n\n...\n\n\nthis.firebaseMessaging.logEvent('page_view', {page: \"dashboard\"})\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n\n```",
    "repo": "https://github.com/chemerisuk/cordova-plugin-firebase-messaging",
    "cordovaPlugin": {
      "name": "cordova-plugin-firebase-messaging"
    }
  },
  {
    "name": "@ionic-native/firebase",
    "displayName": "Firebase",
    "description": "<p>This plugin brings push notifications, analytics, event tracking, crash reporting and more from Google Firebase to your Cordova project! Android and iOS supported (including iOS 10).</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { Firebase } from '@ionic-native/firebase/ngx';\n\nconstructor(private firebase: Firebase) { }\n\n...\n\nthis.firebase.getToken()\n  .then(token => console.log(`The token is ${token}`)) // save the token server-side and use it to push notifications to this device\n  .catch(error => console.error('Error getting token', error));\n\nthis.firebase.onNotificationOpen()\n   .subscribe(data => console.log(`User opened a notification ${data}`));\n\nthis.firebase.onTokenRefresh()\n  .subscribe((token: string) => console.log(`Got a new token ${token}`));\n\n```\n",
    "repo": "https://github.com/arnesson/cordova-plugin-firebase",
    "cordovaPlugin": {
      "name": "cordova-plugin-firebase"
    }
  },
  {
    "name": "@ionic-native/flashlight",
    "displayName": "Flashlight",
    "description": "<p>This plugin allows you to switch the flashlight / torch of the device on and off.</p>\n",
    "platforms": [
      "Android",
      "iOS",
      "Windows Phone 8"
    ],
    "usage": "\n```typescript\nimport { Flashlight } from '@ionic-native/flashlight/ngx';\n\nconstructor(private flashlight: Flashlight) { }\n\n...\n\nthis.flashlight.switchOn();\n\n```\n",
    "repo": "https://github.com/EddyVerbruggen/Flashlight-PhoneGap-Plugin",
    "cordovaPlugin": {
      "name": "cordova-plugin-flashlight"
    }
  },
  {
    "name": "@ionic-native/flurry-analytics",
    "displayName": "Flurry Analytics",
    "description": "<p>This plugin connects to Flurry Analytics SDK</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { FlurryAnalytics, FlurryAnalyticsObject, FlurryAnalyticsOptions } from '@ionic-native/flurry-analytics/ngx';\n\nconstructor(private flurryAnalytics: FlurryAnalytics) { }\n\n...\n\nconst options: FlurryAnalyticsOptions = {\n appKey: '<your app key>', // REQUIRED\n reportSessionsOnClose: true,\n enableLogging: true\n}\n\nlet fa: FlurryAnalyticsObject = this.flurryAnalytics.create(options);\n\nfa.logEvent('event name')\n  .then(() => console.log('Logged an event!'))\n  .catch(e => console.log('Error logging the event', e));\n\n```",
    "repo": "https://github.com/blakgeek/cordova-plugin-flurryanalytics",
    "cordovaPlugin": {
      "name": "cordova-plugin-flurryanalytics"
    }
  },
  {
    "name": "@ionic-native/ftp",
    "displayName": "FTP",
    "description": "<p>This cordova plugin is created to use ftp (client) in web/js.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { FTP } from '@ionic-native/ftp/ngx';\n\n\nconstructor(private fTP: FTP) { }\n\n...\n\n\nthis.fTP.connect('ftp_host', 'ftp_user', 'ftp_password')\n  .then((res: any) => console.log('Login successful', res))\n  .catch((error: any) => console.error(error));\n\n```\n",
    "repo": "https://github.com/xfally/cordova-plugin-ftp",
    "cordovaPlugin": {
      "name": "cordova-plugin-ftp"
    }
  },
  {
    "name": "@ionic-native/gao-de-location",
    "displayName": "Gao De Location",
    "description": "<p>Because the original GPS positioning uses Google Browser positioning, and Google withdraws from China, resulting in GPS Android positioning can not be positioned. Gaode location can directly return address informationGaode location can directly return address information</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { GaoDeLocation } from '@ionic-native/gao-de-location/ngx';\n\n\nconstructor(private gaoDeLocation: GaoDeLocation) { }\n\nthis.gaoDeLocation.getCurrentPosition()\n.then((res: PositionOptions) => console.log(res))\n.catch((error) => console.error(error));\n\n```\n",
    "repo": "https://github.com/waliu/cordova-plugin-gaodelocation-chenyu.git",
    "cordovaPlugin": {
      "name": "cordova-plugin-gaodelocation-chenyu"
    }
  },
  {
    "name": "@ionic-native/geofence",
    "displayName": "Geofence",
    "description": "<p>Monitors circular geofences around latitude/longitude coordinates, and sends a notification to the user when the boundary of a geofence is crossed. Notifications can be sent when the user enters and/or exits a geofence. Geofences persist after device reboot. Geofences will be monitored even when the app is not running.</p>\n",
    "platforms": [
      "Android",
      "iOS",
      "Windows",
      "Windows Phone 8"
    ],
    "usage": "\n```typescript\nimport { Geofence } from '@ionic-native/geofence/ngx';\n\n...\n\nconstructor(private geofence: Geofence) {\n  // initialize the plugin\n  geofence.initialize().then(\n    // resolved promise does not return a value\n    () => console.log('Geofence Plugin Ready'),\n    (err) => console.log(err)\n  )\n}\n\n...\n\nprivate addGeofence() {\n  //options describing geofence\n  let fence = {\n    id: '69ca1b88-6fbe-4e80-a4d4-ff4d3748acdb', //any unique ID\n    latitude:       37.285951, //center of geofence radius\n    longitude:      -121.936650,\n    radius:         100, //radius to edge of geofence in meters\n    transitionType: 3, //see 'Transition Types' below\n    notification: { //notification settings\n        id:             1, //any unique ID\n        title:          'You crossed a fence', //notification title\n        text:           'You just arrived to Gliwice city center.', //notification body\n        openAppOnClick: true //open app when notification is tapped\n    }\n  }\n\n  this.geofence.addOrUpdate(fence).then(\n     () => console.log('Geofence added'),\n     (err) => console.log('Geofence failed to add')\n   );\n}\n\n```\n### Transition Types ###\nTransition type specifies whether the geofence should trigger when the user enters and/or leaves the geofence.\n\n#### Supported values ####\n- 1: Enter\n- 2: Leave\n- 3: Both\n\n### Defining a Geofence ###\nGeofences are defined by an object that is passed to `addOrUpdate()`. Object properties are:\n- id: Any unique ID for the geofence. This ID is used to remove and update a geofence\n- latitude: Latitude coordinate of the center of the geofence radius\n- longitude: Latitude coordinate of the center of the geofence radius\n- radius: Radius from the center to the edge of the geofence\n- transitionType: Type of geofence transition to monitor for. See 'Transition Types' above\n- notification: Object. Options for defining the notification sent when a geofence is crossed\n  - id: Any unique ID\n  - title: Notification title\n  - text: Notification body\n  - openAppOnClick: Boolean. Whether to open the app when the notification is tapped by the user\n\n### Troubleshooting ###\n#### I get compile errors when I run `ionic build ios` or `ionic run ios`. ####\nThis could be caused by the Cordova project directory in `/platforms/ios` not being named correctly.\nTry running `ionic cordova platform rm <platform>` then run `ionic cordova platform add <platform>` to recreate the\nplatform directories.\n",
    "repo": "https://github.com/cowbell/cordova-plugin-geofence",
    "cordovaPlugin": {
      "name": "cordova-plugin-geofence"
    }
  },
  {
    "name": "@ionic-native/geolocation",
    "displayName": "Geolocation",
    "description": "<p>This plugin provides information about the device&#39;s location, such as latitude and longitude. Common sources of location information include Global Positioning System (GPS) and location inferred from network signals such as IP address, RFID, WiFi and Bluetooth MAC addresses, and GSM/CDMA cell IDs.</p>\n",
    "platforms": [
      "Amazon Fire OS",
      "Android",
      "Browser",
      "iOS",
      "Windows"
    ],
    "usage": "\n\n```typescript\nimport { Geolocation } from '@ionic-native/geolocation/ngx';\n\n...\n\nconstructor(private geolocation: Geolocation) {}\n\n...\n\nthis.geolocation.getCurrentPosition().then((resp) => {\n // resp.coords.latitude\n // resp.coords.longitude\n}).catch((error) => {\n  console.log('Error getting location', error);\n});\n\nlet watch = this.geolocation.watchPosition();\nwatch.subscribe((data) => {\n // data can be a set of coordinates, or an error (if an error occurred).\n // data.coords.latitude\n // data.coords.longitude\n});\n```",
    "repo": "https://github.com/apache/cordova-plugin-geolocation",
    "cordovaPlugin": {
      "name": "cordova-plugin-geolocation"
    }
  },
  {
    "name": "@ionic-native/globalization",
    "displayName": "Globalization",
    "description": "<p>This plugin obtains information and performs operations specific to the user&#39;s locale, language, and timezone.</p>\n",
    "platforms": [
      "Amazon Fire OS",
      "Android",
      "Browser",
      "iOS",
      "Windows"
    ],
    "usage": "\n```typescript\nimport { Globalization } from '@ionic-native/globalization/ngx';\n\nconstructor(private globalization: Globalization) { }\n\n\n...\n\n\nthis.globalization.getPreferredLanguage()\n  .then(res => console.log(res))\n  .catch(e => console.log(e));\n\n\n```",
    "repo": "https://github.com/apache/cordova-plugin-globalization",
    "cordovaPlugin": {
      "name": "cordova-plugin-globalization"
    }
  },
  {
    "name": "@ionic-native/google-analytics",
    "displayName": "Google Analytics",
    "description": "<p>This plugin connects to Google&#39;s native Universal Analytics SDK Prerequisites: - A Cordova 3.0+ project for iOS and/or Android - A Mobile App property through the Google Analytics Admin Console - (Android) Google Play Services SDK installed via <a href=\"https://developer.android.com/sdk/installing/adding-packages.html\">Android SDK Manager</a></p>\n",
    "platforms": [
      "Android",
      "Browser",
      "iOS",
      "Windows Phone 8"
    ],
    "usage": "\n```typescript\nimport { GoogleAnalytics } from '@ionic-native/google-analytics/ngx';\n\nconstructor(private ga: GoogleAnalytics) { }\n\n...\n\nthis.ga.startTrackerWithId('YOUR_TRACKER_ID')\n   .then(() => {\n     console.log('Google analytics is ready now');\n      this.ga.trackView('test');\n     // Tracker is ready\n     // You can now track pages or set additional information such as AppVersion or UserId\n   })\n   .catch(e => console.log('Error starting GoogleAnalytics', e));\n\n\n```\n",
    "repo": "https://github.com/danwilson/google-analytics-plugin",
    "cordovaPlugin": {
      "name": "cordova-plugin-google-analytics"
    }
  },
  {
    "name": "@ionic-native/google-nearby",
    "displayName": "Google Nearby",
    "description": "<p>This plugin adds support for the Google Nearby Messages API.</p>\n",
    "platforms": [
      "Android"
    ],
    "usage": "\n```typescript\nimport { GoogleNearby } from '@ionic-native/google-nearby/ngx';\n\n\nconstructor(private googleNearby: GoogleNearby) { }\n\nthis.googleNearby.publish('Hello')\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n\nthis.googleNearby.subscribe()\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n```\n",
    "repo": "https://github.com/hahahannes/cordova-plugin-google-nearby",
    "cordovaPlugin": {
      "name": "cordova-plugin-google-nearby"
    }
  },
  {
    "name": "@ionic-native/google-play-games-services",
    "displayName": "Google Play Games Services",
    "description": "<p>A Cordova plugin that let&#39;s you interact with Google Play Games Services.</p>\n",
    "platforms": [
      "Android"
    ],
    "usage": "\n```typescript\nimport { GooglePlayGamesServices } from '@ionic-native/google-play-games-services/ngx';\n\n\nconstructor(private googlePlayGamesServices: GooglePlayGamesServices) { }\n\n...\n\n// Authenticate with Play Games Services\nthis.googlePlayGamesServices.auth()\n    .then(() => console.log('Logged in to Play Games Services'))\n    .catch(e) => console.log('Error logging in Play Games Services', e);\n\n// Sign out of Play Games Services.\nthis.googlePlayGamesServices.signOut()\n    .then(() => console.log('Logged out of Play Games Services'))\n    .catch(e => console.log('Error logging out of Play Games Services', e);\n\n// Check auth status.\nthis.googlePlayGamesServices.isSignedIn()\n    .then((signedIn: SignedInResponse) => {\n        if (signedIn.isSignedIn) {\n            hideLoginButton();\n        }\n    });\n\n// Fetch currently authenticated user's data.\nthis.googlePlayGamesServices.showPlayer().then((data: Player) => {\n   console.log('Player data', data);\n});\n\n// Submit a score.\nthis.googlePlayGamesServices.submitScore({\n    score: 100,\n    leaderboardId: 'SomeLeaderboardId'\n});\n\n// Show the native leaderboards window.\nthis.googlePlayGamesServices.showAllLeaderboards()\n    .then(() => console.log('The leaderboard window is visible.'));\n\n// Show a signle native leaderboard window.\nthis.googlePlayGamesServices.showLeaderboard({\n    leaderboardId: 'SomeLeaderBoardId'\n}).then(() => console.log('The leaderboard window is visible.'));\n\n// Unlock an achievement.\nthis.googlePlayGamesServices.unlockAchievement({\n    achievementId: 'SomeAchievementId'\n}).then(() => console.log('Achievement unlocked'));\n\n// Incremement an achievement.\nthis.googlePlayGamesServices.incrementAchievement({\n    step: 1,\n    achievementId: 'SomeAchievementId'\n}).then(() => console.log('Achievement incremented'));\n\n// Show the native achievements window.\nthis.googlePlayGamesServices.showAchivements()\n   .then(() => console.log('The achievements window is visible.'));\n\n```\n",
    "repo": "https://github.com/artberri/cordova-plugin-play-games-services",
    "cordovaPlugin": {
      "name": "cordova-plugin-play-games-service"
    }
  },
  {
    "name": "@ionic-native/google-plus",
    "displayName": "Google Plus",
    "description": "",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { GooglePlus } from '@ionic-native/google-plus/ngx';\n\nconstructor(private googlePlus: GooglePlus) { }\n\n...\n\nthis.googlePlus.login({})\n  .then(res => console.log(res))\n  .catch(err => console.error(err));\n\n```\n",
    "repo": "https://github.com/EddyVerbruggen/cordova-plugin-googleplus",
    "cordovaPlugin": {
      "name": "cordova-plugin-googleplus"
    }
  },
  {
    "name": "@ionic-native/gyroscope",
    "displayName": "Gyroscope",
    "description": "<p>Read Gyroscope sensor data</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { Gyroscope, GyroscopeOrientation, GyroscopeOptions } from '@ionic-native/gyroscope/ngx';\n\n\nconstructor(private gyroscope: Gyroscope) { }\n\n...\n\n\nlet options: GyroscopeOptions = {\n   frequency: 1000\n}\n\nthis.gyroscope.getCurrent(options)\n  .then((orientation: GyroscopeOrientation) => {\n     console.log(orientation.x, orientation.y, orientation.z, orientation.timestamp);\n   })\n  .catch()\n\n\nthis.gyroscope.watch()\n   .subscribe((orientation: GyroscopeOrientation) => {\n      console.log(orientation.x, orientation.y, orientation.z, orientation.timestamp);\n   });\n\n```",
    "repo": "https://github.com/NeoLSN/cordova-plugin-gyroscope",
    "cordovaPlugin": {
      "name": "cordova-plugin-gyroscope"
    }
  },
  {
    "name": "@ionic-native/hce",
    "displayName": "hce",
    "description": "<p>HCE Cordova Wrapper</p>\n",
    "platforms": [
      "Android"
    ],
    "usage": "\n```typescript\nimport { hce } from '@ionic-native/hce/ngx';\n\n\nconstructor(private hce: hce) { }\n\n...\n\nfunction onCommand(command){\n  var commandAsBytes = new Uint8Array(command);\n  var commandAsString = hce.util.byteArrayToHexString(commandAsBytes);\n\n  // do something with the command\n\n  // send the response\n  hce.sendReponse(commandResponse);\n}\nthis.hce.registerCommandCallback().then(onCommand);\n\n```\n",
    "repo": "https://github.com/don/cordova-plugin-hce",
    "cordovaPlugin": {
      "name": "cordova-plugin-hce"
    }
  },
  {
    "name": "@ionic-native/header-color",
    "displayName": "Header Color",
    "description": "<p>Cordova plugin to change color of header in Android Multitask View</p>\n",
    "platforms": [
      "Android"
    ],
    "usage": "\n```typescript\nimport { HeaderColor } from '@ionic-native/header-color/ngx';\n\nconstructor(private headerColor: HeaderColor) { }\n\n...\n\nthis.headerColor.tint('#becb29');\n```\n",
    "repo": "https://github.com/tomloprod/cordova-plugin-headercolor",
    "cordovaPlugin": {
      "name": "cordova-plugin-headercolor"
    }
  },
  {
    "name": "@ionic-native/health-kit",
    "displayName": "Health Kit",
    "description": "<p>The HealthKit plugin allows you to read data from and write data to the iOS 8+ HealthKit framework. Any data saved shows up in the iOS Health app and is available for other iOS apps.</p>\n",
    "platforms": [
      "iOS"
    ],
    "usage": "\n```typescript\nimport { HealthKit } from '@ionic-native/health-kit/ngx';\n\n\nconstructor(private healthKit: HealthKit) { }\n\n...\n```\n",
    "repo": "https://github.com/Telerik-Verified-Plugins/HealthKit",
    "cordovaPlugin": {
      "name": "com.telerik.plugins.healthkit"
    }
  },
  {
    "name": "@ionic-native/health",
    "displayName": "Health",
    "description": "<p>A plugin that abstracts fitness and health repositories like Apple HealthKit or Google Fit.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { Health } from '@ionic-native/health/ngx';\n\n\nconstructor(private health: Health) { }\n\n...\n\nthis.health.isAvailable()\n.then((available:boolean) => {\n  console.log(available);\n  this.health.requestAuthorization([\n    'distance', 'nutrition',  //read and write permissions\n    {\n      read: ['steps'],       //read only permission\n      write: ['height', 'weight']  //write only permission\n    }\n  ])\n  .then(res => console.log(res))\n  .catch(e => console.log(e));\n})\n.catch(e => console.log(e));\n\n```\nSee description at https://github.com/dariosalvi78/cordova-plugin-health for a full list of Datatypes and see examples.\n",
    "repo": "https://github.com/dariosalvi78/cordova-plugin-health",
    "cordovaPlugin": {
      "name": "cordova-plugin-health"
    }
  },
  {
    "name": "@ionic-native/hot-code-push",
    "displayName": "Hot Code Push",
    "description": "<p>HotCodePush plugin for Cordova that supports iOS and Android. This plugin allows you to keep your html, css and js files synced with your server.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { HotCodePush } from '@ionic-native/hot-code-push/ngx';\n\nconstructor(private hotCodePush: HotCodePush) { }\n\n...\n\nhotCodePush.fetchUpdate(options).then(data => { console.log('Update available'); });\n\n```\n",
    "repo": "https://github.com/nordnet/cordova-hot-code-push",
    "cordovaPlugin": {
      "name": "cordova-hot-code-push"
    }
  },
  {
    "name": "@ionic-native/hotspot",
    "displayName": "Hotspot",
    "description": "<p>A Cordova plugin for managing Hotspot networks on Android.</p>\n",
    "platforms": [
      "Android"
    ],
    "usage": "\n```typescript\nimport { Hotspot, HotspotNetwork } from '@ionic-native/hotspot/ngx';\n\nconstructor(private hotspot: Hotspot) { }\n\n...\n\n\nthis.hotspot.scanWifi().then((networks: HotspotNetwork[]) => {\n    console.log(networks);\n});\n\n```",
    "repo": "https://github.com/hypery2k/cordova-hotspot-plugin",
    "cordovaPlugin": {
      "name": "cordova-plugin-hotspot"
    }
  },
  {
    "name": "@ionic-native/http",
    "displayName": "HTTP",
    "description": "<p>Cordova / Phonegap plugin for communicating with HTTP servers. Supports iOS and Android.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { HTTP } from '@ionic-native/http/ngx';\n\nconstructor(private http: HTTP) {}\n\n...\n\nthis.http.get('http://ionic.io', {}, {})\n  .then(data => {\n\n    console.log(data.status);\n    console.log(data.data); // data received by server\n    console.log(data.headers);\n\n  })\n  .catch(error => {\n\n    console.log(error.status);\n    console.log(error.error); // error message as string\n    console.log(error.headers);\n\n  });\n\n```",
    "repo": "https://github.com/silkimen/cordova-plugin-advanced-http",
    "cordovaPlugin": {
      "name": "cordova-plugin-advanced-http"
    }
  },
  {
    "name": "@ionic-native/httpd",
    "displayName": "Httpd",
    "description": "<p>Embedded httpd for Cordova apps. Light weight HTTP server.</p>\n",
    "platforms": [
      "Android",
      "iOS",
      "macOS"
    ],
    "usage": "\n```typescript\nimport { Httpd, HttpdOptions } from '@ionic-native/httpd/ngx';\n\nconstructor(private httpd: Httpd) { }\n\n...\n\n\nlet options: HttpdOptions = {\n     www_root: 'httpd_root', // relative path to app's www directory\n     port: 80,\n     localhost_only: false\n }\n\nthis.httpd.startServer(options).subscribe((data) => {\n console.log('Server is live');\n});\n\n```",
    "repo": "https://github.com/floatinghotpot/cordova-httpd",
    "cordovaPlugin": {
      "name": "cordova-plugin-httpd"
    }
  },
  {
    "name": "@ionic-native/hyper-track",
    "displayName": "HyperTrack",
    "description": "<p>HyperTrack cordova plugin wrapper for Ionic Native. Location-based services provider. Make sure to include your publishable key at config.xml (see <a href=\"https://docs.hypertrack.com/sdks/cordova/setup.html#step-2-configure-the-sdk\">HyperTrack Cordova Setup</a>).</p>\n",
    "platforms": [
      "Android"
    ],
    "usage": "\n```typescript\nimport { HyperTrack } from '@ionic-native/hyper-track/ngx';\n\nconstructor(private hyperTrack: HyperTrack) { }\n\n// Check if app has location permissions enabled\nthis.hyperTrack.checkLocationPermission().then(response => {\n  // response (String) can be \"true\" or \"false\"\n  if (response != \"true\") {\n    // Ask for permissions\n    this.hyperTrack.requestPermissions().then(response => {}, error => {});\n  }\n}, error => {});\n\n// Check if app has location services enabled\nthis.hyperTrack.checkLocationServices().then(response => {\n  // response (String) can be \"true\" or \"false\"\n  if (response != \"true\") {\n    // Request services to be enabled\n    this.hyperTrack.requestLocationServices().then(response => {}, error => {});\n  }\n}, error => {});\n\n// First set the current user. This can be done via getOrCreateUser() or setUserId()\nthis.hyperTrack.setUserId(\"xxx\").then(user => {\n  // user (String) is a String representation of a User's JSON\n\n  this.hyperTrack.startTracking().then(userId => {}, trackingError => {});\n\n  this.hyperTrack.createAndAssignAction('visit', 'lookupId','address', 20.12, -100.3).then(action => {\n    // Handle action. It's a String representation of the Action's JSON. For example:\n    // '{\"eta\":\"Jul 17, 2017 12:50:03 PM\",\"assigned_at\":\"Jul 17, 2017 12:34:38 PM\",,\"distance\":\"0.0\",...}'\n  }, error => {});\n\n  // You can complete an action with completeAction() or completeActionWithLookupId()\n  this.hyperTrack.completeAction('action-id').then(response => {\n    // Handle response (String). Should be \"OK\".\n  }, error => {});\n\n  this.hyperTrack.getCurrentLocation().then(location => {\n    // Handle location. It's a String representation of a Location's JSON.For example:\n    // '{\"mAccuracy\":22.601,,\"mLatitude\":23.123456, \"mLongitude\":-100.1234567, ...}'\n  }, error => {});\n\n  this.hyperTrack.stopTracking().then(success => {\n    // Handle success (String). Should be \"OK\".\n  }, error => {});\n\n}, error => {});*\n```\n",
    "repo": "https://github.com/hypertrack/hypertrack-cordova",
    "cordovaPlugin": {
      "name": "cordova-plugin-hypertrack"
    }
  },
  {
    "name": "@ionic-native/ibeacon",
    "displayName": "IBeacon",
    "description": "<p>This plugin provides functions for working with iBeacons.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n\n```typescript\nimport { IBeacon } from '@ionic-native/ibeacon/ngx';\n\nconstructor(private ibeacon: IBeacon) { }\n\n...\n\n\n// Request permission to use location on iOS\nthis.ibeacon.requestAlwaysAuthorization();\n// create a new delegate and register it with the native layer\nlet delegate = this.ibeacon.Delegate();\n\n// Subscribe to some of the delegate's event handlers\ndelegate.didRangeBeaconsInRegion()\n  .subscribe(\n    data => console.log('didRangeBeaconsInRegion: ', data),\n    error => console.error()\n  );\ndelegate.didStartMonitoringForRegion()\n  .subscribe(\n    data => console.log('didStartMonitoringForRegion: ', data),\n    error => console.error()\n  );\ndelegate.didEnterRegion()\n  .subscribe(\n    data => {\n      console.log('didEnterRegion: ', data);\n    }\n  );\n\nlet beaconRegion = this.ibeacon.BeaconRegion('deskBeacon','F7826DA6-ASDF-ASDF-8024-BC5B71E0893E');\n\nthis.ibeacon.startMonitoringForRegion(beaconRegion)\n  .then(\n    () => console.log('Native layer received the request to monitoring'),\n    error => console.error('Native layer failed to begin monitoring: ', error)\n  );\n```",
    "repo": "https://github.com/petermetz/cordova-plugin-ibeacon",
    "cordovaPlugin": {
      "name": "cordova-plugin-ibeacon"
    }
  },
  {
    "name": "@ionic-native/image-picker",
    "displayName": "Image Picker",
    "description": "<p>Cordova Plugin For Multiple Image Selection</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { ImagePicker } from '@ionic-native/image-picker/ngx';\n\n\nconstructor(private imagePicker: ImagePicker) { }\n\n...\n\nthis.imagePicker.getPictures(options).then((results) => {\n  for (var i = 0; i < results.length; i++) {\n      console.log('Image URI: ' + results[i]);\n  }\n}, (err) => { });\n\n```",
    "repo": "https://github.com/Telerik-Verified-Plugins/ImagePicker",
    "cordovaPlugin": {
      "name": "cordova-plugin-telerik-imagepicker"
    }
  },
  {
    "name": "@ionic-native/image-resizer",
    "displayName": "Image Resizer",
    "description": "<p>Cordova Plugin For Image Resize</p>\n",
    "platforms": [
      "Android",
      "iOS",
      "Windows"
    ],
    "usage": "\n```typescript\nimport { ImageResizer, ImageResizerOptions } from '@ionic-native/image-resizer/ngx';\n\nconstructor(private imageResizer: ImageResizer) { }\n\n...\n\nlet options = {\n uri: uri,\n folderName: 'Protonet',\n quality: 90,\n width: 1280,\n height: 1280\n} as ImageResizerOptions;\n\nthis.imageResizer\n  .resize(options)\n  .then((filePath: string) => console.log('FilePath', filePath))\n  .catch(e => console.log(e));\n\n```",
    "repo": "https://github.com/JoschkaSchulz/cordova-plugin-image-resizer",
    "cordovaPlugin": {
      "name": "info.protonet.imageresizer"
    }
  },
  {
    "name": "@ionic-native/in-app-browser",
    "displayName": "In App Browser",
    "description": "<p>Launches in app Browser</p>\n",
    "platforms": [
      "AmazonFire OS",
      "Android",
      "Browser",
      "iOS",
      "macOS",
      "Windows"
    ],
    "usage": "\n```typescript\nimport { InAppBrowser } from '@ionic-native/in-app-browser/ngx';\n\nconstructor(private iab: InAppBrowser) { }\n\n\n...\n\n\nconst browser = this.iab.create('https://ionicframework.com/');\n\nbrowser.executeScript(...);\n\nbrowser.insertCSS(...);\nbrowser.on('loadstop').subscribe(event => {\n   browser.insertCSS({ code: \"body{color: red;\" });\n});\n\nbrowser.close();\n\n```",
    "repo": "https://github.com/apache/cordova-plugin-inappbrowser",
    "cordovaPlugin": {
      "name": "cordova-plugin-inappbrowser"
    }
  },
  {
    "name": "@ionic-native/in-app-purchase-2",
    "displayName": "In App Purchase 2",
    "description": "",
    "platforms": [
      "iOS",
      "Android",
      "Windows"
    ],
    "usage": "\n```\nimport { InAppPurchase2 } from '@ionic-native/in-app-purchase-2/ngx';\n\n\nconstructor(private inAppPurchase2: InAppPurchase2) { }\n\n...\n\n\n```\n",
    "repo": "https://github.com/j3k0/cordova-plugin-purchase",
    "cordovaPlugin": {
      "name": "cc.fovea.cordova.purchase"
    }
  },
  {
    "name": "@ionic-native/in-app-purchase",
    "displayName": "In App Purchase",
    "description": "<p>A lightweight Cordova plugin for in app purchases on iOS/Android.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { InAppPurchase } from '@ionic-native/in-app-purchase/ngx';\n\nconstructor(private iap: InAppPurchase) { }\n\n...\n\nthis.iap\n .getProducts(['prod1', 'prod2', ...])\n .then((products) => {\n   console.log(products);\n    //  [{ productId: 'com.yourapp.prod1', 'title': '...', description: '...', price: '...' }, ...]\n })\n .catch((err) => {\n   console.log(err);\n });\n\n\nthis.iap\n  .buy('prod1')\n  .then((data)=> {\n    console.log(data);\n    // {\n    //   transactionId: ...\n    //   receipt: ...\n    //   signature: ...\n    // }\n  })\n  .catch((err)=> {\n    console.log(err);\n  });\n\n```\n",
    "repo": "https://github.com/AlexDisler/cordova-plugin-inapppurchase",
    "cordovaPlugin": {
      "name": "cordova-plugin-inapppurchase"
    }
  },
  {
    "name": "@ionic-native/in-app-review",
    "displayName": "In App Review",
    "description": "<p>This plugin does use the iOS class SKStore​Review​Controller to open the inApp review popup available since iOS 10.3</p>\n",
    "platforms": [
      "iOS"
    ],
    "usage": "\n```typescript\nimport { InAppReview } from '@ionic-native/in-app-review/ngx';\n\n\nconstructor(private inAppReview: InAppReview) { }\n\n...\n\n\nthis.inAppReview.requestReview()\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n\n```\n",
    "repo": "https://github.com/omaxlive/com.omarben.inappreview",
    "cordovaPlugin": {
      "name": "com.omarben.inappreview"
    }
  },
  {
    "name": "@ionic-native/index-app-content",
    "displayName": "Index App Content",
    "description": "<p>This plugin gives you a Javascript API to interact with Core Spotlight on iOS (=&gt; iOS 9). You can add, update and delete items to the spotlight search index. Spotlight Search will include these items in the result list. You can deep-link the search results with your app.</p>\n",
    "platforms": [
      "iOS"
    ],
    "usage": "\n```typescript\nimport { IndexAppContent } from '@ionic-native/index-app-content/ngx';\n\n\nconstructor(private indexAppContent: IndexAppContent) { }\n\n...\n\nvar items = [\n     {\n       domain: 'com.my.domain',\n       identifier: '88asdf7dsf',\n       title: 'Foo',\n       description: 'Bar',\n       url: 'http://location/of/my/image.jpg',\n   },\n   {\n       domain: 'com.other.domain',\n       identifier: '9asd67g6a',\n       title: 'Baz',\n       description: 'Woot',\n       url: 'http://location/of/my/image2.jpg',\n    }\n];\n\nthis.indexAppContent.setItems(items)\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n\n```\n",
    "repo": "https://github.com/johanblomgren/cordova-plugin-indexappcontent",
    "cordovaPlugin": {
      "name": "cordova-plugin-indexappcontent"
    }
  },
  {
    "name": "@ionic-native/insomnia",
    "displayName": "Insomnia",
    "description": "<p>Prevent the screen of the mobile device from falling asleep.</p>\n",
    "platforms": [
      "Android",
      "Browser",
      "Firefox OS",
      "iOS",
      "Windows",
      "Windows Phone 8"
    ],
    "usage": "\n```typescript\nimport { Insomnia } from '@ionic-native/insomnia/ngx';\n\nconstructor(private insomnia: Insomnia) { }\n\n...\n\nthis.insomnia.keepAwake()\n  .then(\n    () => console.log('success'),\n    () => console.log('error')\n  );\n\nthis.insomnia.allowSleepAgain()\n  .then(\n    () => console.log('success'),\n    () => console.log('error')\n  );\n```\n\n",
    "repo": "https://github.com/EddyVerbruggen/Insomnia-PhoneGap-Plugin",
    "cordovaPlugin": {
      "name": "cordova-plugin-insomnia"
    }
  },
  {
    "name": "@ionic-native/instagram",
    "displayName": "Instagram",
    "description": "<p>Share a photo with the instagram app</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { Instagram } from '@ionic-native/instagram/ngx';\n\nconstructor(private instagram: Instagram) { }\n\n...\n\nthis.instagram.share('data:image/png;uhduhf3hfif33', 'Caption')\n  .then(() => console.log('Shared!'))\n  .catch((error: any) => console.error(error));\n\n```\n",
    "repo": "https://github.com/vstirbu/InstagramPlugin",
    "cordovaPlugin": {
      "name": "cordova-instagram-plugin"
    }
  },
  {
    "name": "@ionic-native/intel-security",
    "displayName": "Intel Security",
    "description": "<p>The App Security API enables the use of security properties and capabilities on the platform, using a new set of API defined for application developers. You are not required to be a security expert to make good use of the API. Key elements, such as encryption of data and establishments of capabilities, is abstracted and done by the API implementation, for you.</p>\n",
    "platforms": [
      "Android",
      "iOS",
      "Windows",
      "Windows Phone 8"
    ],
    "usage": "\n```typescript\nimport { IntelSecurity } from '@ionic-native/intel-security/ngx';\n...\nconstructor(private intelSecurity: IntelSecurity) { }\n...\n\nlet storageID = 'id';\n\nthis.intelSecurity.data.createFromData({ data: 'Sample Data' })\n  .then((instanceID: Number) => this.intelSecurity.storage.write({ id: storageId, instanceID: instanceID }))\n  .catch((error: any) => console.log(error));\n\nthis.intelSecurity.storage.read({id: storageID })\n  .then((instanceID: number) => this.intelSecurity.data.getData(instanceID))\n  .then((data: string) => console.log(data)) // Resolves to 'Sample Data'\n  .catch((error: any) => console.log(error));\n\nthis.intelSecurity.storage.delete({ id: storageID })\n  .then(() => console.log('Deleted Successfully'))\n  .catch((error: any) => console.log(error));\n```",
    "repo": "https://github.com/AppSecurityApi/com-intel-security-cordova-plugin",
    "cordovaPlugin": {
      "name": "com-intel-security-cordova-plugin"
    }
  },
  {
    "name": "@ionic-native/intercom",
    "displayName": "Intercom",
    "description": "<p>This is a plugin that allows your Ionic app to use Intercom for iOS and/or Intercom for Android. Follow the offical documentation to setup this plugin correctly: <a href=\"https://developers.intercom.com/docs/cordova-phonegap-configuration\">https://developers.intercom.com/docs/cordova-phonegap-configuration</a></p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { Intercom } from '@ionic-native/intercom/ngx';\n\n\nconstructor(private intercom: Intercom) { }\n\n...\n\nthis.intercom.registerUnidentifiedUser();\n...\nthis.intercom.registerForPush();\n\n```\n",
    "repo": "https://github.com/intercom/intercom-cordova",
    "cordovaPlugin": {
      "name": "cordova-plugin-intercom"
    }
  },
  {
    "name": "@ionic-native/ionic-webview",
    "displayName": "Ionic Webview",
    "description": "<p>Access Web View utilities.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { WebView } from '@ionic-native/ionic-webview/ngx';\n\n\nconstructor(private webview: WebView) { }\n\n...\n\nimg = this.webview.convertFileSrc('file:///Users/dan/camera-image-12345.png')\n\n```\n",
    "repo": "https://github.com/ionic-team/cordova-plugin-ionic-webview",
    "cordovaPlugin": {
      "name": "cordova-plugin-ionic-webview"
    }
  },
  {
    "name": "@ionic-native/is-debug",
    "displayName": "Is Debug",
    "description": "<p>Detect if the app is running in debug mode or not. Debug mode is when the app is built and installed locally via xcode / eclipse / the cordova cli etc, compared to release mode when the app was downloaded from the app / play store via an end user.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { IsDebug } from '@ionic-native/is-debug/ngx';\n\nconstructor(private isDebug: IsDebug) { }\n\n...\n\nthis.isDebug.getIsDebug()\n  .then(isDebug => console.log('Is debug:', isDebug))\n  .catch(err => console.error(err));\n\n```\n",
    "repo": "https://github.com/mattlewis92/cordova-plugin-is-debug",
    "cordovaPlugin": {
      "name": "cordova-plugin-is-debug"
    }
  },
  {
    "name": "@ionic-native/janalytics",
    "displayName": "jAnalytics",
    "description": "<p>This plugin does something</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { JAnalytics } from '@ionic-native/JAnalytics/ngx';\n\n\nconstructor(private jAnalytics: JAnalytics) { }\n\n...\n\n\nthis.jAnalytics.functionName('Hello', 123)\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n\n```\n",
    "repo": "https://github.com/jpush/cordova-plugin-janalytics",
    "cordovaPlugin": {
      "name": "cordova-plugin-janalytics"
    }
  },
  {
    "name": "@ionic-native/jins-meme",
    "displayName": "Jins Meme",
    "description": "<p>Implementation of the JINS MEME SDK</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { JinsMeme } from '@ionic-native/jins-meme/ngx';\n\nconstructor(private jinsMeme: JinsMeme) { }\n\n...\n\nthis.jinsMeme.setAppClientID(appClientId: string, clientSecret: string).then(\n  // Bluetooth should be enabled and the JINS MEME powered on (blinking blue light)\n  this.jinsMeme.startScan().subscribe((meme_addr) => {\n    this.jinsMeme.connect(meme_addr).subscribe((connectResult) => {\n      this.memeService.startDataReport().subscribe((dataReport) => {\n        console.log(dataReport);\n      });\n    });\n  });\n.catch(console.log('jinsMeme.setAppClientID authentication error'));\n\n```\n",
    "repo": "https://github.com/BlyncSync/cordova-plugin-jins-meme",
    "cordovaPlugin": {
      "name": "cordova-plugin-jins-meme"
    }
  },
  {
    "name": "@ionic-native/keyboard",
    "displayName": "Keyboard",
    "description": "<p>Keyboard plugin for Cordova.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { Keyboard } from '@ionic-native/keyboard/ngx';\n\nconstructor(private keyboard: Keyboard) { }\n\n...\n\nthis.keyboard.show();\n\nthis.keyboard.hide();\n\n```\n",
    "repo": "https://github.com/ionic-team/cordova-plugin-ionic-keyboard",
    "cordovaPlugin": {
      "name": "cordova-plugin-ionic-keyboard"
    }
  },
  {
    "name": "@ionic-native/keychain-touch-id",
    "displayName": "Keychain Touch Id",
    "description": "<p>A cordova plugin adding the iOS TouchID / Android fingerprint to your app and allowing you to store a password securely in the device keychain.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { KeychainTouchId } from '@ionic-native/keychain-touch-id/ngx';\n\n\nconstructor(private keychainTouchId: KeychainTouchId) { }\n\n...\n\n\nthis.keychainTouchId.isAvailable()\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n\n```\n",
    "repo": "https://github.com/sjhoeksma/cordova-plugin-keychain-touch-id",
    "cordovaPlugin": {
      "name": "cordova-plugin-keychain-touch-id"
    }
  },
  {
    "name": "@ionic-native/keychain",
    "displayName": "Keychain",
    "description": "<p>Get and set data in the iOS Keychain</p>\n",
    "platforms": [
      "iOS"
    ],
    "usage": "\n```typescript\nimport { Keychain } from '@ionic-native/keychain/ngx';\n\nconstructor(private keychain: Keychain) { }\n\n...\n\nthis.keychain.set(key, value).then(() => {\n  this.keychain.get(key)\n    .then(value => console.log('Got value', value))\n    .catch(err => console.error('Error getting', err));\n})\n.catch(err => console.error('Error setting', err));\n```\n",
    "repo": "https://github.com/ionic-team/cordova-plugin-ios-keychain",
    "cordovaPlugin": {
      "name": "cordova-plugin-ios-keychain"
    }
  },
  {
    "name": "@ionic-native/last-cam",
    "displayName": "LastCam",
    "description": "<p>Last Cam is a Camera Preview plugin that allows you to take capture both Videos and images in a custom html preview of your choice.</p>\n",
    "platforms": [
      "iOS"
    ],
    "usage": null,
    "repo": "https://github.com/bengejd/cordova-plugin-last-cam",
    "cordovaPlugin": {
      "name": "cordova-plugin-last-cam"
    }
  },
  {
    "name": "@ionic-native/launch-navigator",
    "displayName": "Launch Navigator",
    "description": "<p>Requires Cordova plugin: uk.co.workingedge.phonegap.plugin.launchnavigator. For more info, please see the <a href=\"https://github.com/dpa99c/phonegap-launch-navigator\">LaunchNavigator plugin docs</a>.</p>\n",
    "platforms": [
      "Android",
      "iOS",
      "Windows",
      "Windows Phone 8"
    ],
    "usage": "\nPlease refer to the plugin's repo for detailed usage. This docs page only explains the Native wrapper.\n\n```typescript\nimport { LaunchNavigator, LaunchNavigatorOptions } from '@ionic-native/launch-navigator/ngx';\n\nconstructor(private launchNavigator: LaunchNavigator) { }\n\n...\n\nlet options: LaunchNavigatorOptions = {\n  start: 'London, ON',\n  app: LaunchNavigator.APPS.UBER\n}\n\nthis.launchNavigator.navigate('Toronto, ON', options)\n  .then(\n    success => console.log('Launched navigator'),\n    error => console.log('Error launching navigator', error)\n  );\n```",
    "repo": "https://github.com/dpa99c/phonegap-launch-navigator",
    "cordovaPlugin": {
      "name": "uk.co.workingedge.phonegap.plugin.launchnavigator"
    }
  },
  {
    "name": "@ionic-native/launch-review",
    "displayName": "Launch Review",
    "description": "<p>Assists in leaving user reviews/ratings in the App Stores. - Launches the platform&#39;s App Store page for the current app in order for the user to leave a review. - On iOS (10.3 and above) invokes the native in-app rating dialog which allows a user to rate your app without needing to open the App Store.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { LaunchReview } from '@ionic-native/launch-review/ngx';\n\nconstructor(private launchReview: LaunchReview) { }\n\n...\n\nthis.launchReview.launch()\n  .then(() => console.log('Successfully launched store app');\n\nif(this.launchReview.isRatingSupported()){\n  this.launchReview.rating()\n    .then(() => console.log('Successfully launched rating dialog'));\n}\n```\n",
    "repo": "https://github.com/dpa99c/cordova-launch-review",
    "cordovaPlugin": {
      "name": "cordova-launch-review"
    }
  },
  {
    "name": "@ionic-native/line-login",
    "displayName": "Line Login",
    "description": "<p>The function login, logs out, acquires, verifies, and refreshes the access token. The version of LineSDK you are using is as follows.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { LineLogin } from '@ionic-native/line-login/ngx';\n\n\nconstructor(private lineLogin: LineLogin) { }\n\n...\n\n\nthis.lineLogin.initialize({ channel_id: \"xxxxxxxxxx\" })\n\nthis.lineLogin.login()\n  .then(result => console.log(result))\n  .catch(error => console.log(error))\n\n```\n",
    "repo": "https://github.com/nrikiji/cordova-line-login-plugin",
    "cordovaPlugin": {
      "name": "cordova-line-login-plugin"
    }
  },
  {
    "name": "@ionic-native/linkedin",
    "displayName": "LinkedIn",
    "description": "<p>A Cordova plugin that lets you use LinkedIn Native SDKs for Android and iOS.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { LinkedIn } from '@ionic-native/linkedin/ngx';\n\nconstructor(private linkedin: LinkedIn) { }\n\n...\n\n// check if there is an active session\nthis.linkedin.hasActiveSession().then((active) => console.log('has active session?', active));\n\n// login\nconst scopes = ['r_basicprofile', 'r_emailaddress', 'rw_company_admin', 'w_share'];\nthis.linkedin.login(scopes, true)\n  .then(() => console.log('Logged in!'))\n  .catch(e => console.log('Error logging in', e));\n\n\n// get connections\nthis.linkedin.getRequest('people/~')\n  .then(res => console.log(res))\n  .catch(e => console.log(e));\n\n// share something on profile\nconst body = {\n  comment: 'Hello world!',\n  visibility: {\n    code: 'anyone'\n  }\n}\n\nthis.linkedin.postRequest('~/shares', body)\n  .then(res => console.log(res))\n  .catch(e => console.log(e));\n\n\n```\n",
    "repo": "https://github.com/zyra/cordova-plugin-linkedin",
    "cordovaPlugin": {
      "name": "cordova-plugin-linkedin"
    }
  },
  {
    "name": "@ionic-native/local-notifications",
    "displayName": "Local Notifications",
    "description": "<p>This plugin allows you to display local notifications on the device</p>\n",
    "platforms": [
      "Android",
      "iOS",
      "Windows"
    ],
    "usage": "\n```typescript\nimport { LocalNotifications } from '@ionic-native/local-notifications/ngx';\n\n\nconstructor(private localNotifications: LocalNotifications) { }\n\n...\n\n\n// Schedule a single notification\nthis.localNotifications.schedule({\n  id: 1,\n  text: 'Single ILocalNotification',\n  sound: isAndroid? 'file://sound.mp3': 'file://beep.caf',\n  data: { secret: key }\n});\n\n\n// Schedule multiple notifications\nthis.localNotifications.schedule([{\n   id: 1,\n   text: 'Multi ILocalNotification 1',\n   sound: isAndroid ? 'file://sound.mp3': 'file://beep.caf',\n   data: { secret:key }\n  },{\n   id: 2,\n   title: 'Local ILocalNotification Example',\n   text: 'Multi ILocalNotification 2',\n   icon: 'http://example.com/icon.png'\n}]);\n\n\n// Schedule delayed notification\nthis.localNotifications.schedule({\n   text: 'Delayed ILocalNotification',\n   trigger: {at: new Date(new Date().getTime() + 3600)},\n   led: 'FF0000',\n   sound: null\n});\n```",
    "repo": "https://github.com/katzer/cordova-plugin-local-notifications",
    "cordovaPlugin": {
      "name": "cordova-plugin-local-notification"
    }
  },
  {
    "name": "@ionic-native/location-accuracy",
    "displayName": "Location Accuracy",
    "description": "<p>This Cordova/Phonegap plugin for Android and iOS to request enabling/changing of Location Services by triggering a native dialog from within the app, avoiding the need for the user to leave your app to change location settings manually.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { LocationAccuracy } from '@ionic-native/location-accuracy/ngx';\n\nconstructor(private locationAccuracy: LocationAccuracy) { }\n\n...\n\nthis.locationAccuracy.canRequest().then((canRequest: boolean) => {\n\n  if(canRequest) {\n    // the accuracy option will be ignored by iOS\n    this.locationAccuracy.request(this.locationAccuracy.REQUEST_PRIORITY_HIGH_ACCURACY).then(\n      () => console.log('Request successful'),\n      error => console.log('Error requesting location permissions', error)\n    );\n  }\n\n});\n\n```\n",
    "repo": "https://github.com/dpa99c/cordova-plugin-request-location-accuracy",
    "cordovaPlugin": {
      "name": "cordova-plugin-request-location-accuracy"
    }
  },
  {
    "name": "@ionic-native/lottie-splash-screen",
    "displayName": "Lottie Splash Screen",
    "description": "<p>Cordova plugin to show bodymovin/Lottie animations as the splash screen with Airbnb&#39;s Lottie wrapper</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { LottieSplashScreen } from '@ionic-native/lottie-splash-screen/ngx';\n\n\nconstructor(private lottieSplashScreen: LottieSplashScreen) { }\n\n...\n\n\nthis.lottieSplashScreen.show('www/lottie/animation.json', false, 1024, 768)\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n\n```\n",
    "repo": "https://github.com/timbru31/cordova-plugin-lottie-splashscreen",
    "cordovaPlugin": {
      "name": "cordova-plugin-lottie-splashscreen"
    }
  },
  {
    "name": "@ionic-native/market",
    "displayName": "Market",
    "description": "<p>Opens an app&#39;s page in the market place (Google Play, App Store)</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { Market } from '@ionic-native/market/ngx';\n\nconstructor(private market: Market) { }\n\n...\n\nthis.market.open('your.package.name');\n\n```\n",
    "repo": "https://github.com/xmartlabs/cordova-plugin-market",
    "cordovaPlugin": {
      "name": "cordova-plugin-market"
    }
  },
  {
    "name": "@ionic-native/media-capture",
    "displayName": "Media Capture",
    "description": "<p>This plugin provides access to the device&#39;s audio, image, and video capture capabilities.</p>\n",
    "platforms": [
      "Android",
      "Browser",
      "iOS",
      "Windows"
    ],
    "usage": "\n```typescript\nimport { MediaCapture, MediaFile, CaptureError, CaptureImageOptions } from '@ionic-native/media-capture/ngx';\n\n\nconstructor(private mediaCapture: MediaCapture) { }\n\n...\n\n\nlet options: CaptureImageOptions = { limit: 3 }\nthis.mediaCapture.captureImage(options)\n  .then(\n    (data: MediaFile[]) => console.log(data),\n    (err: CaptureError) => console.error(err)\n  );\n\n```",
    "repo": "https://github.com/apache/cordova-plugin-media-capture",
    "cordovaPlugin": {
      "name": "cordova-plugin-media-capture"
    }
  },
  {
    "name": "@ionic-native/media",
    "displayName": "Media",
    "description": "<p>This plugin provides the ability to record and play back audio files on a device.</p>\n",
    "platforms": [
      "Android",
      "Browser",
      "iOS",
      "Windows"
    ],
    "usage": "\n```typescript\nimport { Media, MediaObject } from '@ionic-native/media/ngx';\n\n\nconstructor(private media: Media) { }\n\n\n...\n\n\n// Create a Media instance.  Expects path to file or url as argument\n// We can optionally pass a second argument to track the status of the media\n\nconst file: MediaObject = this.media.create('file.mp3');\n\n// to listen to plugin events:\n\nfile.onStatusUpdate.subscribe(status => console.log(status)); // fires when file status changes\n\nfile.onSuccess.subscribe(() => console.log('Action is successful'));\n\nfile.onError.subscribe(error => console.log('Error!', error));\n\n// play the file\nfile.play();\n\n// pause the file\nfile.pause();\n\n// get current playback position\nfile.getCurrentPosition().then((position) => {\n  console.log(position);\n});\n\n// get file duration\nlet duration = file.getDuration();\nconsole.log(duration);\n\n// skip to 10 seconds (expects int value in ms)\nfile.seekTo(10000);\n\n// stop playing the file\nfile.stop();\n\n// release the native audio resource\n// Platform Quirks:\n// iOS simply create a new instance and the old one will be overwritten\n// Android you must call release() to destroy instances of media when you are done\nfile.release();\n\n\n\n// Recording to a file\nconst file: MediaObject = this.media.create('path/to/file.mp3');\n\nfile.startRecord();\n\nfile.stopRecord();\n\n\n```\n\nSome hints if you are using iOS and recording doesn't work:\n1.) Try to use a absolute file path but remove beginning \"file://\".\nThen it looks like: `/var/mobile/Containers/Data/Application/AF438B8B-7724-4FBB-8E69-083463224FC4/tmp/my_file.m4a`\nExample: `this.media.create(this.file.tempDirectory.replace(/^file:\\/\\//, '') + 'my_file.m4a')`\n2.) If that's not working, too, create the file before using.\nExample:\n```typescript\nimport { Media, MediaObject } from '@ionic-native/media/ngx';\nimport { File } from '@ionic-native/file/ngx';\n\n...\n\nconstructor(private media: Media, private file: File) { }\n\n...\n\nthis.file.createFile(this.file.tempDirectory, 'my_file.m4a', true).then(() => {\n  let file = this.media.create(this.file.tempDirectory.replace(/^file:\\/\\//, '') + 'my_file.m4a');\n  file.startRecord();\n  window.setTimeout(() => file.stopRecord(), 10000);\n});\n```\n\nYou can find the reasons here: https://github.com/ionic-team/ionic-native/issues/1452#issuecomment-299605906",
    "repo": "https://github.com/apache/cordova-plugin-media",
    "cordovaPlugin": {
      "name": "cordova-plugin-media"
    }
  },
  {
    "name": "@ionic-native/mixpanel",
    "displayName": "Mixpanel",
    "description": "<p>Cordova Plugin that wraps Mixpanel SDK for Android and iOS</p>\n",
    "platforms": [
      "Android",
      "Browser",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { Mixpanel } from '@ionic-native/mixpanel/ngx';\n\nconstructor(private mixpanel: Mixpanel, private mixpanelPeople: MixpanelPeople) { }\n\n...\n\nthis.mixpanel.init(token)\n  .then(onSuccess)\n  .catch(onError);\n\n```",
    "repo": "https://github.com/samzilverberg/cordova-mixpanel-plugin",
    "cordovaPlugin": {
      "name": "cordova-plugin-mixpanel"
    }
  },
  {
    "name": "@ionic-native/mobile-accessibility",
    "displayName": "Mobile Accessibility",
    "description": "<p>This plugin exposes information on the status of various accessibility features of mobile operating systems, including, for example, whether a screen reader is running, invert colors is enabled, and the preferred scaling for text. It also allows an application to send a string to be spoken by the screen reader, or a command to stop the screen reader from speaking.</p>\n",
    "platforms": [
      "Android Fire OS",
      "Android",
      "iOS",
      "Windows"
    ],
    "usage": "\n```typescript\nimport { MobileAccessibility } from '@ionic-native/mobile-ccessibility/ngx';\n\n\nconstructor(private mobileAccessibility: MobileAccessibility) { }\n\n...\n\nif(this.mobileAccessibility.isScreenReaderRunningCallback();\n\n```\n",
    "repo": "https://github.com/phonegap/phonegap-mobile-accessibility",
    "cordovaPlugin": {
      "name": "phonegap-plugin-mobile-accessibility"
    }
  },
  {
    "name": "@ionic-native/ms-adal",
    "displayName": "MS ADAL",
    "description": "<p>Active Directory Authentication Library (ADAL) plugin. Active Directory Authentication Library (<a href=\"https://docs.microsoft.com/en-us/dotnet/api/microsoft.identitymodel.clients.activedirectory?view=azure-dotnet\">ADAL</a>) plugin provides easy to use authentication functionality for your Apache Cordova apps by taking advantage of Windows Server Active Directory and Windows Azure Active Directory. Here you can find the source code for the library.</p>\n",
    "platforms": [
      "Android",
      "iOS",
      "Windows"
    ],
    "usage": "\n```typescript\nimport { MSAdal, AuthenticationContext, AuthenticationResult } from '@ionic-native/ms-adal/ngx';\n\n\nconstructor(private msAdal: MSAdal) {}\n\n...\n\nlet authContext: AuthenticationContext = this.msAdal.createAuthenticationContext('https://login.windows.net/common');\n\nauthContext.acquireTokenAsync('https://graph.windows.net', 'a5d92493-ae5a-4a9f-bcbf-9f1d354067d3', 'http://MyDirectorySearcherApp')\n  .then((authResponse: AuthenticationResult) => {\n    console.log('Token is' , authResponse.accessToken);\n    console.log('Token will expire on', authResponse.expiresOn);\n  })\n  .catch((e: any) => console.log('Authentication failed', e));\n\n\n```\n",
    "repo": "https://github.com/AzureAD/azure-activedirectory-library-for-cordova",
    "cordovaPlugin": {
      "name": "cordova-plugin-ms-adal"
    }
  },
  {
    "name": "@ionic-native/music-controls",
    "displayName": "Music Controls",
    "description": "<p>Music controls for Cordova applications. Display a &#39;media&#39; notification with play/pause, previous, next buttons, allowing the user to control the play. Handle also headset event (plug, unplug, headset button).</p>\n",
    "platforms": [
      "Android",
      "iOS",
      "Windows"
    ],
    "usage": "\n```typescript\nimport { MusicControls } from '@ionic-native/music-controls/ngx';\n\nconstructor(private musicControls: MusicControls) { }\n\n...\n\nthis.musicControls.create({\n  track       : 'Time is Running Out',        // optional, default : ''\n  artist      : 'Muse',                       // optional, default : ''\n  cover       : 'albums/absolution.jpg',      // optional, default : nothing\n  // cover can be a local path (use fullpath 'file:///storage/emulated/...', or only 'my_image.jpg' if my_image.jpg is in the www folder of your app)\n  //           or a remote url ('http://...', 'https://...', 'ftp://...')\n  isPlaying   : true,                         // optional, default : true\n  dismissable : true,                         // optional, default : false\n\n  // hide previous/next/close buttons:\n  hasPrev   : false,      // show previous button, optional, default: true\n  hasNext   : false,      // show next button, optional, default: true\n  hasClose  : true,       // show close button, optional, default: false\n\n// iOS only, optional\n  album       : 'Absolution',     // optional, default: ''\n  duration : 60, // optional, default: 0\n  elapsed : 10, // optional, default: 0\n  hasSkipForward : true,  // show skip forward button, optional, default: false\n  hasSkipBackward : true, // show skip backward button, optional, default: false\n  skipForwardInterval: 15, // display number for skip forward, optional, default: 0\n  skipBackwardInterval: 15, // display number for skip backward, optional, default: 0\n  hasScrubbing: false, // enable scrubbing from control center and lockscreen progress bar, optional\n\n  // Android only, optional\n  // text displayed in the status bar when the notification (and the ticker) are updated, optional\n  ticker    : 'Now playing \"Time is Running Out\"',\n  // All icons default to their built-in android equivalents\n  playIcon: 'media_play',\n  pauseIcon: 'media_pause',\n  prevIcon: 'media_prev',\n  nextIcon: 'media_next',\n  closeIcon: 'media_close',\n  notificationIcon: 'notification'\n });\n\n this.musicControls.subscribe().subscribe(action => {\n\n   function events(action) {\n     const message = JSON.parse(action).message;\n     \tswitch(message) {\n     \t\tcase 'music-controls-next':\n     \t\t\t// Do something\n     \t\t\tbreak;\n     \t\tcase 'music-controls-previous':\n     \t\t\t// Do something\n     \t\t\tbreak;\n     \t\tcase 'music-controls-pause':\n     \t\t\t// Do something\n     \t\t\tbreak;\n     \t\tcase 'music-controls-play':\n     \t\t\t// Do something\n     \t\t\tbreak;\n     \t\tcase 'music-controls-destroy':\n     \t\t\t// Do something\n     \t\t\tbreak;\n\n         // External controls (iOS only)\n         case 'music-controls-toggle-play-pause' :\n     \t\t\t// Do something\n     \t\t\tbreak;\n         case 'music-controls-seek-to':\n           const seekToInSeconds = JSON.parse(action).position;\n           this.musicControls.updateElapsed({\n             elapsed: seekToInSeconds,\n             isPlaying: true\n           });\n           // Do something\n           break;\n         case 'music-controls-skip-forward':\n           // Do something\n           break;\n         case 'music-controls-skip-backward':\n           // Do something\n           break;\n\n     \t\t// Headset events (Android only)\n     \t\t// All media button events are listed below\n     \t\tcase 'music-controls-media-button' :\n     \t\t\t// Do something\n     \t\t\tbreak;\n     \t\tcase 'music-controls-headset-unplugged':\n     \t\t\t// Do something\n     \t\t\tbreak;\n     \t\tcase 'music-controls-headset-plugged':\n     \t\t\t// Do something\n     \t\t\tbreak;\n     \t\tdefault:\n     \t\t\tbreak;\n     \t}\n     }\n\n this.musicControls.listen(); // activates the observable above\n\n this.musicControls.updateIsPlaying(true);\n\n\n```",
    "repo": "https://github.com/homerours/cordova-music-controls-plugin",
    "cordovaPlugin": {
      "name": "cordova-plugin-music-controls"
    }
  },
  {
    "name": "@ionic-native/native-audio",
    "displayName": "Native Audio",
    "description": "<p>Native Audio Playback</p>\n",
    "platforms": [
      "Android",
      "Browser",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { NativeAudio } from '@ionic-native/native-audio/ngx';\n\nconstructor(private nativeAudio: NativeAudio) { }\n\n...\n\nthis.nativeAudio.preloadSimple('uniqueId1', 'path/to/file.mp3').then(onSuccess, onError);\nthis.nativeAudio.preloadComplex('uniqueId2', 'path/to/file2.mp3', 1, 1, 0).then(onSuccess, onError);\n\nthis.nativeAudio.play('uniqueId1').then(onSuccess, onError);\n\n// can optionally pass a callback to be called when the file is done playing\nthis.nativeAudio.play('uniqueId1', () => console.log('uniqueId1 is done playing'));\n\nthis.nativeAudio.loop('uniqueId2').then(onSuccess, onError);\n\nthis.nativeAudio.setVolumeForComplexAsset('uniqueId2', 0.6).then(onSuccess,onError);\n\nthis.nativeAudio.stop('uniqueId1').then(onSuccess,onError);\n\nthis.nativeAudio.unload('uniqueId1').then(onSuccess,onError);\n\n```\n",
    "repo": "https://github.com/floatinghotpot/cordova-plugin-nativeaudio",
    "cordovaPlugin": {
      "name": "cordova-plugin-nativeaudio"
    }
  },
  {
    "name": "@ionic-native/native-geocoder",
    "displayName": "Native Geocoder",
    "description": "<p>Cordova plugin for native forward and reverse geocoding</p>\n",
    "platforms": [
      "iOS",
      "Android"
    ],
    "usage": "\n```typescript\nimport { NativeGeocoder, NativeGeocoderReverseResult, NativeGeocoderForwardResult, NativeGeocoderOptions } from '@ionic-native/native-geocoder/ngx';\n\nconstructor(private nativeGeocoder: NativeGeocoder) { }\n\n...\n\nlet options: NativeGeocoderOptions = {\n    useLocale: true,\n    maxResults: 5\n};\n\nthis.nativeGeocoder.reverseGeocode(52.5072095, 13.1452818, options)\n  .then((result: NativeGeocoderReverseResult[]) => console.log(JSON.stringify(result[0])))\n  .catch((error: any) => console.log(error));\n\nthis.nativeGeocoder.forwardGeocode('Berlin', options)\n  .then((coordinates: NativeGeocoderForwardResult[]) => console.log('The coordinates are latitude=' + coordinates[0].latitude + ' and longitude=' + coordinates[0].longitude))\n  .catch((error: any) => console.log(error));\n```",
    "repo": "https://github.com/sebastianbaar/cordova-plugin-nativegeocoder",
    "cordovaPlugin": {
      "name": "cordova-plugin-nativegeocoder"
    }
  },
  {
    "name": "@ionic-native/native-keyboard",
    "displayName": "Native Keyboard",
    "description": "<p>A cross platform WhatsApp / Messenger / Slack -style keyboard even. For your Cordova app.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```\nimport { NativeKeyboard } from '@ionic-native/native-keyboard/ngx';\n\n\nconstructor(private nativeKeyboard: NativeKeyboard) { }\n\n...\n\n\n```",
    "repo": "https://github.com/EddyVerbruggen/cordova-plugin-native-keyboard",
    "cordovaPlugin": {
      "name": "cordova-plugin-native-keyboard"
    }
  },
  {
    "name": "@ionic-native/native-page-transitions",
    "displayName": "Native Page Transitions",
    "description": "<p>The Native Page Transitions plugin uses native hardware acceleration to animate your transitions between views. You have complete control over the type of transition, the duration, and direction.</p>\n",
    "platforms": [
      "Android",
      "iOS",
      "Windows Phone 8"
    ],
    "usage": "\n```typescript\nimport { NativePageTransitions, NativeTransitionOptions } from '@ionic-native/native-page-transitions/ngx';\n\nconstructor(private nativePageTransitions: NativePageTransitions) { }\n\n...\n\n\n// example of adding a transition when a page/modal closes\nionViewWillLeave() {\n\n let options: NativeTransitionOptions = {\n    direction: 'up',\n    duration: 500,\n    slowdownfactor: 3,\n    slidePixels: 20,\n    iosdelay: 100,\n    androiddelay: 150,\n    fixedPixelsTop: 0,\n    fixedPixelsBottom: 60\n   }\n\n this.nativePageTransitions.slide(options)\n   .then(onSuccess)\n   .catch(onError);\n\n}\n\n\n// example of adding a transition when pushing a new page\nopenPage(page: any) {\n\n  this.nativePageTransitions.slide(options);\n  this.navCtrl.push(page);\n\n}\n\n```\n",
    "repo": "https://github.com/Telerik-Verified-Plugins/NativePageTransitions",
    "cordovaPlugin": {
      "name": "com.telerik.plugins.nativepagetransitions"
    }
  },
  {
    "name": "@ionic-native/native-ringtones",
    "displayName": "Native Ringtones",
    "description": "<p>The plugin helps get the native ringtones list on Android or IOS devices. And you can also use this plugin to play or stop the native ringtones and custom ringtones(added in the www folder).</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```\nimport { NativeRingtones } from '@ionic-native/native-ringtones/ngx';\n\n\nconstructor(private ringtones: NativeRingtones) { }\n\n...\nthis.ringtones.getRingtone().then((ringtones) => { console.log(ringtones); });\n\nthis.ringtones.playRingtone('assets/ringtones/sound_1.caf');\n\nthis.ringtones.stopRingtone('assets/ringtones/sound_1.caf');\n\n```\n",
    "repo": "https://github.com/TongZhangzt/cordova-plugin-native-ringtones",
    "cordovaPlugin": {
      "name": "cordova-plugin-native-ringtones"
    }
  },
  {
    "name": "@ionic-native/native-storage",
    "displayName": "Native Storage",
    "description": "<p>Native storage of variables in Android and iOS</p>\n",
    "platforms": [
      "Android",
      "Browser",
      "iOS",
      "macOS",
      "Windows"
    ],
    "usage": "\n```typescript\nimport { NativeStorage } from '@ionic-native/native-storage/ngx';\n\nconstructor(private nativeStorage: NativeStorage) { }\n\n...\n\nthis.nativeStorage.setItem('myitem', {property: 'value', anotherProperty: 'anotherValue'})\n  .then(\n    () => console.log('Stored item!'),\n    error => console.error('Error storing item', error)\n  );\n\nthis.nativeStorage.getItem('myitem')\n  .then(\n    data => console.log(data),\n    error => console.error(error)\n  );\n```\n",
    "repo": "https://github.com/TheCocoaProject/cordova-plugin-nativestorage",
    "cordovaPlugin": {
      "name": "cordova-plugin-nativestorage"
    }
  },
  {
    "name": "@ionic-native/navigation-bar",
    "displayName": "Navigation Bar",
    "description": "<p>The NavigationBar plugin allows you to hide and auto hide the android navigation bar.</p>\n",
    "platforms": [
      "Android"
    ],
    "usage": "\n```typescript\nimport { NavigationBar } from '@ionic-native/navigation-bar/ngx';\n\nconstructor(private navigationBar: NavigationBar) { }\n\n...\n\nlet autoHide: boolean = true;\nthis.navigationBar.setUp(autoHide);\n```\n",
    "repo": "https://github.com/cranberrygame/cordova-plugin-navigationbar",
    "cordovaPlugin": {
      "name": "cordova-plugin-navigationbar"
    }
  },
  {
    "name": "@ionic-native/network-interface",
    "displayName": "Network Interface",
    "description": "<p>Network interface information plugin for Cordova/PhoneGap that supports Android, Blackberry 10, Browser, iOS, and Windows Phone 8.</p>\n",
    "platforms": [
      "Android",
      "BlackBerry 10",
      "Browser",
      "iOS",
      "Windows",
      "Windows Phone"
    ],
    "usage": "\n```typescript\nimport { NetworkInterface } from '@ionic-native/network-interface/ngx';\n\nconstructor( private networkInterface: NetworkInterface ) {\n\n  this.networkInterface.getWiFiIPAddress()\n    .then(address => console.info(`IP: ${address.ip}, Subnet: ${address.subnet}`))\n    .catch(error => console.error(`Unable to get IP: ${error}`));\n\n  this.networkInterface.getCarrierIPAddress()\n    .then(address => console.info(`IP: ${address.ip}, Subnet: ${address.subnet}`))\n    .catch(error => console.error(`Unable to get IP: ${error}`));\n\n  const url = 'www.github.com';\n  this.networkInterface.getHttpProxyInformation(url)\n    .then(proxy => console.info(`Type: ${proxy.type}, Host: ${proxy.host}, Port: ${proxy.port}`))\n    .catch(error => console.error(`Unable to get proxy info: ${error}`));\n}\n```\n",
    "repo": "https://github.com/salbahra/cordova-plugin-networkinterface",
    "cordovaPlugin": {
      "name": "cordova-plugin-networkinterface"
    }
  },
  {
    "name": "@ionic-native/network",
    "displayName": "Network",
    "description": "<p>Requires Cordova plugin: cordova-plugin-network-information. For more info, please see the <a href=\"https://github.com/apache/cordova-plugin-network-information\">Network plugin docs</a>.</p>\n",
    "platforms": [
      "Amazon Fire OS",
      "Android",
      "Browser",
      "iOS",
      "Windows"
    ],
    "usage": "\n```typescript\nimport { Network } from '@ionic-native/network/ngx';\n\nconstructor(private network: Network) { }\n\n...\n\n// watch network for a disconnection\nlet disconnectSubscription = this.network.onDisconnect().subscribe(() => {\n  console.log('network was disconnected :-(');\n});\n\n// stop disconnect watch\ndisconnectSubscription.unsubscribe();\n\n\n// watch network for a connection\nlet connectSubscription = this.network.onConnect().subscribe(() => {\n  console.log('network connected!');\n  // We just got a connection but we need to wait briefly\n   // before we determine the connection type. Might need to wait.\n  // prior to doing any api requests as well.\n  setTimeout(() => {\n    if (this.network.type === 'wifi') {\n      console.log('we got a wifi connection, woohoo!');\n    }\n  }, 3000);\n});\n\n// stop connect watch\nconnectSubscription.unsubscribe();\n\n```",
    "repo": "https://github.com/apache/cordova-plugin-network-information",
    "cordovaPlugin": {
      "name": "cordova-plugin-network-information"
    }
  },
  {
    "name": "@ionic-native/nfc",
    "displayName": "NFC",
    "description": "<p>The NFC plugin allows you to read and write NFC tags. You can also beam to, and receive from, other NFC enabled devices.</p>\n",
    "platforms": [
      "Android",
      "BlackBerry 10",
      "Windows",
      "Windows Phone 8"
    ],
    "usage": "\n```typescript\nimport { NFC, Ndef } from '@ionic-native/nfc/ngx';\n\nconstructor(private nfc: NFC, private ndef: Ndef) { }\n\n...\n\nthis.nfc.addNdefListener(() => {\n  console.log('successfully attached ndef listener');\n}, (err) => {\n  console.log('error attaching ndef listener', err);\n}).subscribe((event) => {\n  console.log('received ndef message. the tag contains: ', event.tag);\n  console.log('decoded tag id', this.nfc.bytesToHexString(event.tag.id));\n\n  let message = this.ndef.textRecord('Hello world');\n  this.nfc.share([message]).then(onSuccess).catch(onError);\n});\n\n```\n",
    "repo": "https://github.com/chariotsolutions/phonegap-nfc",
    "cordovaPlugin": {
      "name": "phonegap-nfc"
    }
  },
  {
    "name": "@ionic-native/onesignal",
    "displayName": "OneSignal",
    "description": "<p>The OneSignal plugin is an client implementation for using the <a href=\"https://onesignal.com/\">OneSignal</a> Service. OneSignal is a simple implementation for delivering push notifications.</p>\n",
    "platforms": [
      "Amazon Fire OS",
      "Android",
      "iOS",
      "Windows"
    ],
    "usage": "\n```typescript\nimport { OneSignal } from '@ionic-native/onesignal/ngx';\n\nconstructor(private oneSignal: OneSignal) { }\n\n...\n\nthis.oneSignal.startInit('b2f7f966-d8cc-11e4-bed1-df8f05be55ba', '703322744261');\n\nthis.oneSignal.inFocusDisplaying(this.oneSignal.OSInFocusDisplayOption.InAppAlert);\n\nthis.oneSignal.handleNotificationReceived().subscribe(() => {\n // do something when notification is received\n});\n\nthis.oneSignal.handleNotificationOpened().subscribe(() => {\n  // do something when a notification is opened\n});\n\nthis.oneSignal.endInit();\n```",
    "repo": "https://github.com/OneSignal/OneSignal-Cordova-SDK",
    "cordovaPlugin": {
      "name": "onesignal-cordova-plugin"
    }
  },
  {
    "name": "@ionic-native/open-native-settings",
    "displayName": "Open Native Settings",
    "description": "<p>Plugin to open native screens of iOS/android settings</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\nYou can open any of these settings:\n```\n \"about\", // ios\n \"accessibility\", // ios, android\n \"account\", // ios, android\n \"airplane_mode\", // ios, android\n \"apn\", // android\n \"application_details\", // ios, android\n \"application_development\", // android\n \"application\", // android\n \"autolock\", // ios\n \"battery_optimization\", // android\n \"bluetooth\", // ios, android\n \"castle\", // ios\n \"captioning\", // android\n \"cast\", // android\n \"cellular_usage\", // ios\n \"configuration_list\", // ios\n \"data_roaming\", // android\n \"date\", // ios, android\n \"display\", // ios, android\n \"dream\", // android\n \"facetime\", // ios\n \"home\", // android\n \"keyboard\", // ios, android\n \"keyboard_subtype\", // android\n \"locale\", // ios, android\n\"location\", // ios, android\n\"locations\", // ios\n\"manage_all_applications\", // android\n\"manage_applications\", // android\n\"memory_card\", // android\n\"music\", // ios\n\"music_equalizer\", // ios\n\"music_volume\", // ios\n\"network\", // ios, android\n\"nike_ipod\", // ios\n\"nfcsharing\", // android\n\"nfc_payment\", // android\n\"nfc_settings\", // android\n\"notes\", // ios\n\"notification_id\", // ios\n\"passbook\", // ios\n\"phone\", // ios\n\"photos\", // ios\n\"print\", // android\n\"privacy\", // android\n\"quick_launch\", // android\n\"reset\", // ios\n\"ringtone\", // ios\n\"browser\", // ios\n\"search\", // ios, android\n\"security\", // android\n\"settings\", // ios, android\n\"show_regulatory_info\",\n\"sound\", // ios, android\n\"software_update\", // ios\n\"storage\", // ios, android\n\"store\", // ios, android\n\"sync\", // android\n\"tethering\", // ios\n\"twitter\", // ios\n\"touch\", // ios\n\"usage\", // ios, android\n\"user_dictionary\", // android\n\"video\", // ios\n\"voice_input\", // android\n\"vpn\", // ios\n\"wallpaper\", // ios\n\"wifi_ip\", // android\n\"wifi\", // ios, android\n\"wireless\" // android\n ```\n```typescript\nimport { OpenNativeSettings } from '@ionic-native/open-native-settings/ngx';\n\n\nconstructor(private openNativeSettings: OpenNativeSettings) { }\n\n...\n\n\n```\n",
    "repo": "https://github.com/guyromb/Cordova-open-native-settings",
    "cordovaPlugin": {
      "name": "cordova-open-native-settings"
    }
  },
  {
    "name": "@ionic-native/openalpr",
    "displayName": "OpenALPR",
    "description": "<p>This Cordova plugin adds support for the OpenALPR (Automatic License Plate Recognition) library, which provides support for retrieving the license plate from a picture.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { OpenALPR, OpenALPROptions, OpenALPRResult } from '@ionic-native/openalpr/ngx';\n\n\nconstructor(private openALPR: OpenALPR) { }\n\nconst scanOptions: OpenALPROptions = {\n   country: this.openALPR.Country.EU,\n   amount: 3\n}\n\n// To get imageData, you can use the @ionic-native/camera module for example. It works with DestinationType.FILE_URI and DATA_URL\n\nthis.openALPR.scan(imageData, scanOptions)\n  .then((res: [OpenALPRResult]) => console.log(res))\n  .catch((error: Error) => console.error(error));\n\n```\n",
    "repo": "https://github.com/iMicknl/cordova-plugin-openalpr",
    "cordovaPlugin": {
      "name": "cordova-plugin-openalpr"
    }
  },
  {
    "name": "@ionic-native/paypal",
    "displayName": "PayPal",
    "description": "<p>PayPal plugin for Cordova/Ionic Applications</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { PayPal, PayPalPayment, PayPalConfiguration } from '@ionic-native/paypal/ngx';\n\nconstructor(private payPal: PayPal) { }\n\n...\n\n\nthis.payPal.init({\n  PayPalEnvironmentProduction: 'YOUR_PRODUCTION_CLIENT_ID',\n  PayPalEnvironmentSandbox: 'YOUR_SANDBOX_CLIENT_ID'\n}).then(() => {\n  // Environments: PayPalEnvironmentNoNetwork, PayPalEnvironmentSandbox, PayPalEnvironmentProduction\n  this.payPal.prepareToRender('PayPalEnvironmentSandbox', new PayPalConfiguration({\n    // Only needed if you get an \"Internal Service Error\" after PayPal login!\n    //payPalShippingAddressOption: 2 // PayPalShippingAddressOptionPayPal\n  })).then(() => {\n    let payment = new PayPalPayment('3.33', 'USD', 'Description', 'sale');\n    this.payPal.renderSinglePaymentUI(payment).then(() => {\n      // Successfully paid\n\n      // Example sandbox response\n      //\n      // {\n      //   \"client\": {\n      //     \"environment\": \"sandbox\",\n      //     \"product_name\": \"PayPal iOS SDK\",\n      //     \"paypal_sdk_version\": \"2.16.0\",\n      //     \"platform\": \"iOS\"\n      //   },\n      //   \"response_type\": \"payment\",\n      //   \"response\": {\n      //     \"id\": \"PAY-1AB23456CD789012EF34GHIJ\",\n      //     \"state\": \"approved\",\n      //     \"create_time\": \"2016-10-03T13:33:33Z\",\n      //     \"intent\": \"sale\"\n      //   }\n      // }\n    }, () => {\n      // Error or render dialog closed without being successful\n    });\n  }, () => {\n    // Error in configuration\n  });\n}, () => {\n  // Error in initialization, maybe PayPal isn't supported or something else\n});\n```",
    "repo": "https://github.com/paypal/PayPal-Cordova-Plugin",
    "cordovaPlugin": {
      "name": "com.paypal.cordova.mobilesdk"
    }
  },
  {
    "name": "@ionic-native/pedometer",
    "displayName": "Pedometer",
    "description": "<p>Fetch pedestrian-related pedometer data, such as step counts and other information about the distance travelled.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { Pedometer } from '@ionic-native/pedometer/ngx';\n\nPedometer.isDistanceAvailable()\n  .then((available: boolean) => console.log(available))\n  .catch((error: any) => console.log(error));\n\nPedometer.startPedometerUpdates()\n   .subscribe((data: IPedometerData) => {\n     console.log(data);\n   });\n```\n",
    "repo": "https://github.com/leecrossley/cordova-plugin-pedometer",
    "cordovaPlugin": {
      "name": "cordova-plugin-pedometer"
    }
  },
  {
    "name": "@ionic-native/phonegap-local-notification",
    "displayName": "Phonegap Local Notification",
    "description": "<p>The Local Notification plugin gives developers the ability to post notifications from their app that show up in the device’s notification area. The API for the local notification plugin follows the W3C Web Notifications specification: <a href=\"https://www.w3.org/TR/notifications/\">https://www.w3.org/TR/notifications/</a></p>\n",
    "platforms": [
      "Android",
      "Browser",
      "iOS",
      "Windows"
    ],
    "usage": "\n```\nimport { PhonegapLocalNotification } from '@ionic-native/phonegap-local-notification/ngx';\n\n\nconstructor(private localNotification: PhonegapLocalNotification) { }\n\n...\n\nthis.localNotification.requestPermission().then(\n  (permission) => {\n    if (permission === 'granted') {\n\n      // Create the notification\n      this.localNotification.create('My Title', {\n        tag: 'message1',\n        body: 'My body',\n        icon: 'assets/icon/favicon.ico'\n      });\n\n    }\n  }\n);\n\n```\n",
    "repo": "https://github.com/phonegap/phonegap-plugin-local-notification",
    "cordovaPlugin": {
      "name": "phonegap-plugin-local-notification"
    }
  },
  {
    "name": "@ionic-native/photo-library",
    "displayName": "Photo Library",
    "description": "<p>The PhotoLibrary plugin allows access to photos from device by url. So you can use plain img tag to display photos and their thumbnails, and different 3rd party libraries as well. Saving photos and videos to the library is also supported. cdvphotolibrary urls should be trusted by Angular. See plugin homepage to learn how.</p>\n",
    "platforms": [
      "Android",
      "Browser",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { PhotoLibrary } from '@ionic-native/photo-library/ngx';\n\nconstructor(private photoLibrary: PhotoLibrary) { }\n\nthis.photoLibrary.requestAuthorization().then(() => {\n  this.photoLibrary.getLibrary().subscribe({\n    next: library => {\n      library.forEach(function(libraryItem) {\n        console.log(libraryItem.id);          // ID of the photo\n        console.log(libraryItem.photoURL);    // Cross-platform access to photo\n        console.log(libraryItem.thumbnailURL);// Cross-platform access to thumbnail\n        console.log(libraryItem.fileName);\n        console.log(libraryItem.width);\n        console.log(libraryItem.height);\n        console.log(libraryItem.creationDate);\n        console.log(libraryItem.latitude);\n        console.log(libraryItem.longitude);\n        console.log(libraryItem.albumIds);    // array of ids of appropriate AlbumItem, only of includeAlbumsData was used\n      });\n    },\n    error: err => { console.log('could not get photos'); },\n    complete: () => { console.log('done getting photos'); }\n  });\n})\n.catch(err => console.log('permissions weren\\'t granted'));\n\n```\n",
    "repo": "https://github.com/terikon/cordova-plugin-photo-library",
    "cordovaPlugin": {
      "name": "cordova-plugin-photo-library"
    }
  },
  {
    "name": "@ionic-native/photo-viewer",
    "displayName": "Photo Viewer",
    "description": "<p>This plugin can display your image in full screen with the ability to pan, zoom, and share the image.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { PhotoViewer } from '@ionic-native/photo-viewer/ngx';\n\nconstructor(private photoViewer: PhotoViewer) { }\n\n...\n\nthis.photoViewer.show('https://mysite.com/path/to/image.jpg');\n\nthis.photoViewer.show('https://mysite.com/path/to/image.jpg', 'My image title', {share: false});\n```\n",
    "repo": "https://github.com/sarriaroman/photoviewer",
    "cordovaPlugin": {
      "name": "com-sarriaroman-photoviewer"
    }
  },
  {
    "name": "@ionic-native/pin-check",
    "displayName": "Pin Check",
    "description": "<p>This plugin is for use with Apache Cordova and allows your application to check whether pin/keyguard or passcode is setup on iOS and Android phones.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { PinCheck } from '@ionic-native/pin-check/ngx';\nimport { Platform } from 'ionic-angular';\n\nconstructor(private pinCheck: PinCheck, private platform: Platform) { }\n\n...\n\nthis.pinCheck.isPinSetup()\n  .then(\n    (success: string) =>  console.log(\"pin is setup.\");,\n    (error: string) => console.log(\"pin not setup.\");\n  );\n```\n",
    "repo": "https://github.com/shangyilim/cordova-plugin-pincheck",
    "cordovaPlugin": {
      "name": "cordova-plugin-pincheck"
    }
  },
  {
    "name": "@ionic-native/pin-dialog",
    "displayName": "Pin Dialog",
    "description": "<p>PhoneGap numeric password dialog plugin for Android and iOS.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { PinDialog } from '@ionic-native/pin-dialog/ngx';\n\n\nconstructor(private pinDialog: PinDialog) { }\n\n...\n\nthis.pinDialog.prompt('Enter your PIN', 'Verify PIN', ['OK', 'Cancel'])\n  .then(\n    (result: any) => {\n      if (result.buttonIndex == 1) console.log('User clicked OK, value is: ', result.input1);\n      else if(result.buttonIndex == 2) console.log('User cancelled');\n    }\n  );\n```\n",
    "repo": "https://github.com/Paldom/PinDialog",
    "cordovaPlugin": {
      "name": "cordova-plugin-pin-dialog"
    }
  },
  {
    "name": "@ionic-native/pinterest",
    "displayName": "Pinterest",
    "description": "<p>Cordova plugin for Pinterest</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { Pinterest, PinterestUser, PinterestPin, PinterestBoard } from '@ionic-native/pinterest/ngx';\n\nconstructor(private pinterest: Pinterest) { }\n\n...\n\nconst scopes = [\n  this.pinterest.SCOPES.READ_PUBLIC,\n  this.pinterest.SCOPES.WRITE_PUBLIC,\n  this.pinterest.SCOPES.READ_RELATIONSHIPS,\n  this.pinterest.SCOPES.WRITE_RELATIONSHIPS\n];\n\nthis.pinterest.login(scopes)\n  .then(res => console.log('Logged in!', res))\n  .catch(err => console.error('Error loggin in', err));\n\nthis.pinterest.getMyPins()\n  .then((pins: PinterestPin[]) => console.log(pins))\n  .catch(err => console.error(err));\n\nthis.pinterest.getMe()\n  .then((user: PinterestUser) => console.log(user));\n\nthis.pinterest.getMyBoards()\n  .then((boards: PinterestBoard[]) => console.log(boards));\n\n```",
    "repo": "https://github.com/zyramedia/cordova-plugin-pinterest",
    "cordovaPlugin": {
      "name": "cordova-plugin-pinterest"
    }
  },
  {
    "name": "@ionic-native/power-management",
    "displayName": "Power Management",
    "description": "<p>The PowerManagement plugin offers access to the devices power-management functionality. It should be used for applications which keep running for a long time without any user interaction.</p>\n",
    "platforms": [
      "Android",
      "iOS",
      "Windows",
      "Windows Phone"
    ],
    "usage": "\n```typescript\nimport { PowerManagement } from '@ionic-native/power-management/ngx';\n\nconstructor(private powerManagement: PowerManagement) { }\n\n...\n\nthis.powerManagement.acquire()\n  .then(onSuccess)\n  .catch(onError);\n\n```\n",
    "repo": "https://github.com/Viras-/cordova-plugin-powermanagement",
    "cordovaPlugin": {
      "name": "cordova-plugin-powermanagement-orig"
    }
  },
  {
    "name": "@ionic-native/printer",
    "displayName": "Printer",
    "description": "<p>Prints documents or HTML rendered content</p>\n",
    "platforms": [
      "Android",
      "iOS",
      "Windows"
    ],
    "usage": "\n```typescript\nimport { Printer, PrintOptions } from '@ionic-native/printer/ngx';\n\nconstructor(private printer: Printer) { }\n\n...\n\nthis.printer.isAvailable().then(onSuccess, onError);\n\nlet options: PrintOptions = {\n     name: 'MyDocument',\n     printerId: 'printer007',\n     duplex: true,\n     landscape: true,\n     grayscale: true\n   }\n\nthis.printer.print(content, options).then(onSuccess, onError);\n```",
    "repo": "https://github.com/katzer/cordova-plugin-printer",
    "cordovaPlugin": {
      "name": "cordova-plugin-printer"
    }
  },
  {
    "name": "@ionic-native/pro",
    "displayName": "Pro",
    "description": "<p>This plugin enables Ionic Pro services like live updates and error monitoring</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { Pro, AppInfo, DeployInfo } from '@ionic-native/pro/ngx';\n\n\nconstructor(private pro: Pro) { }\n\n// Get app info\nthis.pro.getAppInfo().then((res: AppInfo) => {\n  console.log(res)\n})\n\n// Get live update info\nthis.pro.deploy.info().then((res: DeployInfo) => {\n  console.log(res)\n})\n```\n",
    "repo": "https://github.com/ionic-team/cordova-plugin-ionic",
    "cordovaPlugin": {
      "name": "cordova-plugin-ionic"
    }
  },
  {
    "name": "@ionic-native/push",
    "displayName": "Push",
    "description": "<p>Register and receive push notifications.</p>\n",
    "platforms": [
      "Android",
      "Browser",
      "iOS",
      "Windows"
    ],
    "usage": "\n```typescript\nimport { Push, PushObject, PushOptions } from '@ionic-native/push/ngx';\n\nconstructor(private push: Push) { }\n\n...\n\n\n// to check if we have permission\nthis.push.hasPermission()\n  .then((res: any) => {\n\n    if (res.isEnabled) {\n      console.log('We have permission to send push notifications');\n    } else {\n      console.log('We do not have permission to send push notifications');\n    }\n\n  });\n\n// Create a channel (Android O and above). You'll need to provide the id, description and importance properties.\nthis.push.createChannel({\n id: \"testchannel1\",\n description: \"My first test channel\",\n // The importance property goes from 1 = Lowest, 2 = Low, 3 = Normal, 4 = High and 5 = Highest.\n importance: 3\n}).then(() => console.log('Channel created'));\n\n// Delete a channel (Android O and above)\nthis.push.deleteChannel('testchannel1').then(() => console.log('Channel deleted'));\n\n// Return a list of currently configured channels\nthis.push.listChannels().then((channels) => console.log('List of channels', channels))\n\n// to initialize push notifications\n\nconst options: PushOptions = {\n   android: {},\n   ios: {\n       alert: 'true',\n       badge: true,\n       sound: 'false'\n   },\n   windows: {},\n   browser: {\n       pushServiceURL: 'http://push.api.phonegap.com/v1/push'\n   }\n}\n\nconst pushObject: PushObject = this.push.init(options);\n\n\npushObject.on('notification').subscribe((notification: any) => console.log('Received a notification', notification));\n\npushObject.on('registration').subscribe((registration: any) => console.log('Device registered', registration));\n\npushObject.on('error').subscribe(error => console.error('Error with Push plugin', error));\n\n\n```\n",
    "repo": "https://github.com/phonegap/phonegap-plugin-push",
    "cordovaPlugin": {
      "name": "phonegap-plugin-push"
    }
  },
  {
    "name": "@ionic-native/qqsdk",
    "displayName": "QQSDK",
    "description": "<p>This Plugin is a wrapper around the Tencent QQ SDK for Android and iOS. Provides access to QQ ssoLogin, QQ Sharing, QQZone Sharing etc.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { QQSDK, QQShareOptions } from '@ionic-native/qqsdk/ngx';\n\nconstructor(private qq: QQSDK) { }\n\n...\n\n\nconst options: QQShareOptions = {\n  client: this.qq.ClientType.QQ,\n  scene: this.qq.Scene.QQ,\n  title: 'This is a title for cordova-plugin-qqsdk',\n  url: 'https://cordova.apache.org/',\n  image: 'https://cordova.apache.org/static/img/cordova_bot.png',\n  description: 'This is  Cordova QQ share description',\n  flashUrl:  'http://stream20.qqmusic.qq.com/30577158.mp3',\n}\n\nconst clientOptions: QQShareOptions = {\n  client: this.qq.ClientType.QQ,\n}\n\nconst shareTextOptions: QQShareOptions = {\n  client: this.qq.ClientType.QQ,\n  text: 'This is Share Text',\n  scene: this.qq.Scene.QQ,\n}\n\nthis.qq.ssoLogin(clientOptions)\n   .then(result => {\n      // Success\n      console.log('token is ' + result.access_token);\n      console.log('userid is ' + result.userid);\n      console.log('expires_time is ' + new Date(parseInt(result.expires_time)) + ' TimeStamp is ' + result.expires_time);\n   })\n   .catch(error => {\n      console.log(error); // Failed\n   });\n\nthis.qq.logout()\n   .then(() => {\n      console.log('logout success');\n   })\n   .catch(error => {\n      console.log(error);\n   });\n\nthis.qq.checkClientInstalled(clientOptions)\n   .then(() => {\n      console.log('Installed');\n   })\n   .catch(() => {\n      console.log('Not Installed');\n   });\n\nthis.qq.shareText(shareTextOptions)\n   .then(() => {\n      console.log('shareText success');\n   })\n   .catch(error => {\n      console.log(error);\n   });\n\nthis.qq.shareImage(options)\n   .then(() => {\n      console.log('shareImage success');\n   })\n   .catch(error => {\n      console.log(error);\n   });\n}\n\nthis.qq.shareNews(options)\n   .then(() => {\n      console.log('shareNews success');\n   })\n   .catch(error => {\n      console.log(error);\n   });\n}\n\nthis.qq.shareAudio(options)\n   .then(() => {\n      console.log('shareAudio success');\n   })\n   .catch(error => {\n      console.log(error);\n   });\n\n```\n",
    "repo": "https://github.com/iVanPan/Cordova_QQ",
    "cordovaPlugin": {
      "name": "cordova-plugin-qqsdk"
    }
  },
  {
    "name": "@ionic-native/qr-scanner",
    "displayName": "QR Scanner",
    "description": "<p>A fast, energy efficient, highly-configurable QR code scanner for Cordova apps.</p>\n",
    "platforms": [
      "Android",
      "Browser",
      "iOS",
      "Windows"
    ],
    "usage": "\n```typescript\nimport { QRScanner, QRScannerStatus } from '@ionic-native/qr-scanner/ngx';\n\n\nconstructor(private qrScanner: QRScanner) { }\n\n...\n\n// Optionally request the permission early\nthis.qrScanner.prepare()\n  .then((status: QRScannerStatus) => {\n     if (status.authorized) {\n       // camera permission was granted\n\n\n       // start scanning\n       let scanSub = this.qrScanner.scan().subscribe((text: string) => {\n         console.log('Scanned something', text);\n\n         this.qrScanner.hide(); // hide camera preview\n         scanSub.unsubscribe(); // stop scanning\n       });\n\n     } else if (status.denied) {\n       // camera permission was permanently denied\n       // you must use QRScanner.openSettings() method to guide the user to the settings page\n       // then they can grant the permission from there\n     } else {\n       // permission was denied, but not permanently. You can ask for permission again at a later time.\n     }\n  })\n  .catch((e: any) => console.log('Error is', e));\n\n\n```",
    "repo": "https://github.com/bitpay/cordova-plugin-qrscanner",
    "cordovaPlugin": {
      "name": "cordova-plugin-qrscanner"
    }
  },
  {
    "name": "@ionic-native/regula-document-reader",
    "displayName": "Regula Document Reader",
    "description": "<p>Plugin for reading and validation of identification documents.</p>\n",
    "platforms": [
      "iOS",
      "Android"
    ],
    "usage": "\n```typescript\nimport { RegulaDocumentReader } from '@ionic-native/regula-document-reader/ngx';\n\nlet license; // read regula.license file\nRegulaDocumentReader.initReader(license); // initialize reader\nRegulaDocumentReader.scanDocument().then((result) => {\n\t\t// read result\n})\n```\n",
    "repo": "https://github.com/regulaforensics/cordova-plugin-documentreader.git",
    "cordovaPlugin": {
      "name": "cordova-plugin-documentreader"
    }
  },
  {
    "name": "@ionic-native/rollbar",
    "displayName": "Rollbar",
    "description": "<p>This plugin adds Rollbar App monitoring to your application</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { Rollbar } from '@ionic-native/rollbar/ngx';\n\nconstructor(private rollbar: Rollbar) { }\n\n...\n\nthis.rollbar.init();\n\n```\n",
    "repo": "https://github.com/Resgrid/cordova-plugins-rollbar",
    "cordovaPlugin": {
      "name": "resgrid-cordova-plugins-rollbar"
    }
  },
  {
    "name": "@ionic-native/safari-view-controller",
    "displayName": "Safari View Controller",
    "description": "<p>For displaying read-only web content.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { SafariViewController } from '@ionic-native/safari-view-controller/ngx';\n\nconstructor(private safariViewController: SafariViewController) { }\n\n...\n\nthis.safariViewController.isAvailable()\n  .then((available: boolean) => {\n      if (available) {\n\n        this.safariViewController.show({\n          url: 'http://ionic.io',\n          hidden: false,\n          animated: false,\n          transition: 'curl',\n          enterReaderModeIfAvailable: true,\n          tintColor: '#ff0000'\n        })\n        .subscribe((result: any) => {\n            if(result.event === 'opened') console.log('Opened');\n            else if(result.event === 'loaded') console.log('Loaded');\n            else if(result.event === 'closed') console.log('Closed');\n          },\n          (error: any) => console.error(error)\n        );\n\n      } else {\n        // use fallback browser, example InAppBrowser\n      }\n    }\n  );\n```",
    "repo": "https://github.com/EddyVerbruggen/cordova-plugin-safariviewcontroller",
    "cordovaPlugin": {
      "name": "cordova-plugin-safariviewcontroller"
    }
  },
  {
    "name": "@ionic-native/screen-orientation",
    "displayName": "Screen Orientation",
    "description": "<p>Cordova plugin to set/lock the screen orientation in a common way.</p>\n",
    "platforms": [
      "Android",
      "iOS",
      "Windows"
    ],
    "usage": "\n```typescript\nimport { ScreenOrientation } from '@ionic-native/screen-orientation/ngx';\n\nconstructor(private screenOrientation: ScreenOrientation) { }\n\n...\n\n\n// get current\nconsole.log(this.screenOrientation.type); // logs the current orientation, example: 'landscape'\n\n// set to landscape\nthis.screenOrientation.lock(this.screenOrientation.ORIENTATIONS.LANDSCAPE);\n\n// allow user rotate\nthis.screenOrientation.unlock();\n\n// detect orientation changes\nthis.screenOrientation.onChange().subscribe(\n   () => {\n       console.log(\"Orientation Changed\");\n   }\n);\n\n```\n",
    "repo": "https://github.com/apache/cordova-plugin-screen-orientation",
    "cordovaPlugin": {
      "name": "cordova-plugin-screen-orientation"
    }
  },
  {
    "name": "@ionic-native/screenshot",
    "displayName": "Screenshot",
    "description": "<p>Captures a screen shot</p>\n",
    "platforms": [
      "Android",
      "iOS",
      "macOS"
    ],
    "usage": "\n```typescript\nimport { Screenshot } from '@ionic-native/screenshot/ngx';\n\nconstructor(private screenshot: Screenshot) { }\n\n...\n\n// Take a screenshot and save to file\nthis.screenshot.save('jpg', 80, 'myscreenshot.jpg').then(onSuccess, onError);\n\n// Take a screenshot and get temporary file URI\nthis.screenshot.URI(80).then(onSuccess, onError);\n```\n",
    "repo": "https://github.com/gitawego/cordova-screenshot",
    "cordovaPlugin": {
      "name": "com.darktalker.cordova.screenshot"
    }
  },
  {
    "name": "@ionic-native/secure-storage",
    "displayName": "Secure Storage",
    "description": "<p>This plugin gets, sets and removes key,value pairs from a device&#39;s secure storage.</p>\n",
    "platforms": [
      "Android",
      "Browser",
      "iOS",
      "Windows"
    ],
    "usage": "\n\n```typescript\nimport { SecureStorage, SecureStorageObject } from '@ionic-native/secure-storage/ngx';\n\nconstructor(private secureStorage: SecureStorage) { }\n\n...\n\nthis.secureStorage.create('my_store_name')\n  .then((storage: SecureStorageObject) => {\n\n     storage.get('key')\n       .then(\n         data => console.log(data),\n         error => console.log(error)\n     );\n\n     storage.set('key', 'value')\n       .then(\n        data => console.log(data),\n         error => console.log(error)\n     );\n\n     storage.remove('key')\n     .then(\n         data => console.log(data),\n         error => console.log(error)\n     );\n\n  });\n\n\n```",
    "repo": "https://github.com/Crypho/cordova-plugin-secure-storage",
    "cordovaPlugin": {
      "name": "cordova-plugin-secure-storage"
    }
  },
  {
    "name": "@ionic-native/sensors",
    "displayName": "Sensors",
    "description": "<p>This plugin enables sensors on Android devices</p>\n",
    "platforms": [
      "Android"
    ],
    "usage": "\n```typescript\nimport { Sensors, TYPE_SENSOR } from '@ionic-native/sensors/ngx';\n\n\nconstructor(private sensors: Sensors) { }\n\n...\n\n\nthis.sensors.enableSensor(TYPE_SENSOR.LIGHT);\n\n```\n",
    "repo": "https://github.com/fabiorogeriosj/cordova-plugin-sensors.git",
    "cordovaPlugin": {
      "name": "https://github.com/fabiorogeriosj/cordova-plugin-sensors.git"
    }
  },
  {
    "name": "@ionic-native/serial",
    "displayName": "Serial",
    "description": "<p>This plugin provides functions for working with Serial connections</p>\n",
    "platforms": [
      "Android",
      "Ubuntu"
    ],
    "usage": "\n```typescript\nimport { Serial } from '@ionic-native/serial/ngx';\n\nconstructor(private serial: Serial) { }\n\n...\n\nthis.serial.requestPermission().then(() => {\n  this.serial.open({\n    baudRate: 9800,\n    dataBits: 4,\n    stopBits: 1,\n    parity: 0,\n    dtr: true,\n    rts: true,\n    sleepOnPause: false\n  }).then(() => {\n    console.log('Serial connection opened');\n  });\n}).catch((error: any) => console.log(error));\n\n```\n",
    "repo": "https://github.com/xseignard/cordovarduino",
    "cordovaPlugin": {
      "name": "cordovarduino"
    }
  },
  {
    "name": "@ionic-native/shake",
    "displayName": "Shake",
    "description": "<p>Handles shake gesture</p>\n",
    "platforms": [
      "iOS"
    ],
    "usage": "\n```typescript\nimport { Shake } from '@ionic-native/shake/ngx';\n\nconstructor(private shake: Shake) { }\n\n...\n\nconst watch = this.shake.startWatch(60).subscribe(() => {\n  // do something\n  });\n\nwatch.unsubscribe();\n```\n",
    "repo": "https://github.com/leecrossley/cordova-plugin-shake",
    "cordovaPlugin": {
      "name": "cordova-plugin-shake"
    }
  },
  {
    "name": "@ionic-native/sim",
    "displayName": "Sim",
    "description": "<p>Gets info from the Sim card like the carrier name, mcc, mnc and country code and other system dependent info.</p>\n",
    "platforms": [
      "Android",
      "iOS",
      "Windows",
      "Windows Phone"
    ],
    "usage": "\n```typescript\nimport { Sim } from '@ionic-native/sim/ngx';\n\n\nconstructor(private sim: Sim) { }\n\n...\n\nthis.sim.getSimInfo().then(\n  (info) => console.log('Sim info: ', info),\n  (err) => console.log('Unable to get sim info: ', err)\n);\n\nthis.sim.hasReadPermission().then(\n  (info) => console.log('Has permission: ', info)\n);\n\nthis.sim.requestReadPermission().then(\n  () => console.log('Permission granted'),\n  () => console.log('Permission denied')\n);\n```\n",
    "repo": "https://github.com/pbakondy/cordova-plugin-sim",
    "cordovaPlugin": {
      "name": "cordova-plugin-sim"
    }
  },
  {
    "name": "@ionic-native/siri-shortcuts",
    "displayName": "Siri Shortcuts",
    "description": "<p>This plugin only works when your app is built with XCode 10. Shortcuts will only appear on iOS-versions &gt;= 12.0</p>\n",
    "platforms": [
      "iOS"
    ],
    "usage": "\n```typescript\nimport { SiriShortcuts } from '@ionic-native/siri-shortcuts/ngx';\n\n\nconstructor(private siriShortcuts: SiriShortcuts) { }\n\n...\n\n\nthis.siriShortcuts.donate({\n      persistentIdentifier: 'open-my-app',\n      title: 'Open my app',\n      suggestedInvocationPhrase: 'Open my app',\n      userInfo: { username: 'username' },\n      isEligibleForSearch: true,\n      isEligibleForPrediction: true,\n  })\n  .then(() => console.log('Shortcut donated.'))\n  .catch((error: any) => console.error(error));\n\nthis.siriShortcuts.present({\n      persistentIdentifier: 'open-my-app',\n      title: 'Open my app',\n      suggestedInvocationPhrase: 'Open my app',\n      userInfo: { username: 'username' },\n  })\n  .then(() => console.log('Shortcut added.'))\n  .catch((error: any) => console.error(error));\n\nthis.siriShortcuts.remove('open-my-app')\n  .then(() => console.log('Shortcut removed.'))\n  .catch((error: any) => console.error(error));\n\nthis.siriShortcuts.removeAll()\n  .then(() => console.log('All shortcuts removed removed.'))\n  .catch((error: any) => console.error(error));\n\nthis.siriShortcuts.getActivatedShortcut()\n  .then((data: SiriShortcut|null) => console.log(data))\n  .catch((error: any) => console.error(error));\n\n```\n",
    "repo": "https://github.com/bartwesselink/cordova-plugin-siri-shortcuts",
    "cordovaPlugin": {
      "name": "cordova-plugin-siri-shortcuts"
    }
  },
  {
    "name": "@ionic-native/sms",
    "displayName": "SMS",
    "description": "<p>Requires Cordova plugin: cordova-sms-plugin. For more info, please see the <a href=\"https://github.com/cordova-sms/cordova-sms-plugin\">SMS plugin docs</a>.</p>\n",
    "platforms": [
      "Android",
      "iOS",
      "Windows",
      "Windows Phone 8"
    ],
    "usage": "\n```typescript\nimport { SMS } from '@ionic-native/sms/ngx';\n\nconstructor(private sms: SMS) { }\n\n\n...\n\n\n// Send a text message using default options\nthis.sms.send('416123456', 'Hello world!');\n```",
    "repo": "https://github.com/cordova-sms/cordova-sms-plugin",
    "cordovaPlugin": {
      "name": "cordova-sms-plugin"
    }
  },
  {
    "name": "@ionic-native/social-sharing",
    "displayName": "Social Sharing",
    "description": "<p>Share text, files, images, and links via social networks, sms, and email.</p>\n",
    "platforms": [
      "Android",
      "Browser",
      "iOS",
      "Windows",
      "Windows Phone"
    ],
    "usage": "\n```typescript\nimport { SocialSharing } from '@ionic-native/social-sharing/ngx';\n\nconstructor(private socialSharing: SocialSharing) { }\n\n...\n\n// Check if sharing via email is supported\nthis.socialSharing.canShareViaEmail().then(() => {\n  // Sharing via email is possible\n}).catch(() => {\n  // Sharing via email is not possible\n});\n\n// Share via email\nthis.socialSharing.shareViaEmail('Body', 'Subject', ['recipient@example.org']).then(() => {\n  // Success!\n}).catch(() => {\n  // Error!\n});\n```\n",
    "repo": "https://github.com/EddyVerbruggen/SocialSharing-PhoneGap-Plugin",
    "cordovaPlugin": {
      "name": "cordova-plugin-x-socialsharing"
    }
  },
  {
    "name": "@ionic-native/speech-recognition",
    "displayName": "Speech Recognition",
    "description": "<p>This plugin does speech recognition using cloud services</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { SpeechRecognition } from '@ionic-native/speech-recognition/ngx';\n\nconstructor(private speechRecognition: SpeechRecognition) { }\n\n...\n\n\n\n// Check feature available\nthis.speechRecognition.isRecognitionAvailable()\n  .then((available: boolean) => console.log(available))\n\n// Start the recognition process\nthis.speechRecognition.startListening(options)\n  .subscribe(\n    (matches: string[]) => console.log(matches),\n    (onerror) => console.log('error:', onerror)\n  )\n\n// Stop the recognition process (iOS only)\nthis.speechRecognition.stopListening()\n\n// Get the list of supported languages\nthis.speechRecognition.getSupportedLanguages()\n  .then(\n    (languages: string[]) => console.log(languages),\n    (error) => console.log(error)\n  )\n\n// Check permission\nthis.speechRecognition.hasPermission()\n  .then((hasPermission: boolean) => console.log(hasPermission))\n\n// Request permissions\nthis.speechRecognition.requestPermission()\n  .then(\n    () => console.log('Granted'),\n    () => console.log('Denied')\n  )\n\n```\n",
    "repo": "https://github.com/pbakondy/cordova-plugin-speechrecognition",
    "cordovaPlugin": {
      "name": "cordova-plugin-speechrecognition"
    }
  },
  {
    "name": "@ionic-native/speechkit",
    "displayName": "SpeechKit",
    "description": "<p>Implementation of Nuance SpeechKit SDK on Ionic</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { SpeechKit } from '@ionic-native/speechkit/ngx';\n\nconstructor(private speechkit: SpeechKit) { }\n\n\n// find voice names that match language from: https://developer.nuance.com/public/index.php?task=supportedLanguages\nthis.speechkit.tts('Text to be read out loud', 'ENG-GBR', 'Serena').then(\n  (msg) => { console.log(msg); },\n  (err) => { console.log(err); }\n);\n```\n",
    "repo": "https://github.com/Shmarkus/cordova-plugin-nuance-speechkit",
    "cordovaPlugin": {
      "name": "cordova-plugin-nuance-speechkit"
    }
  },
  {
    "name": "@ionic-native/spinner-dialog",
    "displayName": "Spinner Dialog",
    "description": "<p>Cordova plugin for showing a native spinner based on Paldom/SpinnerDialog.</p>\n",
    "platforms": [
      "Android",
      "iOS",
      "Windows Phone 8",
      "Windows"
    ],
    "usage": "\n```typescript\nimport { SpinnerDialog } from '@ionic-native/spinner-dialog/ngx';\n\nconstructor(private spinnerDialog: SpinnerDialog) { }\n\n...\n\nthis.spinnerDialog.show();\n\nthis.spinnerDialog.hide();\n```",
    "repo": "https://github.com/greybax/cordova-plugin-native-spinner",
    "cordovaPlugin": {
      "name": "cordova-plugin-native-spinner"
    }
  },
  {
    "name": "@ionic-native/splash-screen",
    "displayName": "Splash Screen",
    "description": "<p>This plugin displays and hides a splash screen during application launch. The methods below allows showing and hiding the splashscreen after the app has loaded.</p>\n",
    "platforms": [
      "Amazon Fire OS",
      "Android",
      "iOS",
      "Windows"
    ],
    "usage": "\n```typescript\nimport { SplashScreen } from '@ionic-native/splash-screen/ngx';\n\nconstructor(private splashScreen: SplashScreen) { }\n\n...\n\nthis.splashScreen.show();\n\nthis.splashScreen.hide();\n```\n",
    "repo": "https://github.com/apache/cordova-plugin-splashscreen",
    "cordovaPlugin": {
      "name": "cordova-plugin-splashscreen"
    }
  },
  {
    "name": "@ionic-native/sqlite-db-copy",
    "displayName": "Sqlite Db Copy",
    "description": "<p>This plugin does something</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { SqliteDbCopy } from '@ionic-native/sqlite-db-copy/ngx';\n\n\nconstructor(private sqliteDbCopy: SqliteDbCopy) { }\n\n...\n\n\nthis.sqliteDbCopy.copy('sample.db', 0)\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n\n```\n",
    "repo": "https://github.com/an-rahulpandey/cordova-plugin-dbcopy",
    "cordovaPlugin": {
      "name": "cordova-plugin-dbcopy"
    }
  },
  {
    "name": "@ionic-native/sqlite-porter",
    "displayName": "SQLite Porter",
    "description": "<p>This Cordova/Phonegap plugin can be used to import/export to/from a SQLite database using either SQL or JSON.</p>\n",
    "platforms": [
      "Amazon Fire OS",
      "Android",
      "BlackBerry 10",
      "Browser",
      "iOS",
      "Tizen",
      "Windows",
      "Windows Phone"
    ],
    "usage": "\n```typescript\nimport { SQLitePorter } from '@ionic-native/sqlite-porter/ngx';\n\n\nconstructor(private sqlitePorter: SQLitePorter) { }\n\n...\n\nlet db = window.openDatabase('Test', '1.0', 'TestDB', 1 * 1024);\n// or we can use SQLite plugin\n// we will assume that we injected SQLite into this component as sqlite\nthis.sqlite.create({\n  name: 'data.db',\n  location: 'default'\n})\n  .then((db: any) => {\n    let dbInstance = db._objectInstance;\n    // we can pass db._objectInstance as the database option in all SQLitePorter methods\n  });\n\n\nlet sql = 'CREATE TABLE Artist ([Id] PRIMARY KEY, [Title]);' +\n           'INSERT INTO Artist(Id,Title) VALUES (\"1\",\"Fred\");';\n\nthis.sqlitePorter.importSqlToDb(db, sql)\n  .then(() => console.log('Imported'))\n  .catch(e => console.error(e));\n\n\n```\n",
    "repo": "https://github.com/dpa99c/cordova-sqlite-porter",
    "cordovaPlugin": {
      "name": "uk.co.workingedge.cordova.plugin.sqliteporter"
    }
  },
  {
    "name": "@ionic-native/sqlite",
    "displayName": "SQLite\n",
    "description": "<p>Access SQLite databases on the device.</p>\n",
    "platforms": [
      "Android",
      "iOS",
      "macOS",
      "Windows"
    ],
    "usage": "\n\n```typescript\nimport { SQLite, SQLiteObject } from '@ionic-native/sqlite/ngx';\n\nconstructor(private sqlite: SQLite) { }\n\n...\n\nthis.sqlite.create({\n  name: 'data.db',\n  location: 'default'\n})\n  .then((db: SQLiteObject) => {\n\n\n    db.executeSql('create table danceMoves(name VARCHAR(32))', [])\n      .then(() => console.log('Executed SQL'))\n      .catch(e => console.log(e));\n\n\n  })\n  .catch(e => console.log(e));\n\n```\n",
    "repo": "https://github.com/litehelpers/Cordova-sqlite-storage",
    "cordovaPlugin": {
      "name": "cordova-sqlite-storage"
    }
  },
  {
    "name": "@ionic-native/star-prnt",
    "displayName": "StarPRNT",
    "description": "<ul>\n<li>Ionic Native wrappers for the starprnt cordova plugin for Star Micronics Bluetooth/LAN printers</li>\n</ul>\n",
    "platforms": [
      "Android",
      "iOS] // Array of platforms supported",
      "example: [Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { StarPRNT } from '@ionic-native/star-prnt/ngx';\n\n\nconstructor(private starprnt: StarPRNT) { }\n\n...\n\n\nthis.starprnt.portDiscovery('all')\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n\n```\n",
    "repo": "https://github.com/auctifera-josed/starprnt",
    "cordovaPlugin": {
      "name": "cordova-plugin-starprnt"
    }
  },
  {
    "name": "@ionic-native/status-bar",
    "displayName": "Status Bar",
    "description": "<p>Manage the appearance of the native status bar.</p>\n",
    "platforms": [
      "Android",
      "iOS",
      "Windows"
    ],
    "usage": "\n```typescript\nimport { StatusBar } from '@ionic-native/status-bar/ngx';\n\nconstructor(private statusBar: StatusBar) { }\n\n...\n\n// let status bar overlay webview\nthis.statusBar.overlaysWebView(true);\n\n// set status bar to white\nthis.statusBar.backgroundColorByHexString('#ffffff');\n```\n\n",
    "repo": "https://github.com/apache/cordova-plugin-statusbar",
    "cordovaPlugin": {
      "name": "cordova-plugin-statusbar"
    }
  },
  {
    "name": "@ionic-native/stepcounter",
    "displayName": "Stepcounter",
    "description": "<p>Cordova plugin for using device&#39;s stepcounter on Android (API &gt; 19)</p>\n",
    "platforms": [
      "Android"
    ],
    "usage": "\n```typescript\nimport { Stepcounter } from '@ionic-native/stepcounter/ngx';\n\nconstructor(private stepcounter: Stepcounter) { }\n\n...\n\nlet startingOffset = 0;\nthis.stepcounter.start(startingOffset).then(onSuccess => console.log('stepcounter-start success', onSuccess), onFailure => console.log('stepcounter-start error', onFailure));\n\nthis.stepcounter.getHistory().then(historyObj => console.log('stepcounter-history success', historyObj), onFailure => console.log('stepcounter-history error', onFailure));\n\n```\n",
    "repo": "https://github.com/ihadeed/cordova-plugin-stepcounter",
    "cordovaPlugin": {
      "name": "cordova-plugin-stepcounter"
    }
  },
  {
    "name": "@ionic-native/streaming-media",
    "displayName": "Streaming Media",
    "description": "<p>This plugin allows you to stream audio and video in a fullscreen, native player on iOS and Android.</p>\n",
    "platforms": [
      "Amazon Fire OS",
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { StreamingMedia, StreamingVideoOptions } from '@ionic-native/streaming-media/ngx';\n\nconstructor(private streamingMedia: StreamingMedia) { }\n\nlet options: StreamingVideoOptions = {\n  successCallback: () => { console.log('Video played') },\n  errorCallback: (e) => { console.log('Error streaming') },\n  orientation: 'landscape',\n  shouldAutoClose: true,\n  controls: false\n};\n\nthis.streamingMedia.playVideo('https://path/to/video/stream', options);\n\n```",
    "repo": "https://github.com/nchutchind/cordova-plugin-streaming-media",
    "cordovaPlugin": {
      "name": "cordova-plugin-streaming-media"
    }
  },
  {
    "name": "@ionic-native/stripe",
    "displayName": "Stripe",
    "description": "<p>A plugin that allows you to use Stripe&#39;s Native SDKs for Android and iOS.</p>\n",
    "platforms": [
      "Android",
      "Browser",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { Stripe } from '@ionic-native/stripe/ngx';\n\nconstructor(private stripe: Stripe) { }\n\n...\n\nthis.stripe.setPublishableKey('my_publishable_key');\n\nlet card = {\n number: '4242424242424242',\n expMonth: 12,\n expYear: 2020,\n cvc: '220'\n}\n\nthis.stripe.createCardToken(card)\n   .then(token => console.log(token.id))\n   .catch(error => console.error(error));\n\n```\n",
    "repo": "https://github.com/zyramedia/cordova-plugin-stripe",
    "cordovaPlugin": {
      "name": "cordova-plugin-stripe"
    }
  },
  {
    "name": "@ionic-native/taptic-engine",
    "displayName": "Taptic Engine",
    "description": "<p>An Ionic plugin to use Taptic Engine API on iPhone 7, 7 Plus or newer.</p>\n",
    "platforms": [
      "iOS"
    ],
    "usage": "\n```typescript\nimport { TapticEngine } from '@ionic-native/taptic-engine/ngx';\n\n...\n\nconstructor(private taptic: TapticEngine) { }\n\n...\n\nthis.taptic.selection();\n\nthis.taptic.notification();\n\nthis.taptic.impact();\n\n```\n",
    "repo": "https://github.com/EddyVerbruggen/cordova-plugin-taptic-engine",
    "cordovaPlugin": {
      "name": "cordova-plugin-taptic-engine"
    }
  },
  {
    "name": "@ionic-native/tealium-adidentifier",
    "displayName": "TealiumAdIdentifier",
    "description": "<p>This module depends on the <a href=\"https://github.com/tealium/cordova-plugin\">Tealium Cordova Plugin</a>. Without it, this module will not do anything. Makes the IDFA and Google Ad Identifier available in the Tealium data layer.</p>\n",
    "platforms": [
      "Android",
      "iOS]",
      "// Array of platforms supported",
      "example: [Android",
      "iOS"
    ],
    "usage": "\n```\nimport { TealiumAdIdentifier } from '@ionic-native/tealium-adidentifier/ngx';\n\n\nconstructor(private adIdentifier: TealiumAdIdentifier) { }\n\n...\n\n\nthis.adIdentifier.setPersistent(\"main\");\nthis.adIdentifier.setVolatile(\"main\");\n\n```\n",
    "repo": "https://github.com/Tealium/cordova-plugin",
    "cordovaPlugin": {
      "name": "tealium-cordova-adidentifier"
    }
  },
  {
    "name": "@ionic-native/tealium-installreferrer",
    "displayName": "TealiumInstallReferrer",
    "description": "<p>This module depends on the <a href=\"https://github.com/tealium/cordova-plugin\">Tealium Cordova Plugin</a>. Without it, this module will not do anything. Implements a Broadcast Receiver for the INSTALL_REFERRER intent.</p>\n",
    "platforms": [
      "Android]",
      "// Array of platforms supported",
      "example: [Android",
      "iOS"
    ],
    "usage": "\n```\nimport { TealiumInstallReferrer } from '@ionic-native/tealium-installreferrer/ngx';\n\n\nconstructor(private installReferrer: TealiumInstallReferrer) { }\n\n\nthis.installReferrer.setPersistent(\"main\");\nthis.installReferrer.setVolatile(\"main\");\n\n\n\n```\n",
    "repo": "https://github.com/Tealium/cordova-plugin",
    "cordovaPlugin": {
      "name": "tealium-cordova-installreferrer"
    }
  },
  {
    "name": "@ionic-native/tealium",
    "displayName": "Tealium",
    "description": "<p>This plugin provides a TypeScript wrapper around the <a href=\"https://www.tealium.com\">Tealium</a> Cordova plugin for Ionic Native.</p>\n",
    "platforms": [
      "Android",
      "iOS]",
      "// Array of platforms supported",
      "example: [Android",
      "iOS"
    ],
    "usage": "\n```\nimport { Tealium, TealConfig } from '@ionic-native/tealium/ngx';\n\n\nconstructor(private tealium: Tealium) { }\n\n...\n\nlet tealConfig: TealConfig = {\n account: \"<your-account>\",\n profile: \"<your-profile>\",\n environment: \"<your-environment>\", // usually \"dev\", \"qa\" or \"prod\"\n isLifecycleEnabled: \"true\", // pass \"false\" to disable lifecycle tracking\n isCrashReporterEnabled: \"false\", // pass \"true\" to enable crash reporter (Android only)\n instance: \"<your-instance-name\" // an arbitrary instance name. use the same instance name for all subsequent API calls\n}\n\nthis.tealium.init(tealConfig).then(()=>{\n  this.tealium.trackView({\"screen_name\": \"homescreen\"});\n});\n\n```",
    "repo": "https://github.com/Tealium/cordova-plugin",
    "cordovaPlugin": {
      "name": "tealium-cordova-plugin"
    }
  },
  {
    "name": "@ionic-native/text-to-speech",
    "displayName": "Text To Speech",
    "description": "<p>Text to Speech plugin</p>\n",
    "platforms": [
      "Android",
      "iOS",
      "Windows Phone 8"
    ],
    "usage": "\n```typescript\nimport { TextToSpeech } from '@ionic-native/text-to-speech/ngx';\n\nconstructor(private tts: TextToSpeech) { }\n\n...\n\nthis.tts.speak('Hello World')\n  .then(() => console.log('Success'))\n  .catch((reason: any) => console.log(reason));\n\n```",
    "repo": "https://github.com/vilic/cordova-plugin-tts",
    "cordovaPlugin": {
      "name": "cordova-plugin-tts"
    }
  },
  {
    "name": "@ionic-native/themeable-browser",
    "displayName": "Themeable Browser",
    "description": "<p>In-app browser that allows styling.</p>\n",
    "platforms": [],
    "usage": "\n```typescript\nimport { ThemeableBrowser, ThemeableBrowserOptions, ThemeableBrowserObject } from '@ionic-native/themeable-browser/ngx';\n\nconstructor(private themeableBrowser: ThemeableBrowser) { }\n\n...\n\n// can add options from the original InAppBrowser in a JavaScript object form (not string)\n// This options object also takes additional parameters introduced by the ThemeableBrowser plugin\n// This example only shows the additional parameters for ThemeableBrowser\n// Note that that `image` and `imagePressed` values refer to resources that are stored in your app\nconst options: ThemeableBrowserOptions = {\n     statusbar: {\n         color: '#ffffffff'\n     },\n     toolbar: {\n         height: 44,\n         color: '#f0f0f0ff'\n     },\n     title: {\n         color: '#003264ff',\n         showPageTitle: true\n     },\n     backButton: {\n         image: 'back',\n         imagePressed: 'back_pressed',\n         align: 'left',\n         event: 'backPressed'\n     },\n     forwardButton: {\n         image: 'forward',\n         imagePressed: 'forward_pressed',\n         align: 'left',\n         event: 'forwardPressed'\n     },\n     closeButton: {\n         image: 'close',\n         imagePressed: 'close_pressed',\n         align: 'left',\n         event: 'closePressed'\n     },\n     customButtons: [\n         {\n             image: 'share',\n             imagePressed: 'share_pressed',\n             align: 'right',\n             event: 'sharePressed'\n         }\n     ],\n     menu: {\n         image: 'menu',\n         imagePressed: 'menu_pressed',\n         title: 'Test',\n         cancel: 'Cancel',\n         align: 'right',\n         items: [\n             {\n                 event: 'helloPressed',\n                 label: 'Hello World!'\n             },\n             {\n                 event: 'testPressed',\n                 label: 'Test!'\n             }\n         ]\n     },\n     backButtonCanClose: true\n}\n\nconst browser: ThemeableBrowserObject = this.themeableBrowser.create('https://ionic.io', '_blank', options);\n\n```\nWe suggest that you refer to the plugin's repository for additional information on usage that may not be covered here.",
    "repo": "https://github.com/initialxy/cordova-plugin-themeablebrowser",
    "cordovaPlugin": {
      "name": "cordova-plugin-themeablebrowser"
    }
  },
  {
    "name": "@ionic-native/three-dee-touch",
    "displayName": "3D Touch",
    "description": "<p>The 3D Touch plugin adds 3D Touch capabilities to your Cordova app.</p>\n",
    "platforms": [
      "iOS"
    ],
    "usage": "\nPlease do refer to the original plugin's repo for detailed usage. The usage example here might not be sufficient.\n```typescript\nimport { ThreeDeeTouch, ThreeDeeTouchQuickAction, ThreeDeeTouchForceTouch } from '@ionic-native/three-dee-touch/ngx';\n\nconstructor(private threeDeeTouch: ThreeDeeTouch) { }\n\n...\n\nthis.threeDeeTouch.isAvailable().then(isAvailable => console.log('3D Touch available? ' + isAvailable));\n\nthis.threeDeeTouch.watchForceTouches()\n  .subscribe(\n    (data: ThreeDeeTouchForceTouch) => {\n      console.log('Force touch %' + data.force);\n      console.log('Force touch timestamp: ' + data.timestamp);\n      console.log('Force touch x: ' + data.x);\n      console.log('Force touch y: ' + data.y);\n    }\n  );\n\n\nlet actions: ThreeDeeTouchQuickAction[] = [\n  {\n    type: 'checkin',\n    title: 'Check in',\n    subtitle: 'Quickly check in',\n    iconType: 'Compose'\n  },\n  {\n    type: 'share',\n    title: 'Share',\n    subtitle: 'Share like you care',\n    iconType: 'Share'\n  },\n  {\n    type: 'search',\n    title: 'Search',\n    iconType: 'Search'\n  },\n  {\n    title: 'Show favorites',\n    iconTemplate: 'HeartTemplate'\n  }\n];\n\nthis.threeDeeTouch.configureQuickActions(actions);\n\nthis.threeDeeTouch.onHomeIconPressed().subscribe(\n (payload) => {\n   // returns an object that is the button you presed\n   console.log('Pressed the ${payload.title} button')\n   console.log(payload.type)\n\n }\n)\n```",
    "repo": "https://github.com/EddyVerbruggen/cordova-plugin-3dtouch",
    "cordovaPlugin": {
      "name": "cordova-plugin-3dtouch"
    }
  },
  {
    "name": "@ionic-native/toast",
    "displayName": "Toast",
    "description": "<p>This plugin allows you to show a native Toast (a little text popup) on iOS, Android and WP8. It&#39;s great for showing a non intrusive native notification which is guaranteed always in the viewport of the browser.</p>\n",
    "platforms": [
      "Android",
      "BlackBerry 10",
      "iOS",
      "Windows",
      "Windows Phone 8"
    ],
    "usage": "\n```typescript\nimport { Toast } from '@ionic-native/toast/ngx';\n\nconstructor(private toast: Toast) { }\n\n...\n\nthis.toast.show(`I'm a toast`, '5000', 'center').subscribe(\n  toast => {\n    console.log(toast);\n  }\n);\n```",
    "repo": "https://github.com/EddyVerbruggen/Toast-PhoneGap-Plugin",
    "cordovaPlugin": {
      "name": "cordova-plugin-x-toast"
    }
  },
  {
    "name": "@ionic-native/touch-id",
    "displayName": "Touch ID",
    "description": "<p>Scan the fingerprint of a user with the TouchID sensor.</p>\n",
    "platforms": [
      "iOS"
    ],
    "usage": "\n```typescript\nimport { TouchID } from '@ionic-native/touch-id/ngx';\n\nconstructor(private touchId: TouchID) { }\n\n...\n\nthis.touchId.isAvailable()\n  .then(\n    res => console.log('TouchID is available!'),\n    err => console.error('TouchID is not available', err)\n  );\n\nthis.touchId.verifyFingerprint('Scan your fingerprint please')\n  .then(\n    res => console.log('Ok', res),\n    err => console.error('Error', err)\n  );\n```\n\n### Error Codes\n\nThe plugin will reject for various reasons. Your app will most likely need to respond to the cases differently.\n\nHere is a list of some of the error codes:\n\n -  `-1` - Fingerprint scan failed more than 3 times\n -  `-2` or `-128` - User tapped the 'Cancel' button\n -  `-3` - User tapped the 'Enter Passcode' or 'Enter Password' button\n -  `-4` - The scan was cancelled by the system (Home button for example)\n -  `-6` - TouchID is not Available\n -  `-8` - TouchID is locked out from too many tries\n",
    "repo": "https://github.com/EddyVerbruggen/cordova-plugin-touch-id",
    "cordovaPlugin": {
      "name": "cordova-plugin-touch-id"
    }
  },
  {
    "name": "@ionic-native/twitter-connect",
    "displayName": "Twitter Connect",
    "description": "<p>Plugin to use Twitter Single Sign On Uses Twitter&#39;s Fabric SDK ```typescript import { TwitterConnect } from &#39;@ionic-native/twitter-connect/ngx&#39;;</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": null,
    "repo": "https://github.com/chroa/twitter-connect-plugin",
    "cordovaPlugin": {
      "name": "twitter-connect-plugin"
    }
  },
  {
    "name": "@ionic-native/uid",
    "displayName": "Uid",
    "description": "<p>Get unique identifiers: UUID, IMEI, IMSI, ICCID and MAC.</p>\n",
    "platforms": [
      "Android"
    ],
    "usage": "\n```typescript\nimport { Uid } from '@ionic-native/uid/ngx';\nimport { AndroidPermissions } from '@ionic-native/android-permissions/ngx';\n\nconstructor(private uid: Uid, private androidPermissions: AndroidPermissions) { }\n\n\nasync getImei() {\n const { hasPermission } = await this.androidPermissions.checkPermission(\n   this.androidPermissions.PERMISSION.READ_PHONE_STATE\n );\n\n if (!hasPermission) {\n   const result = await this.androidPermissions.requestPermission(\n     this.androidPermissions.PERMISSION.READ_PHONE_STATE\n   );\n\n   if (!result.hasPermission) {\n     throw new Error('Permissions required');\n   }\n\n   // ok, a user gave us permission, we can get him identifiers after restart app\n   return;\n }\n\n  return this.uid.IMEI\n}\n```\n",
    "repo": "https://github.com/lionelhe/cordova-plugin-uid",
    "cordovaPlugin": {
      "name": "cordova-plugin-uid"
    }
  },
  {
    "name": "@ionic-native/unique-device-id",
    "displayName": "Unique Device ID",
    "description": "<p>This plugin produces a unique, cross-install, app-specific device id.</p>\n",
    "platforms": [
      "Android",
      "iOS",
      "Windows Phone 8"
    ],
    "usage": "\n```typescript\nimport { UniqueDeviceID } from '@ionic-native/unique-device-id/ngx';\n\nconstructor(private uniqueDeviceID: UniqueDeviceID) { }\n\n...\n\nthis.uniqueDeviceID.get()\n  .then((uuid: any) => console.log(uuid))\n  .catch((error: any) => console.log(error));\n\n```\n",
    "repo": "https://github.com/Paldom/UniqueDeviceID",
    "cordovaPlugin": {
      "name": "cordova-plugin-uniquedeviceid"
    }
  },
  {
    "name": "@ionic-native/uptime",
    "displayName": "Uptime",
    "description": "<p>This plugin provides the time spent in milliseconds since boot (uptime).</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { Uptime } from '@ionic-native/uptime/ngx';\n\nconstructor(private uptime: Uptime) { }\n\n...\n\nthis.uptime.getUptime(includeDeepSleep)\n  .then(uptime => console.log(uptime))\n  .catch(error => console.log(error));\n\n```\n",
    "repo": "https://github.com/s1lviu/cordova-plugin-uptime",
    "cordovaPlugin": {
      "name": "cordova-plugin-uptime"
    }
  },
  {
    "name": "@ionic-native/user-agent",
    "displayName": "User Agent",
    "description": "<p>The UserAgent plugin provides functions to set the HTTP  user-agent header. For more info about User-Agents, please <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent\">see the HTTP User-Agent docs</a>.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { UserAgent } from '@ionic-native/user-agent/ngx';\n\n\nconstructor(private userAgent: UserAgent) { }\n\n...\n\n\nthis.userAgent.set('Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36')\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n\n* this.userAgent.get()\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n\n* this.userAgent.reset()\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n\n```\n",
    "repo": "https://github.com/danielsogl/cordova-plugin-useragent",
    "cordovaPlugin": {
      "name": "cordova-plugin-useragent"
    }
  },
  {
    "name": "@ionic-native/vibration",
    "displayName": "Vibration",
    "description": "<p>Vibrates the device</p>\n",
    "platforms": [
      "Android",
      "iOS",
      "Windows"
    ],
    "usage": "\n```typescript\nimport { Vibration } from '@ionic-native/vibration/ngx';\n\nconstructor(private vibration: Vibration) { }\n\n...\n\n// Vibrate the device for a second\n// Duration is ignored on iOS.\nthis.vibration.vibrate(1000);\n\n// Vibrate 2 seconds\n// Pause for 1 second\n// Vibrate for 2 seconds\n// Patterns work on Android and Windows only\nthis.vibration.vibrate([2000,1000,2000]);\n\n// Stop any current vibrations immediately\n// Works on Android and Windows only\nthis.vibration.vibrate(0);\n```\n",
    "repo": "https://github.com/apache/cordova-plugin-vibration",
    "cordovaPlugin": {
      "name": "cordova-plugin-vibration"
    }
  },
  {
    "name": "@ionic-native/video-capture-plus",
    "displayName": "Video Capture Plus",
    "description": "<p>This plugin offers some useful extras on top of the default Media Capture Plugin capabilities: - HD recording. - Starting with the front camera. - A custom overlay (currently iOS only).</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { VideoCapturePlus, VideoCapturePlusOptions, MediaFile } from '@ionic-native/video-capture-plus/ngx';\n\n\nconstructor(private videoCapturePlus: VideoCapturePlus) { }\n\n...\n\nconst options: VideoCapturePlusOptions = {\n   limit: 1,\n   highquality: true,\n   portraitOverlay: 'assets/img/camera/overlay/portrait.png',\n   landscapeOverlay: 'assets/img/camera/overlay/landscape.png'\n}\n\nthis.videoCapturePlus.captureVideo(options).then(mediafile: MediaFile[] => console.log(mediafile), error => console.log('Something went wrong'));\n\n```",
    "repo": "https://github.com/danielsogl/cordova-plugin-video-capture-plus",
    "cordovaPlugin": {
      "name": "cordova-plugin-video-capture-plus"
    }
  },
  {
    "name": "@ionic-native/video-editor",
    "displayName": "Video Editor",
    "description": "<p>Edit videos using native device APIs</p>\n",
    "platforms": [
      "Android",
      "iOS",
      "Windows",
      "Windows Phone 8"
    ],
    "usage": "\n```typescript\nimport { VideoEditor } from '@ionic-native/video-editor/ngx';\n\nconstructor(private videoEditor: VideoEditor) { }\n\n...\n\nthis.videoEditor.transcodeVideo({\n  fileUri: '/path/to/input.mov',\n  outputFileName: 'output.mp4',\n  outputFileType: VideoEditor.OutputFileType.MPEG4\n})\n.then((fileUri: string) => console.log('video transcode success', fileUri))\n.catch((error: any) => console.log('video transcode error', error));\n\n```",
    "repo": "https://github.com/jbavari/cordova-plugin-video-editor",
    "cordovaPlugin": {
      "name": "cordova-plugin-video-editor"
    }
  },
  {
    "name": "@ionic-native/video-player",
    "displayName": "Video Player",
    "description": "<p>A Cordova plugin that simply allows you to immediately play a video in fullscreen mode.</p>\n",
    "platforms": [
      "Android"
    ],
    "usage": "\n```typescript\nimport { VideoPlayer } from '@ionic-native/video-player/ngx';\n\nconstructor(private videoPlayer: VideoPlayer) { }\n\n...\n\n// Playing a video.\nthis.videoPlayer.play('file:///android_asset/www/movie.mp4').then(() => {\n console.log('video completed');\n}).catch(err => {\n console.log(err);\n});\n\n```",
    "repo": "https://github.com/moust/cordova-plugin-videoplayer",
    "cordovaPlugin": {
      "name": "https://github.com/moust/cordova-plugin-videoplayer.git"
    }
  },
  {
    "name": "@ionic-native/web-intent",
    "displayName": "Web Intent",
    "description": "<p>This Plugin provides a general purpose shim layer for the Android intent mechanism, exposing various ways to handle sending and receiving intents.</p>\n",
    "platforms": [
      "Android"
    ],
    "usage": "\nFor usage information please refer to the plugin's Github repo.\n\n```typescript\nimport { WebIntent } from '@ionic-native/web-intent/ngx';\n\nconstructor(private webIntent: WebIntent) { }\n\n...\n\nconst options = {\n  action: this.webIntent.ACTION_VIEW,\n  url: 'path/to/file',\n  type: 'application/vnd.android.package-archive'\n}\n\nthis.webIntent.startActivity(options).then(onSuccess, onError);\n\n```",
    "repo": null,
    "cordovaPlugin": {
      "name": "com-darryncampbell-cordova-plugin-intent"
    }
  },
  {
    "name": "@ionic-native/web-server",
    "displayName": "Web Server",
    "description": "<p>This plugin allows you to start a local dynamic content web server for android and iOS devices.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { WebServer } from '@ionic-native/web-server/ngx';\n\n\nconstructor(private webServer: WebServer) { }\n\n...\n\nthis.webServer.onRequest().subscribe(data => {\n  console.log(data);\n  const res: Response = {\n    status: 200,\n    body: '',\n    headers: {\n      'Content-Type': 'text/html'\n    }\n  };\n\n  this.webServer.sendResponse(data.requestId, res)\n    .catch((error: any) => console.error(error));\n});\n\nthis.webServer.start(80)\n  .catch((error: any) => console.error(error));\n\n```\n",
    "repo": "https://github.com/bykof/cordova-plugin-webserver.git",
    "cordovaPlugin": {
      "name": "cordova-plugin-webserver"
    }
  },
  {
    "name": "@ionic-native/webengage",
    "displayName": "Webengage",
    "description": "<p>Ionic-Native wrapper that wraps Webengage Cordova plugin for Android and iOS</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { Webengage, WebengageUser, WebengagePush, WebengageNotification } from '@ionic-native/webengage/ngx';\n\n\nconstructor(private webengage: Webengage, private webengageUser: WebengageUser, private webengagePush: WebengagePush, private webengageNotification: WebengageNotification ) { }\n\n...\n\nthis.webengage.engage();\n```\n",
    "repo": "https://github.com/WebEngage/cordova-plugin",
    "cordovaPlugin": {
      "name": "cordova-plugin-webengage"
    }
  },
  {
    "name": "@ionic-native/wechat",
    "displayName": "Wechat",
    "description": "<p>A cordova plugin, a JS version of Wechat SDK</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { Wechat } from '@ionic-native/wechat/ngx';\n\n\nconstructor(private wechat: Wechat) { }\n\n...\n\n\nthis.wechat.functionName('Hello', 123)\n  .then((res: any) => console.log(res))\n  .catch((error: any) => console.error(error));\n\n```\n",
    "repo": "https://github.com/xu-li/cordova-plugin-wechat.git",
    "cordovaPlugin": {
      "name": "cordova-plugin-wechat"
    }
  },
  {
    "name": "@ionic-native/wheel-selector",
    "displayName": "WheelSelector Plugin",
    "description": "<p>Native wheel selector for Cordova (Android/iOS).</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```\nimport { WheelSelector } from '@ionic-native/wheel-selector/ngx';\n\n\nconstructor(private selector: WheelSelector) { }\n\n...\n\nconst jsonData = {\n  numbers: [\n   { description: \"1\" },\n    { description: \"2\" },\n    { description: \"3\" }\n  ],\n  fruits: [\n    { description: \"Apple\" },\n    { description: \"Banana\" },\n    { description: \"Tangerine\" }\n  ],\n  firstNames: [\n    { name: \"Fred\", id: '1' },\n    { name: \"Jane\", id: '2' },\n    { name: \"Bob\", id: '3' },\n    { name: \"Earl\", id: '4' },\n    { name: \"Eunice\", id: '5' }\n  ],\n  lastNames: [\n    { name: \"Johnson\", id: '100' },\n    { name: \"Doe\", id: '101' },\n    { name: \"Kinishiwa\", id: '102' },\n    { name: \"Gordon\", id: '103' },\n    { name: \"Smith\", id: '104' }\n  ]\n}\n\n...\n\n// basic number selection, index is always returned in the result\n selectANumber() {\n   this.selector.show({\n     title: \"How Many?\",\n     items: [\n       this.jsonData.numbers\n     ],\n   }).then(\n     result => {\n       console.log(result[0].description + ' at index: ' + result[0].index);\n     },\n     err => console.log('Error: ', err)\n     );\n }\n\n ...\n\n // basic selection, setting initial displayed default values: '3' 'Banana'\n selectFruit() {\n   this.selector.show({\n     title: \"How Much?\",\n     items: [\n       this.jsonData.numbers, this.jsonData.fruits\n     ],\n     positiveButtonText: \"Ok\",\n     negativeButtonText: \"Nope\",\n     defaultItems: [\n \t  {index:0, value: this.jsonData.numbers[2].description},\n \t  {index: 1, value: this.jsonData.fruits[3].description}\n \t]\n   }).then(\n     result => {\n       console.log(result[0].description + ' ' + result[1].description);\n     },\n     err => console.log('Error: ' + JSON.stringify(err))\n     );\n }\n\n ...\n\n // more complex as overrides which key to display\n // then retrieve properties from original data\n selectNamesUsingDisplayKey() {\n   this.selector.show({\n     title: \"Who?\",\n     items: [\n       this.jsonData.firstNames, this.jsonData.lastNames\n     ],\n     displayKey: 'name',\n     defaultItems: [\n \t  {index:0, value: this.jsonData.firstNames[2].name},\n       {index: 0, value: this.jsonData.lastNames[3].name}\n     ]\n   }).then(\n     result => {\n       console.log(result[0].name + ' (id= ' + this.jsonData.firstNames[result[0].index].id + '), ' +\n         result[1].name + ' (id=' + this.jsonData.lastNames[result[1].index].id + ')');\n     },\n     err => console.log('Error: ' + JSON.stringify(err))\n     );\n }\n\n```\n",
    "repo": "https://github.com/jasonmamy/cordova-wheel-selector-plugin",
    "cordovaPlugin": {
      "name": "cordova-wheel-selector-plugin"
    }
  },
  {
    "name": "@ionic-native/youtube-video-player",
    "displayName": "Youtube Video Player",
    "description": "<p>Plays YouTube videos in Native YouTube App</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\nFor Android 5.0+ you will need to add the following to config.xml\n```xml\n<preference name=\"YouTubeDataApiKey\" value=\"[YOUR YOUTUBE API]\" />\n```\nFor more information: https://developers.google.com/youtube/v3/getting-started\n\n\n```typescript\nimport { YoutubeVideoPlayer } from '@ionic-native/youtube-video-player/ngx';\n\nconstructor(private youtube: YoutubeVideoPlayer) { }\n\n...\n\n\nthis.youtube.openVideo('myvideoid');\n\n```\n",
    "repo": "https://github.com/ihadeed/CordovaYoutubeVideoPlayer",
    "cordovaPlugin": {
      "name": "cordova-plugin-youtube-video-player"
    }
  },
  {
    "name": "@ionic-native/zbar",
    "displayName": "ZBar",
    "description": "<p>The ZBar Scanner Plugin allows you to scan 2d barcodes.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { ZBar, ZBarOptions } from '@ionic-native/zbar/ngx';\n\nconstructor(private zbar: ZBar) { }\n\n...\n\nlet options: ZBarOptions = {\n      flash: 'off',\n      drawSight: false\n    }\n\nthis.zbar.scan(options)\n   .then(result => {\n      console.log(result); // Scanned code\n   })\n   .catch(error => {\n      console.log(error); // Error message\n   });\n\n```\n",
    "repo": "https://github.com/tjwoon/csZBar",
    "cordovaPlugin": {
      "name": "cordova-plugin-cszbar"
    }
  },
  {
    "name": "@ionic-native/zeroconf",
    "displayName": "Zeroconf",
    "description": "<p>This plugin allows you to browse and publish Zeroconf/Bonjour/mDNS services.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { Zeroconf } from '@ionic-native/zeroconf/ngx';\n\nconstructor(private zeroconf: Zeroconf) { }\n\n...\n\n// watch for services of a specified type\nthis.zeroconf.watch('_http._tcp.', 'local.').subscribe(result => {\n  if (result.action == 'added') {\n    console.log('service added', result.service);\n  } else {\n    console.log('service removed', result.service);\n  }\n});\n\n// publish a zeroconf service of your own\nthis.zeroconf.register('_http._tcp.', 'local.', 'Becvert\\'s iPad', 80, {\n  'foo': 'bar'\n}).then(result => {\n  console.log('Service registered', result.service);\n});\n\n\n// unregister your service\nthis.zeroconf.unregister('_http._tcp.', 'local.', 'Becvert\\'s iPad');\n```\n",
    "repo": "https://github.com/becvert/cordova-plugin-zeroconf",
    "cordovaPlugin": {
      "name": "cordova-plugin-zeroconf"
    }
  },
  {
    "name": "@ionic-native/zip",
    "displayName": "Zip",
    "description": "<p>A Cordova plugin to unzip files in Android and iOS.</p>\n",
    "platforms": [
      "Android",
      "iOS"
    ],
    "usage": "\n```typescript\nimport { Zip } from '@ionic-native/zip/ngx';\n\nconstructor(private zip: Zip) { }\n\n...\n\nthis.zip.unzip('path/to/source.zip', 'path/to/dest', (progress) => console.log('Unzipping, ' + Math.round((progress.loaded / progress.total) * 100) + '%'))\n .then((result) => {\n   if(result === 0) console.log('SUCCESS');\n   if(result === -1) console.log('FAILED');\n });\n\n```\n",
    "repo": "https://github.com/MobileChromeApps/cordova-plugin-zip",
    "cordovaPlugin": {
      "name": "cordova-plugin-zip"
    }
  }
]
