{
  "type": "angular",
  "name": "ionic",
  "summary": "",
  "description": "",
  "groups": [],
  "commands": [
    {
      "name": "ionic build",
      "namespace": ["ionic"],
      "summary": "Build web assets and prepare your app for any platform targets",
      "description": "`ionic build` will perform an Ionic build, which compiles web assets and prepares them for deployment.\n\n`ionic build` uses the Angular CLI. Use `ng build --help` to list all Angular CLI options for building your app. See the `ng build` [docs](https://angular.io/cli/build) for explanations. Options not listed below are considered advanced and can be passed to the `ng` CLI using the `--` separator after the Ionic CLI arguments. See the examples.",
      "footnotes": [],
      "groups": [],
      "exampleCommands": ["ionic build ", "ionic build --prod", "ionic build --watch"],
      "aliases": [],
      "inputs": [],
      "options": [
        {
          "name": "prod",
          "type": "boolean",
          "summary": "Flag to use the `production` configuration",
          "groups": ["cordova"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "configuration",
          "type": "string",
          "summary": "Specify the configuration to use.",
          "groups": ["advanced", "cordova"],
          "aliases": ["c"],
          "spec": {
            "value": "conf"
          }
        },
        {
          "name": "source-map",
          "type": "boolean",
          "summary": "Output source maps",
          "groups": ["advanced", "cordova"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "watch",
          "type": "boolean",
          "summary": "Rebuild when files change",
          "groups": ["advanced"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "engine",
          "type": "string",
          "summary": "Target engine (e.g. `browser`, `cordova`)",
          "groups": ["advanced"],
          "aliases": [],
          "spec": {
            "value": "engine"
          }
        },
        {
          "name": "platform",
          "type": "string",
          "summary": "Target platform on chosen engine (e.g. `ios`, `android`)",
          "groups": ["advanced"],
          "aliases": [],
          "spec": {
            "value": "platform"
          }
        }
      ],
      "type": "project"
    },
    {
      "name": "ionic capacitor add",
      "namespace": ["ionic", "capacitor"],
      "summary": "Add a native platform to your Ionic project",
      "description": "`ionic capacitor add` will do the following:\n- Install the Capacitor platform package\n- Copy the native platform template into your project",
      "footnotes": [],
      "groups": [],
      "exampleCommands": [],
      "aliases": [],
      "inputs": [
        {
          "name": "platform",
          "summary": "The platform to add (e.g. `android`, `ios`)",
          "required": true
        }
      ],
      "options": [],
      "type": "project"
    },
    {
      "name": "ionic capacitor build",
      "namespace": ["ionic", "capacitor"],
      "summary": "Build an Ionic project for a given platform",
      "description": "`ionic capacitor build` will do the following:\n- Perform `ionic build`\n- Copy web assets into the specified native platform\n- Open the IDE for your native project (Xcode for iOS, Android Studio for Android)\n\nOnce the web assets and configuration are copied into your native project, you can build your app using the native IDE. Unfortunately, programmatically building the native project is not yet supported.\n\nTo configure your native project, see the common configuration [docs](https://capacitorjs.com/docs/basics/configuring-your-app) as well as low-level configuration for [iOS](https://capacitorjs.com/docs/ios/configuration) and [Android](https://capacitorjs.com/docs/android/configuration).",
      "footnotes": [],
      "groups": ["beta"],
      "exampleCommands": ["ionic capacitor build ", "ionic capacitor build android", "ionic capacitor build ios"],
      "aliases": [],
      "inputs": [
        {
          "name": "platform",
          "summary": "The platform to build for (e.g. `android`, `ios`)",
          "required": true
        }
      ],
      "options": [
        {
          "name": "build",
          "type": "boolean",
          "summary": "Do not invoke Ionic build",
          "default": true,
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "open",
          "type": "boolean",
          "summary": "Do not invoke Capacitor open",
          "default": true,
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "prod",
          "type": "boolean",
          "summary": "Flag to use the `production` configuration",
          "groups": ["cordova"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "configuration",
          "type": "string",
          "summary": "Specify the configuration to use.",
          "groups": ["advanced", "cordova"],
          "aliases": ["c"],
          "spec": {
            "value": "conf"
          }
        },
        {
          "name": "source-map",
          "type": "boolean",
          "summary": "Output source maps",
          "groups": ["advanced", "cordova"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "watch",
          "type": "boolean",
          "summary": "Rebuild when files change",
          "groups": ["advanced"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        }
      ],
      "type": "project"
    },
    {
      "name": "ionic capacitor copy",
      "namespace": ["ionic", "capacitor"],
      "summary": "Copy web assets to native platforms",
      "description": "`ionic capacitor copy` will do the following:\n- Perform an Ionic build, which compiles web assets\n- Copy web assets to Capacitor native platform(s)",
      "footnotes": [],
      "groups": [],
      "exampleCommands": [],
      "aliases": [],
      "inputs": [
        {
          "name": "platform",
          "summary": "The platform to copy (e.g. `android`, `ios`)",
          "required": false
        }
      ],
      "options": [
        {
          "name": "build",
          "type": "boolean",
          "summary": "Do not invoke an Ionic build",
          "default": true,
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "prod",
          "type": "boolean",
          "summary": "Flag to use the `production` configuration",
          "groups": ["cordova"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "configuration",
          "type": "string",
          "summary": "Specify the configuration to use.",
          "groups": ["advanced", "cordova"],
          "aliases": ["c"],
          "spec": {
            "value": "conf"
          }
        },
        {
          "name": "source-map",
          "type": "boolean",
          "summary": "Output source maps",
          "groups": ["advanced", "cordova"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "watch",
          "type": "boolean",
          "summary": "Rebuild when files change",
          "groups": ["advanced"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        }
      ],
      "type": "project"
    },
    {
      "name": "ionic capacitor open",
      "namespace": ["ionic", "capacitor"],
      "summary": "Open the IDE for a given native platform project",
      "description": "`ionic capacitor open` will do the following:\n- Open the IDE for your native project (Xcode for iOS, Android Studio for Android)",
      "footnotes": [],
      "groups": [],
      "exampleCommands": [],
      "aliases": [],
      "inputs": [
        {
          "name": "platform",
          "summary": "The platform to open (e.g. `android`, `ios`)",
          "required": true
        }
      ],
      "options": [],
      "type": "project"
    },
    {
      "name": "ionic capacitor run",
      "namespace": ["ionic", "capacitor"],
      "summary": "Run an Ionic project on a connected device",
      "description": "`ionic capacitor run` will do the following:\n- Perform `ionic build` (or run the dev server from `ionic serve` with the `--livereload` option)\n- Run `capacitor run` (or open IDE for your native project with the `--open` option)\n\nWhen using `--livereload` with hardware devices, remember that livereload needs an active connection between device and computer. In some scenarios, you may need to host the dev server on an external address using the `--external` option. See these [docs](https://ionicframework.com/docs/cli/livereload) for more information.\n\nIf you have multiple devices and emulators, you can target a specific one by ID with the `--target` option. You can list targets with `--list`.\n\nFor Android and iOS, you can setup Remote Debugging on your device with browser development tools using these [docs](https://ionicframework.com/docs/developer-resources/developer-tips).",
      "footnotes": [],
      "groups": [],
      "exampleCommands": [
        "ionic capacitor run ",
        "ionic capacitor run android",
        "ionic capacitor run android -l --external",
        "ionic capacitor run ios --livereload --external",
        "ionic capacitor run ios --livereload-url=http://localhost:8100"
      ],
      "aliases": [],
      "inputs": [
        {
          "name": "platform",
          "summary": "The platform to run (e.g. `android`, `ios`)",
          "required": true
        }
      ],
      "options": [
        {
          "name": "list",
          "type": "boolean",
          "summary": "List all available targets",
          "groups": ["capacitor", "native-run"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "target",
          "type": "string",
          "summary": "Deploy to a specific device by its ID (use `--list` to see all)",
          "groups": ["capacitor", "native-run"],
          "aliases": [],
          "spec": {
            "value": "target"
          }
        },
        {
          "name": "open",
          "type": "boolean",
          "summary": "Open native IDE instead of using `capacitor run`",
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "build",
          "type": "boolean",
          "summary": "Do not invoke Ionic build",
          "default": true,
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "external",
          "type": "boolean",
          "summary": "Host dev server on all network interfaces (i.e. `--host=0.0.0.0`)",
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "host",
          "type": "string",
          "summary": "Use specific host for the dev server",
          "default": "localhost",
          "groups": ["advanced"],
          "aliases": [],
          "spec": {
            "value": "host"
          }
        },
        {
          "name": "port",
          "type": "string",
          "summary": "Use specific port for the dev server",
          "default": "8100",
          "groups": ["advanced"],
          "aliases": ["p"],
          "spec": {
            "value": "port"
          }
        },
        {
          "name": "public-host",
          "type": "string",
          "summary": "The host used for the browser or web view",
          "groups": ["advanced"],
          "aliases": [],
          "spec": {
            "value": "host"
          }
        },
        {
          "name": "livereload",
          "type": "boolean",
          "summary": "Spin up dev server to live-reload www files",
          "groups": [],
          "aliases": ["l"],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "livereload-url",
          "type": "string",
          "summary": "Provide a custom URL to the dev server",
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "url"
          }
        },
        {
          "name": "prod",
          "type": "boolean",
          "summary": "Flag to use the `production` configuration",
          "groups": ["cordova"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "configuration",
          "type": "string",
          "summary": "Specify the configuration to use.",
          "groups": ["advanced", "cordova"],
          "aliases": ["c"],
          "spec": {
            "value": "conf"
          }
        },
        {
          "name": "source-map",
          "type": "boolean",
          "summary": "Output source maps",
          "groups": ["advanced", "cordova"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "watch",
          "type": "boolean",
          "summary": "Rebuild when files change",
          "groups": ["advanced"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        }
      ],
      "type": "project"
    },
    {
      "name": "ionic capacitor sync",
      "namespace": ["ionic", "capacitor"],
      "summary": "Sync (copy + update) an Ionic project",
      "description": "`ionic capacitor sync` will do the following:\n- Perform an Ionic build, which compiles web assets\n- Copy web assets to Capacitor native platform(s)\n- Update Capacitor native platform(s) and dependencies\n- Install any discovered Capacitor or Cordova plugins",
      "footnotes": [],
      "groups": [],
      "exampleCommands": [],
      "aliases": [],
      "inputs": [
        {
          "name": "platform",
          "summary": "The platform to sync (e.g. `android`, `ios`)",
          "required": false
        }
      ],
      "options": [
        {
          "name": "build",
          "type": "boolean",
          "summary": "Do not invoke an Ionic build",
          "default": true,
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "prod",
          "type": "boolean",
          "summary": "Flag to use the `production` configuration",
          "groups": ["cordova"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "configuration",
          "type": "string",
          "summary": "Specify the configuration to use.",
          "groups": ["advanced", "cordova"],
          "aliases": ["c"],
          "spec": {
            "value": "conf"
          }
        },
        {
          "name": "source-map",
          "type": "boolean",
          "summary": "Output source maps",
          "groups": ["advanced", "cordova"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "watch",
          "type": "boolean",
          "summary": "Rebuild when files change",
          "groups": ["advanced"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        }
      ],
      "type": "project"
    },
    {
      "name": "ionic capacitor update",
      "namespace": ["ionic", "capacitor"],
      "summary": "Update Capacitor native platforms, install Capacitor/Cordova plugins",
      "description": "`ionic capacitor update` will do the following:\n- Update Capacitor native platform(s) and dependencies\n- Install any discovered Capacitor or Cordova plugins",
      "footnotes": [],
      "groups": [],
      "exampleCommands": [],
      "aliases": [],
      "inputs": [
        {
          "name": "platform",
          "summary": "The platform to update (e.g. `android`, `ios`)",
          "required": false
        }
      ],
      "options": [],
      "type": "project"
    },
    {
      "name": "ionic completion",
      "namespace": ["ionic"],
      "summary": "Enables tab-completion for Ionic CLI commands.",
      "description": "This command is experimental and only works for Z shell (zsh) and non-Windows platforms.\n\nTo enable completions for the Ionic CLI, you can add the completion code that this command prints to your **~/.zshrc** (or any other file loaded with your shell). See the examples.",
      "footnotes": [],
      "groups": ["experimental"],
      "exampleCommands": ["ionic completion ", "ionic completion >> ~/.zshrc"],
      "aliases": [],
      "inputs": [],
      "options": [],
      "type": "global"
    },
    {
      "name": "ionic config get",
      "namespace": ["ionic", "config"],
      "summary": "Print config values",
      "description": "This command reads and prints configuration values from the project's **./ionic.config.json** file. It can also operate on the global CLI configuration (**~/.ionic/config.json**) using the `--global` option.\n\nFor nested properties, separate nest levels with dots. For example, the property name `integrations.cordova` will look in the **integrations** object for the **cordova** property.\n\nWithout a `property` argument, this command prints out the entire config.\n\nFor multi-app projects, this command is scoped to the current project by default. To operate at the root of the project configuration file instead, use the `--root` option.\n\nIf you are using this command programmatically, you can use the `--json` option.\n\nThis command will sanitize config output for known sensitive fields (disabled when using `--json`).",
      "footnotes": [],
      "groups": [],
      "exampleCommands": [
        "ionic config get ",
        "ionic config get id",
        "ionic config get --global user.email",
        "ionic config get -g npmClient"
      ],
      "aliases": [],
      "inputs": [
        {
          "name": "property",
          "summary": "The property name you wish to get",
          "required": false
        }
      ],
      "options": [
        {
          "name": "global",
          "type": "boolean",
          "summary": "Use global CLI config",
          "groups": [],
          "aliases": ["g"],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "json",
          "type": "boolean",
          "summary": "Output config values in JSON",
          "groups": ["advanced"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "root",
          "type": "boolean",
          "summary": "Operate on root of **./ionic.config.json**",
          "groups": ["advanced"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        }
      ],
      "type": "global"
    },
    {
      "name": "ionic config set",
      "namespace": ["ionic", "config"],
      "summary": "Set config values",
      "description": "This command writes configuration values to the project's **./ionic.config.json** file. It can also operate on the global CLI configuration (**~/.ionic/config.json**) using the `--global` option.\n\nFor nested properties, separate nest levels with dots. For example, the property name `integrations.cordova` will look in the **integrations** object for the **cordova** property.\n\nFor multi-app projects, this command is scoped to the current project by default. To operate at the root of the project configuration file instead, use the `--root` option.\n\nThis command will attempt to coerce `value` into a suitable JSON type. If it is JSON-parsable, such as `123`, `true`, `[]`, etc., then it takes the parsed result. Otherwise, the value is interpreted as a string. For stricter input, use `--json`, which will error with non-JSON values.\n\nBy default, if `property` exists and is an object or an array, the value is not overwritten. To disable this check and always overwrite the property, use `--force`.",
      "footnotes": [],
      "groups": [],
      "exampleCommands": [
        "ionic config set name newAppName",
        "ionic config set name \"\\\"newAppName\\\"\" --json",
        "ionic config set -g interactive false"
      ],
      "aliases": [],
      "inputs": [
        {
          "name": "property",
          "summary": "The property name you wish to set",
          "required": true
        },
        {
          "name": "value",
          "summary": "The new value of the given property",
          "required": true
        }
      ],
      "options": [
        {
          "name": "global",
          "type": "boolean",
          "summary": "Use global CLI config",
          "groups": [],
          "aliases": ["g"],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "json",
          "type": "boolean",
          "summary": "Always interpret `value` as JSON",
          "groups": ["advanced"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "force",
          "type": "boolean",
          "summary": "Always overwrite existing values",
          "groups": ["advanced"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "root",
          "type": "boolean",
          "summary": "Operate on root of **./ionic.config.json**",
          "groups": ["advanced"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        }
      ],
      "type": "global"
    },
    {
      "name": "ionic config unset",
      "namespace": ["ionic", "config"],
      "summary": "Delete config values",
      "description": "This command deletes configuration values from the project's **./ionic.config.json** file. It can also operate on the global CLI configuration (**~/.ionic/config.json**) using the `--global` option.\n\nFor nested properties, separate nest levels with dots. For example, the property name `integrations.cordova` will look in the **integrations** object for the **cordova** property.\n\nFor multi-app projects, this command is scoped to the current project by default. To operate at the root of the project configuration file instead, use the `--root` option.",
      "footnotes": [],
      "groups": [],
      "exampleCommands": [
        "ionic config unset ",
        "ionic config unset type",
        "ionic config unset --global git.setup",
        "ionic config unset -g interactive"
      ],
      "aliases": ["ionic config delete", "ionic config del"],
      "inputs": [
        {
          "name": "property",
          "summary": "The property name you wish to delete",
          "required": true
        }
      ],
      "options": [
        {
          "name": "global",
          "type": "boolean",
          "summary": "Use global CLI config",
          "groups": [],
          "aliases": ["g"],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "root",
          "type": "boolean",
          "summary": "Operate on root of **./ionic.config.json**",
          "groups": ["advanced"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        }
      ],
      "type": "global"
    },
    {
      "name": "ionic cordova build",
      "namespace": ["ionic", "cordova"],
      "summary": "Use Cordova to build for Android and iOS platform targets",
      "description": "Like running `cordova build` directly, `ionic cordova build` also builds web assets from `ionic build` and provides friendly checks for Android and iOS platforms.\n\nTo pass additional options to the Cordova CLI, use the `--` separator after the Ionic CLI arguments.\n\nThe Cordova CLI requires a separator for platform-specific arguments for Android [builds](https://cordova.apache.org/docs/en/latest/guide/platforms/android/index.html#using-flags), so an additional separator is required for the Ionic CLI, but it is not required for iOS [builds](https://cordova.apache.org/docs/en/latest/guide/platforms/ios/index.html#using-flags). See the example commands for usage with separators. To avoid using flags, consider using `--buildConfig` with a **build.json** file.",
      "footnotes": [],
      "groups": [],
      "exampleCommands": [
        "ionic cordova build android",
        "ionic cordova build android --buildConfig=build.json",
        "ionic cordova build android --prod --release -- -- --gradleArg=-PcdvBuildMultipleApks=true",
        "ionic cordova build android --prod --release -- -- --keystore=filename.keystore --alias=myalias",
        "ionic cordova build android --prod --release -- -- --minSdkVersion=21",
        "ionic cordova build android --prod --release -- -- --versionCode=55",
        "ionic cordova build android --prod --release --buildConfig=build.json",
        "ionic cordova build ios",
        "ionic cordova build ios --buildConfig=build.json",
        "ionic cordova build ios --prod --release",
        "ionic cordova build ios --prod --release -- --developmentTeam=\"ABCD\" --codeSignIdentity=\"iPhone Developer\" --packageType=\"app-store\"",
        "ionic cordova build ios --prod --release --buildConfig=build.json"
      ],
      "aliases": [],
      "inputs": [
        {
          "name": "platform",
          "summary": "The platform to build (e.g. `android`, `ios`)",
          "required": true
        }
      ],
      "options": [
        {
          "name": "build",
          "type": "boolean",
          "summary": "Do not invoke an Ionic build",
          "default": true,
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "debug",
          "type": "boolean",
          "summary": "Mark as a debug build",
          "groups": ["cordova", "cordova-cli"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "release",
          "type": "boolean",
          "summary": "Mark as a release build",
          "groups": ["cordova", "cordova-cli"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "device",
          "type": "boolean",
          "summary": "Deploy build to a device",
          "groups": ["cordova", "cordova-cli", "native-run"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "emulator",
          "type": "boolean",
          "summary": "Deploy build to an emulator",
          "groups": ["cordova", "cordova-cli", "native-run"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "buildConfig",
          "type": "string",
          "summary": "Use the specified build configuration",
          "groups": ["advanced", "cordova", "cordova-cli"],
          "aliases": [],
          "spec": {
            "value": "file"
          }
        },
        {
          "name": "prod",
          "type": "boolean",
          "summary": "Flag to use the `production` configuration",
          "groups": ["cordova"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "configuration",
          "type": "string",
          "summary": "Specify the configuration to use.",
          "groups": ["advanced", "cordova"],
          "aliases": ["c"],
          "spec": {
            "value": "conf"
          }
        },
        {
          "name": "source-map",
          "type": "boolean",
          "summary": "Output source maps",
          "groups": ["advanced", "cordova"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        }
      ],
      "type": "project"
    },
    {
      "name": "ionic cordova compile",
      "namespace": ["ionic", "cordova"],
      "summary": "Compile native platform code",
      "description": "Like running `cordova compile` directly, but provides friendly checks.",
      "footnotes": [],
      "groups": [],
      "exampleCommands": [
        "ionic cordova compile ios",
        "ionic cordova compile ios --device",
        "ionic cordova compile android"
      ],
      "aliases": [],
      "inputs": [
        {
          "name": "platform",
          "summary": "The platform to compile (`android`, `ios`)",
          "required": true
        }
      ],
      "options": [
        {
          "name": "debug",
          "type": "boolean",
          "summary": "Mark as a debug build",
          "groups": ["cordova", "cordova-cli"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "release",
          "type": "boolean",
          "summary": "Mark as a release build",
          "groups": ["cordova", "cordova-cli"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "device",
          "type": "boolean",
          "summary": "Deploy build to a device",
          "groups": ["cordova", "cordova-cli", "native-run"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "emulator",
          "type": "boolean",
          "summary": "Deploy build to an emulator",
          "groups": ["cordova", "cordova-cli", "native-run"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "buildConfig",
          "type": "string",
          "summary": "Use the specified build configuration",
          "groups": ["advanced", "cordova", "cordova-cli"],
          "aliases": [],
          "spec": {
            "value": "file"
          }
        }
      ],
      "type": "project"
    },
    {
      "name": "ionic cordova emulate",
      "namespace": ["ionic", "cordova"],
      "summary": "Emulate an Ionic project on a simulator/emulator",
      "description": "Build your app and deploy it to devices and emulators using this command. Optionally specify the `--livereload` option to use the dev server from `ionic serve` for livereload functionality.\n\nThis command will first use `ionic build` to build web assets (or `ionic serve` with the `--livereload` option). Then, `cordova build` is used to compile and prepare your app. Finally, the `native-run` [utility](https://github.com/ionic-team/native-run) is used to run your app on a device. To use Cordova for this process instead, use the `--no-native-run` option.\n\nIf you have multiple devices and emulators, you can target a specific one with the `--target` option. You can list targets with `--list`.\n\nFor Android and iOS, you can setup Remote Debugging on your device with browser development tools using these [docs](https://ionicframework.com/docs/developer-resources/developer-tips).\n\nWhen using `--livereload` with hardware devices, remember that livereload needs an active connection between device and computer. In some scenarios, you may need to host the dev server on an external address using the `--external` option. See these [docs](https://ionicframework.com/docs/cli/livereload) for more information.\n\nJust like with `ionic cordova build`, you can pass additional options to the Cordova CLI using the `--` separator. To pass additional options to the dev server, consider using `ionic serve` separately and using the `--livereload-url` option.",
      "footnotes": [],
      "groups": [],
      "exampleCommands": [
        "ionic cordova emulate android",
        "ionic cordova emulate android --buildConfig=build.json",
        "ionic cordova emulate android --prod --release -- -- --gradleArg=-PcdvBuildMultipleApks=true",
        "ionic cordova emulate android --prod --release -- -- --keystore=filename.keystore --alias=myalias",
        "ionic cordova emulate android --prod --release -- -- --minSdkVersion=21",
        "ionic cordova emulate android --prod --release -- -- --versionCode=55",
        "ionic cordova emulate android --prod --release --buildConfig=build.json",
        "ionic cordova emulate android -l",
        "ionic cordova emulate ios",
        "ionic cordova emulate ios --buildConfig=build.json",
        "ionic cordova emulate ios --livereload --external",
        "ionic cordova emulate ios --livereload-url=http://localhost:8100",
        "ionic cordova emulate ios --prod --release",
        "ionic cordova emulate ios --prod --release -- --developmentTeam=\"ABCD\" --codeSignIdentity=\"iPhone Developer\" --packageType=\"app-store\"",
        "ionic cordova emulate ios --prod --release --buildConfig=build.json"
      ],
      "aliases": [],
      "inputs": [
        {
          "name": "platform",
          "summary": "The platform to run (e.g. `android`, `ios`)",
          "required": true
        }
      ],
      "options": [
        {
          "name": "consolelogs",
          "type": "boolean",
          "summary": "Print app console logs to the terminal",
          "groups": ["advanced", "cordova"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "consolelogs-port",
          "type": "string",
          "summary": "Use specific port for console logs server",
          "groups": ["advanced", "cordova"],
          "aliases": [],
          "spec": {
            "value": "port"
          }
        },
        {
          "name": "ssl",
          "type": "boolean",
          "summary": "Use HTTPS for the dev server",
          "groups": ["experimental", "cordova"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "list",
          "type": "boolean",
          "summary": "List all available targets",
          "groups": ["cordova", "cordova-cli", "native-run"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "build",
          "type": "boolean",
          "summary": "Do not invoke Ionic build",
          "default": true,
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "external",
          "type": "boolean",
          "summary": "Host dev server on all network interfaces (i.e. `--host=0.0.0.0`)",
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "host",
          "type": "string",
          "summary": "Use specific host for the dev server",
          "default": "localhost",
          "groups": ["advanced"],
          "aliases": [],
          "spec": {
            "value": "host"
          }
        },
        {
          "name": "port",
          "type": "string",
          "summary": "Use specific port for the dev server",
          "default": "8100",
          "groups": ["advanced"],
          "aliases": ["p"],
          "spec": {
            "value": "port"
          }
        },
        {
          "name": "public-host",
          "type": "string",
          "summary": "The host used for the browser or web view",
          "groups": ["advanced"],
          "aliases": [],
          "spec": {
            "value": "host"
          }
        },
        {
          "name": "livereload",
          "type": "boolean",
          "summary": "Spin up dev server to live-reload www files",
          "groups": [],
          "aliases": ["l"],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "livereload-url",
          "type": "string",
          "summary": "Provide a custom URL to the dev server",
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "url"
          }
        },
        {
          "name": "prod",
          "type": "boolean",
          "summary": "Flag to use the `production` configuration",
          "groups": ["cordova"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "configuration",
          "type": "string",
          "summary": "Specify the configuration to use.",
          "groups": ["advanced", "cordova"],
          "aliases": ["c"],
          "spec": {
            "value": "conf"
          }
        },
        {
          "name": "source-map",
          "type": "boolean",
          "summary": "Output source maps",
          "groups": ["advanced", "cordova"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "debug",
          "type": "boolean",
          "summary": "Mark as a debug build",
          "groups": ["cordova", "cordova-cli"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "release",
          "type": "boolean",
          "summary": "Mark as a release build",
          "groups": ["cordova", "cordova-cli"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "device",
          "type": "boolean",
          "summary": "Deploy build to a device",
          "groups": ["cordova", "cordova-cli", "native-run"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "emulator",
          "type": "boolean",
          "summary": "Deploy build to an emulator",
          "groups": ["cordova", "cordova-cli", "native-run"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "buildConfig",
          "type": "string",
          "summary": "Use the specified build configuration",
          "groups": ["advanced", "cordova", "cordova-cli"],
          "aliases": [],
          "spec": {
            "value": "file"
          }
        },
        {
          "name": "target",
          "type": "string",
          "summary": "Deploy build to a device (use `--list` to see all)",
          "groups": ["advanced", "cordova", "cordova-cli", "native-run"],
          "aliases": [],
          "spec": {
            "value": "target"
          }
        },
        {
          "name": "native-run",
          "type": "boolean",
          "summary": "Do not use `native-run` to run the app; use Cordova instead",
          "default": true,
          "groups": ["native-run"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "connect",
          "type": "boolean",
          "summary": "Tie the running app to the process",
          "groups": ["native-run"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "json",
          "type": "boolean",
          "summary": "Output targets in JSON",
          "groups": ["advanced", "native-run"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        }
      ],
      "type": "project"
    },
    {
      "name": "ionic cordova platform",
      "namespace": ["ionic", "cordova"],
      "summary": "Manage Cordova platform targets",
      "description": "Like running `cordova platform` directly, but adds default Ionic icons and splash screen resources (during `add`) and provides friendly checks.",
      "footnotes": [],
      "groups": [],
      "exampleCommands": [
        "ionic cordova platform ",
        "ionic cordova platform add ios",
        "ionic cordova platform add android",
        "ionic cordova platform rm ios"
      ],
      "aliases": ["ionic cordova platforms"],
      "inputs": [
        {
          "name": "action",
          "summary": "`add`, `remove`, or `update` a platform; `ls`, `check`, or `save` all project platforms",
          "required": false
        },
        {
          "name": "platform",
          "summary": "The platform that you would like to add (`android`, `ios`)",
          "required": false
        }
      ],
      "options": [
        {
          "name": "resources",
          "type": "boolean",
          "summary": "Do not pregenerate icons and splash screen resources (corresponds to `add`)",
          "default": true,
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        }
      ],
      "type": "project"
    },
    {
      "name": "ionic cordova plugin",
      "namespace": ["ionic", "cordova"],
      "summary": "Manage Cordova plugins",
      "description": "Like running `cordova plugin` directly, but provides friendly checks.",
      "footnotes": [],
      "groups": [],
      "exampleCommands": [
        "ionic cordova plugin ",
        "ionic cordova plugin add cordova-plugin-inappbrowser@latest",
        "ionic cordova plugin add phonegap-plugin-push --variable SENDER_ID=XXXXX",
        "ionic cordova plugin rm cordova-plugin-camera"
      ],
      "aliases": ["ionic cordova plugins"],
      "inputs": [
        {
          "name": "action",
          "summary": "`add` or `remove` a plugin; `ls` or `save` all project plugins",
          "required": false
        },
        {
          "name": "plugin",
          "summary": "The name of the plugin (corresponds to `add` and `remove`)",
          "required": false
        }
      ],
      "options": [
        {
          "name": "force",
          "type": "boolean",
          "summary": "Force overwrite the plugin if it exists (corresponds to `add`)",
          "groups": ["advanced", "cordova", "cordova-cli"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "variable",
          "type": "string",
          "summary": "Specify plugin variables",
          "groups": ["cordova", "cordova-cli"],
          "aliases": [],
          "spec": {
            "value": "KEY=VALUE"
          }
        }
      ],
      "type": "project"
    },
    {
      "name": "ionic cordova prepare",
      "namespace": ["ionic", "cordova"],
      "summary": "Copies assets to Cordova platforms, preparing them for native builds",
      "description": "`ionic cordova prepare` will do the following:\n\n- Perform an Ionic build, which compiles web assets to **www/**.\n- Copy the **www/** directory into your Cordova platforms.\n- Transform **config.xml** into platform-specific manifest files.\n- Copy icons and splash screens from **resources/** to into your Cordova platforms.\n- Copy plugin files into specified platforms.\n\nYou may wish to use `ionic cordova prepare` if you run your project with Android Studio or Xcode.",
      "footnotes": [],
      "groups": [],
      "exampleCommands": ["ionic cordova prepare ", "ionic cordova prepare ios", "ionic cordova prepare android"],
      "aliases": [],
      "inputs": [
        {
          "name": "platform",
          "summary": "The platform you would like to prepare (e.g. `android`, `ios`)",
          "required": false
        }
      ],
      "options": [
        {
          "name": "build",
          "type": "boolean",
          "summary": "Do not invoke an Ionic build",
          "default": true,
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "prod",
          "type": "boolean",
          "summary": "Flag to use the `production` configuration",
          "groups": ["cordova"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "configuration",
          "type": "string",
          "summary": "Specify the configuration to use.",
          "groups": ["advanced", "cordova"],
          "aliases": ["c"],
          "spec": {
            "value": "conf"
          }
        },
        {
          "name": "source-map",
          "type": "boolean",
          "summary": "Output source maps",
          "groups": ["advanced", "cordova"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "watch",
          "type": "boolean",
          "summary": "Rebuild when files change",
          "groups": ["advanced"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        }
      ],
      "type": "project"
    },
    {
      "name": "ionic cordova requirements",
      "namespace": ["ionic", "cordova"],
      "summary": "Checks and print out all the requirements for platforms",
      "description": "Like running `cordova requirements` directly, but provides friendly checks.",
      "footnotes": [],
      "groups": [],
      "exampleCommands": [],
      "aliases": [],
      "inputs": [
        {
          "name": "platform",
          "summary": "The platform for which you would like to gather requirements (`android`, `ios`)",
          "required": false
        }
      ],
      "options": [],
      "type": "project"
    },
    {
      "name": "ionic cordova resources",
      "namespace": ["ionic", "cordova"],
      "summary": "Automatically create icon and splash screen resources",
      "description": "Generate perfectly sized icons and splash screens from PNG source images for your Cordova platforms with this command.\n\nThe source image for icons should ideally be at least **1024×1024px** and located at **resources/icon.png**. The source image for splash screens should ideally be at least **2732×2732px** and located at **resources/splash.png**. If you used `ionic start`, there should already be default Ionic resources in the **resources/** directory, which you can overwrite.\n\nYou can also generate platform-specific icons and splash screens by placing them in the respective **resources/&lt;platform&gt;/** directory. For example, to generate an icon for Android, place your image at **resources/android/icon.png**.\n\nFor best results, the splash screen's artwork should roughly fit within a square (**1200×1200px**) at the center of the image. You can use **[https://code.ionicframework.com/resources/splash.psd](https://code.ionicframework.com/resources/splash.psd)** as a template for your splash screen.\n\n`ionic cordova resources` will automatically update your **config.xml** to reflect the changes in the generated images, which Cordova then configures.\n\nThis command uses the `cordova-res` [utility](https://github.com/ionic-team/cordova-res) to generate resources locally.\n\nCordova reference documentation:\n- Icons: **[https://cordova.apache.org/docs/en/latest/config_ref/images.html](https://cordova.apache.org/docs/en/latest/config_ref/images.html)**\n- Splash Screens: **[https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-splashscreen/](https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-splashscreen/)**",
      "footnotes": [],
      "groups": [],
      "exampleCommands": ["ionic cordova resources ", "ionic cordova resources ios", "ionic cordova resources android"],
      "aliases": ["ionic cordova res"],
      "inputs": [
        {
          "name": "platform",
          "summary": "The platform for which you would like to generate resources (`ios`, `android`)",
          "required": false
        }
      ],
      "options": [
        {
          "name": "icon",
          "type": "boolean",
          "summary": "Generate icon resources",
          "groups": [],
          "aliases": ["i"],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "splash",
          "type": "boolean",
          "summary": "Generate splash screen resources",
          "groups": [],
          "aliases": ["s"],
          "spec": {
            "value": "true/false"
          }
        }
      ],
      "type": "project"
    },
    {
      "name": "ionic cordova run",
      "namespace": ["ionic", "cordova"],
      "summary": "Run an Ionic project on a connected device",
      "description": "Build your app and deploy it to devices and emulators using this command. Optionally specify the `--livereload` option to use the dev server from `ionic serve` for livereload functionality.\n\nThis command will first use `ionic build` to build web assets (or `ionic serve` with the `--livereload` option). Then, `cordova build` is used to compile and prepare your app. Finally, the `native-run` [utility](https://github.com/ionic-team/native-run) is used to run your app on a device. To use Cordova for this process instead, use the `--no-native-run` option.\n\nIf you have multiple devices and emulators, you can target a specific one with the `--target` option. You can list targets with `--list`.\n\nFor Android and iOS, you can setup Remote Debugging on your device with browser development tools using these [docs](https://ionicframework.com/docs/developer-resources/developer-tips).\n\nWhen using `--livereload` with hardware devices, remember that livereload needs an active connection between device and computer. In some scenarios, you may need to host the dev server on an external address using the `--external` option. See these [docs](https://ionicframework.com/docs/cli/livereload) for more information.\n\nJust like with `ionic cordova build`, you can pass additional options to the Cordova CLI using the `--` separator. To pass additional options to the dev server, consider using `ionic serve` separately and using the `--livereload-url` option.",
      "footnotes": [],
      "groups": [],
      "exampleCommands": [
        "ionic cordova run android",
        "ionic cordova run android --buildConfig=build.json",
        "ionic cordova run android --prod --release -- -- --gradleArg=-PcdvBuildMultipleApks=true",
        "ionic cordova run android --prod --release -- -- --keystore=filename.keystore --alias=myalias",
        "ionic cordova run android --prod --release -- -- --minSdkVersion=21",
        "ionic cordova run android --prod --release -- -- --versionCode=55",
        "ionic cordova run android --prod --release --buildConfig=build.json",
        "ionic cordova run android -l",
        "ionic cordova run ios",
        "ionic cordova run ios --buildConfig=build.json",
        "ionic cordova run ios --livereload --external",
        "ionic cordova run ios --livereload-url=http://localhost:8100",
        "ionic cordova run ios --prod --release",
        "ionic cordova run ios --prod --release -- --developmentTeam=\"ABCD\" --codeSignIdentity=\"iPhone Developer\" --packageType=\"app-store\"",
        "ionic cordova run ios --prod --release --buildConfig=build.json"
      ],
      "aliases": [],
      "inputs": [
        {
          "name": "platform",
          "summary": "The platform to run (e.g. `android`, `ios`)",
          "required": true
        }
      ],
      "options": [
        {
          "name": "consolelogs",
          "type": "boolean",
          "summary": "Print app console logs to the terminal",
          "groups": ["advanced", "cordova"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "consolelogs-port",
          "type": "string",
          "summary": "Use specific port for console logs server",
          "groups": ["advanced", "cordova"],
          "aliases": [],
          "spec": {
            "value": "port"
          }
        },
        {
          "name": "ssl",
          "type": "boolean",
          "summary": "Use HTTPS for the dev server",
          "groups": ["experimental", "cordova"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "list",
          "type": "boolean",
          "summary": "List all available targets",
          "groups": ["cordova", "cordova-cli", "native-run"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "build",
          "type": "boolean",
          "summary": "Do not invoke Ionic build",
          "default": true,
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "external",
          "type": "boolean",
          "summary": "Host dev server on all network interfaces (i.e. `--host=0.0.0.0`)",
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "host",
          "type": "string",
          "summary": "Use specific host for the dev server",
          "default": "localhost",
          "groups": ["advanced"],
          "aliases": [],
          "spec": {
            "value": "host"
          }
        },
        {
          "name": "port",
          "type": "string",
          "summary": "Use specific port for the dev server",
          "default": "8100",
          "groups": ["advanced"],
          "aliases": ["p"],
          "spec": {
            "value": "port"
          }
        },
        {
          "name": "public-host",
          "type": "string",
          "summary": "The host used for the browser or web view",
          "groups": ["advanced"],
          "aliases": [],
          "spec": {
            "value": "host"
          }
        },
        {
          "name": "livereload",
          "type": "boolean",
          "summary": "Spin up dev server to live-reload www files",
          "groups": [],
          "aliases": ["l"],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "livereload-url",
          "type": "string",
          "summary": "Provide a custom URL to the dev server",
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "url"
          }
        },
        {
          "name": "prod",
          "type": "boolean",
          "summary": "Flag to use the `production` configuration",
          "groups": ["cordova"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "configuration",
          "type": "string",
          "summary": "Specify the configuration to use.",
          "groups": ["advanced", "cordova"],
          "aliases": ["c"],
          "spec": {
            "value": "conf"
          }
        },
        {
          "name": "source-map",
          "type": "boolean",
          "summary": "Output source maps",
          "groups": ["advanced", "cordova"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "debug",
          "type": "boolean",
          "summary": "Mark as a debug build",
          "groups": ["cordova", "cordova-cli"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "release",
          "type": "boolean",
          "summary": "Mark as a release build",
          "groups": ["cordova", "cordova-cli"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "device",
          "type": "boolean",
          "summary": "Deploy build to a device",
          "groups": ["cordova", "cordova-cli", "native-run"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "emulator",
          "type": "boolean",
          "summary": "Deploy build to an emulator",
          "groups": ["cordova", "cordova-cli", "native-run"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "buildConfig",
          "type": "string",
          "summary": "Use the specified build configuration",
          "groups": ["advanced", "cordova", "cordova-cli"],
          "aliases": [],
          "spec": {
            "value": "file"
          }
        },
        {
          "name": "target",
          "type": "string",
          "summary": "Deploy build to a device (use `--list` to see all)",
          "groups": ["advanced", "cordova", "cordova-cli", "native-run"],
          "aliases": [],
          "spec": {
            "value": "target"
          }
        },
        {
          "name": "native-run",
          "type": "boolean",
          "summary": "Do not use `native-run` to run the app; use Cordova instead",
          "default": true,
          "groups": ["native-run"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "connect",
          "type": "boolean",
          "summary": "Tie the running app to the process",
          "groups": ["native-run"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "json",
          "type": "boolean",
          "summary": "Output targets in JSON",
          "groups": ["advanced", "native-run"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        }
      ],
      "type": "project"
    },
    {
      "name": "ionic deploy add",
      "namespace": ["ionic", "deploy"],
      "summary": "Adds Appflow Deploy to the project",
      "description": "This command adds the Appflow Deploy plugin (`cordova-plugin-ionic`) for both Capacitor and Cordova projects.\n\nFor Capacitor projects it runs all the steps necessary to install the plugin, sync with the native projects and add the configuration to the proper iOS and Android configuration files.\n\nFor Cordova projects it just takes care of running the proper Cordova CLI command with the submitted parameters.",
      "footnotes": [],
      "groups": ["paid"],
      "exampleCommands": [
        "ionic deploy add ",
        "ionic deploy add --app-id=abcd1234 --channel-name=\"Master\" --update-method=background",
        "ionic deploy add --max-store=2 --min-background-duration=30",
        "ionic deploy add --app-id=abcd1234 --channel-name=\"Master\" --update-method=background --max-store=2 --min-background-duration=30"
      ],
      "aliases": [],
      "inputs": [],
      "options": [
        {
          "name": "app-id",
          "type": "string",
          "summary": "Your Appflow app ID",
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "id"
          }
        },
        {
          "name": "channel-name",
          "type": "string",
          "summary": "The channel to check for updates from",
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "name"
          }
        },
        {
          "name": "update-method",
          "type": "string",
          "summary": "The update method that dictates the behavior of the plugin",
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "name"
          }
        },
        {
          "name": "max-store",
          "type": "string",
          "summary": "The maximum number of downloaded versions to store on the device",
          "default": "2",
          "groups": ["advanced"],
          "aliases": [],
          "spec": {
            "value": "quantity"
          }
        },
        {
          "name": "min-background-duration",
          "type": "string",
          "summary": "The minimum duration after which the app checks for an update in the background",
          "default": "30",
          "groups": ["advanced"],
          "aliases": [],
          "spec": {
            "value": "seconds"
          }
        }
      ],
      "type": "project"
    },
    {
      "name": "ionic deploy build",
      "namespace": ["ionic", "deploy"],
      "summary": "Create a deploy build on Appflow",
      "description": "This command creates a deploy build on Appflow. While the build is running, it prints the remote build log to the terminal. If the build is successful, it downloads the created web build zip file in the current directory. Downloading build artifacts can be skipped by supplying the flag `skip-download`.\n\nApart from `--commit`, every option can be specified using the full name setup within the Appflow [Dashboard](https://dashboard.ionicframework.com).\n\nCustomizing the build:\n- The `--environment` and `--channel` options can be used to customize the groups of values exposed to the build.",
      "footnotes": [],
      "groups": ["paid", "deprecated"],
      "exampleCommands": [
        "ionic deploy build ",
        "ionic deploy build --environment=\"My Custom Environment Name\"",
        "ionic deploy build --commit=2345cd3305a1cf94de34e93b73a932f25baac77c",
        "ionic deploy build --channel=\"Master\"",
        "ionic deploy build --channel=\"Master\" --skip-download",
        "ionic deploy build --channel=\"Master\" --channel=\"My Custom Channel\""
      ],
      "aliases": [],
      "inputs": [],
      "options": [
        {
          "name": "environment",
          "type": "string",
          "summary": "The group of environment variables exposed to your build",
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "name"
          }
        },
        {
          "name": "channel",
          "type": "string",
          "summary": "The channel you want to auto deploy the build to. This can be repeated multiple times if multiple channels need to be specified.",
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "name"
          }
        },
        {
          "name": "commit",
          "type": "string",
          "summary": "Commit (defaults to HEAD)",
          "groups": ["advanced"],
          "aliases": [],
          "spec": {
            "value": "sha1"
          }
        },
        {
          "name": "skip-download",
          "type": "boolean",
          "summary": "Skip downloading build artifacts after command succeeds.",
          "default": false,
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "name"
          }
        }
      ],
      "type": "project"
    },
    {
      "name": "ionic deploy configure",
      "namespace": ["ionic", "deploy"],
      "summary": "Overrides Appflow Deploy configuration",
      "description": "This command overrides configuration for the Appflow Deploy plugin (`cordova-plugin-ionic`) in Capacitor projects.\n\nFor Capacitor projects, if the plugin is already installed, it overrides the configuration variables in the native projects.\n\nFor Cordova projects this is not implemented because it is better to reinstall the plugin with the different parameters and let Cordova deal with the changes.",
      "footnotes": [],
      "groups": ["paid"],
      "exampleCommands": [
        "ionic deploy configure ",
        "ionic deploy configure --app-id=abcd1234 --channel-name=\"Master\" --update-method=background",
        "ionic deploy configure --max-store=2 --min-background-duration=30",
        "ionic deploy configure --app-id=abcd1234 --channel-name=\"Master\" --update-method=background --max-store=2 --min-background-duration=30",
        "ionic deploy configure android",
        "ionic deploy configure ios"
      ],
      "aliases": [],
      "inputs": [
        {
          "name": "platform",
          "summary": "The native platform (e.g. `ios`, `android`)",
          "required": false
        }
      ],
      "options": [
        {
          "name": "app-id",
          "type": "string",
          "summary": "Your Appflow app ID",
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "id"
          }
        },
        {
          "name": "channel-name",
          "type": "string",
          "summary": "The channel to check for updates from",
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "name"
          }
        },
        {
          "name": "update-method",
          "type": "string",
          "summary": "The update method that dictates the behavior of the plugin",
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "name"
          }
        },
        {
          "name": "max-store",
          "type": "string",
          "summary": "The maximum number of downloaded versions to store on the device",
          "groups": ["advanced"],
          "aliases": [],
          "spec": {
            "value": "quantity"
          }
        },
        {
          "name": "min-background-duration",
          "type": "string",
          "summary": "The minimum duration after which the app checks for an update in the background",
          "groups": ["advanced"],
          "aliases": [],
          "spec": {
            "value": "seconds"
          }
        }
      ],
      "type": "project"
    },
    {
      "name": "ionic deploy manifest",
      "namespace": ["ionic", "deploy"],
      "summary": "Generates a manifest file for the deploy service from a built app directory",
      "description": "",
      "footnotes": [],
      "groups": ["paid"],
      "exampleCommands": [],
      "aliases": [],
      "inputs": [],
      "options": [],
      "type": "global"
    },
    {
      "name": "ionic docs",
      "namespace": ["ionic"],
      "summary": "Open the Ionic documentation website",
      "description": "",
      "footnotes": [],
      "groups": [],
      "exampleCommands": [],
      "aliases": [],
      "inputs": [],
      "options": [
        {
          "name": "browser",
          "type": "string",
          "summary": "Specifies the browser to use (`safari`, `firefox`, `google chrome`)",
          "groups": ["advanced"],
          "aliases": ["w"],
          "spec": {
            "value": "browser"
          }
        }
      ],
      "type": "global"
    },
    {
      "name": "ionic doctor check",
      "namespace": ["ionic", "doctor"],
      "summary": "Check the health of your Ionic project",
      "description": "This command detects and prints common issues and suggested steps to fix them.\n\nSome issues can be fixed automatically. See `ionic doctor treat --help`.\n\nOptionally supply the `id` argument to check a single issue. Use `ionic doctor list` to list all known issues.",
      "footnotes": [],
      "groups": [],
      "exampleCommands": ["ionic doctor check ", "ionic doctor check git-not-used"],
      "aliases": ["ionic doctor checkup", "ionic doctor validate"],
      "inputs": [
        {
          "name": "id",
          "summary": "The issue identifier",
          "required": false
        }
      ],
      "options": [],
      "type": "project"
    },
    {
      "name": "ionic doctor list",
      "namespace": ["ionic", "doctor"],
      "summary": "List all issues and their identifiers",
      "description": "Issues can have various tags:\n- **treatable**: `ionic doctor treat` can attempt to fix the issue\n- **ignored**: configured not to be detected in `ionic doctor check` or `ionic doctor treat`\n- **explicit-detection**: issue is only detected explicitly with `ionic doctor check <issue-id>`\n\nYou can flip whether an issue is ignored or not by using `ionic config set -g doctor.issues.<issue-id>.ignored true/false`, where `<issue-id>` matches an ID listed with this command.",
      "footnotes": [],
      "groups": [],
      "exampleCommands": [],
      "aliases": ["ionic doctor ls"],
      "inputs": [],
      "options": [],
      "type": "project"
    },
    {
      "name": "ionic doctor treat",
      "namespace": ["ionic", "doctor"],
      "summary": "Attempt to fix issues in your Ionic project",
      "description": "This command detects and attempts to fix common issues. Before a fix is attempted, the steps are printed and a confirmation prompt is displayed.\n\nOptionally supply the `id` argument to attempt to fix a single issue. Use `ionic doctor list` to list all known issues.",
      "footnotes": [],
      "groups": [],
      "exampleCommands": ["ionic doctor treat ", "ionic doctor treat git-not-used"],
      "aliases": ["ionic doctor fix"],
      "inputs": [
        {
          "name": "id",
          "summary": "The issue identifier",
          "required": false
        }
      ],
      "options": [],
      "type": "project"
    },
    {
      "name": "ionic enterprise register",
      "namespace": ["ionic", "enterprise"],
      "summary": "Register your Product Key with this app",
      "description": "",
      "footnotes": [],
      "groups": ["paid"],
      "exampleCommands": [],
      "aliases": [],
      "inputs": [],
      "options": [
        {
          "name": "app-id",
          "type": "string",
          "summary": "The Ionic App ID",
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "id"
          }
        },
        {
          "name": "key",
          "type": "string",
          "summary": "The Product Key",
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "key"
          }
        }
      ],
      "type": "project"
    },
    {
      "name": "ionic generate",
      "namespace": ["ionic"],
      "summary": "Create Pages, Components, & Angular Features",
      "description": "Automatically create framework features with Ionic Generate. This command uses the Angular CLI to generate features such as `pages`, `components`, `directives`, `services`, and more.\n\n - For a full list of available types, use `npx ng g --help`\n - For a list of options for a types, use `npx ng g <type> --help`\n\nYou can specify a path to nest your feature within any number of subdirectories. For example, specify a name of `\"pages/New Page\"` to generate page files at **src/app/pages/new-page/**.\n\nTo test a generator before file modifications are made, use the `--dry-run` option.",
      "footnotes": [],
      "groups": [],
      "exampleCommands": [
        "ionic generate ",
        "ionic generate page",
        "ionic generate page contact",
        "ionic generate component contact/form",
        "ionic generate component login-form --change-detection=OnPush",
        "ionic generate directive ripple --skip-import",
        "ionic generate service api/user"
      ],
      "aliases": ["ionic g"],
      "inputs": [
        {
          "name": "type",
          "summary": "The type of feature (e.g. `page`, `component`, `directive`, `service`)",
          "required": true
        },
        {
          "name": "name",
          "summary": "The name/path of the feature being generated",
          "required": true
        }
      ],
      "options": [],
      "type": "project"
    },
    {
      "name": "ionic git remote",
      "namespace": ["ionic", "git"],
      "summary": "Adds/updates the Appflow git remote to your local Ionic app",
      "description": "This command is used by `ionic link` when Appflow is used as the git host.\n\n`ionic git remote` will check the local repository for whether or not the git remote is properly set up. This command operates on the **ionic** remote. For advanced configuration, see **Settings** => **Git** in the app settings of the [Dashboard](https://dashboard.ionicframework.com).",
      "footnotes": [],
      "groups": ["paid"],
      "exampleCommands": [],
      "aliases": [],
      "inputs": [],
      "options": [],
      "type": "project"
    },
    {
      "name": "ionic info",
      "namespace": ["ionic"],
      "summary": "Print project, system, and environment information",
      "description": "This command is an easy way to share information about your setup. If applicable, be sure to run `ionic info` within your project directory to display even more information.",
      "footnotes": [],
      "groups": [],
      "exampleCommands": [],
      "aliases": [],
      "inputs": [],
      "options": [
        {
          "name": "json",
          "type": "boolean",
          "summary": "Print system/environment info in JSON format",
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        }
      ],
      "type": "global"
    },
    {
      "name": "ionic init",
      "namespace": ["ionic"],
      "summary": "Initialize existing projects with Ionic",
      "description": "This command will initialize an Ionic app within the current directory. Usually, this means an `ionic.config.json` file is created. If used within a multi-app project, the app is initialized in the root `ionic.config.json`.\n\n`ionic init` will prompt for a project name and then proceed to determine the type of your project. You can specify the `name` argument and `--type` option to provide these values via command-line.\n\nIf the `--multi-app` flag is specified, this command will initialize your project as a multi-app project, allowing for apps within monorepos and unconventional repository structures. See the multi-app [docs](https://ionicframework.com/docs/cli/configuration#multi-app-projects) for details. Once a multi-app project is initialized, you can run `ionic init` again within apps in your project to initialize them.",
      "footnotes": [],
      "groups": ["beta"],
      "exampleCommands": [
        "ionic init ",
        "ionic init \"My App\"",
        "ionic init \"My App\" --type=angular",
        "ionic init --multi-app"
      ],
      "aliases": [],
      "inputs": [
        {
          "name": "name",
          "summary": "The name of your project (e.g. `myApp`, `\"My App\"`)",
          "required": false
        }
      ],
      "options": [
        {
          "name": "type",
          "type": "string",
          "summary": "Type of project (e.g. `angular`, `react`, `vue`, `custom`)",
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "type"
          }
        },
        {
          "name": "force",
          "type": "boolean",
          "summary": "Initialize even if a project already exists",
          "default": false,
          "groups": [],
          "aliases": ["f"],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "multi-app",
          "type": "boolean",
          "summary": "Initialize a multi-app project",
          "default": false,
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "project-id",
          "type": "string",
          "summary": "Specify a slug for your app",
          "groups": ["advanced"],
          "aliases": [],
          "spec": {
            "value": "slug"
          }
        },
        {
          "name": "default",
          "type": "boolean",
          "summary": "Mark the initialized app as the default project",
          "groups": ["advanced"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        }
      ],
      "type": "global"
    },
    {
      "name": "ionic integrations disable",
      "namespace": ["ionic", "integrations"],
      "summary": "Disable an integration",
      "description": "Integrations, such as Cordova, can be disabled with this command.",
      "footnotes": [],
      "groups": [],
      "exampleCommands": [],
      "aliases": [
        "ionic integrations dis",
        "ionic integrations delete",
        "ionic integrations del",
        "ionic integrations remove",
        "ionic integrations rm"
      ],
      "inputs": [
        {
          "name": "name",
          "summary": "The integration to disable (e.g. `capacitor`, `cordova`, `enterprise`)",
          "required": true
        }
      ],
      "options": [],
      "type": "project"
    },
    {
      "name": "ionic integrations enable",
      "namespace": ["ionic", "integrations"],
      "summary": "Add & enable integrations to your app",
      "description": "Integrations, such as Cordova, can be enabled with this command. If the integration has never been added to the project, `ionic integrations enable` will download and add the integration.\n\nIntegrations can be re-added with the `--add` option.",
      "footnotes": [],
      "groups": [],
      "exampleCommands": [],
      "aliases": ["ionic integrations en", "ionic integrations add"],
      "inputs": [
        {
          "name": "name",
          "summary": "The integration to enable (e.g. `capacitor`, `cordova`, `enterprise`)",
          "required": true
        }
      ],
      "options": [
        {
          "name": "add",
          "type": "boolean",
          "summary": "Download and add the integration even if enabled",
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "root",
          "type": "string",
          "summary": "Specify an alternative destination to download into when adding",
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "path"
          }
        },
        {
          "name": "quiet",
          "type": "boolean",
          "summary": "Less verbose output, ignore integration errors",
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        }
      ],
      "type": "project"
    },
    {
      "name": "ionic integrations list",
      "namespace": ["ionic", "integrations"],
      "summary": "List available and active integrations in your app",
      "description": "This command will print the status of integrations in Ionic projects. Integrations can be **enabled** (added and enabled), **disabled** (added but disabled), and **not added** (never added to the project).\n\n- To enable or add integrations, see `ionic integrations enable --help`\n- To disable integrations, see `ionic integrations disable --help`",
      "footnotes": [],
      "groups": [],
      "exampleCommands": [],
      "aliases": ["ionic integrations ls"],
      "inputs": [],
      "options": [],
      "type": "project"
    },
    {
      "name": "ionic link",
      "namespace": ["ionic"],
      "summary": "Connect local apps to Ionic",
      "description": "Link apps on Appflow to local Ionic projects with this command.\n\nIf the `id` argument is excluded, this command will prompt you to select an app from Appflow.\n\nAppflow uses a git-based workflow to manage app updates. During the linking process, select **GitHub** (recommended) or **Appflow** as a git host. See our [documentation](https://ionicframework.com/docs/appflow/basics/git) for more information.\n\nUltimately, this command sets the **id** property in **./ionic.config.json**, which marks this app as linked.\n\nIf you are having issues linking, please get in touch with our [Support](https://ion.link/support-request).",
      "footnotes": [],
      "groups": ["paid"],
      "exampleCommands": ["ionic link ", "ionic link a1b2c3d4"],
      "aliases": [],
      "inputs": [
        {
          "name": "id",
          "summary": "The Appflow ID of the app to link (e.g. `a1b2c3d4`)",
          "required": false
        }
      ],
      "options": [],
      "type": "project"
    },
    {
      "name": "ionic login",
      "namespace": ["ionic"],
      "summary": "Log in to Ionic",
      "description": "Authenticate with Ionic and retrieve a user token, which is stored in the CLI config. Running `ionic login` will open a browser where you can submit your credentials.\n\nIf the `IONIC_TOKEN` environment variable is set, the CLI will automatically authenticate you. Use the Dashboard to generate a Personal Access Token.\n\nIf you need to create an Ionic account, use `ionic signup` or the Ionic [Website](https://ionicframework.com/signup).\n\nIf you are having issues logging in, please get in touch with our [Support](https://ion.link/support-request).",
      "footnotes": [],
      "groups": [],
      "exampleCommands": ["ionic login "],
      "aliases": [],
      "inputs": [
        {
          "name": "email",
          "summary": "Your email address (deprecated)",
          "required": false
        },
        {
          "name": "password",
          "summary": "Your password (deprecated)",
          "required": false
        }
      ],
      "options": [],
      "type": "global"
    },
    {
      "name": "ionic logout",
      "namespace": ["ionic"],
      "summary": "Log out of Ionic",
      "description": "Remove the Ionic user token from the CLI config.\n\nLog in again with `ionic login`.\n\nIf you need to create an Ionic account, use `ionic signup`.",
      "footnotes": [],
      "groups": [],
      "exampleCommands": [],
      "aliases": [],
      "inputs": [],
      "options": [],
      "type": "global"
    },
    {
      "name": "ionic package build",
      "namespace": ["ionic", "package"],
      "summary": "Create a package build on Appflow",
      "description": "This command creates a package build on Appflow. While the build is running, it prints the remote build log to the terminal. If the build is successful, it downloads the created app package file in the current directory. Downloading build artifacts can be skipped by supplying the flag `skip-download`.\n\nApart from `--commit`, every option can be specified using the full name setup within the [Dashboard](https://dashboard.ionicframework.com).\n\nThe `--signing-certificate` option is mandatory for any iOS build but not for Android debug builds.\n\nCustomizing the build:\n- The `--environment` and `--native-config` options can be used to customize the groups of values exposed to the build.\n- Override the preferred platform with `--build-stack`. This is useful for building older iOS apps.\n\nDeploying the build to an App Store:\n- The `--destination` option can be used to deliver the app created by the build to the configured App Store. This can be used only together with build type `release` for Android and build types `app-store` or `enterprise` for iOS.\n\nDownloading build artifacts:\n- By default once the build is complete, all artifacts are downloaded for the selected platform. `aab` and `apk` for Android `ipa` and `dsym` for iOS.\n- The `--artifact-type` option can be used to limit artifact downloads to only of that type. For instance, with Android, you can specify `aab` if you do not wish to download `apk`.",
      "footnotes": [],
      "groups": ["paid", "deprecated"],
      "exampleCommands": [
        "ionic package build android debug",
        "ionic package build ios development --signing-certificate=\"iOS Signing Certificate Name\"",
        "ionic package build android debug --environment=\"My Custom Environment Name\"",
        "ionic package build android debug --native-config=\"My Custom Native Config Name\"",
        "ionic package build android debug --commit=2345cd3305a1cf94de34e93b73a932f25baac77c",
        "ionic package build android debug --artifact-type=aab",
        "ionic package build android debug --skip-download",
        "ionic package build android debug --aab-name=\"my-app-prod.aab\" --apk-name=\"my-app-prod.apk\"",
        "ionic package build ios development --signing-certificate=\"iOS Signing Certificate Name\" --build-stack=\"iOS - Xcode 9\"",
        "ionic package build ios development --signing-certificate=\"iOS Signing Certificate Name\" --ipa-name=my_custom_file_name.ipa",
        "ionic package build ios app-store --signing-certificate=\"iOS Signing Certificate Name\" --destination=\"Apple App Store Destination\""
      ],
      "aliases": [],
      "inputs": [
        {
          "name": "platform",
          "summary": "The platform to package (`android`, `ios`)",
          "required": true
        },
        {
          "name": "type",
          "summary": "The build type (`debug`, `release`, `development`, `ad-hoc`, `app-store`, `enterprise`)",
          "required": true
        }
      ],
      "options": [
        {
          "name": "signing-certificate",
          "type": "string",
          "summary": "Signing certificate",
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "name"
          }
        },
        {
          "name": "environment",
          "type": "string",
          "summary": "The group of environment variables exposed to your build",
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "name"
          }
        },
        {
          "name": "native-config",
          "type": "string",
          "summary": "The group of native config variables exposed to your build",
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "name"
          }
        },
        {
          "name": "destination",
          "type": "string",
          "summary": "The configuration to deploy the build artifact to the app store",
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "name"
          }
        },
        {
          "name": "commit",
          "type": "string",
          "summary": "Commit (defaults to HEAD)",
          "groups": ["advanced"],
          "aliases": [],
          "spec": {
            "value": "sha1"
          }
        },
        {
          "name": "build-stack",
          "type": "string",
          "summary": "Target platform (`\"Android\"`, `\"iOS - Xcode 11 (Preferred)\"`, `\"iOS - Xcode 10\"`)",
          "groups": ["advanced"],
          "aliases": [],
          "spec": {
            "value": "name"
          }
        },
        {
          "name": "build-file-name",
          "type": "string",
          "summary": "The name for the downloaded build file",
          "groups": ["deprecated"],
          "aliases": [],
          "spec": {
            "value": "name"
          }
        },
        {
          "name": "ipa-name",
          "type": "string",
          "summary": "The name for the downloaded ipa file",
          "groups": ["advanced"],
          "aliases": [],
          "spec": {
            "value": "name"
          }
        },
        {
          "name": "dsym-name",
          "type": "string",
          "summary": "The name for the downloaded dsym file",
          "groups": ["advanced"],
          "aliases": [],
          "spec": {
            "value": "name"
          }
        },
        {
          "name": "apk-name",
          "type": "string",
          "summary": "The name for the downloaded apk file",
          "groups": ["advanced"],
          "aliases": [],
          "spec": {
            "value": "name"
          }
        },
        {
          "name": "aab-name",
          "type": "string",
          "summary": "The name for the downloaded aab file",
          "groups": ["advanced"],
          "aliases": [],
          "spec": {
            "value": "name"
          }
        },
        {
          "name": "artifact-type",
          "type": "string",
          "summary": "The artifact type (`aab`, `apk`, `ipa`, `dsym`)",
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "name"
          }
        },
        {
          "name": "skip-download",
          "type": "boolean",
          "summary": "Skip downloading build artifacts after command succeeds.",
          "default": false,
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "name"
          }
        }
      ],
      "type": "project"
    },
    {
      "name": "ionic package deploy",
      "namespace": ["ionic", "package"],
      "summary": "Deploys a binary to a destination, such as an app store using Appflow",
      "description": "This command deploys a binary to a destination using Appflow. While running, the remote log is printed to the terminal.\n\nThe command takes two parameters: the numeric ID of the package build that previously created the binary and the name of the destination where the binary is going to be deployed.\nBoth can be retrieved from the [Dashboard](https://dashboard.ionicframework.com).",
      "footnotes": [],
      "groups": ["paid", "deprecated"],
      "exampleCommands": ["ionic package deploy 123456789 \"My app store destination\""],
      "aliases": [],
      "inputs": [
        {
          "name": "build-id",
          "summary": "The build id of the desired successful package build",
          "required": true
        },
        {
          "name": "destination",
          "summary": "The destination to deploy the build artifact to the app store",
          "required": true
        }
      ],
      "options": [],
      "type": "project"
    },
    {
      "name": "ionic repair",
      "namespace": ["ionic"],
      "summary": "Remove and recreate dependencies and generated files",
      "description": "This command may be useful when obscure errors or issues are encountered. It removes and recreates dependencies of your project.\n\nFor Cordova apps, it removes and recreates the generated native project and the native dependencies of your project.",
      "footnotes": [],
      "groups": [],
      "exampleCommands": [],
      "aliases": [],
      "inputs": [],
      "options": [
        {
          "name": "cordova",
          "type": "boolean",
          "summary": "Only perform the repair steps for Cordova platforms and plugins.",
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        }
      ],
      "type": "project"
    },
    {
      "name": "ionic serve",
      "namespace": ["ionic"],
      "summary": "Start a local dev server for app dev/testing",
      "description": "Easily spin up a development server which launches in your browser. It watches for changes in your source files and automatically reloads with the updated build.\n\nBy default, `ionic serve` boots up a development server on `localhost`. To serve to your LAN, specify the `--external` option, which will use all network interfaces and print the external address(es) on which your app is being served.\n\nTry the `--lab` option to see multiple platforms at once.\n\n`ionic serve` uses the Angular CLI. Use `ng serve --help` to list all Angular CLI options for serving your app. See the `ng serve` [docs](https://angular.io/cli/serve) for explanations. Options not listed below are considered advanced and can be passed to the Angular CLI using the `--` separator after the Ionic CLI arguments. See the examples.\n\nThe dev server can use HTTPS via the `--ssl` option **(experimental)**. There are several known issues with HTTPS. See issue [#3305](https://github.com/ionic-team/ionic-cli/issues/3305).",
      "footnotes": [],
      "groups": [],
      "exampleCommands": [
        "ionic serve ",
        "ionic serve --external",
        "ionic serve --lab",
        "ionic serve -- --proxy-config proxy.conf.json"
      ],
      "aliases": ["ionic s"],
      "inputs": [],
      "options": [
        {
          "name": "consolelogs",
          "type": "boolean",
          "summary": "Print app console logs to the terminal",
          "groups": ["advanced", "cordova"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "consolelogs-port",
          "type": "string",
          "summary": "Use specific port for console logs server",
          "groups": ["advanced", "cordova"],
          "aliases": [],
          "spec": {
            "value": "port"
          }
        },
        {
          "name": "ssl",
          "type": "boolean",
          "summary": "Use HTTPS for the dev server",
          "groups": ["experimental", "cordova"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "prod",
          "type": "boolean",
          "summary": "Flag to use the `production` configuration",
          "groups": ["cordova"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "configuration",
          "type": "string",
          "summary": "Specify the configuration to use.",
          "groups": ["advanced", "cordova"],
          "aliases": ["c"],
          "spec": {
            "value": "conf"
          }
        },
        {
          "name": "source-map",
          "type": "boolean",
          "summary": "Output sourcemaps",
          "groups": ["advanced", "cordova"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "external",
          "type": "boolean",
          "summary": "Host dev server on all network interfaces (i.e. `--host=0.0.0.0`)",
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "host",
          "type": "string",
          "summary": "Use specific host for the dev server",
          "default": "localhost",
          "groups": ["advanced"],
          "aliases": [],
          "spec": {
            "value": "host"
          }
        },
        {
          "name": "port",
          "type": "string",
          "summary": "Use specific port for the dev server",
          "default": "8100",
          "groups": ["advanced"],
          "aliases": ["p"],
          "spec": {
            "value": "port"
          }
        },
        {
          "name": "public-host",
          "type": "string",
          "summary": "The host used for the browser or web view",
          "groups": ["advanced"],
          "aliases": [],
          "spec": {
            "value": "host"
          }
        },
        {
          "name": "livereload",
          "type": "boolean",
          "summary": "Do not spin up dev server--just serve files",
          "default": true,
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "lab-host",
          "type": "string",
          "summary": "Use specific host for Ionic Lab server",
          "default": "localhost",
          "groups": ["advanced"],
          "aliases": [],
          "spec": {
            "value": "host"
          }
        },
        {
          "name": "lab-port",
          "type": "string",
          "summary": "Use specific port for Ionic Lab server",
          "default": "8200",
          "groups": ["advanced"],
          "aliases": [],
          "spec": {
            "value": "port"
          }
        },
        {
          "name": "open",
          "type": "boolean",
          "summary": "Do not open a browser window",
          "default": true,
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "browser",
          "type": "string",
          "summary": "Specifies the browser to use (`safari`, `firefox`, `google chrome`)",
          "groups": ["advanced"],
          "aliases": ["w"],
          "spec": {
            "value": "browser"
          }
        },
        {
          "name": "browseroption",
          "type": "string",
          "summary": "Specifies a path to open to (`/#/tab/dash`)",
          "groups": ["advanced"],
          "aliases": ["o"],
          "spec": {
            "value": "path"
          }
        },
        {
          "name": "lab",
          "type": "boolean",
          "summary": "Test your apps on multiple platform types in the browser",
          "groups": [],
          "aliases": ["l"],
          "spec": {
            "value": "true/false"
          }
        }
      ],
      "type": "project"
    },
    {
      "name": "ionic signup",
      "namespace": ["ionic"],
      "summary": "Create an Ionic account",
      "description": "If you are having issues signing up, please get in touch with our [Support](https://ion.link/support-request).",
      "footnotes": [],
      "groups": [],
      "exampleCommands": [],
      "aliases": [],
      "inputs": [],
      "options": [],
      "type": "global"
    },
    {
      "name": "ionic ssh add",
      "namespace": ["ionic", "ssh"],
      "summary": "Add an SSH public key to Ionic",
      "description": "",
      "footnotes": [],
      "groups": [],
      "exampleCommands": [],
      "aliases": [],
      "inputs": [
        {
          "name": "pubkey-path",
          "summary": "Location of public key file to add to Ionic",
          "required": true
        }
      ],
      "options": [
        {
          "name": "use",
          "type": "boolean",
          "summary": "Use the newly added key as your default SSH key for Ionic",
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        }
      ],
      "type": "global"
    },
    {
      "name": "ionic ssh delete",
      "namespace": ["ionic", "ssh"],
      "summary": "Delete an SSH public key from Ionic",
      "description": "",
      "footnotes": [],
      "groups": [],
      "exampleCommands": [],
      "aliases": ["ionic ssh remove", "ionic ssh rm"],
      "inputs": [
        {
          "name": "key-id",
          "summary": "The ID of the public key to delete",
          "required": true
        }
      ],
      "options": [],
      "type": "global"
    },
    {
      "name": "ionic ssh generate",
      "namespace": ["ionic", "ssh"],
      "summary": "Generates a private and public SSH key pair",
      "description": "",
      "footnotes": [],
      "groups": [],
      "exampleCommands": [],
      "aliases": ["ionic ssh g"],
      "inputs": [
        {
          "name": "key-path",
          "summary": "Destination of private key file",
          "required": false
        }
      ],
      "options": [
        {
          "name": "type",
          "type": "string",
          "summary": "The type of key to generate: `ecdsa`, `ed25519`, `rsa`",
          "default": "rsa",
          "groups": ["advanced"],
          "aliases": ["t"],
          "spec": {
            "value": "type"
          }
        },
        {
          "name": "bits",
          "type": "string",
          "summary": "Number of bits in the key",
          "default": "2048",
          "groups": ["advanced"],
          "aliases": ["b"],
          "spec": {
            "value": "bits"
          }
        },
        {
          "name": "annotation",
          "type": "string",
          "summary": "Annotation (comment) in public key. Your Ionic email address will be used",
          "groups": ["advanced"],
          "aliases": ["C"],
          "spec": {
            "value": "annotation"
          }
        }
      ],
      "type": "global"
    },
    {
      "name": "ionic ssh list",
      "namespace": ["ionic", "ssh"],
      "summary": "List your SSH public keys on Ionic",
      "description": "",
      "footnotes": [],
      "groups": [],
      "exampleCommands": [],
      "aliases": ["ionic ssh ls"],
      "inputs": [],
      "options": [
        {
          "name": "json",
          "type": "boolean",
          "summary": "Output SSH keys in JSON",
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        }
      ],
      "type": "global"
    },
    {
      "name": "ionic ssh setup",
      "namespace": ["ionic", "ssh"],
      "summary": "Setup your Ionic SSH keys automatically",
      "description": "This command offers a setup wizard for Ionic SSH keys using a series of prompts. For more control, see the commands available for managing SSH keys with the `ionic ssh --help` command. For an entirely manual approach, see **Personal Settings** => **SSH Keys** in the [Dashboard](https://dashboard.ionicframework.com/settings/ssh-keys).\n\nIf you are having issues setting up SSH keys, please get in touch with our [Support](https://ion.link/support-request).",
      "footnotes": [],
      "groups": [],
      "exampleCommands": [],
      "aliases": [],
      "inputs": [],
      "options": [],
      "type": "global"
    },
    {
      "name": "ionic ssh use",
      "namespace": ["ionic", "ssh"],
      "summary": "Set your active Ionic SSH key",
      "description": "This command modifies the SSH configuration file (**~/.ssh/config**) to set an active private key for the **git.ionicjs.com** host. Read more about SSH configuration by running the `man ssh_config` command or by visiting online man [pages](https://linux.die.net/man/5/ssh_config).\n\nBefore making changes, `ionic ssh use` will print a diff and ask for permission to write the file.",
      "footnotes": [],
      "groups": [],
      "exampleCommands": [],
      "aliases": [],
      "inputs": [
        {
          "name": "key-path",
          "summary": "Location of private key file to use",
          "required": true
        }
      ],
      "options": [],
      "type": "global"
    },
    {
      "name": "ionic ssl generate",
      "namespace": ["ionic", "ssl"],
      "summary": "Generates an SSL key & certificate",
      "description": "Uses OpenSSL to create a self-signed certificate for **localhost** (by default).\n\nAfter the certificate is generated, you will still need to add it to your system or browser as a trusted certificate.\n\nThe default directory for `--key-path` and `--cert-path` is `.ionic/ssl/`.",
      "footnotes": [],
      "groups": ["experimental"],
      "exampleCommands": [],
      "aliases": ["ionic ssl g"],
      "inputs": [],
      "options": [
        {
          "name": "key-path",
          "type": "string",
          "summary": "Destination of private key file",
          "default": "./.ionic/ssl/key.pem",
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "path"
          }
        },
        {
          "name": "cert-path",
          "type": "string",
          "summary": "Destination of certificate file",
          "default": "./.ionic/ssl/cert.pem",
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "path"
          }
        },
        {
          "name": "country-name",
          "type": "string",
          "summary": "The country name (C) of the SSL certificate",
          "default": "US",
          "groups": ["advanced"],
          "aliases": [],
          "spec": {
            "value": "C"
          }
        },
        {
          "name": "state-or-province-name",
          "type": "string",
          "summary": "The state or province name (ST) of the SSL certificate",
          "default": "Wisconsin",
          "groups": ["advanced"],
          "aliases": [],
          "spec": {
            "value": "ST"
          }
        },
        {
          "name": "locality-name",
          "type": "string",
          "summary": "The locality name (L) of the SSL certificate",
          "default": "Madison",
          "groups": ["advanced"],
          "aliases": [],
          "spec": {
            "value": "L"
          }
        },
        {
          "name": "organization-name",
          "type": "string",
          "summary": "The organization name (O) of the SSL certificate",
          "default": "Ionic",
          "groups": ["advanced"],
          "aliases": [],
          "spec": {
            "value": "O"
          }
        },
        {
          "name": "common-name",
          "type": "string",
          "summary": "The common name (CN) of the SSL certificate",
          "default": "localhost",
          "groups": ["advanced"],
          "aliases": [],
          "spec": {
            "value": "CN"
          }
        },
        {
          "name": "bits",
          "type": "string",
          "summary": "Number of bits in the key",
          "default": "2048",
          "groups": ["advanced"],
          "aliases": ["b"],
          "spec": {
            "value": "bits"
          }
        }
      ],
      "type": "project"
    },
    {
      "name": "ionic start",
      "namespace": ["ionic"],
      "summary": "Create a new project",
      "description": "This command creates a working Ionic app. It installs dependencies for you and sets up your project.\n\nRunning `ionic start` without any arguments will prompt you for information about your new project.\n\nThe first argument is your app's `name`. Don't worry--you can always change this later. The `--project-id` is generated from `name` unless explicitly specified.\n\nThe second argument is the `template` from which to generate your app. You can list all templates with the `--list` option. You can also specify a git repository URL for `template`, in which case the existing project will be cloned.\n\nUse the `--type` option to start projects using older versions of Ionic. For example, you can start an Ionic 3 project with `--type=ionic-angular`. Use `--list` to see all project types and templates.",
      "footnotes": [],
      "groups": [],
      "exampleCommands": [
        "ionic start ",
        "ionic start --list",
        "ionic start myApp",
        "ionic start myApp blank",
        "ionic start myApp tabs --cordova",
        "ionic start myApp tabs --capacitor",
        "ionic start myApp super --type=ionic-angular",
        "ionic start myApp blank --type=ionic1",
        "ionic start cordovaApp tabs --cordova",
        "ionic start \"My App\" blank",
        "ionic start \"Conference App\" https://github.com/ionic-team/ionic-conference-app"
      ],
      "aliases": [],
      "inputs": [
        {
          "name": "name",
          "summary": "The name of your new project (e.g. `myApp`, `\"My App\"`)",
          "required": true
        },
        {
          "name": "template",
          "summary": "The starter template to use (e.g. `blank`, `tabs`; use `--list` to see all)",
          "required": true
        }
      ],
      "options": [
        {
          "name": "list",
          "type": "boolean",
          "summary": "List available starter templates",
          "groups": [],
          "aliases": ["l"],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "type",
          "type": "string",
          "summary": "Type of project to start (e.g. `vue`, `angular`, `react`, `ionic-angular`, `ionic1`)",
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "type"
          }
        },
        {
          "name": "cordova",
          "type": "boolean",
          "summary": "Include Cordova integration",
          "groups": ["deprecated"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "capacitor",
          "type": "boolean",
          "summary": "Include Capacitor integration",
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "deps",
          "type": "boolean",
          "summary": "Do not install npm/yarn dependencies",
          "default": true,
          "groups": ["advanced"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "git",
          "type": "boolean",
          "summary": "Do not initialize a git repo",
          "default": true,
          "groups": ["advanced"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "link",
          "type": "boolean",
          "summary": "Connect your new app to Ionic",
          "groups": ["advanced"],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "id",
          "type": "string",
          "summary": "Specify an Ionic App ID to link",
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "id"
          }
        },
        {
          "name": "project-id",
          "type": "string",
          "summary": "Specify a slug for your app (used for the directory name and package name)",
          "groups": ["advanced"],
          "aliases": [],
          "spec": {
            "value": "slug"
          }
        },
        {
          "name": "package-id",
          "type": "string",
          "summary": "Specify the bundle ID/application ID for your app (reverse-DNS notation)",
          "groups": ["advanced"],
          "aliases": [],
          "spec": {
            "value": "id"
          }
        }
      ],
      "type": "global"
    }
  ],
  "aliases": []
}
