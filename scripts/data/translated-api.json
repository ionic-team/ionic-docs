{
  "size": 0,
  "timeout": 0,
  "components": [
    {
      "filePath": "src/components/accordion-group/accordion-group.tsx",
      "encapsulation": "shadow",
      "tag": "ion-accordion-group",
      "docs": "",
      "docsTags": [
        {
          "name": "virtualProp",
          "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "animated",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "animated",
          "reflectToAttr": false,
          "docs": "`true`の場合、アコーディオングループ内のすべてのアコーディオンが拡大・縮小時にアニメーションを行います。",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "`true`の場合、アコーディオングループと対話することができません。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "expand",
          "type": "\"compact\" | \"inset\"",
          "complexType": {
            "original": "'compact' | 'inset'",
            "resolved": "\"compact\" | \"inset\"",
            "references": {}
          },
          "mutable": false,
          "attr": "expand",
          "reflectToAttr": false,
          "docs": "各アコーディオンの拡張動作を記述します。指定可能な値は `\"compact\"` と `\"inset\"` です。デフォルトは `\"compact\"` です。",
          "docsTags": [],
          "default": "'compact'",
          "values": [
            {
              "value": "compact",
              "type": "string"
            },
            {
              "value": "inset",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "multiple",
          "type": "boolean | undefined",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "multiple",
          "reflectToAttr": false,
          "docs": "`true`の場合、アコーディオングループは複数のアコーディオンコンポーネントを同時に展開することができます。",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "`true`の場合、アコーディオングループはインタラクティブに操作できないが、不透明度は変更されない。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "null | string | string[] | undefined",
          "complexType": {
            "original": "string | string[] | null",
            "resolved": "null | string | string[] | undefined",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "アコーディオングループの値です。これは、どのアコーディオンを展開するかを制御します。これは、`multiple=\"true\"`のときだけ、文字列の配列でなければなりません。",
          "docsTags": [],
          "values": [
            {
              "type": "null"
            },
            {
              "type": "string"
            },
            {
              "type": "string[]"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "ionChange",
          "detail": "AccordionGroupChangeEventDetail<any>",
          "bubbles": true,
          "complexType": {
            "original": "AccordionGroupChangeEventDetail",
            "resolved": "AccordionGroupChangeEventDetail<any>",
            "references": {
              "AccordionGroupChangeEventDetail": {
                "location": "import",
                "path": "./accordion-group-interface",
                "id": "src/components/accordion-group/accordion-group-interface.ts::AccordionGroupChangeEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "クリックなどのユーザー操作により、valueプロパティが変化したときに発生します。プログラムによってvalueプロパティを設定した場合は、このイベントは発生しません。",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/accordion/accordion.tsx",
      "encapsulation": "shadow",
      "tag": "ion-accordion",
      "docs": "",
      "docsTags": [
        {
          "name": "virtualProp",
          "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
        },
        {
          "name": "slot",
          "text": "header - Content is placed at the top and is used to\nexpand or collapse the accordion item."
        },
        {
          "name": "slot",
          "text": "content - Content is placed below the header and is\nshown or hidden based on expanded state."
        },
        {
          "name": "part",
          "text": "header - The wrapper element for the header slot."
        },
        {
          "name": "part",
          "text": "content - The wrapper element for the content slot."
        },
        {
          "name": "part",
          "text": "expanded - The expanded element. Can be used in combination\nwith the `header` and `content` parts (i.e. `::part(header expanded)`)."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "`true`の場合、アコーディオンは対話することができません。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "`true`の場合、アコーディオンはインタラクティブに操作することはできませんが、不透明度は変化しません。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "toggleIcon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "toggle-icon",
          "reflectToAttr": false,
          "docs": "使用するトグルアイコンです。このアイコンは、アコーディオンの展開・折りたたみ時に回転されます。",
          "docsTags": [],
          "default": "chevronDown",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "toggleIconSlot",
          "type": "\"end\" | \"start\"",
          "complexType": {
            "original": "'start' | 'end'",
            "resolved": "\"end\" | \"start\"",
            "references": {}
          },
          "mutable": false,
          "attr": "toggle-icon-slot",
          "reflectToAttr": false,
          "docs": "トグルアイコンを配置する `ion-item` の内側のスロット。デフォルトは `\"end\"` です。",
          "docsTags": [],
          "default": "'end'",
          "values": [
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "アコーディオンの値です。デフォルトは自動生成された値です。",
          "docsTags": [],
          "default": "`ion-accordion-${accordionIds++}`",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "content",
          "docs": "コンテンツはヘッダーの下に配置され、展開状態に応じて表示または非表示になります。"
        },
        {
          "name": "header",
          "docs": "コンテンツは上部に配置され、アコーディオンアイテムの拡大・縮小に使用されます。"
        }
      ],
      "parts": [
        {
          "name": "content",
          "docs": "content slotのラッパー要素。"
        },
        {
          "name": "expanded",
          "docs": "拡張された要素です。ヘッダ`とコンテンツ`の部分と組み合わせて使用することができます（例：`::part(header expanded)`）。"
        },
        {
          "name": "header",
          "docs": "header slotのラッパーの要素です。"
        }
      ],
      "dependents": [],
      "dependencies": [
        "ion-icon"
      ],
      "dependencyGraph": {
        "ion-accordion": [
          "ion-icon"
        ]
      }
    },
    {
      "filePath": "src/components/action-sheet/action-sheet.tsx",
      "encapsulation": "scoped",
      "tag": "ion-action-sheet",
      "docs": "",
      "docsTags": [
        {
          "name": "virtualProp",
          "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "animated",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "animated",
          "reflectToAttr": false,
          "docs": "`true`の場合、アクションシートはアニメーションを行います。",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "backdropDismiss",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "backdrop-dismiss",
          "reflectToAttr": false,
          "docs": "`true`の場合、バックドロップがクリックされるとアクションシートが解除されます。",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "buttons",
          "type": "(string | ActionSheetButton<any>)[]",
          "complexType": {
            "original": "(ActionSheetButton | string)[]",
            "resolved": "(string | ActionSheetButton<any>)[]",
            "references": {
              "ActionSheetButton": {
                "location": "import",
                "path": "./action-sheet-interface",
                "id": "src/components/action-sheet/action-sheet-interface.ts::ActionSheetButton"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "アクションシートのボタンの配列です。",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "(string"
            },
            {
              "type": "ActionSheetButton<any>)[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "cssClass",
          "type": "string | string[] | undefined",
          "complexType": {
            "original": "string | string[]",
            "resolved": "string | string[] | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "css-class",
          "reflectToAttr": false,
          "docs": "カスタムCSSに適用する追加のクラス。複数のクラスを指定する場合は、スペースで区切る必要があります。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "string[]"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "enterAnimation",
          "type": "((baseEl: any, opts?: any) => Animation) | undefined",
          "complexType": {
            "original": "AnimationBuilder",
            "resolved": "((baseEl: any, opts?: any) => Animation) | undefined",
            "references": {
              "AnimationBuilder": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::AnimationBuilder"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "アクションシートの提示時に使用するアニメーションです。",
          "docsTags": [],
          "values": [
            {
              "type": "((baseEl: any, opts?: any) => Animation)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "header",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "header",
          "reflectToAttr": false,
          "docs": "アクションシートのタイトルです。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "htmlAttributes",
          "type": "undefined | { [key: string]: any; }",
          "complexType": {
            "original": "{ [key: string]: any }",
            "resolved": "undefined | { [key: string]: any; }",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "アクションシートに渡す追加属性。",
          "docsTags": [],
          "values": [
            {
              "type": "undefined"
            },
            {
              "type": "{ [key: string]: any; }"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "isOpen",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "is-open",
          "reflectToAttr": false,
          "docs": "`true`の場合、アクションシートは開かれます。`false`の場合、アクションシートは閉じます。プレゼンテーションの細かな制御が必要な場合はこれを使用し、そうでない場合は actionSheetController または `trigger` プロパティを使用します。注意: アクションシートが終了しても、`isOpen`は自動的に`false`に戻されません。あなたのコードでそれを行う必要があります。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "keyboardClose",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "keyboard-close",
          "reflectToAttr": false,
          "docs": "`true`の場合、オーバーレイが表示されたときにキーボードが自動的に解除されます。",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "leaveAnimation",
          "type": "((baseEl: any, opts?: any) => Animation) | undefined",
          "complexType": {
            "original": "AnimationBuilder",
            "resolved": "((baseEl: any, opts?: any) => Animation) | undefined",
            "references": {
              "AnimationBuilder": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::AnimationBuilder"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "アクションシートが解除されたときに使用するアニメーションです。",
          "docsTags": [],
          "values": [
            {
              "type": "((baseEl: any, opts?: any) => Animation)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "subHeader",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "sub-header",
          "reflectToAttr": false,
          "docs": "アクションシートのサブタイトルです。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "translucent",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "translucent",
          "reflectToAttr": false,
          "docs": "`true`の場合、アクションシートは半透明になります。modeが `\"ios\"` で、デバイスが [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility) をサポートしている場合にのみ適用されます。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "trigger",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "trigger",
          "reflectToAttr": false,
          "docs": "クリックするとアクションシートが開くトリガー要素に対応するID。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "dismiss",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "complexType": {
            "signature": "(data?: any, role?: string) => Promise<boolean>",
            "parameters": [
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "data Any data to emit in the dismiss events."
                  }
                ],
                "text": "Any data to emit in the dismiss events."
              },
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "role The role of the element that is dismissing the action sheet.\nThis can be useful in a button handler for determining which button was\nclicked to dismiss the action sheet.\nSome examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`."
                  }
                ],
                "text": "The role of the element that is dismissing the action sheet.\nThis can be useful in a button handler for determining which button was\nclicked to dismiss the action sheet.\nSome examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`."
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "dismiss(data?: any, role?: string) => Promise<boolean>",
          "parameters": [],
          "docs": "アクションシートのオーバーレイが提示された後、それを解除します。",
          "docsTags": [
            {
              "name": "param",
              "text": "data Any data to emit in the dismiss events."
            },
            {
              "name": "param",
              "text": "role The role of the element that is dismissing the action sheet.\nThis can be useful in a button handler for determining which button was\nclicked to dismiss the action sheet.\nSome examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`."
            }
          ]
        },
        {
          "name": "onDidDismiss",
          "returns": {
            "type": "Promise<OverlayEventDetail<T>>",
            "docs": ""
          },
          "complexType": {
            "signature": "<T = any>() => Promise<OverlayEventDetail<T>>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "OverlayEventDetail": {
                "location": "import",
                "path": "../../utils/overlays-interface",
                "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
              },
              "T": {
                "location": "global",
                "id": "global::T"
              }
            },
            "return": "Promise<OverlayEventDetail<T>>"
          },
          "signature": "onDidDismiss<T = any>() => Promise<OverlayEventDetail<T>>",
          "parameters": [],
          "docs": "アクションシートが解散したときに解決するPromiseを返します。",
          "docsTags": []
        },
        {
          "name": "onWillDismiss",
          "returns": {
            "type": "Promise<OverlayEventDetail<T>>",
            "docs": ""
          },
          "complexType": {
            "signature": "<T = any>() => Promise<OverlayEventDetail<T>>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "OverlayEventDetail": {
                "location": "import",
                "path": "../../utils/overlays-interface",
                "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
              },
              "T": {
                "location": "global",
                "id": "global::T"
              }
            },
            "return": "Promise<OverlayEventDetail<T>>"
          },
          "signature": "onWillDismiss<T = any>() => Promise<OverlayEventDetail<T>>",
          "parameters": [],
          "docs": "アクションシートが解散するタイミングを解決するPromiseを返します。",
          "docsTags": []
        },
        {
          "name": "present",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "present() => Promise<void>",
          "parameters": [],
          "docs": "アクションシートのオーバーレイを作成後に提示します。",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "didDismiss",
          "detail": "OverlayEventDetail<any>",
          "bubbles": true,
          "complexType": {
            "original": "OverlayEventDetail",
            "resolved": "OverlayEventDetail<any>",
            "references": {
              "OverlayEventDetail": {
                "location": "import",
                "path": "../../utils/overlays-interface",
                "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "アクションシートが解散した後に発行されます。ionActionSheetDidDismissの略記。",
          "docsTags": []
        },
        {
          "event": "didPresent",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "アクションシートが提示された後に発行されます。ionActionSheetWillDismissの略語。",
          "docsTags": []
        },
        {
          "event": "ionActionSheetDidDismiss",
          "detail": "OverlayEventDetail<any>",
          "bubbles": true,
          "complexType": {
            "original": "OverlayEventDetail",
            "resolved": "OverlayEventDetail<any>",
            "references": {
              "OverlayEventDetail": {
                "location": "import",
                "path": "../../utils/overlays-interface",
                "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "アクションシートが解散した後に発行されます。",
          "docsTags": []
        },
        {
          "event": "ionActionSheetDidPresent",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "アクションシートが提示された後に発行されます。",
          "docsTags": []
        },
        {
          "event": "ionActionSheetWillDismiss",
          "detail": "OverlayEventDetail<any>",
          "bubbles": true,
          "complexType": {
            "original": "OverlayEventDetail",
            "resolved": "OverlayEventDetail<any>",
            "references": {
              "OverlayEventDetail": {
                "location": "import",
                "path": "../../utils/overlays-interface",
                "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "アクションシートが解散する前に発行されます。",
          "docsTags": []
        },
        {
          "event": "ionActionSheetWillPresent",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "アクションシートが提示される前に発行されます。",
          "docsTags": []
        },
        {
          "event": "willDismiss",
          "detail": "OverlayEventDetail<any>",
          "bubbles": true,
          "complexType": {
            "original": "OverlayEventDetail",
            "resolved": "OverlayEventDetail<any>",
            "references": {
              "OverlayEventDetail": {
                "location": "import",
                "path": "../../utils/overlays-interface",
                "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "アクションシートが解散する前に発行されます。ionActionSheetWillDismissの略記。",
          "docsTags": []
        },
        {
          "event": "willPresent",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "アクションシートが提示される前に発行されます。ionActionSheetWillPresentの略記。",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--backdrop-opacity",
          "annotation": "prop",
          "docs": "背景の不透明度"
        },
        {
          "name": "--background",
          "annotation": "prop",
          "docs": "アクションシートグループの背景"
        },
        {
          "name": "--button-background",
          "annotation": "prop",
          "docs": "アクションシートボタンの背景"
        },
        {
          "name": "--button-background-activated",
          "annotation": "prop",
          "docs": "アクションシートボタンが押されたときの背景。注意：これを設定すると、Material Designの波紋に干渉します。"
        },
        {
          "name": "--button-background-activated-opacity",
          "annotation": "prop",
          "docs": "アクションシートボタンが押されたときの背景の不透明度"
        },
        {
          "name": "--button-background-focused",
          "annotation": "prop",
          "docs": "にタブしたときのアクションシートボタンの背景。"
        },
        {
          "name": "--button-background-focused-opacity",
          "annotation": "prop",
          "docs": "にタブしたときのアクションシートボタンの背景の不透明度。"
        },
        {
          "name": "--button-background-hover",
          "annotation": "prop",
          "docs": "ホバー時のアクションシートボタンの背景"
        },
        {
          "name": "--button-background-hover-opacity",
          "annotation": "prop",
          "docs": "ホバー時のアクションシートボタンの背景の不透明度"
        },
        {
          "name": "--button-background-selected",
          "annotation": "prop",
          "docs": "選択したアクションシートボタンの背景"
        },
        {
          "name": "--button-background-selected-opacity",
          "annotation": "prop",
          "docs": "選択されたアクションシートボタンの背景の不透明度"
        },
        {
          "name": "--button-color",
          "annotation": "prop",
          "docs": "アクションシートボタンの色"
        },
        {
          "name": "--button-color-activated",
          "annotation": "prop",
          "docs": "アクションシートボタンが押されたときの色"
        },
        {
          "name": "--button-color-focused",
          "annotation": "prop",
          "docs": "にタブで移動したときのアクションシートのボタンの色。"
        },
        {
          "name": "--button-color-hover",
          "annotation": "prop",
          "docs": "ホバー時のアクションシートボタンの色"
        },
        {
          "name": "--button-color-selected",
          "annotation": "prop",
          "docs": "選択されたアクションシートのボタンの色"
        },
        {
          "name": "--color",
          "annotation": "prop",
          "docs": "アクションシートテキストの色"
        },
        {
          "name": "--height",
          "annotation": "prop",
          "docs": "アクションシートの高さ"
        },
        {
          "name": "--max-height",
          "annotation": "prop",
          "docs": "アクションシートの最大の高さ"
        },
        {
          "name": "--max-width",
          "annotation": "prop",
          "docs": "アクションシートの最大幅"
        },
        {
          "name": "--min-height",
          "annotation": "prop",
          "docs": "アクションシートの最小高さ"
        },
        {
          "name": "--min-width",
          "annotation": "prop",
          "docs": "アクションシートの最小幅"
        },
        {
          "name": "--width",
          "annotation": "prop",
          "docs": "アクションシートの横幅"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [
        "ion-select"
      ],
      "dependencies": [
        "ion-backdrop",
        "ion-icon",
        "ion-ripple-effect"
      ],
      "dependencyGraph": {
        "ion-action-sheet": [
          "ion-backdrop",
          "ion-icon",
          "ion-ripple-effect"
        ],
        "ion-select": [
          "ion-action-sheet"
        ]
      }
    },
    {
      "filePath": "src/components/alert/alert.tsx",
      "encapsulation": "scoped",
      "tag": "ion-alert",
      "docs": "",
      "docsTags": [
        {
          "name": "virtualProp",
          "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "animated",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "animated",
          "reflectToAttr": false,
          "docs": "`true`の場合、アラートはアニメーションで表示されます。",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "backdropDismiss",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "backdrop-dismiss",
          "reflectToAttr": false,
          "docs": "`true`の場合、バックドロップがクリックされるとアラートが解除される。",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "buttons",
          "type": "(string | AlertButton)[]",
          "complexType": {
            "original": "(AlertButton | string)[]",
            "resolved": "(string | AlertButton)[]",
            "references": {
              "AlertButton": {
                "location": "import",
                "path": "./alert-interface",
                "id": "src/components/alert/alert-interface.ts::AlertButton"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "アラートに追加されるボタンの配列。",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "(string"
            },
            {
              "type": "AlertButton)[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "cssClass",
          "type": "string | string[] | undefined",
          "complexType": {
            "original": "string | string[]",
            "resolved": "string | string[] | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "css-class",
          "reflectToAttr": false,
          "docs": "カスタムCSSに適用する追加のクラス。複数のクラスを指定する場合は、スペースで区切る必要があります。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "string[]"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "enterAnimation",
          "type": "((baseEl: any, opts?: any) => Animation) | undefined",
          "complexType": {
            "original": "AnimationBuilder",
            "resolved": "((baseEl: any, opts?: any) => Animation) | undefined",
            "references": {
              "AnimationBuilder": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::AnimationBuilder"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "アラート提示時に使用するアニメーションです。",
          "docsTags": [],
          "values": [
            {
              "type": "((baseEl: any, opts?: any) => Animation)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "header",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "header",
          "reflectToAttr": false,
          "docs": "アラートの見出しにあるメインタイトルです。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "htmlAttributes",
          "type": "undefined | { [key: string]: any; }",
          "complexType": {
            "original": "{ [key: string]: any }",
            "resolved": "undefined | { [key: string]: any; }",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "アラートに渡す追加属性。",
          "docsTags": [],
          "values": [
            {
              "type": "undefined"
            },
            {
              "type": "{ [key: string]: any; }"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "inputs",
          "type": "AlertInput[]",
          "complexType": {
            "original": "AlertInput[]",
            "resolved": "AlertInput[]",
            "references": {
              "AlertInput": {
                "location": "import",
                "path": "./alert-interface",
                "id": "src/components/alert/alert-interface.ts::AlertInput"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "アラートに表示するInputの配列。",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "AlertInput[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "isOpen",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "is-open",
          "reflectToAttr": false,
          "docs": "`true`の場合、アラートは開く。もし `false` ならば、アラートは閉じます。alertControllerや`trigger`プロパティを使用してください。注意: アラートが終了しても `isOpen` は自動的に `false` に戻りません。あなたのコードでそれを行う必要があります。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "keyboardClose",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "keyboard-close",
          "reflectToAttr": false,
          "docs": "`true`の場合、オーバーレイが表示されたときにキーボードが自動的に解除されます。",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "leaveAnimation",
          "type": "((baseEl: any, opts?: any) => Animation) | undefined",
          "complexType": {
            "original": "AnimationBuilder",
            "resolved": "((baseEl: any, opts?: any) => Animation) | undefined",
            "references": {
              "AnimationBuilder": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::AnimationBuilder"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "アラートが解除されたときに使用するアニメーション。",
          "docsTags": [],
          "values": [
            {
              "type": "((baseEl: any, opts?: any) => Animation)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "message",
          "type": "IonicSafeString | string | undefined",
          "complexType": {
            "original": "string | IonicSafeString",
            "resolved": "IonicSafeString | string | undefined",
            "references": {
              "IonicSafeString": {
                "location": "import",
                "path": "../../utils/sanitization",
                "id": "src/utils/sanitization/index.ts::IonicSafeString"
              }
            }
          },
          "mutable": false,
          "attr": "message",
          "reflectToAttr": false,
          "docs": "アラートに表示されるメインメッセージ。`message`には、文字列としてプレーンテキストまたはHTMLのいずれかを指定することができます。通常HTML用に予約されている文字を表示するには、エスケープする必要があります。例えば、`<Ionic>`は `&lt;Ionic&gt;` になります：[セキュリティ・ドキュメント](https://ionicframework.com/docs/faq/security) このプロパティは、カスタムHTMLを文字列として受け付けます。デフォルトでは、コンテンツはプレーンテキストとしてパースされます。カスタムHTMLを使用するには、Ionicの設定で `innerHTMLTemplatesEnabled` を `true` に設定する必要があります。",
          "docsTags": [],
          "values": [
            {
              "type": "IonicSafeString"
            },
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "subHeader",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "sub-header",
          "reflectToAttr": false,
          "docs": "アラートの見出しにあるサブタイトルです。タイトルの下に表示されます。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "translucent",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "translucent",
          "reflectToAttr": false,
          "docs": "`true`の場合、アラートは半透明になります。modeが `\"ios\"` で、デバイスが [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility) をサポートしている場合にのみ適用されます。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "trigger",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "trigger",
          "reflectToAttr": false,
          "docs": "クリックされるとアラートが開くトリガー要素に対応するID。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "dismiss",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "complexType": {
            "signature": "(data?: any, role?: string) => Promise<boolean>",
            "parameters": [
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "data Any data to emit in the dismiss events."
                  }
                ],
                "text": "Any data to emit in the dismiss events."
              },
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "role The role of the element that is dismissing the alert.\nThis can be useful in a button handler for determining which button was\nclicked to dismiss the alert.\nSome examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`."
                  }
                ],
                "text": "The role of the element that is dismissing the alert.\nThis can be useful in a button handler for determining which button was\nclicked to dismiss the alert.\nSome examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`."
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "dismiss(data?: any, role?: string) => Promise<boolean>",
          "parameters": [],
          "docs": "アラートオーバーレイが表示された後、解除します。",
          "docsTags": [
            {
              "name": "param",
              "text": "data Any data to emit in the dismiss events."
            },
            {
              "name": "param",
              "text": "role The role of the element that is dismissing the alert.\nThis can be useful in a button handler for determining which button was\nclicked to dismiss the alert.\nSome examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`."
            }
          ]
        },
        {
          "name": "onDidDismiss",
          "returns": {
            "type": "Promise<OverlayEventDetail<T>>",
            "docs": ""
          },
          "complexType": {
            "signature": "<T = any>() => Promise<OverlayEventDetail<T>>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "OverlayEventDetail": {
                "location": "import",
                "path": "../../utils/overlays-interface",
                "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
              },
              "T": {
                "location": "global",
                "id": "global::T"
              }
            },
            "return": "Promise<OverlayEventDetail<T>>"
          },
          "signature": "onDidDismiss<T = any>() => Promise<OverlayEventDetail<T>>",
          "parameters": [],
          "docs": "アラートが解除されたことを解決するPromiseを返します。",
          "docsTags": []
        },
        {
          "name": "onWillDismiss",
          "returns": {
            "type": "Promise<OverlayEventDetail<T>>",
            "docs": ""
          },
          "complexType": {
            "signature": "<T = any>() => Promise<OverlayEventDetail<T>>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "OverlayEventDetail": {
                "location": "import",
                "path": "../../utils/overlays-interface",
                "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
              },
              "T": {
                "location": "global",
                "id": "global::T"
              }
            },
            "return": "Promise<OverlayEventDetail<T>>"
          },
          "signature": "onWillDismiss<T = any>() => Promise<OverlayEventDetail<T>>",
          "parameters": [],
          "docs": "アラートが解除されるタイミングを解決するPromiseを返します。",
          "docsTags": []
        },
        {
          "name": "present",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "present() => Promise<void>",
          "parameters": [],
          "docs": "アラートオーバーレイを作成した後に提示します。",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "didDismiss",
          "detail": "OverlayEventDetail<any>",
          "bubbles": true,
          "complexType": {
            "original": "OverlayEventDetail",
            "resolved": "OverlayEventDetail<any>",
            "references": {
              "OverlayEventDetail": {
                "location": "import",
                "path": "../../utils/overlays-interface",
                "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "アラートが解除された後に発行されます。ionAlertDidDismissの略記。",
          "docsTags": []
        },
        {
          "event": "didPresent",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "アラートが提示された後に発行されます。ionAlertWillDismissの略記。",
          "docsTags": []
        },
        {
          "event": "ionAlertDidDismiss",
          "detail": "OverlayEventDetail<any>",
          "bubbles": true,
          "complexType": {
            "original": "OverlayEventDetail",
            "resolved": "OverlayEventDetail<any>",
            "references": {
              "OverlayEventDetail": {
                "location": "import",
                "path": "../../utils/overlays-interface",
                "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "アラートが解除された後に発行されます。",
          "docsTags": []
        },
        {
          "event": "ionAlertDidPresent",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "アラートが提示された後に発行されます。",
          "docsTags": []
        },
        {
          "event": "ionAlertWillDismiss",
          "detail": "OverlayEventDetail<any>",
          "bubbles": true,
          "complexType": {
            "original": "OverlayEventDetail",
            "resolved": "OverlayEventDetail<any>",
            "references": {
              "OverlayEventDetail": {
                "location": "import",
                "path": "../../utils/overlays-interface",
                "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "アラートが解除される前に発行されます。",
          "docsTags": []
        },
        {
          "event": "ionAlertWillPresent",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "アラートが提示される前に発行されます。",
          "docsTags": []
        },
        {
          "event": "willDismiss",
          "detail": "OverlayEventDetail<any>",
          "bubbles": true,
          "complexType": {
            "original": "OverlayEventDetail",
            "resolved": "OverlayEventDetail<any>",
            "references": {
              "OverlayEventDetail": {
                "location": "import",
                "path": "../../utils/overlays-interface",
                "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "アラートが解除される前に発行されます。ionAlertWillDismissの略記。",
          "docsTags": []
        },
        {
          "event": "willPresent",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "アラートが提示される前に発行されます。ionAlertWillPresentの略記。",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "keydown",
          "target": "document",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [
        {
          "name": "--backdrop-opacity",
          "annotation": "prop",
          "docs": "背景の不透明度"
        },
        {
          "name": "--background",
          "annotation": "prop",
          "docs": "注意喚起の背景"
        },
        {
          "name": "--height",
          "annotation": "prop",
          "docs": "アラートの高さ"
        },
        {
          "name": "--max-height",
          "annotation": "prop",
          "docs": "アラートの最大の高さ"
        },
        {
          "name": "--max-width",
          "annotation": "prop",
          "docs": "アラートの最大幅"
        },
        {
          "name": "--min-height",
          "annotation": "prop",
          "docs": "アラートの最小の高さ"
        },
        {
          "name": "--min-width",
          "annotation": "prop",
          "docs": "アラートの最小幅"
        },
        {
          "name": "--width",
          "annotation": "prop",
          "docs": "アラートの幅"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [
        "ion-select"
      ],
      "dependencies": [
        "ion-ripple-effect",
        "ion-backdrop"
      ],
      "dependencyGraph": {
        "ion-alert": [
          "ion-ripple-effect",
          "ion-backdrop"
        ],
        "ion-select": [
          "ion-alert"
        ]
      }
    },
    {
      "filePath": "src/components/app/app.tsx",
      "encapsulation": "none",
      "tag": "ion-app",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/avatar/avatar.tsx",
      "encapsulation": "shadow",
      "tag": "ion-avatar",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--border-radius",
          "annotation": "prop",
          "docs": "アバターとインナーイメージの境界半径"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/back-button/back-button.tsx",
      "encapsulation": "shadow",
      "tag": "ion-back-button",
      "docs": "",
      "docsTags": [
        {
          "name": "virtualProp",
          "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
        },
        {
          "name": "part",
          "text": "native - The native HTML button element that wraps all child elements."
        },
        {
          "name": "part",
          "text": "icon - The back button icon (uses ion-icon)."
        },
        {
          "name": "part",
          "text": "text - The back button text."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
          "complexType": {
            "original": "Color",
            "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
            "references": {
              "Color": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::Color"
              }
            }
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "アプリケーションのカラーパレットから使用する色を指定します。デフォルトのオプションは以下の通りです。 `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, と `\"dark\"` です．色に関する詳しい情報は [theming](/docs/theming/basics) を参照してください。",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "tertiary",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "type": "string & Record<never, never>"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "defaultHref",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": true,
          "attr": "default-href",
          "reflectToAttr": false,
          "docs": "履歴がない場合に、デフォルトで戻るためのURL。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "`true`の場合、ユーザはボタンと対話することができません。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "null | string | undefined",
          "complexType": {
            "original": "string | null",
            "resolved": "null | string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "戻るボタンに使用する内蔵の名前付きSVGアイコン名またはSVGファイルの正確な`src`を指定します。",
          "docsTags": [],
          "values": [
            {
              "type": "null"
            },
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "routerAnimation",
          "type": "((baseEl: any, opts?: any) => Animation) | undefined",
          "complexType": {
            "original": "AnimationBuilder | undefined",
            "resolved": "((baseEl: any, opts?: any) => Animation) | undefined",
            "references": {
              "AnimationBuilder": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::AnimationBuilder"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "ルーターを使用する場合、別のページに移動する際の遷移アニメーションを指定します。",
          "docsTags": [],
          "values": [
            {
              "type": "((baseEl: any, opts?: any) => Animation)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "text",
          "type": "null | string | undefined",
          "complexType": {
            "original": "string | null",
            "resolved": "null | string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "text",
          "reflectToAttr": false,
          "docs": "バックボタンに表示するテキストです。",
          "docsTags": [],
          "values": [
            {
              "type": "null"
            },
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "type",
          "type": "\"button\" | \"reset\" | \"submit\"",
          "complexType": {
            "original": "'submit' | 'reset' | 'button'",
            "resolved": "\"button\" | \"reset\" | \"submit\"",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "ボタンの種類です。",
          "docsTags": [],
          "default": "'button'",
          "values": [
            {
              "value": "button",
              "type": "string"
            },
            {
              "value": "reset",
              "type": "string"
            },
            {
              "value": "submit",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--background",
          "annotation": "prop",
          "docs": "ボタンの背景"
        },
        {
          "name": "--background-focused",
          "annotation": "prop",
          "docs": "タブキーでフォーカスしたときのボタンの背景"
        },
        {
          "name": "--background-focused-opacity",
          "annotation": "prop",
          "docs": "タブキーでフォーカスしたときのボタンの背景の不透明度"
        },
        {
          "name": "--background-hover",
          "annotation": "prop",
          "docs": "ホバー時のボタンの背景"
        },
        {
          "name": "--background-hover-opacity",
          "annotation": "prop",
          "docs": "ホバー時の背景の不透明度"
        },
        {
          "name": "--border-radius",
          "annotation": "prop",
          "docs": "ボタンの境界半径"
        },
        {
          "name": "--color",
          "annotation": "prop",
          "docs": "ボタンの文字色"
        },
        {
          "name": "--color-focused",
          "annotation": "prop",
          "docs": "タブキーでフォーカスしたときのボタンの文字色"
        },
        {
          "name": "--color-hover",
          "annotation": "prop",
          "docs": "ホバー時のボタンの文字色"
        },
        {
          "name": "--icon-font-size",
          "annotation": "prop",
          "docs": "ボタンアイコンのFont Size"
        },
        {
          "name": "--icon-font-weight",
          "annotation": "prop",
          "docs": "ボタンアイコンのFont Weight"
        },
        {
          "name": "--icon-margin-bottom",
          "annotation": "prop",
          "docs": "ボタンアイコンのBottom Margin"
        },
        {
          "name": "--icon-margin-end",
          "annotation": "prop",
          "docs": "ボタンアイコンの方向が左から右の場合はRight Margin、右から左の場合はLeft Margin"
        },
        {
          "name": "--icon-margin-start",
          "annotation": "prop",
          "docs": "ボタンアイコンの方向が左から右の場合はLeft Margin、右から左の場合はRight Margin"
        },
        {
          "name": "--icon-margin-top",
          "annotation": "prop",
          "docs": "ボタンアイコンのTop Margin"
        },
        {
          "name": "--icon-padding-bottom",
          "annotation": "prop",
          "docs": "ボタンアイコンのBottom Padding"
        },
        {
          "name": "--icon-padding-end",
          "annotation": "prop",
          "docs": "ボタンアイコンの向きが左から右の場合はRight Padding、右から左の場合はLeft Paddingを使用します。"
        },
        {
          "name": "--icon-padding-start",
          "annotation": "prop",
          "docs": "ボタンアイコンの方向が左から右の場合はLeft Padding、右から左の場合はRight Paddingを使用します。"
        },
        {
          "name": "--icon-padding-top",
          "annotation": "prop",
          "docs": "ボタンアイコンのTop Padding"
        },
        {
          "name": "--margin-bottom",
          "annotation": "prop",
          "docs": "ボタンのBottom Margin"
        },
        {
          "name": "--margin-end",
          "annotation": "prop",
          "docs": "ボタンの向きが左から右の場合はRight Margin、右から左の場合はLeft Margin"
        },
        {
          "name": "--margin-start",
          "annotation": "prop",
          "docs": "ボタンの向きが左から右の場合はLeft Margin、右から左の場合はRight Margin"
        },
        {
          "name": "--margin-top",
          "annotation": "prop",
          "docs": "ボタンのTop Margin"
        },
        {
          "name": "--min-height",
          "annotation": "prop",
          "docs": "ボタンの最小高さ"
        },
        {
          "name": "--min-width",
          "annotation": "prop",
          "docs": "ボタンの最小幅"
        },
        {
          "name": "--opacity",
          "annotation": "prop",
          "docs": "ボタンの不透明度"
        },
        {
          "name": "--padding-bottom",
          "annotation": "prop",
          "docs": "ボタンのBottom Padding"
        },
        {
          "name": "--padding-end",
          "annotation": "prop",
          "docs": "ボタンの向きが左から右の場合はRight Padding、右から左の場合はLeft Paddingとなります。"
        },
        {
          "name": "--padding-start",
          "annotation": "prop",
          "docs": "ボタンの向きが左から右の場合はLeft Padding、右から左の場合はRight Paddingとなります。"
        },
        {
          "name": "--padding-top",
          "annotation": "prop",
          "docs": "ボタンのTop Padding"
        },
        {
          "name": "--ripple-color",
          "annotation": "prop",
          "docs": "ボタンリプルエフェクトの色"
        },
        {
          "name": "--transition",
          "annotation": "prop",
          "docs": "ボタンの遷移"
        }
      ],
      "slots": [],
      "parts": [
        {
          "name": "icon",
          "docs": "戻るボタンのアイコン（ion-iconを使用）。"
        },
        {
          "name": "native",
          "docs": "すべての子要素を包むネイティブ HTML ボタン要素。"
        },
        {
          "name": "text",
          "docs": "戻るボタンのテキストです。"
        }
      ],
      "dependents": [],
      "dependencies": [
        "ion-icon",
        "ion-ripple-effect"
      ],
      "dependencyGraph": {
        "ion-back-button": [
          "ion-icon",
          "ion-ripple-effect"
        ]
      }
    },
    {
      "filePath": "src/components/backdrop/backdrop.tsx",
      "encapsulation": "shadow",
      "tag": "ion-backdrop",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "stopPropagation",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "stop-propagation",
          "reflectToAttr": false,
          "docs": "`true`の場合、バックドロップはタップ時に伝搬を停止します。",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tappable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "tappable",
          "reflectToAttr": false,
          "docs": "`true`の場合、背景をクリックすることができ、`ionBackdropTap`イベントを発生させます。",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "visible",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "visible",
          "reflectToAttr": false,
          "docs": "`true`の場合、バックドロップが表示されます。",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "ionBackdropTap",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "バックドロップがタップされたときに発行されます。",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "click",
          "capture": true,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "ion-action-sheet",
        "ion-alert",
        "ion-loading",
        "ion-menu",
        "ion-modal",
        "ion-picker",
        "ion-popover"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "ion-action-sheet": [
          "ion-backdrop"
        ],
        "ion-alert": [
          "ion-backdrop"
        ],
        "ion-loading": [
          "ion-backdrop"
        ],
        "ion-menu": [
          "ion-backdrop"
        ],
        "ion-modal": [
          "ion-backdrop"
        ],
        "ion-picker": [
          "ion-backdrop"
        ],
        "ion-popover": [
          "ion-backdrop"
        ]
      }
    },
    {
      "filePath": "src/components/badge/badge.tsx",
      "encapsulation": "shadow",
      "tag": "ion-badge",
      "docs": "",
      "docsTags": [
        {
          "name": "virtualProp",
          "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
          "complexType": {
            "original": "Color",
            "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
            "references": {
              "Color": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::Color"
              }
            }
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "アプリケーションのカラーパレットから使用する色を指定します。デフォルトのオプションは以下の通りです。 `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, と `\"dark\"` です．色に関する詳しい情報は [theming](/docs/theming/basics) を参照してください。",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "tertiary",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "type": "string & Record<never, never>"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--background",
          "annotation": "prop",
          "docs": "バッジの背景"
        },
        {
          "name": "--color",
          "annotation": "prop",
          "docs": "バッジの文字色"
        },
        {
          "name": "--padding-bottom",
          "annotation": "prop",
          "docs": "バッジのBottom Padding"
        },
        {
          "name": "--padding-end",
          "annotation": "prop",
          "docs": "バッジの向きが左から右の場合はRight Padding、右から左の場合はLeft Paddingとなります。"
        },
        {
          "name": "--padding-start",
          "annotation": "prop",
          "docs": "バッジの向きが左から右の場合はLeft Padding、右から左の場合はRight Paddingとなります。"
        },
        {
          "name": "--padding-top",
          "annotation": "prop",
          "docs": "バッジのTop Padding"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/breadcrumb/breadcrumb.tsx",
      "encapsulation": "shadow",
      "tag": "ion-breadcrumb",
      "docs": "",
      "docsTags": [
        {
          "name": "virtualProp",
          "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
        },
        {
          "name": "part",
          "text": "native - The native HTML anchor or div element that wraps all child elements."
        },
        {
          "name": "part",
          "text": "separator - The separator element between each breadcrumb."
        },
        {
          "name": "part",
          "text": "collapsed-indicator - The indicator element that shows the breadcrumbs are collapsed."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "active",
          "reflectToAttr": false,
          "docs": "`true`の場合、パンくずが現在アクティブなパンくずであることを示すために、パンくずの外観を変化させることができる。最後のパンくずが設定されていない場合、デフォルトは `true` です。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
          "complexType": {
            "original": "Color",
            "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
            "references": {
              "Color": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::Color"
              }
            }
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "アプリケーションのカラーパレットから使用する色を指定します。デフォルトのオプションは以下の通りです。 `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, と `\"dark\"` です．色に関する詳しい情報は [theming](/docs/theming/basics) を参照してください。",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "tertiary",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "type": "string & Record<never, never>"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "`true`の場合、ユーザーはパンくずと対話することができません。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "download",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "download",
          "reflectToAttr": false,
          "docs": "この属性は、ブラウザが URL に移動する代わりに URL をダウンロードするように指示し、ユーザはローカルファイルとして保存するように促されます。この属性に値がある場合、保存のプロンプトであらかじめ入力されたファイル名として使用されます（ユーザーはファイル名を変更することができます）。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "href",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "ハイパーリンクが指し示す URL または URL フラグメントを格納します。このプロパティが設定されている場合、アンカータグがレンダリングされます。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "rel",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "rel",
          "reflectToAttr": false,
          "docs": "ターゲットオブジェクトとリンクオブジェクトの関係を指定します。値は、スペースで区切られた[リンクタイプ](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types)のリストです。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "routerAnimation",
          "type": "((baseEl: any, opts?: any) => Animation) | undefined",
          "complexType": {
            "original": "AnimationBuilder | undefined",
            "resolved": "((baseEl: any, opts?: any) => Animation) | undefined",
            "references": {
              "AnimationBuilder": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::AnimationBuilder"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "ルータを使用する場合、`href`を使用して別のページに移動する際の遷移アニメーションを指定します。",
          "docsTags": [],
          "values": [
            {
              "type": "((baseEl: any, opts?: any) => Animation)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "routerDirection",
          "type": "\"back\" | \"forward\" | \"root\"",
          "complexType": {
            "original": "RouterDirection",
            "resolved": "\"back\" | \"forward\" | \"root\"",
            "references": {
              "RouterDirection": {
                "location": "import",
                "path": "../router/utils/interface",
                "id": "src/components/router/utils/interface.ts::RouterDirection"
              }
            }
          },
          "mutable": false,
          "attr": "router-direction",
          "reflectToAttr": false,
          "docs": "ルータを使用する場合、`href`を使用して他のページに移動する際の遷移方向を指定します。",
          "docsTags": [],
          "default": "'forward'",
          "values": [
            {
              "value": "back",
              "type": "string"
            },
            {
              "value": "forward",
              "type": "string"
            },
            {
              "value": "root",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "separator",
          "type": "boolean | undefined",
          "complexType": {
            "original": "boolean | undefined",
            "resolved": "boolean | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "separator",
          "reflectToAttr": false,
          "docs": "trueの場合、このパンくずと次のパンくずの間にセパレータを表示します。デフォルトは `true` で、最後のパンくずを除くすべてのパンくずが表示されます。",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "target",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "リンク先のURLを表示する場所を指定します。href`を指定した場合のみ適用される。特別なキーワードがあります。_blank\"`, `\"_self\"`, `\"_parent\"`, `\"_top\"`.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "ionBlur",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "パンくずのフォーカスが外れたときに発行されます。",
          "docsTags": []
        },
        {
          "event": "ionFocus",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "パンくずがフォーカスされたときに発行されます。",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--background-focused",
          "annotation": "prop",
          "docs": "フォーカス時のパンくずの背景色"
        },
        {
          "name": "--color",
          "annotation": "prop",
          "docs": "パンくずの文字色"
        },
        {
          "name": "--color-active",
          "annotation": "prop",
          "docs": "アクティブなパンくずのテキスト色"
        },
        {
          "name": "--color-focused",
          "annotation": "prop",
          "docs": "フォーカスされたときのパンくずのテキスト色"
        },
        {
          "name": "--color-hover",
          "annotation": "prop",
          "docs": "ホバー時のパンくずのテキスト色"
        }
      ],
      "slots": [],
      "parts": [
        {
          "name": "collapsed-indicator",
          "docs": "パンくずが折りたたまれていることを示すインジケーター要素です。"
        },
        {
          "name": "native",
          "docs": "すべての子要素を包むネイティブHTMLのアンカーまたはdiv要素です。"
        },
        {
          "name": "separator",
          "docs": "各パンくずの間のセパレータ要素です。"
        }
      ],
      "dependents": [],
      "dependencies": [
        "ion-icon"
      ],
      "dependencyGraph": {
        "ion-breadcrumb": [
          "ion-icon"
        ]
      }
    },
    {
      "filePath": "src/components/breadcrumbs/breadcrumbs.tsx",
      "encapsulation": "shadow",
      "tag": "ion-breadcrumbs",
      "docs": "",
      "docsTags": [
        {
          "name": "virtualProp",
          "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
          "complexType": {
            "original": "Color",
            "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
            "references": {
              "Color": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::Color"
              }
            }
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "アプリケーションのカラーパレットから使用する色を指定します。デフォルトのオプションは以下の通りです。 `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, と `\"dark\"` です．色に関する詳しい情報は [theming](/docs/theming/basics) を参照してください。",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "tertiary",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "type": "string & Record<never, never>"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "itemsAfterCollapse",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "items-after-collapse",
          "reflectToAttr": false,
          "docs": "折りたたまれたインジケータの後に表示するパンくずの数。itemsBeforeCollapse` + `itemsAfterCollapse` が `maxItems` よりも大きい場合、パンくずは折りたたまれない。",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "itemsBeforeCollapse",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "items-before-collapse",
          "reflectToAttr": false,
          "docs": "折りたたんだインジケータの前に表示するパンくずの数を指定します。itemsBeforeCollapse` + `itemsAfterCollapse` が `maxItems` よりも大きい場合、パンくずは折りたたまれない。",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxItems",
          "type": "number | undefined",
          "complexType": {
            "original": "number",
            "resolved": "number | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "max-items",
          "reflectToAttr": false,
          "docs": "折りたたむ前に表示するパンくずの最大数を指定します。",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "ionCollapsedClick",
          "detail": "BreadcrumbCollapsedClickEventDetail",
          "bubbles": true,
          "complexType": {
            "original": "BreadcrumbCollapsedClickEventDetail",
            "resolved": "BreadcrumbCollapsedClickEventDetail",
            "references": {
              "BreadcrumbCollapsedClickEventDetail": {
                "location": "import",
                "path": "../breadcrumb/breadcrumb-interface",
                "id": "src/components/breadcrumb/breadcrumb-interface.ts::BreadcrumbCollapsedClickEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "折りたたみインジケータがクリックされたときに発行されます。",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "collapsedClick",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/button/button.tsx",
      "encapsulation": "shadow",
      "tag": "ion-button",
      "docs": "",
      "docsTags": [
        {
          "name": "virtualProp",
          "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
        },
        {
          "name": "slot",
          "text": "- Content is placed between the named slots if provided without a slot."
        },
        {
          "name": "slot",
          "text": "icon-only - Should be used on an icon in a button that has no text."
        },
        {
          "name": "slot",
          "text": "start - Content is placed to the left of the button text in LTR, and to the right in RTL."
        },
        {
          "name": "slot",
          "text": "end - Content is placed to the right of the button text in LTR, and to the left in RTL."
        },
        {
          "name": "part",
          "text": "native - The native HTML button or anchor element that wraps all child elements."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "buttonType",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "button-type",
          "reflectToAttr": false,
          "docs": "ボタンの種類です。",
          "docsTags": [],
          "default": "'button'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
          "complexType": {
            "original": "Color",
            "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
            "references": {
              "Color": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::Color"
              }
            }
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "アプリケーションのカラーパレットから使用する色を指定します。デフォルトのオプションは以下の通りです。 `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, と `\"dark\"` です．色に関する詳しい情報は [theming](/docs/theming/basics) を参照してください。",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "tertiary",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "type": "string & Record<never, never>"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "`true`の場合、ユーザはボタンと対話することができません。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "download",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "download",
          "reflectToAttr": false,
          "docs": "この属性は、ブラウザが URL に移動する代わりに URL をダウンロードするように指示し、ユーザはローカルファイルとして保存するように促されます。この属性に値がある場合、保存のプロンプトであらかじめ入力されたファイル名として使用されます（ユーザーはファイル名を変更することができます）。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "expand",
          "type": "\"block\" | \"full\" | undefined",
          "complexType": {
            "original": "'full' | 'block'",
            "resolved": "\"block\" | \"full\" | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "expand",
          "reflectToAttr": true,
          "docs": "全角のボタンなら`\"block\"`、角が四角く左右のボーダーがない全角のボタンなら`\"full\"`に設定します。",
          "docsTags": [],
          "values": [
            {
              "value": "block",
              "type": "string"
            },
            {
              "value": "full",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "fill",
          "type": "\"clear\" | \"default\" | \"outline\" | \"solid\" | undefined",
          "complexType": {
            "original": "'clear' | 'outline' | 'solid' | 'default'",
            "resolved": "\"clear\" | \"default\" | \"outline\" | \"solid\" | undefined",
            "references": {}
          },
          "mutable": true,
          "attr": "fill",
          "reflectToAttr": true,
          "docs": "フラットなボタンに似た透明なボタンには `\"clear\"` を、ボーダーのある透明なボタンには `\"outline\"` を、背景を塗りつぶしたボタンには `\"solid\"` を設定します。デフォルトの塗りつぶしは `\"solid\"` です。ただし、ツールバーの内側では `\"clear\"` となります。",
          "docsTags": [],
          "values": [
            {
              "value": "clear",
              "type": "string"
            },
            {
              "value": "default",
              "type": "string"
            },
            {
              "value": "outline",
              "type": "string"
            },
            {
              "value": "solid",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "form",
          "type": "HTMLFormElement | string | undefined",
          "complexType": {
            "original": "string | HTMLFormElement",
            "resolved": "HTMLFormElement | string | undefined",
            "references": {
              "HTMLFormElement": {
                "location": "global",
                "id": "global::HTMLFormElement"
              }
            }
          },
          "mutable": false,
          "attr": "form",
          "reflectToAttr": false,
          "docs": "HTML のフォーム要素またはフォーム要素 ID。ボタンがフォームの子でない場合に、フォームを送信するために使用します。",
          "docsTags": [],
          "values": [
            {
              "type": "HTMLFormElement"
            },
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "href",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "ハイパーリンクが指し示す URL または URL フラグメントを格納します。このプロパティが設定されている場合、アンカータグがレンダリングされます。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "rel",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "rel",
          "reflectToAttr": false,
          "docs": "ターゲットオブジェクトとリンクオブジェクトの関係を指定します。値は、スペースで区切られた[リンクタイプ](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types)のリストです。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "routerAnimation",
          "type": "((baseEl: any, opts?: any) => Animation) | undefined",
          "complexType": {
            "original": "AnimationBuilder | undefined",
            "resolved": "((baseEl: any, opts?: any) => Animation) | undefined",
            "references": {
              "AnimationBuilder": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::AnimationBuilder"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "ルータを使用する場合、`href`を使用して別のページに移動する際の遷移アニメーションを指定します。",
          "docsTags": [],
          "values": [
            {
              "type": "((baseEl: any, opts?: any) => Animation)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "routerDirection",
          "type": "\"back\" | \"forward\" | \"root\"",
          "complexType": {
            "original": "RouterDirection",
            "resolved": "\"back\" | \"forward\" | \"root\"",
            "references": {
              "RouterDirection": {
                "location": "import",
                "path": "../router/utils/interface",
                "id": "src/components/router/utils/interface.ts::RouterDirection"
              }
            }
          },
          "mutable": false,
          "attr": "router-direction",
          "reflectToAttr": false,
          "docs": "ルータを使用する場合、`href`を使用して他のページに移動する際の遷移方向を指定します。",
          "docsTags": [],
          "default": "'forward'",
          "values": [
            {
              "value": "back",
              "type": "string"
            },
            {
              "value": "forward",
              "type": "string"
            },
            {
              "value": "root",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "shape",
          "type": "\"round\" | undefined",
          "complexType": {
            "original": "'round'",
            "resolved": "\"round\" | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "shape",
          "reflectToAttr": true,
          "docs": "round\"` に設定すると、より角が丸いボタンになります。",
          "docsTags": [],
          "values": [
            {
              "value": "round",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "size",
          "type": "\"default\" | \"large\" | \"small\" | undefined",
          "complexType": {
            "original": "'small' | 'default' | 'large'",
            "resolved": "\"default\" | \"large\" | \"small\" | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "ボタンの高さとPaddingが少ない場合は `\"small\"` に、ボタンの高さとPaddingがデフォルトの場合は `\"default\"` に、ボタンの高さとPaddingが多い場合は `\"large\"` に設定します。ただし、ボタンがアイテムの中にある場合は、デフォルトでサイズが `\"small\"` になっています。アイテムの内部でサイズを `\"default\"` に設定すると、標準サイズのボタンになります。",
          "docsTags": [],
          "values": [
            {
              "value": "default",
              "type": "string"
            },
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "strong",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "strong",
          "reflectToAttr": false,
          "docs": "`true`の場合、より重いFont Weightを持つボタンをアクティブにします。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "target",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "リンク先のURLを表示する場所を指定します。href`を指定した場合のみ適用される。特別なキーワードがあります。_blank\"`, `\"_self\"`, `\"_parent\"`, `\"_top\"`.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"button\" | \"reset\" | \"submit\"",
          "complexType": {
            "original": "'submit' | 'reset' | 'button'",
            "resolved": "\"button\" | \"reset\" | \"submit\"",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "ボタンの種類です。",
          "docsTags": [],
          "default": "'button'",
          "values": [
            {
              "value": "button",
              "type": "string"
            },
            {
              "value": "reset",
              "type": "string"
            },
            {
              "value": "submit",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "ionBlur",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "ボタンのフォーカスが外れたときに発行されます。",
          "docsTags": []
        },
        {
          "event": "ionFocus",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "ボタンにフォーカスが当たっているときに発行されます。",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--background",
          "annotation": "prop",
          "docs": "ボタンの背景"
        },
        {
          "name": "--background-activated",
          "annotation": "prop",
          "docs": "ボタンが押されたときの背景。注意：これを設定すると、Material Designの波紋に干渉します。"
        },
        {
          "name": "--background-activated-opacity",
          "annotation": "prop",
          "docs": "ボタンが押されたときの不透明度"
        },
        {
          "name": "--background-focused",
          "annotation": "prop",
          "docs": "タブキーでフォーカスしたときのボタンの背景"
        },
        {
          "name": "--background-focused-opacity",
          "annotation": "prop",
          "docs": "タブキーでフォーカスしたときのボタンの不透明度"
        },
        {
          "name": "--background-hover",
          "annotation": "prop",
          "docs": "ホバー時のボタンの背景"
        },
        {
          "name": "--background-hover-opacity",
          "annotation": "prop",
          "docs": "ホバー時の背景の不透明度"
        },
        {
          "name": "--border-color",
          "annotation": "prop",
          "docs": "ボタンのボーダーカラー"
        },
        {
          "name": "--border-radius",
          "annotation": "prop",
          "docs": "ボタンの境界半径"
        },
        {
          "name": "--border-style",
          "annotation": "prop",
          "docs": "ボタンのボーダースタイル"
        },
        {
          "name": "--border-width",
          "annotation": "prop",
          "docs": "ボタンのボーダー幅"
        },
        {
          "name": "--box-shadow",
          "annotation": "prop",
          "docs": "ボタンのボックスシャドウ"
        },
        {
          "name": "--color",
          "annotation": "prop",
          "docs": "ボタンの文字色"
        },
        {
          "name": "--color-activated",
          "annotation": "prop",
          "docs": "ボタンが押されたときの文字色"
        },
        {
          "name": "--color-focused",
          "annotation": "prop",
          "docs": "タブキーでフォーカスしたときのボタンの文字色"
        },
        {
          "name": "--color-hover",
          "annotation": "prop",
          "docs": "ホバー時のボタンの文字色"
        },
        {
          "name": "--opacity",
          "annotation": "prop",
          "docs": "ボタンの不透明度"
        },
        {
          "name": "--padding-bottom",
          "annotation": "prop",
          "docs": "ボタンのBottom Padding"
        },
        {
          "name": "--padding-end",
          "annotation": "prop",
          "docs": "ボタンの向きが左から右の場合はRight Padding、右から左の場合はLeft Paddingとなります。"
        },
        {
          "name": "--padding-start",
          "annotation": "prop",
          "docs": "ボタンの向きが左から右の場合はLeft Padding、右から左の場合はRight Paddingとなります。"
        },
        {
          "name": "--padding-top",
          "annotation": "prop",
          "docs": "ボタンのTop Padding"
        },
        {
          "name": "--ripple-color",
          "annotation": "prop",
          "docs": "ボタンリプルエフェクトの色"
        },
        {
          "name": "--transition",
          "annotation": "prop",
          "docs": "ボタンの遷移"
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "slotがない状態で提供される場合、コンテンツは名前付きslotの間に配置されます。"
        },
        {
          "name": "end",
          "docs": "コンテンツは、LTRの場合はボタンテキストの右側に、RTLの場合は左側に配置されます。"
        },
        {
          "name": "icon-only",
          "docs": "テキストを持たないボタン内のアイコンに対して使用されるべきです。"
        },
        {
          "name": "start",
          "docs": "コンテンツは、LTRではボタンテキストの左側に、RTLでは右側に配置されます。"
        }
      ],
      "parts": [
        {
          "name": "native",
          "docs": "すべての子要素をラップするネイティブHTMLのボタンまたはアンカー要素です。"
        }
      ],
      "dependents": [
        "ion-datetime"
      ],
      "dependencies": [
        "ion-ripple-effect"
      ],
      "dependencyGraph": {
        "ion-button": [
          "ion-ripple-effect"
        ],
        "ion-datetime": [
          "ion-button"
        ]
      }
    },
    {
      "filePath": "src/components/buttons/buttons.tsx",
      "encapsulation": "scoped",
      "tag": "ion-buttons",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "collapse",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "collapse",
          "reflectToAttr": false,
          "docs": "trueを指定すると、ツールバーが最初のツールバーでない場合、親ツールバーが完全に折り畳まれたときにボタンが消えます。ツールバーが最初のツールバーである場合、ボタンは隠され、すべてのツールバーが完全に折りたたまれたときにのみ表示されます。  ion-header`で `collapse` を `true` に設定した `ios` modeにのみ適用されます。  通常、[Collapsible Large Titles](https://ionicframework.com/docs/api/title#collapsible-large-titles)に使用されます。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "ion-datetime"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "ion-datetime": [
          "ion-buttons"
        ]
      }
    },
    {
      "filePath": "src/components/card-content/card-content.tsx",
      "encapsulation": "none",
      "tag": "ion-card-content",
      "docs": "",
      "docsTags": [
        {
          "name": "virtualProp",
          "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/card-header/card-header.tsx",
      "encapsulation": "shadow",
      "tag": "ion-card-header",
      "docs": "",
      "docsTags": [
        {
          "name": "virtualProp",
          "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
          "complexType": {
            "original": "Color",
            "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
            "references": {
              "Color": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::Color"
              }
            }
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "アプリケーションのカラーパレットから使用する色を指定します。デフォルトのオプションは以下の通りです。 `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, と `\"dark\"` です．色に関する詳しい情報は [theming](/docs/theming/basics) を参照してください。",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "tertiary",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "type": "string & Record<never, never>"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "translucent",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "translucent",
          "reflectToAttr": false,
          "docs": "`true`の場合、カードヘッダは半透明になります。modeが `\"ios\"` で、デバイスが [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility) をサポートしている場合にのみ適用されます。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/card-subtitle/card-subtitle.tsx",
      "encapsulation": "shadow",
      "tag": "ion-card-subtitle",
      "docs": "",
      "docsTags": [
        {
          "name": "virtualProp",
          "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
          "complexType": {
            "original": "Color",
            "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
            "references": {
              "Color": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::Color"
              }
            }
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "アプリケーションのカラーパレットから使用する色を指定します。デフォルトのオプションは以下の通りです。 `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, と `\"dark\"` です．色に関する詳しい情報は [theming](/docs/theming/basics) を参照してください。",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "tertiary",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "type": "string & Record<never, never>"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--color",
          "annotation": "prop",
          "docs": "カードサブタイトルの色"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/card-title/card-title.tsx",
      "encapsulation": "shadow",
      "tag": "ion-card-title",
      "docs": "",
      "docsTags": [
        {
          "name": "virtualProp",
          "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
          "complexType": {
            "original": "Color",
            "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
            "references": {
              "Color": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::Color"
              }
            }
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "アプリケーションのカラーパレットから使用する色を指定します。デフォルトのオプションは以下の通りです。 `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, と `\"dark\"` です．色に関する詳しい情報は [theming](/docs/theming/basics) を参照してください。",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "tertiary",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "type": "string & Record<never, never>"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--color",
          "annotation": "prop",
          "docs": "カードタイトルの色"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/card/card.tsx",
      "encapsulation": "shadow",
      "tag": "ion-card",
      "docs": "",
      "docsTags": [
        {
          "name": "virtualProp",
          "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
        },
        {
          "name": "part",
          "text": "native - The native HTML button, anchor, or div element that wraps all child elements."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "button",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "button",
          "reflectToAttr": false,
          "docs": "`true`の場合、ボタンタグがレンダリングされ、カードはタップ可能になる。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
          "complexType": {
            "original": "Color",
            "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
            "references": {
              "Color": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::Color"
              }
            }
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "アプリケーションのカラーパレットから使用する色を指定します。デフォルトのオプションは以下の通りです。 `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, と `\"dark\"` です．色に関する詳しい情報は [theming](/docs/theming/basics) を参照してください。",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "tertiary",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "type": "string & Record<never, never>"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "`true`の場合、ユーザはカードと対話することができません。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "download",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "download",
          "reflectToAttr": false,
          "docs": "この属性は、ブラウザが URL に移動する代わりに URL をダウンロードするように指示し、ユーザはローカルファイルとして保存するように促されます。この属性に値がある場合、保存のプロンプトであらかじめ入力されたファイル名として使用されます（ユーザーはファイル名を変更することができます）。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "href",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "ハイパーリンクが指し示す URL または URL フラグメントを格納します。このプロパティが設定されている場合、アンカータグがレンダリングされます。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "rel",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "rel",
          "reflectToAttr": false,
          "docs": "ターゲットオブジェクトとリンクオブジェクトの関係を指定します。値は、スペースで区切られた[リンクタイプ](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types)のリストです。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "routerAnimation",
          "type": "((baseEl: any, opts?: any) => Animation) | undefined",
          "complexType": {
            "original": "AnimationBuilder | undefined",
            "resolved": "((baseEl: any, opts?: any) => Animation) | undefined",
            "references": {
              "AnimationBuilder": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::AnimationBuilder"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "ルータを使用する場合、`href`を使用して別のページに移動する際の遷移アニメーションを指定します。",
          "docsTags": [],
          "values": [
            {
              "type": "((baseEl: any, opts?: any) => Animation)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "routerDirection",
          "type": "\"back\" | \"forward\" | \"root\"",
          "complexType": {
            "original": "RouterDirection",
            "resolved": "\"back\" | \"forward\" | \"root\"",
            "references": {
              "RouterDirection": {
                "location": "import",
                "path": "../router/utils/interface",
                "id": "src/components/router/utils/interface.ts::RouterDirection"
              }
            }
          },
          "mutable": false,
          "attr": "router-direction",
          "reflectToAttr": false,
          "docs": "ルータを使用する場合、`href`を使用して他のページに移動する際の遷移方向を指定します。",
          "docsTags": [],
          "default": "'forward'",
          "values": [
            {
              "value": "back",
              "type": "string"
            },
            {
              "value": "forward",
              "type": "string"
            },
            {
              "value": "root",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "target",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "リンク先のURLを表示する場所を指定します。href`を指定した場合のみ適用される。特別なキーワードがあります。_blank\"`, `\"_self\"`, `\"_parent\"`, `\"_top\"`.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"button\" | \"reset\" | \"submit\"",
          "complexType": {
            "original": "'submit' | 'reset' | 'button'",
            "resolved": "\"button\" | \"reset\" | \"submit\"",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "ボタンの種類。onclick`または`button`プロパティが存在する場合にのみ使用される。",
          "docsTags": [],
          "default": "'button'",
          "values": [
            {
              "value": "button",
              "type": "string"
            },
            {
              "value": "reset",
              "type": "string"
            },
            {
              "value": "submit",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--background",
          "annotation": "prop",
          "docs": "カードの背景"
        },
        {
          "name": "--color",
          "annotation": "prop",
          "docs": "カードの色"
        }
      ],
      "slots": [],
      "parts": [
        {
          "name": "native",
          "docs": "すべての子要素をラップするネイティブHTMLのボタン、アンカー、またはdiv要素です。"
        }
      ],
      "dependents": [],
      "dependencies": [
        "ion-ripple-effect"
      ],
      "dependencyGraph": {
        "ion-card": [
          "ion-ripple-effect"
        ]
      }
    },
    {
      "filePath": "src/components/checkbox/checkbox.tsx",
      "encapsulation": "shadow",
      "tag": "ion-checkbox",
      "docs": "",
      "docsTags": [
        {
          "name": "virtualProp",
          "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
        },
        {
          "name": "slot",
          "text": "- The label text to associate with the checkbox. Use the \"labelPlacement\" property to control where the label is placed relative to the checkbox."
        },
        {
          "name": "part",
          "text": "container - The container for the checkbox mark."
        },
        {
          "name": "part",
          "text": "mark - The checkmark used to indicate the checked state."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "alignment",
          "type": "\"center\" | \"start\"",
          "complexType": {
            "original": "'start' | 'center'",
            "resolved": "\"center\" | \"start\"",
            "references": {}
          },
          "mutable": false,
          "attr": "alignment",
          "reflectToAttr": false,
          "docs": "横軸上のチェックボックスとラベルの配置を制御する方法。start\"`：ラベルとコントロールはLTRでは横軸の左側に、RTLでは右側に表示されます。center\"`：ラベルとコントロールはLTRでもRTLでも十字軸の中央に表示されます。",
          "docsTags": [],
          "default": "'center'",
          "values": [
            {
              "value": "center",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "checked",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "checked",
          "reflectToAttr": false,
          "docs": "`true`の場合、チェックボックスが選択される。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
          "complexType": {
            "original": "Color",
            "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
            "references": {
              "Color": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::Color"
              }
            }
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "アプリケーションのカラーパレットから使用する色を指定します。デフォルトのオプションは以下の通りです。 `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, と `\"dark\"` です．色に関する詳しい情報は [theming](/docs/theming/basics) を参照してください。",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "tertiary",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "type": "string & Record<never, never>"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "`true`の場合、ユーザはチェックボックスと対話することができません。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "indeterminate",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "indeterminate",
          "reflectToAttr": false,
          "docs": "`true`の場合、チェックボックスは視覚的に不定形と表示されます。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "justify",
          "type": "\"end\" | \"space-between\" | \"start\"",
          "complexType": {
            "original": "'start' | 'end' | 'space-between'",
            "resolved": "\"end\" | \"space-between\" | \"start\"",
            "references": {}
          },
          "mutable": false,
          "attr": "justify",
          "reflectToAttr": false,
          "docs": "ラベルとチェックボックスを1行にまとめる方法。`\"start\"`：ラベルとチェックボックスは、LTRでは左に、RTLでは右に表示されます。`\"end\"`：ラベルとチェックボックスは、LTRでは右に、RTLでは左に表示されます。`\"space-between\"`：ラベルとチェックボックスは、2つの要素の間にスペースがある状態で、行の反対側の端に表示されます。",
          "docsTags": [],
          "default": "'space-between'",
          "values": [
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "space-between",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelPlacement",
          "type": "\"end\" | \"fixed\" | \"stacked\" | \"start\"",
          "complexType": {
            "original": "'start' | 'end' | 'fixed' | 'stacked'",
            "resolved": "\"end\" | \"fixed\" | \"stacked\" | \"start\"",
            "references": {}
          },
          "mutable": false,
          "attr": "label-placement",
          "reflectToAttr": false,
          "docs": "チェックボックスに対するラベルの位置。start\"`：ラベルはLTRではチェックボックスの左に、RTLでは右に表示されます。end\"`：ラベルはLTRではチェックボックスの右、RTLでは左に表示されます。fixed\"`：ラベルの幅が固定される以外は `\"start\"` と同じ動作をします。長いテキストは省略記号(\"...\")で切り捨てられます。積み重ね\"`：ラベルは向きに関係なくチェックボックスの上に表示されます。ラベルの整列は `alignment` プロパティで制御できます。",
          "docsTags": [],
          "default": "'start'",
          "values": [
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "fixed",
              "type": "string"
            },
            {
              "value": "stacked",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "legacy",
          "type": "boolean | undefined",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "legacy",
          "reflectToAttr": false,
          "docs": "`legacy`プロパティを`true`に設定すると、強制的にレガシーフォームコントロールのマークアップを使用することができます。Ionicは、チェックボックスが`aria-label`属性を使用しているか、デフォルトスロットにテキストがある場合にのみ、モダンなフォームマークアップを選択します。そのため、`legacy`プロパティは、この自動オプトイン動作を回避したい場合にのみ、エスケープハッチとして使用する必要があります。なお、このプロパティはIonicの今後のメジャーリリースで削除され、すべてのフォームコンポーネントは最新のフォームマークアップを使用するようオプトインされる予定です。",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "フォームデータとともに送信されるコントロールの名前。",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "complexType": {
            "original": "any | null",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "チェックボックスの値は、チェックされているかどうかを意味するものではなく、`checked`プロパティを使用します。  チェックボックスの値は `<input type=\"checkbox\">` の値に似ており、チェックボックスがネイティブの `<form>` に参加する場合にのみ使用されます。",
          "docsTags": [],
          "default": "'on'",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "ionBlur",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "チェックボックスのフォーカスが外れたときに発行されます。",
          "docsTags": []
        },
        {
          "event": "ionChange",
          "detail": "CheckboxChangeEventDetail<any>",
          "bubbles": true,
          "complexType": {
            "original": "CheckboxChangeEventDetail",
            "resolved": "CheckboxChangeEventDetail<any>",
            "references": {
              "CheckboxChangeEventDetail": {
                "location": "import",
                "path": "./checkbox-interface",
                "id": "src/components/checkbox/checkbox-interface.ts::CheckboxChangeEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "クリックなどのユーザー操作によりcheckedプロパティが変更された場合に発生します。プログラムによってcheckedプロパティを設定した場合は、このイベントは発生しません。",
          "docsTags": []
        },
        {
          "event": "ionFocus",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "チェックボックスにフォーカスが当たったときに発行されます。",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--border-color",
          "annotation": "prop",
          "docs": "チェックボックスアイコンのボーダーカラー"
        },
        {
          "name": "--border-color-checked",
          "annotation": "prop",
          "docs": "チェックボックスのアイコンがチェックされたときのボーダーカラー"
        },
        {
          "name": "--border-radius",
          "annotation": "prop",
          "docs": "チェックボックスアイコンの境界半径"
        },
        {
          "name": "--border-style",
          "annotation": "prop",
          "docs": "チェックボックスアイコンのボーダースタイル"
        },
        {
          "name": "--border-width",
          "annotation": "prop",
          "docs": "チェックボックスアイコンのボーダー幅"
        },
        {
          "name": "--checkbox-background",
          "annotation": "prop",
          "docs": "チェックボックスアイコンの背景"
        },
        {
          "name": "--checkbox-background-checked",
          "annotation": "prop",
          "docs": "チェックしたときのチェックボックスアイコンの背景"
        },
        {
          "name": "--checkmark-color",
          "annotation": "prop",
          "docs": "チェックボックスのチェックマークがチェックされたときの色"
        },
        {
          "name": "--checkmark-width",
          "annotation": "prop",
          "docs": "チェックボックス・チェックマークのストローク幅"
        },
        {
          "name": "--size",
          "annotation": "prop",
          "docs": "チェックボックスのアイコンの大きさ"
        },
        {
          "name": "--transition",
          "annotation": "prop",
          "docs": "チェックボックスアイコンの遷移"
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "チェックボックスと関連付けるラベルテキスト。\"labelPlacement\"プロパティを使用して、チェックボックスに対するラベルの配置を制御します。"
        }
      ],
      "parts": [
        {
          "name": "container",
          "docs": "チェックボックスマークのコンテナです。"
        },
        {
          "name": "mark",
          "docs": "チェックされた状態を示すために使用されるチェックマークです。"
        }
      ],
      "dependents": [
        "ion-select-popover"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "ion-select-popover": [
          "ion-checkbox"
        ]
      }
    },
    {
      "filePath": "src/components/chip/chip.tsx",
      "encapsulation": "shadow",
      "tag": "ion-chip",
      "docs": "",
      "docsTags": [
        {
          "name": "virtualProp",
          "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
          "complexType": {
            "original": "Color",
            "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
            "references": {
              "Color": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::Color"
              }
            }
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "アプリケーションのカラーパレットから使用する色を指定します。デフォルトのオプションは以下の通りです。 `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, と `\"dark\"` です．色に関する詳しい情報は [theming](/docs/theming/basics) を参照してください。",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "tertiary",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "type": "string & Record<never, never>"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "`true`の場合、ユーザはチップと対話することができません。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "outline",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "outline",
          "reflectToAttr": false,
          "docs": "アウトラインスタイルボタンを表示します。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--background",
          "annotation": "prop",
          "docs": "チップの背景"
        },
        {
          "name": "--color",
          "annotation": "prop",
          "docs": "チップの色"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "ion-ripple-effect"
      ],
      "dependencyGraph": {
        "ion-chip": [
          "ion-ripple-effect"
        ]
      }
    },
    {
      "filePath": "src/components/col/col.tsx",
      "encapsulation": "shadow",
      "tag": "ion-col",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "offset",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "offset",
          "reflectToAttr": false,
          "docs": "オフセットする量を、利用可能な合計の末尾に何列分シフトさせるかで指定します。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "offsetLg",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "offset-lg",
          "reflectToAttr": false,
          "docs": "Lgスクリーン用のカラムをオフセットする量を、使用可能な合計の末尾に何カラム分シフトさせるかで指定します。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "offsetMd",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "offset-md",
          "reflectToAttr": false,
          "docs": "mdスクリーン用のカラムをオフセットする量を、使用可能な合計の末尾に何カラム分シフトさせるかで指定します。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "offsetSm",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "offset-sm",
          "reflectToAttr": false,
          "docs": "smスクリーン用のカラムをオフセットする量を、利用可能な合計の末尾に何カラム分シフトさせるかで指定します。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "offsetXl",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "offset-xl",
          "reflectToAttr": false,
          "docs": "xlスクリーン用のカラムをオフセットする量を、利用可能な合計の末尾に何カラム分シフトさせるかで指定します。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "offsetXs",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "offset-xs",
          "reflectToAttr": false,
          "docs": "xs画面のカラムをオフセットする量を、利用可能な合計の末尾に何カラム分ずらすかで指定します。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "pull",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "pull",
          "reflectToAttr": false,
          "docs": "列を引っ張る量を、利用可能な合計の開始位置に何列分ずらすかで指定します。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "pullLg",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "pull-lg",
          "reflectToAttr": false,
          "docs": "LGスクリーン用のカラムを引く量を、使用可能な合計の開始位置に何カラム分シフトさせるかで指定します。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "pullMd",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "pull-md",
          "reflectToAttr": false,
          "docs": "mdスクリーン用のカラムを引っ張る量を、利用可能な合計の開始位置に何カラムシフトさせるかで指定します。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "pullSm",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "pull-sm",
          "reflectToAttr": false,
          "docs": "smスクリーン用のカラムを引っ張る量を、利用可能な合計の開始位置に何カラム分シフトさせるかで指定します。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "pullXl",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "pull-xl",
          "reflectToAttr": false,
          "docs": "xlスクリーン用のカラムを引っ張る量を、利用可能な合計の開始位置に何カラム分シフトさせるかで指定します。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "pullXs",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "pull-xs",
          "reflectToAttr": false,
          "docs": "xsスクリーン用のカラムを引っ張る量を、利用可能な合計の開始位置に何カラム分シフトさせるかで指定します。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "push",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "push",
          "reflectToAttr": false,
          "docs": "カラムを押す量を、利用可能な合計の末尾に何カラム分シフトさせるかで指定します。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "pushLg",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "push-lg",
          "reflectToAttr": false,
          "docs": "LGスクリーン用のカラムをプッシュする量を、使用可能な総カラムのうち何カラム分までシフトさせるかで指定します。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "pushMd",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "push-md",
          "reflectToAttr": false,
          "docs": "mdスクリーン用のカラムを、利用可能な合計の末尾に何カラム分シフトさせるかを指定します。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "pushSm",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "push-sm",
          "reflectToAttr": false,
          "docs": "smスクリーン用のカラムを押す量を、使用可能な合計の末尾に何カラム分シフトさせるかで指定します。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "pushXl",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "push-xl",
          "reflectToAttr": false,
          "docs": "xlスクリーン用のカラムをプッシュする量を、利用可能な合計の末尾にシフトするカラムの数で指定します。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "pushXs",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "push-xs",
          "reflectToAttr": false,
          "docs": "xs画面分の列を、利用可能な合計の末尾に何列分シフトさせるかを指定します。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "size",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "カラムの大きさを、利用可能なカラムのうち何カラムを占めるかで指定します。`\"auto\"`が渡された場合、カラムはそのコンテンツのサイズになります。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "sizeLg",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "size-lg",
          "reflectToAttr": false,
          "docs": "lgスクリーン用のカラムの大きさを、利用可能な合計カラム数のうち何カラムを占めるべきかという観点から指定します。 `\"auto\"`が渡された場合、カラムはそのコンテンツのサイズになります。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "sizeMd",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "size-md",
          "reflectToAttr": false,
          "docs": "mdスクリーンのカラムの大きさを、利用可能なカラムのうち何カラムを占有するかで指定します。`\"auto\"`が渡された場合、カラムはそのコンテンツのサイズになります。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "sizeSm",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "size-sm",
          "reflectToAttr": false,
          "docs": "smスクリーン用のカラムの大きさを、利用可能なカラムのうち何カラムを占めるかで指定します。`\"auto\"`が渡された場合、カラムはそのコンテンツのサイズになります。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "sizeXl",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "size-xl",
          "reflectToAttr": false,
          "docs": "xlスクリーン用のカラムの大きさを、利用可能な合計カラムのうち何カラムを占めるべきかという観点から指定します。`\"auto\"`が渡された場合、カラムはそのコンテンツのサイズになります。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "sizeXs",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "size-xs",
          "reflectToAttr": false,
          "docs": "xsスクリーンのカラムの大きさを、利用可能な合計のうち何カラムを占めるべきかという観点から指定します。 `\"auto\"`が渡された場合、カラムはそのコンテンツのサイズとなる。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "resize",
          "target": "window",
          "capture": false,
          "passive": true
        }
      ],
      "styles": [
        {
          "name": "--ion-grid-column-padding",
          "annotation": "prop",
          "docs": "カラムのPadding"
        },
        {
          "name": "--ion-grid-column-padding-lg",
          "annotation": "prop",
          "docs": "LG以上の画面でのコラムのPadding"
        },
        {
          "name": "--ion-grid-column-padding-md",
          "annotation": "prop",
          "docs": "mdスクリーン以上のカラムのPadding"
        },
        {
          "name": "--ion-grid-column-padding-sm",
          "annotation": "prop",
          "docs": "スマートフォン以上の画面では、コラムにパッドを入れる。"
        },
        {
          "name": "--ion-grid-column-padding-xl",
          "annotation": "prop",
          "docs": "XL以上の画面でのカラムのPadding"
        },
        {
          "name": "--ion-grid-column-padding-xs",
          "annotation": "prop",
          "docs": "xsスクリーン以上のカラムのPadding"
        },
        {
          "name": "--ion-grid-columns",
          "annotation": "prop",
          "docs": "グリッドのカラムの総数"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/content/content.tsx",
      "encapsulation": "shadow",
      "tag": "ion-content",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- Content is placed in the scrollable area if provided without a slot."
        },
        {
          "name": "slot",
          "text": "fixed - Should be used for fixed content that should not scroll."
        },
        {
          "name": "part",
          "text": "background - The background of the content."
        },
        {
          "name": "part",
          "text": "scroll - The scrollable container of the content."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
          "complexType": {
            "original": "Color",
            "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
            "references": {
              "Color": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::Color"
              }
            }
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "アプリケーションのカラーパレットから使用する色を指定します。デフォルトのオプションは以下の通りです。 `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, と `\"dark\"` です．色に関する詳しい情報は [theming](/docs/theming/basics) を参照してください。",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "tertiary",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "type": "string & Record<never, never>"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "forceOverscroll",
          "type": "boolean | undefined",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean | undefined",
            "references": {}
          },
          "mutable": true,
          "attr": "force-overscroll",
          "reflectToAttr": false,
          "docs": "`true`で、コンテンツがオーバーフロースクロールを引き起こさない場合、スクロールインタラクションはバウンスを引き起こします。コンテンツがionContentの境界を超えた場合、何も変化しません。なお、これはiOSのシステムバウンスを無効にするものではありません。これはOSレベルの設定です。",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "fullscreen",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "fullscreen",
          "reflectToAttr": false,
          "docs": "`true`の場合、コンテンツはヘッダーとフッターの後ろにスクロールされます。この効果は、ツールバーを透明に設定することで簡単に確認することができます。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scrollEvents",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "scroll-events",
          "reflectToAttr": false,
          "docs": "パフォーマンス上の理由から、ionScrollイベントはデフォルトで無効になっています。ionScrollイベントを有効にして(ionScroll)からリスニングを開始するには、このプロパティを`true`に設定します。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scrollX",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "scroll-x",
          "reflectToAttr": false,
          "docs": "X軸方向のコンテンツスクロールを有効にしたい場合は、このプロパティを`true`に設定します。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scrollY",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "scroll-y",
          "reflectToAttr": false,
          "docs": "Y軸方向のコンテンツスクロールを無効にしたい場合は、このプロパティに`false`を設定します。",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getScrollElement",
          "returns": {
            "type": "Promise<HTMLElement>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<HTMLElement>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLElement": {
                "location": "global",
                "id": "global::HTMLElement"
              }
            },
            "return": "Promise<HTMLElement>"
          },
          "signature": "getScrollElement() => Promise<HTMLElement>",
          "parameters": [],
          "docs": "実際のスクロールが行われる要素を取得します。この要素を使用して、`scroll` イベントを購読したり、`scrollTop` を手動で変更したりすることができる。スクロールイベントには `ionScroll`, `ionScrollStart`, `ionScrollEnd` を、コンテンツを特定のポイントにスクロールさせるには `scrollToPoint()` を使用することが推奨されます。",
          "docsTags": []
        },
        {
          "name": "scrollByPoint",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(x: number, y: number, duration: number) => Promise<void>",
            "parameters": [
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "x The amount to scroll by on the horizontal axis."
                  }
                ],
                "text": "The amount to scroll by on the horizontal axis."
              },
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "y The amount to scroll by on the vertical axis."
                  }
                ],
                "text": "The amount to scroll by on the vertical axis."
              },
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "duration The amount of time to take scrolling by that amount."
                  }
                ],
                "text": "The amount of time to take scrolling by that amount."
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "scrollByPoint(x: number, y: number, duration: number) => Promise<void>",
          "parameters": [],
          "docs": "コンポーネントを指定したX/Y距離だけスクロールさせる。",
          "docsTags": [
            {
              "name": "param",
              "text": "x The amount to scroll by on the horizontal axis."
            },
            {
              "name": "param",
              "text": "y The amount to scroll by on the vertical axis."
            },
            {
              "name": "param",
              "text": "duration The amount of time to take scrolling by that amount."
            }
          ]
        },
        {
          "name": "scrollToBottom",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(duration?: number) => Promise<void>",
            "parameters": [
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "duration The amount of time to take scrolling to the bottom. Defaults to `0`."
                  }
                ],
                "text": "The amount of time to take scrolling to the bottom. Defaults to `0`."
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "scrollToBottom(duration?: number) => Promise<void>",
          "parameters": [],
          "docs": "コンポーネントの一番下までスクロールします。",
          "docsTags": [
            {
              "name": "param",
              "text": "duration The amount of time to take scrolling to the bottom. Defaults to `0`."
            }
          ]
        },
        {
          "name": "scrollToPoint",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(x: number | undefined | null, y: number | undefined | null, duration?: number) => Promise<void>",
            "parameters": [
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "x The point to scroll to on the horizontal axis."
                  }
                ],
                "text": "The point to scroll to on the horizontal axis."
              },
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "y The point to scroll to on the vertical axis."
                  }
                ],
                "text": "The point to scroll to on the vertical axis."
              },
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "duration The amount of time to take scrolling to that point. Defaults to `0`."
                  }
                ],
                "text": "The amount of time to take scrolling to that point. Defaults to `0`."
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "scrollToPoint(x: number | undefined | null, y: number | undefined | null, duration?: number) => Promise<void>",
          "parameters": [],
          "docs": "コンポーネント内の指定したX/Y位置までスクロールします。",
          "docsTags": [
            {
              "name": "param",
              "text": "x The point to scroll to on the horizontal axis."
            },
            {
              "name": "param",
              "text": "y The point to scroll to on the vertical axis."
            },
            {
              "name": "param",
              "text": "duration The amount of time to take scrolling to that point. Defaults to `0`."
            }
          ]
        },
        {
          "name": "scrollToTop",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(duration?: number) => Promise<void>",
            "parameters": [
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "duration The amount of time to take scrolling to the top. Defaults to `0`."
                  }
                ],
                "text": "The amount of time to take scrolling to the top. Defaults to `0`."
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "scrollToTop(duration?: number) => Promise<void>",
          "parameters": [],
          "docs": "コンポーネントの上部にスクロールします。",
          "docsTags": [
            {
              "name": "param",
              "text": "duration The amount of time to take scrolling to the top. Defaults to `0`."
            }
          ]
        }
      ],
      "events": [
        {
          "event": "ionScroll",
          "detail": "ScrollDetail",
          "bubbles": true,
          "complexType": {
            "original": "ScrollDetail",
            "resolved": "ScrollDetail",
            "references": {
              "ScrollDetail": {
                "location": "import",
                "path": "./content-interface",
                "id": "src/components/content/content-interface.ts::ScrollDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "スクロール中に発行されます。このイベントはデフォルトで無効になっています。有効にするには `scrollEvents` に `true` を設定します。",
          "docsTags": []
        },
        {
          "event": "ionScrollEnd",
          "detail": "ScrollBaseDetail",
          "bubbles": true,
          "complexType": {
            "original": "ScrollBaseDetail",
            "resolved": "ScrollBaseDetail",
            "references": {
              "ScrollBaseDetail": {
                "location": "import",
                "path": "./content-interface",
                "id": "src/components/content/content-interface.ts::ScrollBaseDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "スクロールが終了したときに発行されます。このイベントはデフォルトで無効になっている。有効にするには `scrollEvents` に `true` を設定します。",
          "docsTags": []
        },
        {
          "event": "ionScrollStart",
          "detail": "ScrollBaseDetail",
          "bubbles": true,
          "complexType": {
            "original": "ScrollBaseDetail",
            "resolved": "ScrollBaseDetail",
            "references": {
              "ScrollBaseDetail": {
                "location": "import",
                "path": "./content-interface",
                "id": "src/components/content/content-interface.ts::ScrollBaseDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "スクロールが開始されたときに発行されます。このイベントはデフォルトで無効になっている。有効にするには `scrollEvents` に `true` を設定してください。",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "resize",
          "target": "window",
          "capture": false,
          "passive": true
        }
      ],
      "styles": [
        {
          "name": "--background",
          "annotation": "prop",
          "docs": "コンテンツの背景"
        },
        {
          "name": "--color",
          "annotation": "prop",
          "docs": "コンテンツの色"
        },
        {
          "name": "--keyboard-offset",
          "annotation": "prop",
          "docs": "コンテンツのキーボードオフセット"
        },
        {
          "name": "--offset-bottom",
          "annotation": "prop",
          "docs": "コンテンツのオフセットボトム"
        },
        {
          "name": "--offset-top",
          "annotation": "prop",
          "docs": "コンテンツのオフセットトップ"
        },
        {
          "name": "--padding-bottom",
          "annotation": "prop",
          "docs": "コンテンツのBottom Padding"
        },
        {
          "name": "--padding-end",
          "annotation": "prop",
          "docs": "コンテンツの方向が左から右の場合はRight Padding、右から左の場合はLeft Paddingとなります。"
        },
        {
          "name": "--padding-start",
          "annotation": "prop",
          "docs": "コンテンツの方向が左から右の場合はLeft Padding、右から左の場合はRight Paddingとなります。"
        },
        {
          "name": "--padding-top",
          "annotation": "prop",
          "docs": "コンテンツのTop Padding"
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "slotなしで提供される場合、コンテンツはスクロール可能な領域に配置されます。"
        },
        {
          "name": "fixed",
          "docs": "スクロールしてはいけない固定コンテンツに使用する必要があります。"
        }
      ],
      "parts": [
        {
          "name": "background",
          "docs": "コンテンツの背景です。"
        },
        {
          "name": "scroll",
          "docs": "コンテンツのスクロール可能なコンテナ。"
        }
      ],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/datetime-button/datetime-button.tsx",
      "encapsulation": "shadow",
      "tag": "ion-datetime-button",
      "docs": "",
      "docsTags": [
        {
          "name": "virtualProp",
          "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
        },
        {
          "name": "slot",
          "text": "date-target - Content displayed inside of the date button."
        },
        {
          "name": "slot",
          "text": "time-target - Content displayed inside of the time button."
        },
        {
          "name": "part",
          "text": "native - The native HTML button that wraps the slotted text."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
          "complexType": {
            "original": "Color",
            "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
            "references": {
              "Color": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::Color"
              }
            }
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "アプリケーションのカラーパレットから使用する色を指定します。デフォルトのオプションは以下の通りです。 `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, と `\"dark\"` です．色に関する詳しい情報は [theming](/docs/theming/basics) を参照してください。",
          "docsTags": [],
          "default": "'primary'",
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "tertiary",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "type": "string & Record<never, never>"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "datetime",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "datetime",
          "reflectToAttr": false,
          "docs": "datetime ボタンに関連付けられた `ion-datetime` インスタンスの ID。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "`true`の場合、ユーザはボタンと対話することができません。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "date-target",
          "docs": "日付ボタンの内側に表示されるコンテンツです。"
        },
        {
          "name": "time-target",
          "docs": "時刻ボタンの内側に表示される内容。"
        }
      ],
      "parts": [
        {
          "name": "native",
          "docs": "slotされたテキストをラップするネイティブHTMLボタンです。"
        }
      ],
      "dependents": [],
      "dependencies": [
        "ion-ripple-effect"
      ],
      "dependencyGraph": {
        "ion-datetime-button": [
          "ion-ripple-effect"
        ]
      }
    },
    {
      "filePath": "src/components/datetime/datetime.tsx",
      "encapsulation": "shadow",
      "tag": "ion-datetime",
      "docs": "",
      "docsTags": [
        {
          "name": "virtualProp",
          "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
        },
        {
          "name": "slot",
          "text": "title - The title of the datetime."
        },
        {
          "name": "slot",
          "text": "buttons - The buttons in the datetime."
        },
        {
          "name": "slot",
          "text": "time-label - The label for the time selector in the datetime."
        },
        {
          "name": "part",
          "text": "wheel-item - The individual items when using a wheel style layout, or in the\nmonth/year picker when using a grid style layout."
        },
        {
          "name": "part",
          "text": "wheel-item active - The currently selected wheel-item."
        },
        {
          "name": "part",
          "text": "time-button - The button that opens the time picker when using a grid style\nlayout with `presentation=\"date-time\"` or `\"time-date\"`."
        },
        {
          "name": "part",
          "text": "time-button active - The time picker button when the picker is open."
        },
        {
          "name": "part",
          "text": "month-year-button - The button that opens the month/year picker when\nusing a grid style layout."
        },
        {
          "name": "part",
          "text": "calendar-day - The individual buttons that display a day inside of the datetime\ncalendar."
        },
        {
          "name": "part",
          "text": "calendar-day active - The currently selected calendar day."
        },
        {
          "name": "part",
          "text": "calendar-day today - The calendar day that contains the current day."
        },
        {
          "name": "part",
          "text": "calendar-day disabled - The calendar day that is disabled."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "cancelText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "cancel-text",
          "reflectToAttr": false,
          "docs": "ピッカーのキャンセルボタンに表示するテキストです。",
          "docsTags": [],
          "default": "'Cancel'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "clearText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "clear-text",
          "reflectToAttr": false,
          "docs": "ピッカーの\"Clear\"ボタンに表示するテキストです。",
          "docsTags": [],
          "default": "'Clear'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
          "complexType": {
            "original": "Color",
            "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
            "references": {
              "Color": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::Color"
              }
            }
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "アプリケーションのカラーパレットから使用する色を指定します。デフォルトのオプションは以下の通りです。 `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, と `\"dark\"` です．色に関する詳しい情報は [theming](/docs/theming/basics) を参照してください。",
          "docsTags": [],
          "default": "'primary'",
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "tertiary",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "type": "string & Record<never, never>"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "dayValues",
          "type": "number | number[] | string | undefined",
          "complexType": {
            "original": "number[] | number | string",
            "resolved": "number | number[] | string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "day-values",
          "reflectToAttr": false,
          "docs": "選択可能な日のリストを作成するために使用する値です。デフォルトでは、指定した月のすべての曜日が表示されます。しかし、表示する曜日を正確に制御するために、`dayValues` には数値、数値の配列、またはコンマで区切られた数値の文字列を取ることができます。配列のdayが2月の`31`のように選択した月にとって無効な数字であっても、選択した月にとって有効でない日は正しく表示されないことに注意してください。",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "number[]"
            },
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "`true`の場合、ユーザはdatetimeを操作することができません。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "doneText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "done-text",
          "reflectToAttr": false,
          "docs": "ピッカーの \"Done \"ボタンに表示するテキスト。",
          "docsTags": [],
          "default": "'Done'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "firstDayOfWeek",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "first-day-of-week",
          "reflectToAttr": false,
          "docs": "ion-datetime`に使用する週の最初の曜日を指定します。デフォルト値は `0` で、日曜日を表す。",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "highlightedDates",
          "type": "((dateIsoString: string) => DatetimeHighlightStyle | undefined) | DatetimeHighlight[] | undefined",
          "complexType": {
            "original": "DatetimeHighlight[] | DatetimeHighlightCallback",
            "resolved": "((dateIsoString: string) => DatetimeHighlightStyle | undefined) | DatetimeHighlight[] | undefined",
            "references": {
              "DatetimeHighlight": {
                "location": "import",
                "path": "./datetime-interface",
                "id": "src/components/datetime/datetime-interface.ts::DatetimeHighlight"
              },
              "DatetimeHighlightCallback": {
                "location": "import",
                "path": "./datetime-interface",
                "id": "src/components/datetime/datetime-interface.ts::DatetimeHighlightCallback"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "特定の日付にカスタムテキストと背景色を適用するために使用します。  ISO 文字列と色を含むオブジェクトの配列、または ISO 文字列を受け取って色を返すコールバックのいずれかを指定します。  preferWheel=\"false\"`を持つ `date`、`date-time`、`time-date` のプレゼンテーションにのみ適用されます。",
          "docsTags": [],
          "values": [
            {
              "type": "((dateIsoString: string) => DatetimeHighlightStyle"
            },
            {
              "type": "undefined)"
            },
            {
              "type": "DatetimeHighlight[]"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "hourCycle",
          "type": "\"h11\" | \"h12\" | \"h23\" | \"h24\" | undefined",
          "complexType": {
            "original": "DatetimeHourCycle",
            "resolved": "\"h11\" | \"h12\" | \"h23\" | \"h24\" | undefined",
            "references": {
              "DatetimeHourCycle": {
                "location": "import",
                "path": "./datetime-interface",
                "id": "src/components/datetime/datetime-interface.ts::DatetimeHourCycle"
              }
            }
          },
          "mutable": false,
          "attr": "hour-cycle",
          "reflectToAttr": false,
          "docs": "ion-datetime`の時間周期を指定します。値が設定されていない場合、現在のロケールによって指定される。",
          "docsTags": [],
          "values": [
            {
              "value": "h11",
              "type": "string"
            },
            {
              "value": "h12",
              "type": "string"
            },
            {
              "value": "h23",
              "type": "string"
            },
            {
              "value": "h24",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "hourValues",
          "type": "number | number[] | string | undefined",
          "complexType": {
            "original": "number[] | number | string",
            "resolved": "number | number[] | string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "hour-values",
          "reflectToAttr": false,
          "docs": "選択可能な時間のリストを作成するために使用される値です。デフォルトでは、24時間制の場合は `0` から `23` まで、12時間制の場合は `1` から `12` までの時間帯が設定されます。しかし、表示する時間を正確に制御するために、`hourValues` には数値、数値の配列、またはコンマで区切られた数値の文字列を指定することができます。",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "number[]"
            },
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "isDateEnabled",
          "type": "((dateIsoString: string) => boolean) | undefined",
          "complexType": {
            "original": "(dateIsoString: string) => boolean",
            "resolved": "((dateIsoString: string) => boolean) | undefined",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "個々の日付(暦日)が有効か無効かを返します。 `true`の場合、その日は有効/対話型になる。もし `false` ならば、その日は無効/非インタラクティブです。  この関数は、指定された日のISO 8601の日付文字列を受け取ります。デフォルトでは、すべての曜日が有効になります。開発者はこの関数を使用して、特定の日を無効にするカスタムロジックを記述することができます。  この関数は、レンダリングされたカレンダーの各日、前月、当月、翌月に対して呼び出されます。カスタム実装は、ジャンクを避けるためにパフォーマンスを最適化する必要があります。",
          "docsTags": [],
          "values": [
            {
              "type": "((dateIsoString: string) => boolean)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "locale",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "locale",
          "reflectToAttr": false,
          "docs": "ion-datetime`に使用するロケールを指定します。これは月と日の名前のフォーマットに影響します。`\"default\"`の値は、あなたのデバイスが設定するデフォルトのロケールを指します。",
          "docsTags": [],
          "default": "'default'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "max",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": true,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "許容される最大のdatetimeを指定します。値は、[ISO 8601 datetime format standard](https://www.w3.org/TR/NOTE-datetime) の `1996-12-19` に従った日付文字列である必要があります。このフォーマットは、正確な日付時刻を指定する必要はありません。例えば、最大で`1994`のような年号を指定することができます。デフォルトはこの年の末日です。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "min",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": true,
          "attr": "min",
          "reflectToAttr": false,
          "docs": "許容される最小のdatetime。値は [ISO 8601 datetime format standard](https://www.w3.org/TR/NOTE-datetime) に従った日付文字列でなければならず、例えば `1996-12-19` のようなものです。このフォーマットは、正確な日付時刻を指定する必要はありません。例えば、最小値は`1994`のような年号だけでいいです。デフォルトは、今日から100年前の年頭です。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "minuteValues",
          "type": "number | number[] | string | undefined",
          "complexType": {
            "original": "number[] | number | string",
            "resolved": "number | number[] | string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "minute-values",
          "reflectToAttr": false,
          "docs": "選択可能な分数のリストを作成するために使用される値です。デフォルトでは、分数は `0` から `59` までの範囲です。しかし、表示する分を正確に制御するために、`minuteValues` には数値、数値の配列、またはコンマで区切られた数値の文字列を取ることができます。例えば、分表示を15分ごとに行う場合は、 `minuteValues=\"0,15,30,45\"` と入力することになります。",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "number[]"
            },
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "monthValues",
          "type": "number | number[] | string | undefined",
          "complexType": {
            "original": "number[] | number | string",
            "resolved": "number | number[] | string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "month-values",
          "reflectToAttr": false,
          "docs": "選択可能な月のリストを作成するために使用する値。デフォルトでは、月の値は `1` から `12` までの範囲です。しかし、どの月を表示するかを正確に制御するために、`monthValues` には数値、数値の配列、またはコンマで区切られた数値の文字列を取ることができます。例えば、夏の月だけを表示する場合、この入力値は `monthValues=\"6,7,8\"` となります。つまり、1月の値は `1` であり、12月の値は `12` です。",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "number[]"
            },
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "multiple",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "multiple",
          "reflectToAttr": false,
          "docs": "`true`の場合、複数の日付を一度に選択することができる。presentation=\"date\"`と `preferWheel=\"false\"` にのみ適用される。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "フォームデータとともに送信されるコントロールの名前。",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "preferWheel",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "prefer-wheel",
          "reflectToAttr": false,
          "docs": "`true`の場合、可能な限りカレンダーグリッドの代わりにホイールピッカーが表示されます。もし `false` ならば、可能な限りホイールピッカーの代わりにカレンダーグリッドがレンダリングされます。  ホイールピッカーは、`presentation`が以下の値の場合、グリッドの代わりにレンダリングすることができます：`presentation`が `\"date\"`, `\"date-time\"`, または `\"time-date\"`.  ホイールピッカーは、`preferWheel`の値に関係なく、`presentation`が次の値のいずれかである場合に常にレンダリングされます：`\"time\"`, `\"month\"`, `\"month-year\"`, または `\"year\"`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "presentation",
          "type": "\"date\" | \"date-time\" | \"month\" | \"month-year\" | \"time\" | \"time-date\" | \"year\"",
          "complexType": {
            "original": "DatetimePresentation",
            "resolved": "\"date\" | \"date-time\" | \"month\" | \"month-year\" | \"time\" | \"time-date\" | \"year\"",
            "references": {
              "DatetimePresentation": {
                "location": "import",
                "path": "./datetime-interface",
                "id": "src/components/datetime/datetime-interface.ts::DatetimePresentation"
              }
            }
          },
          "mutable": false,
          "attr": "presentation",
          "reflectToAttr": false,
          "docs": "どの値を選択するか。`\"date\"`はカレンダーピッカーを表示し、月、日、年を選択します。`\"time\"`は時間ピッカーを表示し、時、分、そして（オプションで）AM/PMを選択します。`\"date-time\"`は、日付ピッカーを最初に、時間ピッカーを次に表示します。\"time-date\"`は、最初に時間ピッカー、2番目に日付ピッカーを表示します。",
          "docsTags": [],
          "default": "'date-time'",
          "values": [
            {
              "value": "date",
              "type": "string"
            },
            {
              "value": "date-time",
              "type": "string"
            },
            {
              "value": "month",
              "type": "string"
            },
            {
              "value": "month-year",
              "type": "string"
            },
            {
              "value": "time",
              "type": "string"
            },
            {
              "value": "time-date",
              "type": "string"
            },
            {
              "value": "year",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "`true`の場合、datetimeは正常に表示されるが、インタラクティブにはなりません。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showClearButton",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-clear-button",
          "reflectToAttr": false,
          "docs": "`true`の場合、`ion-datetime`コンポーネントの下部にあるデフォルトの \"Cancel \"と \"OK \"ボタンと一緒に \"Clear \"ボタンがレンダリングされます。これらのボタンをカスタマイズしたい場合、開発者は `button` slotを使用することもできる。カスタムボタンが `button` slotに設定されている場合、デフォルトのボタンはレンダリングされません。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showDefaultButtons",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-default-buttons",
          "reflectToAttr": false,
          "docs": "`true`の場合、`ion-datetime`コンポーネントの下部にデフォルトの \"Cancel\" と \"OK\" ボタンがレンダリングされます。これらのボタンをカスタマイズしたい場合は、`button`slotを使用することもできます。カスタムボタンが `button` slotに設定されている場合、デフォルトのボタンはレンダリングされません。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showDefaultTimeLabel",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-default-time-label",
          "reflectToAttr": false,
          "docs": "`true`の場合、`ion-datetime`コンポーネントの時間セレクタにデフォルトの \"Time \"ラベルがレンダリングされる。このラベルをカスタマイズしたい場合は、`time-label`slotを使用することもできます。 `time-label` slotにカスタムラベルが設定されている場合、デフォルトのラベルはレンダリングされません。",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showDefaultTitle",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-default-title",
          "reflectToAttr": false,
          "docs": "`true`の場合、カレンダーピッカーの上にヘッダーが表示されます。これには、slotされたタイトルと、選択された日付の両方が含まれます。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"cover\" | \"fixed\"",
          "complexType": {
            "original": "'cover' | 'fixed'",
            "resolved": "\"cover\" | \"fixed\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "cover`の場合、`ion-datetime`はコンテナの全幅を覆うように展開される。`fixed`の場合、`ion-datetime`は固定幅になる。",
          "docsTags": [],
          "default": "'fixed'",
          "values": [
            {
              "value": "cover",
              "type": "string"
            },
            {
              "value": "fixed",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "titleSelectedDatesFormatter",
          "type": "((selectedDates: string[]) => string) | undefined",
          "complexType": {
            "original": "TitleSelectedDatesFormatter",
            "resolved": "((selectedDates: string[]) => string) | undefined",
            "references": {
              "TitleSelectedDatesFormatter": {
                "location": "import",
                "path": "./datetime-interface",
                "id": "src/components/datetime/datetime-interface.ts::TitleSelectedDatesFormatter"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "選択された日付の数を示すヘッダーテキストをフォーマットするために使用されるコールバックです。選択された日付が0または1以上の場合のみ使用されます（つまり、ちょうど1の場合は未使用です）。デフォルトでは、ヘッダーテキストは \"numberOfDates days \"に設定されています。",
          "docsTags": [],
          "values": [
            {
              "type": "((selectedDates: string[]) => string)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "value",
          "type": "null | string | string[] | undefined",
          "complexType": {
            "original": "string | string[] | null",
            "resolved": "null | string | string[] | undefined",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "datetimeの値を有効なISO 8601 datetime文字列として指定します。これは、`multiple=\"true\"`の場合のみ、文字列の配列です。",
          "docsTags": [],
          "values": [
            {
              "type": "null"
            },
            {
              "type": "string"
            },
            {
              "type": "string[]"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "yearValues",
          "type": "number | number[] | string | undefined",
          "complexType": {
            "original": "number[] | number | string",
            "resolved": "number | number[] | string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "year-values",
          "reflectToAttr": false,
          "docs": "選択可能な年のリストを作成するために使用する値。デフォルトでは、年の値は日付の `min` と `max` の間に設定される。しかし、表示する年を正確に制御するために、 `yearValues` 入力には数値、数値の配列、カンマで区切られた数値の文字列を指定することができます。例えば、うるう年と最近のうるう年を表示する場合、この入力の値は `yearValues=\"2008,2012,2016,2020,2024\"` となります。",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "number[]"
            },
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "cancel",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(closeOverlay?: boolean) => Promise<void>",
            "parameters": [
              {
                "tags": [],
                "text": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "cancel(closeOverlay?: boolean) => Promise<void>",
          "parameters": [],
          "docs": "ionCancel イベントを発行し、オプションで datetime が表示されたポップオーバーまたはモーダルを閉じます。",
          "docsTags": []
        },
        {
          "name": "confirm",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(closeOverlay?: boolean) => Promise<void>",
            "parameters": [
              {
                "tags": [],
                "text": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "confirm(closeOverlay?: boolean) => Promise<void>",
          "parameters": [],
          "docs": "選択されたdatetimeの値を確認し、`value`プロパティを更新し、オプションでdatetimeが表示されていたポップオーバーまたはモーダルを閉じます。",
          "docsTags": []
        },
        {
          "name": "reset",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(startDate?: string) => Promise<void>",
            "parameters": [
              {
                "tags": [],
                "text": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "reset(startDate?: string) => Promise<void>",
          "parameters": [],
          "docs": "datetimeの内部状態をリセットするが、値は更新しません。有効なISO-8601文字列を渡すと、コンポーネントの状態は指定した日付にリセットされます。値が提供されない場合、内部状態はmin、max、todayのクランプされた値にリセットされます。",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "ionBlur",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "datetimeのフォーカスが外れたときに発行されます。",
          "docsTags": []
        },
        {
          "event": "ionCancel",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "datetimeの選択がキャンセルされたときに発生します。",
          "docsTags": []
        },
        {
          "event": "ionChange",
          "detail": "DatetimeChangeEventDetail",
          "bubbles": true,
          "complexType": {
            "original": "DatetimeChangeEventDetail",
            "resolved": "DatetimeChangeEventDetail",
            "references": {
              "DatetimeChangeEventDetail": {
                "location": "import",
                "path": "./datetime-interface",
                "id": "src/components/datetime/datetime-interface.ts::DatetimeChangeEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "値（選択された日付）が変化したときに発行されます。",
          "docsTags": []
        },
        {
          "event": "ionFocus",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "datetimeにフォーカスが当たったときに発行されます。",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--background",
          "annotation": "prop",
          "docs": "datetimeコンポーネントの主な背景。"
        },
        {
          "name": "--background-rgb",
          "annotation": "prop",
          "docs": "datetimeコンポーネントの主な背景をRGBフォーマットで示します。"
        },
        {
          "name": "--title-color",
          "annotation": "prop",
          "docs": "タイトルの文字色です。"
        },
        {
          "name": "--wheel-fade-background-rgb",
          "annotation": "prop",
          "docs": "ホイールスタイルレイアウトの場合は非選択項目を覆うグラデーションの色、グリッドスタイルレイアウトの場合は月/年ピッカーの色。255,255,255`のようなRGBフォーマットでなければなりません。"
        },
        {
          "name": "--wheel-highlight-background",
          "annotation": "prop",
          "docs": "ホイールスタイルレイアウトの場合は選択された項目の下、グリッドスタイルレイアウトの場合は月/年ピッカーのハイライトの背景。"
        }
      ],
      "slots": [
        {
          "name": "buttons",
          "docs": "datetimeのボタンです。"
        },
        {
          "name": "time-label",
          "docs": "datetimeの時間セレクタのラベルです。"
        },
        {
          "name": "title",
          "docs": "datetimeのタイトルです。"
        }
      ],
      "parts": [
        {
          "name": "calendar-day",
          "docs": "日付カレンダーの中に日を表示する個々のボタン。"
        },
        {
          "name": "calendar-day active",
          "docs": "現在選択されている暦日。"
        },
        {
          "name": "calendar-day disabled",
          "docs": "無効になる暦日。"
        },
        {
          "name": "calendar-day today",
          "docs": "現在の日を含む暦日。"
        },
        {
          "name": "month-year-button",
          "docs": "グリッドスタイルレイアウト使用時に月/年ピッカーを開くボタン。"
        },
        {
          "name": "time-button",
          "docs": "presentation=\"date-time\"`または`\"time-date\"`のグリッドスタイルレイアウトを使用しているときに、時間ピッカーを開くボタン。"
        },
        {
          "name": "time-button active",
          "docs": "ピッカーが開いているときのタイムピッカーボタン。"
        },
        {
          "name": "wheel-item",
          "docs": "ホイールスタイルレイアウトを使用している場合は個々の項目、グリッドスタイルレイアウトを使用している場合は月/年のピッカーに表示されます。"
        },
        {
          "name": "wheel-item active",
          "docs": "現在選択されているホイール項目。"
        }
      ],
      "dependents": [],
      "dependencies": [
        "ion-buttons",
        "ion-button",
        "ion-picker-internal",
        "ion-picker-column-internal",
        "ion-item",
        "ion-label",
        "ion-icon",
        "ion-popover"
      ],
      "dependencyGraph": {
        "ion-datetime": [
          "ion-buttons",
          "ion-button",
          "ion-picker-internal",
          "ion-picker-column-internal",
          "ion-item",
          "ion-label",
          "ion-icon",
          "ion-popover"
        ],
        "ion-button": [
          "ion-ripple-effect"
        ],
        "ion-item": [
          "ion-icon",
          "ion-ripple-effect",
          "ion-note"
        ],
        "ion-popover": [
          "ion-backdrop"
        ]
      }
    },
    {
      "filePath": "src/components/fab-button/fab-button.tsx",
      "encapsulation": "shadow",
      "tag": "ion-fab-button",
      "docs": "",
      "docsTags": [
        {
          "name": "virtualProp",
          "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
        },
        {
          "name": "part",
          "text": "native - The native HTML button or anchor element that wraps all child elements."
        },
        {
          "name": "part",
          "text": "close-icon - The close icon that is displayed when a fab list opens (uses ion-icon)."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "activated",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "activated",
          "reflectToAttr": false,
          "docs": "`true`の場合、ファブボタンにクローズアイコンを表示します。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "closeIcon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "close-icon",
          "reflectToAttr": false,
          "docs": "クローズアイコンに使用するアイコン名です。ファブボタンが押されたときに表示されます。ファブリストを含むファブ内のメインボタンである場合のみ適用されます。",
          "docsTags": [],
          "default": "close",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
          "complexType": {
            "original": "Color",
            "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
            "references": {
              "Color": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::Color"
              }
            }
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "アプリケーションのカラーパレットから使用する色を指定します。デフォルトのオプションは以下の通りです。 `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, と `\"dark\"` です．色に関する詳しい情報は [theming](/docs/theming/basics) を参照してください。",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "tertiary",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "type": "string & Record<never, never>"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "`true`の場合、ユーザーはファブボタンを操作することができません。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "download",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "download",
          "reflectToAttr": false,
          "docs": "この属性は、ブラウザが URL に移動する代わりに URL をダウンロードするように指示し、ユーザはローカルファイルとして保存するように促されます。この属性に値がある場合、保存のプロンプトであらかじめ入力されたファイル名として使用されます（ユーザーはファイル名を変更することができます）。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "href",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "ハイパーリンクが指し示す URL または URL フラグメントを格納します。このプロパティが設定されている場合、アンカータグがレンダリングされます。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "rel",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "rel",
          "reflectToAttr": false,
          "docs": "ターゲットオブジェクトとリンクオブジェクトの関係を指定します。値は、スペースで区切られた[リンクタイプ](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types)のリストです。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "routerAnimation",
          "type": "((baseEl: any, opts?: any) => Animation) | undefined",
          "complexType": {
            "original": "AnimationBuilder | undefined",
            "resolved": "((baseEl: any, opts?: any) => Animation) | undefined",
            "references": {
              "AnimationBuilder": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::AnimationBuilder"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "ルータを使用する場合、`href`を使用して別のページに移動する際の遷移アニメーションを指定します。",
          "docsTags": [],
          "values": [
            {
              "type": "((baseEl: any, opts?: any) => Animation)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "routerDirection",
          "type": "\"back\" | \"forward\" | \"root\"",
          "complexType": {
            "original": "RouterDirection",
            "resolved": "\"back\" | \"forward\" | \"root\"",
            "references": {
              "RouterDirection": {
                "location": "import",
                "path": "../router/utils/interface",
                "id": "src/components/router/utils/interface.ts::RouterDirection"
              }
            }
          },
          "mutable": false,
          "attr": "router-direction",
          "reflectToAttr": false,
          "docs": "ルータを使用する場合、`href`を使用して他のページに移動する際の遷移方向を指定します。",
          "docsTags": [],
          "default": "'forward'",
          "values": [
            {
              "value": "back",
              "type": "string"
            },
            {
              "value": "forward",
              "type": "string"
            },
            {
              "value": "root",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "show",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show",
          "reflectToAttr": false,
          "docs": "`true`の場合、fabボタンがfab-listにあるときに表示されます。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"small\" | undefined",
          "complexType": {
            "original": "'small'",
            "resolved": "\"small\" | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "ボタンの大きさを指定します。ミニファブボタンを作るには、`small`に設定します。",
          "docsTags": [],
          "values": [
            {
              "value": "small",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "target",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "リンク先のURLを表示する場所を指定します。href`を指定した場合のみ適用される。特別なキーワードがあります。_blank\"`, `\"_self\"`, `\"_parent\"`, `\"_top\"`.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "translucent",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "translucent",
          "reflectToAttr": false,
          "docs": "`true`の場合、ファブボタンが半透明になります。modeが `\"ios\"` で、デバイスが [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility) をサポートしている場合にのみ適用されます。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"button\" | \"reset\" | \"submit\"",
          "complexType": {
            "original": "'submit' | 'reset' | 'button'",
            "resolved": "\"button\" | \"reset\" | \"submit\"",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "ボタンの種類です。",
          "docsTags": [],
          "default": "'button'",
          "values": [
            {
              "value": "button",
              "type": "string"
            },
            {
              "value": "reset",
              "type": "string"
            },
            {
              "value": "submit",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "ionBlur",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "ボタンのフォーカスが外れたときに発行されます。",
          "docsTags": []
        },
        {
          "event": "ionFocus",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "ボタンにフォーカスが当たっているときに発行されます。",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--background",
          "annotation": "prop",
          "docs": "ボタンの背景"
        },
        {
          "name": "--background-activated",
          "annotation": "prop",
          "docs": "ボタンが押されたときの背景。注意：これを設定すると、Material Designの波紋に干渉します。"
        },
        {
          "name": "--background-activated-opacity",
          "annotation": "prop",
          "docs": "押されたときのボタンの背景の不透明度"
        },
        {
          "name": "--background-focused",
          "annotation": "prop",
          "docs": "タブキーでフォーカスしたときのボタンの背景"
        },
        {
          "name": "--background-focused-opacity",
          "annotation": "prop",
          "docs": "タブキーでフォーカスしたときのボタンの背景の不透明度"
        },
        {
          "name": "--background-hover",
          "annotation": "prop",
          "docs": "ホバー時のボタンの背景"
        },
        {
          "name": "--background-hover-opacity",
          "annotation": "prop",
          "docs": "ホバー時のボタン背景の不透明度"
        },
        {
          "name": "--border-color",
          "annotation": "prop",
          "docs": "ボタンのボーダーカラー"
        },
        {
          "name": "--border-radius",
          "annotation": "prop",
          "docs": "ボタンの境界半径"
        },
        {
          "name": "--border-style",
          "annotation": "prop",
          "docs": "ボタンのボーダースタイル"
        },
        {
          "name": "--border-width",
          "annotation": "prop",
          "docs": "ボタンのボーダー幅"
        },
        {
          "name": "--box-shadow",
          "annotation": "prop",
          "docs": "ボタンのボックスシャドウ"
        },
        {
          "name": "--close-icon-font-size",
          "annotation": "prop",
          "docs": "クローズアイコンのFont Size"
        },
        {
          "name": "--color",
          "annotation": "prop",
          "docs": "ボタンの文字色"
        },
        {
          "name": "--color-activated",
          "annotation": "prop",
          "docs": "ボタンが押されたときの文字色"
        },
        {
          "name": "--color-focused",
          "annotation": "prop",
          "docs": "タブキーでフォーカスしたときのボタンの文字色"
        },
        {
          "name": "--color-hover",
          "annotation": "prop",
          "docs": "ホバー時のボタンの文字色"
        },
        {
          "name": "--padding-bottom",
          "annotation": "prop",
          "docs": "ボタンのBottom Padding"
        },
        {
          "name": "--padding-end",
          "annotation": "prop",
          "docs": "ボタンの向きが左から右の場合はRight Padding、右から左の場合はLeft Paddingとなります。"
        },
        {
          "name": "--padding-start",
          "annotation": "prop",
          "docs": "ボタンの向きが左から右の場合はLeft Padding、右から左の場合はRight Paddingとなります。"
        },
        {
          "name": "--padding-top",
          "annotation": "prop",
          "docs": "ボタンのTop Padding"
        },
        {
          "name": "--ripple-color",
          "annotation": "prop",
          "docs": "ボタンリプルエフェクトの色"
        },
        {
          "name": "--transition",
          "annotation": "prop",
          "docs": "ボタンの遷移"
        }
      ],
      "slots": [],
      "parts": [
        {
          "name": "close-icon",
          "docs": "ファブリストを開いたときに表示されるクローズアイコン（ion-iconを使用します）。"
        },
        {
          "name": "native",
          "docs": "すべての子要素をラップするネイティブHTMLのボタンまたはアンカー要素です。"
        }
      ],
      "dependents": [],
      "dependencies": [
        "ion-icon",
        "ion-ripple-effect"
      ],
      "dependencyGraph": {
        "ion-fab-button": [
          "ion-icon",
          "ion-ripple-effect"
        ]
      }
    },
    {
      "filePath": "src/components/fab-list/fab-list.tsx",
      "encapsulation": "shadow",
      "tag": "ion-fab-list",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "activated",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "activated",
          "reflectToAttr": false,
          "docs": "`true`の場合、ファブリストに全てのファブボタンが表示されます。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "side",
          "type": "\"bottom\" | \"end\" | \"start\" | \"top\"",
          "complexType": {
            "original": "'start' | 'end' | 'top' | 'bottom'",
            "resolved": "\"bottom\" | \"end\" | \"start\" | \"top\"",
            "references": {}
          },
          "mutable": false,
          "attr": "side",
          "reflectToAttr": false,
          "docs": "メインファブボタンに対して、ファブリストが表示される側を指定します。",
          "docsTags": [],
          "default": "'bottom'",
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/fab/fab.tsx",
      "encapsulation": "shadow",
      "tag": "ion-fab",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "activated",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "activated",
          "reflectToAttr": false,
          "docs": "もし `true` ならば、`ion-fab` 内の `ion-fab-button` とすべての `ion-fab-list` の両方がアクティブになる。つまり、`ion-fab-button`は`close`アイコンになり、`ion-fab-list`は可視化される。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "edge",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "edge",
          "reflectToAttr": false,
          "docs": "`true`の場合、`vertical`が`\"top\"`の場合はヘッダーの端に、`\"bottom\"`の場合はフッターの端にファブを表示します。 `fixed` slotと一緒に使用する必要があります。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "horizontal",
          "type": "\"center\" | \"end\" | \"start\" | undefined",
          "complexType": {
            "original": "'start' | 'end' | 'center'",
            "resolved": "\"center\" | \"end\" | \"start\" | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "horizontal",
          "reflectToAttr": false,
          "docs": "ビューポートでファブを水平に揃える場所。",
          "docsTags": [],
          "values": [
            {
              "value": "center",
              "type": "string"
            },
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "vertical",
          "type": "\"bottom\" | \"center\" | \"top\" | undefined",
          "complexType": {
            "original": "'top' | 'bottom' | 'center'",
            "resolved": "\"bottom\" | \"center\" | \"top\" | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "vertical",
          "reflectToAttr": false,
          "docs": "ビューポートでファブを縦に並べる場所。",
          "docsTags": [],
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "center",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "close",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "close() => Promise<void>",
          "parameters": [],
          "docs": "アクティブなFABリストコンテナを閉じる。",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/footer/footer.tsx",
      "encapsulation": "none",
      "tag": "ion-footer",
      "docs": "",
      "docsTags": [
        {
          "name": "virtualProp",
          "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "collapse",
          "type": "\"fade\" | undefined",
          "complexType": {
            "original": "'fade'",
            "resolved": "\"fade\" | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "collapse",
          "reflectToAttr": false,
          "docs": "フッターに適用されるスクロール効果を記述します。iOS modeでのみ適用されます。",
          "docsTags": [],
          "values": [
            {
              "value": "fade",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "translucent",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "translucent",
          "reflectToAttr": false,
          "docs": "`true`の場合、フッターは半透明になります。modeが `\"ios\"` で、デバイスが [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility) をサポートしている場合のみ適用されます。  注意：フッターの後ろにコンテンツをスクロールさせるためには、コンテンツに `fullscreen` 属性が設定されている必要があります。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/grid/grid.tsx",
      "encapsulation": "shadow",
      "tag": "ion-grid",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "fixed",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "fixed",
          "reflectToAttr": false,
          "docs": "`true`の場合、グリッドの幅は画面サイズに応じた固定幅となる。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--ion-grid-padding",
          "annotation": "prop",
          "docs": "グリッドのPadding"
        },
        {
          "name": "--ion-grid-padding-lg",
          "annotation": "prop",
          "docs": "LG画面でのグリッドのPadding"
        },
        {
          "name": "--ion-grid-padding-md",
          "annotation": "prop",
          "docs": "md画面におけるグリッドのPadding"
        },
        {
          "name": "--ion-grid-padding-sm",
          "annotation": "prop",
          "docs": "スマートスクリーンにおけるグリッドのPadding"
        },
        {
          "name": "--ion-grid-padding-xl",
          "annotation": "prop",
          "docs": "XL画面でのグリッドのPadding"
        },
        {
          "name": "--ion-grid-padding-xs",
          "annotation": "prop",
          "docs": "xs画面でのGridのPadding"
        },
        {
          "name": "--ion-grid-width",
          "annotation": "prop",
          "docs": "固定Gridの幅"
        },
        {
          "name": "--ion-grid-width-lg",
          "annotation": "prop",
          "docs": "LGスクリーンで固定されたGridの幅"
        },
        {
          "name": "--ion-grid-width-md",
          "annotation": "prop",
          "docs": "md画面での固定Gridの幅"
        },
        {
          "name": "--ion-grid-width-sm",
          "annotation": "prop",
          "docs": "sm画面での固定Gridの幅"
        },
        {
          "name": "--ion-grid-width-xl",
          "annotation": "prop",
          "docs": "xl画面での固定Gridの幅"
        },
        {
          "name": "--ion-grid-width-xs",
          "annotation": "prop",
          "docs": "xsスクリーンで固定されたGridの幅"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/header/header.tsx",
      "encapsulation": "none",
      "tag": "ion-header",
      "docs": "",
      "docsTags": [
        {
          "name": "virtualProp",
          "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "collapse",
          "type": "\"condense\" | \"fade\" | undefined",
          "complexType": {
            "original": "'condense' | 'fade'",
            "resolved": "\"condense\" | \"fade\" | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "collapse",
          "reflectToAttr": false,
          "docs": "ヘッダーに適用されるスクロール効果を記述します。iOS modeでのみ適用されます。  通常、[折りたたみ式ラージタイトル](https://ionicframework.com/docs/api/title#collapsible-large-titles)に使用します。",
          "docsTags": [],
          "values": [
            {
              "value": "condense",
              "type": "string"
            },
            {
              "value": "fade",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "translucent",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "translucent",
          "reflectToAttr": false,
          "docs": "`true`の場合、ヘッダーは半透明になります。modeが `\"ios\"` で、デバイスが [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility) をサポートしている場合にのみ適用されます。  注意：ヘッダーの後ろにコンテンツをスクロールさせるには、コンテンツに `fullscreen` 属性が設定されている必要があります。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/img/img.tsx",
      "encapsulation": "shadow",
      "tag": "ion-img",
      "docs": "",
      "docsTags": [
        {
          "name": "part",
          "text": "image - The inner `img` element."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "alt",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "alt",
          "reflectToAttr": false,
          "docs": "この属性は、画像を説明する代替テキストを定義します。画像の URL が間違っている場合、画像がサポートされている形式の一つでない場合、または画像がまだダウンロードされていない場合、ユーザにはこのテキストが表示されます。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "src",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "src",
          "reflectToAttr": false,
          "docs": "画像のURL。この属性は `<img>` 要素では必須です。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "ionError",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "imgの読み込みに失敗したときに発行されます。",
          "docsTags": []
        },
        {
          "event": "ionImgDidLoad",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "画像の読み込みが終了したときに発行されます。",
          "docsTags": []
        },
        {
          "event": "ionImgWillLoad",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "img srcが設定されたときに発行されます。",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [
        {
          "name": "image",
          "docs": "内側の `img` 要素。"
        }
      ],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/infinite-scroll-content/infinite-scroll-content.tsx",
      "encapsulation": "none",
      "tag": "ion-infinite-scroll-content",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "loadingSpinner",
          "type": "\"bubbles\" | \"circles\" | \"circular\" | \"crescent\" | \"dots\" | \"lines\" | \"lines-sharp\" | \"lines-sharp-small\" | \"lines-small\" | null | undefined",
          "complexType": {
            "original": "SpinnerTypes | null",
            "resolved": "\"bubbles\" | \"circles\" | \"circular\" | \"crescent\" | \"dots\" | \"lines\" | \"lines-sharp\" | \"lines-sharp-small\" | \"lines-small\" | null | undefined",
            "references": {
              "SpinnerTypes": {
                "location": "import",
                "path": "../spinner/spinner-configs",
                "id": "src/components/spinner/spinner-configs.ts::SpinnerTypes"
              }
            }
          },
          "mutable": true,
          "attr": "loading-spinner",
          "reflectToAttr": false,
          "docs": "ロード中に表示されるアニメーションSVGスピナーです。",
          "docsTags": [],
          "values": [
            {
              "value": "bubbles",
              "type": "string"
            },
            {
              "value": "circles",
              "type": "string"
            },
            {
              "value": "circular",
              "type": "string"
            },
            {
              "value": "crescent",
              "type": "string"
            },
            {
              "value": "dots",
              "type": "string"
            },
            {
              "value": "lines",
              "type": "string"
            },
            {
              "value": "lines-sharp",
              "type": "string"
            },
            {
              "value": "lines-sharp-small",
              "type": "string"
            },
            {
              "value": "lines-small",
              "type": "string"
            },
            {
              "type": "null"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "loadingText",
          "type": "IonicSafeString | string | undefined",
          "complexType": {
            "original": "string | IonicSafeString",
            "resolved": "IonicSafeString | string | undefined",
            "references": {
              "IonicSafeString": {
                "location": "import",
                "path": "../../utils/sanitization",
                "id": "src/utils/sanitization/index.ts::IonicSafeString"
              }
            }
          },
          "mutable": false,
          "attr": "loading-text",
          "reflectToAttr": false,
          "docs": "ロード中に表示するオプションのテキスト。`loadingText`には、文字列としてプレーンテキストまたはHTMLのいずれかを指定することができます。通常HTML用に予約されている文字を表示するには、エスケープする必要があります。例えば、`<Ionic>`は `&lt;Ionic&gt;` になります。詳しくはこちら：[セキュリティ・ドキュメント](https://ionicframework.com/docs/faq/security) このプロパティは、カスタムHTMLを文字列として受け付けます。デフォルトでは、コンテンツはプレーンテキストとしてパースされます。カスタムHTMLを使用するには、Ionicの設定で `innerHTMLTemplatesEnabled` を `true` に設定する必要があります。",
          "docsTags": [],
          "values": [
            {
              "type": "IonicSafeString"
            },
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "ion-spinner"
      ],
      "dependencyGraph": {
        "ion-infinite-scroll-content": [
          "ion-spinner"
        ]
      }
    },
    {
      "filePath": "src/components/infinite-scroll/infinite-scroll.tsx",
      "encapsulation": "none",
      "tag": "ion-infinite-scroll",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "`true`の場合、無限スクロールは非表示になり、スクロールイベントリスナーが削除されます。 `true` を設定すると、無限スクロールがスクロール中に新しいデータを積極的に受け取ろうとするのを無効にすることができます。これは、追加できるデータがもうないことが分かっていて、無限スクロールが不要になった場合に有効です。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "position",
          "type": "\"bottom\" | \"top\"",
          "complexType": {
            "original": "'top' | 'bottom'",
            "resolved": "\"bottom\" | \"top\"",
            "references": {}
          },
          "mutable": false,
          "attr": "position",
          "reflectToAttr": false,
          "docs": "無限スクロール要素の位置を指定します。値は `top` または `bottom` のどちらかです。",
          "docsTags": [],
          "default": "'bottom'",
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "threshold",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "threshold",
          "reflectToAttr": false,
          "docs": "スクロールしたときに `infinite` 出力イベントを呼び出すための、コンテンツの底からの閾値の距離。閾値はパーセントかピクセル単位で指定します。例えば、`10%`という値を使用すると、ユーザがページの下から10%スクロールしたときに `infinite` 出力イベントが呼び出されるようになります。また、ページの下から100ピクセル以内にスクロールした場合には、`100px`という値を使用します。",
          "docsTags": [],
          "default": "'15%'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "complete",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "complete() => Promise<void>",
          "parameters": [],
          "docs": "非同期操作が完了したら、`ionInfinite`出力イベントハンドラ内で `complete()` を呼び出します。例えば、AJAX リクエストからデータを受信してデータリストに項目を追加するなど、アプリが非同期処理を実行している間が `loading` 状態です。データの受信とUIの更新が完了したら、このメソッドを呼び出してロードが完了したことを知らせます。このメソッドは、無限スクロールの状態を `loading` から `enabled` へと変更します。",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "ionInfinite",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "スクロールが閾値の距離に達したときに発行されます。非同期処理が完了したら、無限ハンドラから無限スクロールの `complete()` メソッドを呼び出す必要があります。",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/input/input.tsx",
      "encapsulation": "scoped",
      "tag": "ion-input",
      "docs": "",
      "docsTags": [
        {
          "name": "virtualProp",
          "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
        },
        {
          "name": "slot",
          "text": "label - The label text to associate with the input. Use the `labelPlacement` property to control where the label is placed relative to the input. Use this if you need to render a label with custom HTML. (EXPERIMENTAL)"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "accept",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "accept",
          "reflectToAttr": false,
          "docs": "この属性は無視されます。",
          "docsTags": [
            {
              "name": "deprecated"
            }
          ],
          "deprecation": "",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "autocapitalize",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "autocapitalize",
          "reflectToAttr": false,
          "docs": "テキスト値がユーザーによって入力／編集される際に、自動的に大文字にするかどうか、またどのようにするかについて示します。利用可能なオプションoff\"`, `\"none\"`, `\"on\"`, `\"sentences\"`, `\"words\"`, `\"characters\"`.",
          "docsTags": [],
          "default": "'off'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autocomplete",
          "type": "\"name\" | \"email\" | \"tel\" | \"url\" | \"on\" | \"off\" | \"honorific-prefix\" | \"given-name\" | \"additional-name\" | \"family-name\" | \"honorific-suffix\" | \"nickname\" | \"username\" | \"new-password\" | \"current-password\" | \"one-time-code\" | \"organization-title\" | \"organization\" | \"street-address\" | \"address-line1\" | \"address-line2\" | \"address-line3\" | \"address-level4\" | \"address-level3\" | \"address-level2\" | \"address-level1\" | \"country\" | \"country-name\" | \"postal-code\" | \"cc-name\" | \"cc-given-name\" | \"cc-additional-name\" | \"cc-family-name\" | \"cc-number\" | \"cc-exp\" | \"cc-exp-month\" | \"cc-exp-year\" | \"cc-csc\" | \"cc-type\" | \"transaction-currency\" | \"transaction-amount\" | \"language\" | \"bday\" | \"bday-day\" | \"bday-month\" | \"bday-year\" | \"sex\" | \"tel-country-code\" | \"tel-national\" | \"tel-area-code\" | \"tel-local\" | \"tel-extension\" | \"impp\" | \"photo\"",
          "complexType": {
            "original": "AutocompleteTypes",
            "resolved": "\"name\" | \"email\" | \"tel\" | \"url\" | \"on\" | \"off\" | \"honorific-prefix\" | \"given-name\" | \"additional-name\" | \"family-name\" | \"honorific-suffix\" | \"nickname\" | \"username\" | \"new-password\" | \"current-password\" | \"one-time-code\" | \"organization-title\" | \"organization\" | \"street-address\" | \"address-line1\" | \"address-line2\" | \"address-line3\" | \"address-level4\" | \"address-level3\" | \"address-level2\" | \"address-level1\" | \"country\" | \"country-name\" | \"postal-code\" | \"cc-name\" | \"cc-given-name\" | \"cc-additional-name\" | \"cc-family-name\" | \"cc-number\" | \"cc-exp\" | \"cc-exp-month\" | \"cc-exp-year\" | \"cc-csc\" | \"cc-type\" | \"transaction-currency\" | \"transaction-amount\" | \"language\" | \"bday\" | \"bday-day\" | \"bday-month\" | \"bday-year\" | \"sex\" | \"tel-country-code\" | \"tel-national\" | \"tel-area-code\" | \"tel-local\" | \"tel-extension\" | \"impp\" | \"photo\"",
            "references": {
              "AutocompleteTypes": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::AutocompleteTypes"
              }
            }
          },
          "mutable": false,
          "attr": "autocomplete",
          "reflectToAttr": false,
          "docs": "コントロールの値が、ブラウザによって自動的に補完されるかどうかを示します。",
          "docsTags": [],
          "default": "'off'",
          "values": [
            {
              "value": "name",
              "type": "string"
            },
            {
              "value": "email",
              "type": "string"
            },
            {
              "value": "tel",
              "type": "string"
            },
            {
              "value": "url",
              "type": "string"
            },
            {
              "value": "on",
              "type": "string"
            },
            {
              "value": "off",
              "type": "string"
            },
            {
              "value": "honorific-prefix",
              "type": "string"
            },
            {
              "value": "given-name",
              "type": "string"
            },
            {
              "value": "additional-name",
              "type": "string"
            },
            {
              "value": "family-name",
              "type": "string"
            },
            {
              "value": "honorific-suffix",
              "type": "string"
            },
            {
              "value": "nickname",
              "type": "string"
            },
            {
              "value": "username",
              "type": "string"
            },
            {
              "value": "new-password",
              "type": "string"
            },
            {
              "value": "current-password",
              "type": "string"
            },
            {
              "value": "one-time-code",
              "type": "string"
            },
            {
              "value": "organization-title",
              "type": "string"
            },
            {
              "value": "organization",
              "type": "string"
            },
            {
              "value": "street-address",
              "type": "string"
            },
            {
              "value": "address-line1",
              "type": "string"
            },
            {
              "value": "address-line2",
              "type": "string"
            },
            {
              "value": "address-line3",
              "type": "string"
            },
            {
              "value": "address-level4",
              "type": "string"
            },
            {
              "value": "address-level3",
              "type": "string"
            },
            {
              "value": "address-level2",
              "type": "string"
            },
            {
              "value": "address-level1",
              "type": "string"
            },
            {
              "value": "country",
              "type": "string"
            },
            {
              "value": "country-name",
              "type": "string"
            },
            {
              "value": "postal-code",
              "type": "string"
            },
            {
              "value": "cc-name",
              "type": "string"
            },
            {
              "value": "cc-given-name",
              "type": "string"
            },
            {
              "value": "cc-additional-name",
              "type": "string"
            },
            {
              "value": "cc-family-name",
              "type": "string"
            },
            {
              "value": "cc-number",
              "type": "string"
            },
            {
              "value": "cc-exp",
              "type": "string"
            },
            {
              "value": "cc-exp-month",
              "type": "string"
            },
            {
              "value": "cc-exp-year",
              "type": "string"
            },
            {
              "value": "cc-csc",
              "type": "string"
            },
            {
              "value": "cc-type",
              "type": "string"
            },
            {
              "value": "transaction-currency",
              "type": "string"
            },
            {
              "value": "transaction-amount",
              "type": "string"
            },
            {
              "value": "language",
              "type": "string"
            },
            {
              "value": "bday",
              "type": "string"
            },
            {
              "value": "bday-day",
              "type": "string"
            },
            {
              "value": "bday-month",
              "type": "string"
            },
            {
              "value": "bday-year",
              "type": "string"
            },
            {
              "value": "sex",
              "type": "string"
            },
            {
              "value": "tel-country-code",
              "type": "string"
            },
            {
              "value": "tel-national",
              "type": "string"
            },
            {
              "value": "tel-area-code",
              "type": "string"
            },
            {
              "value": "tel-local",
              "type": "string"
            },
            {
              "value": "tel-extension",
              "type": "string"
            },
            {
              "value": "impp",
              "type": "string"
            },
            {
              "value": "photo",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autocorrect",
          "type": "\"off\" | \"on\"",
          "complexType": {
            "original": "'on' | 'off'",
            "resolved": "\"off\" | \"on\"",
            "references": {}
          },
          "mutable": false,
          "attr": "autocorrect",
          "reflectToAttr": false,
          "docs": "ユーザーがテキスト値を入力/編集する際に、自動補正を有効にするかどうか。",
          "docsTags": [],
          "default": "'off'",
          "values": [
            {
              "value": "off",
              "type": "string"
            },
            {
              "value": "on",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autofocus",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": false,
          "docs": "この Boolean 属性により、ページロード時にフォームコントロールにInputフォーカスが当たるように指定することができます。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "clearInput",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "clear-input",
          "reflectToAttr": false,
          "docs": "`true`の場合、値があるときにInputにクリアアイコンが表示されます。これをクリックすると、入力がクリアされます。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "clearOnEdit",
          "type": "boolean | undefined",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "clear-on-edit",
          "reflectToAttr": false,
          "docs": "`true`の場合、編集時にフォーカスされた後、値がクリアされる。デフォルトは `type` が `\"password\"` のとき `true` で、それ以外のときは `false` です。",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "color",
          "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
          "complexType": {
            "original": "Color",
            "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
            "references": {
              "Color": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::Color"
              }
            }
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "アプリケーションのカラーパレットから使用する色を指定します。デフォルトのオプションは以下の通りです。 `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, と `\"dark\"` です．色に関する詳しい情報は [theming](/docs/theming/basics) を参照してください。",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "tertiary",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "type": "string & Record<never, never>"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "counter",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "counter",
          "reflectToAttr": false,
          "docs": "`true`の場合、文字カウンタが使用された文字の比率と総文字数制限を表示します。カウンターを正しく計算するために、開発者は `maxlength` プロパティも設定する必要があります。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "counterFormatter",
          "type": "((inputLength: number, maxLength: number) => string) | undefined",
          "complexType": {
            "original": "(inputLength: number, maxLength: number) => string",
            "resolved": "((inputLength: number, maxLength: number) => string) | undefined",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "カウンターのテキストをフォーマットするために使用されるコールバックです。デフォルトでは、カウンターのテキストは\"itemLength / maxLength\"に設定されています。",
          "docsTags": [],
          "values": [
            {
              "type": "((inputLength: number, maxLength: number) => string)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "debounce",
          "type": "number | undefined",
          "complexType": {
            "original": "number",
            "resolved": "number | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "debounce",
          "reflectToAttr": false,
          "docs": "キーを押すたびに `ionInput` イベントが発生するまでの待ち時間をミリ秒単位で設定します。",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "`true`の場合、ユーザはInputと対話することができません。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "enterkeyhint",
          "type": "\"done\" | \"enter\" | \"go\" | \"next\" | \"previous\" | \"search\" | \"send\" | undefined",
          "complexType": {
            "original": "'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'",
            "resolved": "\"done\" | \"enter\" | \"go\" | \"next\" | \"previous\" | \"search\" | \"send\" | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "enterkeyhint",
          "reflectToAttr": false,
          "docs": "どのエンターキーを表示するかのブラウザへのヒント。指定可能な値。enter\"`, `\"done\"`, `\"go\"`, `\"next\"`, `\"previous\"`, `\"search\"`, and `\"send\"`.",
          "docsTags": [],
          "values": [
            {
              "value": "done",
              "type": "string"
            },
            {
              "value": "enter",
              "type": "string"
            },
            {
              "value": "go",
              "type": "string"
            },
            {
              "value": "next",
              "type": "string"
            },
            {
              "value": "previous",
              "type": "string"
            },
            {
              "value": "search",
              "type": "string"
            },
            {
              "value": "send",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "errorText",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "error-text",
          "reflectToAttr": false,
          "docs": "Inputの下に配置され、エラーが検出されたときに表示されるテキストです。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "fill",
          "type": "\"outline\" | \"solid\" | undefined",
          "complexType": {
            "original": "'outline' | 'solid'",
            "resolved": "\"outline\" | \"solid\" | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "fill",
          "reflectToAttr": false,
          "docs": "アイテムの塗りつぶし。もし `\"solid\"` ならば、アイテムは背景を持つようになります。もし `\"outline\"` ならば、アイテムはボーダー付きの透明なものになります。md`モードでのみ使用可能です。",
          "docsTags": [],
          "values": [
            {
              "value": "outline",
              "type": "string"
            },
            {
              "value": "solid",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "helperText",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "helper-text",
          "reflectToAttr": false,
          "docs": "Inputの下に配置され、エラーが検出されなかった場合に表示されるテキストです。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "inputmode",
          "type": "\"decimal\" | \"email\" | \"none\" | \"numeric\" | \"search\" | \"tel\" | \"text\" | \"url\" | undefined",
          "complexType": {
            "original": "'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search'",
            "resolved": "\"decimal\" | \"email\" | \"none\" | \"numeric\" | \"search\" | \"tel\" | \"text\" | \"url\" | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "inputmode",
          "reflectToAttr": false,
          "docs": "どのキーボードを表示するかのブラウザへのヒント。指定可能な値。none\"`, `\"text\"`, `\"tel\"`, `\"url\"`, `\"email\"`, `\"numeric\"`, `\"decimal\"`, and `\"search\"`.",
          "docsTags": [],
          "values": [
            {
              "value": "decimal",
              "type": "string"
            },
            {
              "value": "email",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "numeric",
              "type": "string"
            },
            {
              "value": "search",
              "type": "string"
            },
            {
              "value": "tel",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            },
            {
              "value": "url",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "label",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "入力に関連付けられた可視ラベル。  プレーンテキストのラベルをレンダリングする必要がある場合に使用する。  両方が使用されている場合、`label` プロパティが `label` スロットよりも優先される。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "labelPlacement",
          "type": "\"end\" | \"fixed\" | \"floating\" | \"stacked\" | \"start\"",
          "complexType": {
            "original": "'start' | 'end' | 'floating' | 'stacked' | 'fixed'",
            "resolved": "\"end\" | \"fixed\" | \"floating\" | \"stacked\" | \"start\"",
            "references": {}
          },
          "mutable": false,
          "attr": "label-placement",
          "reflectToAttr": false,
          "docs": "入力に対してラベルを配置する位置。`\"start\"`：ラベルはLTRでは入力の左側に、RTLでは右側に表示されます。`\"end\"`：ラベルはLTRでは入力の右側、RTLでは左側に表示されます。\"floating\"`：`\"floating\"`：ラベルは、入力にフォーカスが当たっているときや、入力に値があるときは小さく表示され、入力の上に表示されます。それ以外の場合は、入力の上に表示されます。`\"スタック(stacked)\"`：入力がぼやけた状態や値がない場合でも、ラベルは小さく表示され、入力の上に表示されます。`\"fixed\"`：ラベルの幅が固定される以外は、`\"start\"`と同じ動作になります。長いテキストは省略記号（\"...\"）で切り捨てられます。",
          "docsTags": [],
          "default": "'start'",
          "values": [
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "fixed",
              "type": "string"
            },
            {
              "value": "floating",
              "type": "string"
            },
            {
              "value": "stacked",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "legacy",
          "type": "boolean | undefined",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "legacy",
          "reflectToAttr": false,
          "docs": "`legacy`プロパティを`true`に設定すると、レガシーフォームコントロールのマークアップを強制的に使用することができます。Ionicは、コンポーネントが`aria-label`属性または`label`プロパティを使用している場合にのみ、最新のフォームマークアップを選択します。そのため、`legacy`プロパティは、この自動オプトイン動作を回避したい場合にのみ、エスケープハッチとして使用する必要があります。なお、このプロパティはIonicの今後のメジャーリリースで削除され、すべてのフォームコンポーネントはモダンフォームマークアップを使用するようオプトインされる予定です。",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "max",
          "type": "number | string | undefined",
          "complexType": {
            "original": "string | number",
            "resolved": "number | string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "最大値で、その最小値（min属性）より小さくてはなりません。",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "maxlength",
          "type": "number | undefined",
          "complexType": {
            "original": "number",
            "resolved": "number | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "maxlength",
          "reflectToAttr": false,
          "docs": "type属性の値が `text`, `email`, `search`, `password`, `tel`, または `url` の場合、この属性はユーザーが入力できる最大文字数を指定します。",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "min",
          "type": "number | string | undefined",
          "complexType": {
            "original": "string | number",
            "resolved": "number | string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "min",
          "reflectToAttr": false,
          "docs": "最小値で、その最大値（max属性）より大きくてはなりません。",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "minlength",
          "type": "number | undefined",
          "complexType": {
            "original": "number",
            "resolved": "number | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "minlength",
          "reflectToAttr": false,
          "docs": "type属性の値が `text`, `email`, `search`, `password`, `tel`, または `url` の場合、この属性はユーザーが入力できる最小文字数を指定します。",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "multiple",
          "type": "boolean | undefined",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "multiple",
          "reflectToAttr": false,
          "docs": "`true`の場合、ユーザは複数の値を入力することができる。この属性は、type属性が `\"email\"` に設定されている場合に適用され、それ以外の場合は無視される。",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "フォームデータとともに送信されるコントロールの名前。",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pattern",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "pattern",
          "reflectToAttr": false,
          "docs": "値をチェックするための正規表現。パターンは、部分的なものだけでなく、値全体にマッチする必要があります。title 属性を使って、ユーザーを助けるためにパターンを説明します。この属性は、type属性の値が `\"text\"`, `\"search\"`, `\"tel\"`, `\"url\"`, `\"email\"`, `\"date\"`, または `\"password\"` であるときに適用され、それ以外のときは無視されます。type 属性が `\"date\"` の場合、`pattern` は `\"date\"` Inputタイプをネイティブにサポートしないブラウザでのみ使用されます。詳しくは https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date を参照してください。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Inputが値を持つ前に表示される指示テキスト。このプロパティは、`type`プロパティが `\"email\"`, `\"number\"`, `\"password\"`, `\"search\"`, `\"tel\"`, `\"text\"`, または `\"url\"` に設定されている場合にのみ適用され、それ以外は無視されます。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "`true`の場合、ユーザーは値を変更することができません。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "`true`の場合、ユーザーはフォームを送信する前に値を入力する必要があります。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "shape",
          "type": "\"round\" | undefined",
          "complexType": {
            "original": "'round'",
            "resolved": "\"round\" | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "shape",
          "reflectToAttr": false,
          "docs": "入力の形状を指定します。\"round\"の場合、境界線の半径が大きくなります。",
          "docsTags": [],
          "values": [
            {
              "value": "round",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "size",
          "type": "number | undefined",
          "complexType": {
            "original": "number",
            "resolved": "number | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "spellcheck",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "spellcheck",
          "reflectToAttr": false,
          "docs": "`true`の場合、その要素のスペルチェックと文法チェックが行われる。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "step",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "step",
          "reflectToAttr": false,
          "docs": "min属性、max属性と連携して、値を設定する際の増分を制限することができます。設定可能な値は以下の通りです。any\"`または正の浮動小数点数。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "type",
          "type": "\"date\" | \"datetime-local\" | \"email\" | \"month\" | \"number\" | \"password\" | \"search\" | \"tel\" | \"text\" | \"time\" | \"url\" | \"week\"",
          "complexType": {
            "original": "TextFieldTypes",
            "resolved": "\"date\" | \"datetime-local\" | \"email\" | \"month\" | \"number\" | \"password\" | \"search\" | \"tel\" | \"text\" | \"time\" | \"url\" | \"week\"",
            "references": {
              "TextFieldTypes": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::TextFieldTypes"
              }
            }
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "表示するコントロールの種類を指定します。デフォルトのタイプはテキストです。",
          "docsTags": [],
          "default": "'text'",
          "values": [
            {
              "value": "date",
              "type": "string"
            },
            {
              "value": "datetime-local",
              "type": "string"
            },
            {
              "value": "email",
              "type": "string"
            },
            {
              "value": "month",
              "type": "string"
            },
            {
              "value": "number",
              "type": "string"
            },
            {
              "value": "password",
              "type": "string"
            },
            {
              "value": "search",
              "type": "string"
            },
            {
              "value": "tel",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            },
            {
              "value": "time",
              "type": "string"
            },
            {
              "value": "url",
              "type": "string"
            },
            {
              "value": "week",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "null | number | string | undefined",
          "complexType": {
            "original": "string | number | null",
            "resolved": "null | number | string | undefined",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "入力された値です。",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "null"
            },
            {
              "type": "number"
            },
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getInputElement",
          "returns": {
            "type": "Promise<HTMLInputElement>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<HTMLInputElement>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLInputElement": {
                "location": "global",
                "id": "global::HTMLInputElement"
              }
            },
            "return": "Promise<HTMLInputElement>"
          },
          "signature": "getInputElement() => Promise<HTMLInputElement>",
          "parameters": [],
          "docs": "要素の内部で使用されているネイティブの `<input>` 要素を返します。",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "ion-input` のネイティブ `input` にフォーカスを設定する。グローバルな `input.focus()` の代わりにこのメソッドを使用する。  ページ入力時に入力にフォーカスを当てたい場合は、 `ionViewDidEnter()` ライフサイクルメソッド内で `setFocus()` を呼び出す必要がある。  オーバーレイが表示されたときに入力にフォーカスを当てたい開発者は、 `didPresent` が解決した後に `setFocus` を呼び出してください。",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "ionBlur",
          "detail": "FocusEvent",
          "bubbles": true,
          "complexType": {
            "original": "FocusEvent",
            "resolved": "FocusEvent",
            "references": {
              "FocusEvent": {
                "location": "global",
                "id": "global::FocusEvent"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Inputのフォーカスが外れたときに発行されます。",
          "docsTags": []
        },
        {
          "event": "ionChange",
          "detail": "InputChangeEventDetail",
          "bubbles": true,
          "complexType": {
            "original": "InputChangeEventDetail",
            "resolved": "InputChangeEventDetail",
            "references": {
              "InputChangeEventDetail": {
                "location": "import",
                "path": "./input-interface",
                "id": "src/components/input/input-interface.ts::InputChangeEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "ionChange` イベントは、ユーザが入力値を変更したときに発生する。ionInput` イベントとは異なり、`ionChange` イベントは変更がコミットされたときにのみ発生する。  ユーザが明示的に変更をコミットしたとき (例えば、`<ion-input type=\"date\">` の日付ピッカーから日付を選択したり、\"Enter\" キーを押したりしたときなど)。- 値が変更された後、要素がフォーカスを失ったとき: ユーザーのインタラクションがタイピングである要素の場合。",
          "docsTags": []
        },
        {
          "event": "ionFocus",
          "detail": "FocusEvent",
          "bubbles": true,
          "complexType": {
            "original": "FocusEvent",
            "resolved": "FocusEvent",
            "references": {
              "FocusEvent": {
                "location": "global",
                "id": "global::FocusEvent"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Inputにフォーカスが当たったときに発行されます。",
          "docsTags": []
        },
        {
          "event": "ionInput",
          "detail": "InputInputEventDetail",
          "bubbles": true,
          "complexType": {
            "original": "InputInputEventDetail",
            "resolved": "InputInputEventDetail",
            "references": {
              "InputInputEventDetail": {
                "location": "import",
                "path": "./input-interface",
                "id": "src/components/input/input-interface.ts::InputInputEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "ionInput` イベントは、ユーザが入力値を変更するたびに発生する。ionChange` イベントとは異なり、 `ionInput` イベントは入力値が変更されるたびに発生する。これは通常、ユーザが入力を行うたびに発生します。  テキスト入力を受け付ける要素(`type=text`, `type=tel`など)の場合、インターフェイスは[`InputEvent`](https://developer.mozilla.org/en-US/docs/Web/API/InputEvent)となります。その他の要素の場合、インターフェイスは[`Event`](https://developer.mozilla.org/en-US/docs/Web/API/Event)となります。編集時に入力がクリアされる場合、型は `null` となる。",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--background",
          "annotation": "prop",
          "docs": "Inputの背景"
        },
        {
          "name": "--border-color",
          "annotation": "prop",
          "docs": "ヘルパーテキスト、エラーテキスト、カウンターを使用する場合のInput下のボーダーの色"
        },
        {
          "name": "--border-radius",
          "annotation": "prop",
          "docs": "入力の半径。fill=\"outline \"を使う場合、半径が大きいと表示が不 均一になることがある。"
        },
        {
          "name": "--border-style",
          "annotation": "prop",
          "docs": "ヘルパーテキスト、エラーテキスト、カウンターを使用する場合の入力下のボーダーのスタイル"
        },
        {
          "name": "--border-width",
          "annotation": "prop",
          "docs": "ヘルパーテキスト、エラーテキスト、カウンターを使用する場合の入力下のボーダーの幅"
        },
        {
          "name": "--color",
          "annotation": "prop",
          "docs": "Inputのテキストの色"
        },
        {
          "name": "--highlight-color-focused",
          "annotation": "prop",
          "docs": "フォーカスされたときの入力のハイライトの色"
        },
        {
          "name": "--highlight-color-invalid",
          "annotation": "prop",
          "docs": "入力が無効な場合のハイライトの色"
        },
        {
          "name": "--highlight-color-valid",
          "annotation": "prop",
          "docs": "有効時の入力のハイライトの色"
        },
        {
          "name": "--padding-bottom",
          "annotation": "prop",
          "docs": "InputのBottom Padding"
        },
        {
          "name": "--padding-end",
          "annotation": "prop",
          "docs": "入力の方向が左から右の場合はRight Padding、右から左の場合はLeft Paddingとなります。"
        },
        {
          "name": "--padding-start",
          "annotation": "prop",
          "docs": "入力の方向が左から右の場合はLeft Padding、右から左の場合はRight Paddingとなります。"
        },
        {
          "name": "--padding-top",
          "annotation": "prop",
          "docs": "InputのTop Padding"
        },
        {
          "name": "--placeholder-color",
          "annotation": "prop",
          "docs": "InputのPlaceholderテキストの色"
        },
        {
          "name": "--placeholder-font-style",
          "annotation": "prop",
          "docs": "InputのPlaceholderテキストのFont Style"
        },
        {
          "name": "--placeholder-font-weight",
          "annotation": "prop",
          "docs": "InputのPlaceholderテキストのFont Weight"
        },
        {
          "name": "--placeholder-opacity",
          "annotation": "prop",
          "docs": "InputのPlaceholderテキストの不透明度"
        }
      ],
      "slots": [
        {
          "name": "label",
          "docs": "入力に関連付けるラベルテキスト。labelPlacement`プロパティを使用すると、入力に対してラベルを配置する位置を制御することができる。ラベルをカスタム HTML でレンダリングする必要がある場合に使用します。(EXPERIMENTAL)"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "ion-icon"
      ],
      "dependencyGraph": {
        "ion-input": [
          "ion-icon"
        ]
      }
    },
    {
      "filePath": "src/components/item-divider/item-divider.tsx",
      "encapsulation": "shadow",
      "tag": "ion-item-divider",
      "docs": "",
      "docsTags": [
        {
          "name": "virtualProp",
          "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
        },
        {
          "name": "slot",
          "text": "- Content is placed between the named slots if provided without a slot."
        },
        {
          "name": "slot",
          "text": "start - Content is placed to the left of the divider text in LTR, and to the right in RTL."
        },
        {
          "name": "slot",
          "text": "end - Content is placed to the right of the divider text in LTR, and to the left in RTL."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
          "complexType": {
            "original": "Color",
            "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
            "references": {
              "Color": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::Color"
              }
            }
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "アプリケーションのカラーパレットから使用する色を指定します。デフォルトのオプションは以下の通りです。 `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, と `\"dark\"` です．色に関する詳しい情報は [theming](/docs/theming/basics) を参照してください。",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "tertiary",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "type": "string & Record<never, never>"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "sticky",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "sticky",
          "reflectToAttr": false,
          "docs": "`true`に設定すると、アイテムディバイダーがビューポートの上部に到達しても、次の `ion-item-divider` がそれを置き換えるまで表示されたままになります。  この機能は `position:sticky` に依存しています: https://caniuse.com/#feat=css-sticky",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--background",
          "annotation": "prop",
          "docs": "アイテムディバイダーの背景"
        },
        {
          "name": "--color",
          "annotation": "prop",
          "docs": "アイテムディバイダーの色"
        },
        {
          "name": "--inner-padding-bottom",
          "annotation": "prop",
          "docs": "アイテムディバイダーのBottom Inner Padding"
        },
        {
          "name": "--inner-padding-end",
          "annotation": "prop",
          "docs": "アイテムディバイダーのEnd Inner Padding"
        },
        {
          "name": "--inner-padding-start",
          "annotation": "prop",
          "docs": "アイテムディバイダーのStart Inner Padding"
        },
        {
          "name": "--inner-padding-top",
          "annotation": "prop",
          "docs": "アイテムディバイダーのTop Inner Padding"
        },
        {
          "name": "--padding-bottom",
          "annotation": "prop",
          "docs": "アイテムディバイダーのBottom Padding"
        },
        {
          "name": "--padding-end",
          "annotation": "prop",
          "docs": "アイテムディバイダーの方向が左から右の場合はRight Padding、右から左の場合はLeft Padding"
        },
        {
          "name": "--padding-start",
          "annotation": "prop",
          "docs": "アイテムディバイダーの方向が左から右の場合はLeft Padding、右から左の場合はRight Paddingとなります。"
        },
        {
          "name": "--padding-top",
          "annotation": "prop",
          "docs": "アイテムディバイダーのTop Padding"
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "slotがない状態で提供される場合、コンテンツは名前付きslotの間に配置されます。"
        },
        {
          "name": "end",
          "docs": "コンテンツは、LTRでは仕切り文字の右側に、RTLでは左側に配置されます。"
        },
        {
          "name": "start",
          "docs": "コンテンツは、LTRでは仕切り文字の左側に、RTLでは右側に配置されます。"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/item-group/item-group.tsx",
      "encapsulation": "none",
      "tag": "ion-item-group",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/item-option/item-option.tsx",
      "encapsulation": "shadow",
      "tag": "ion-item-option",
      "docs": "",
      "docsTags": [
        {
          "name": "virtualProp",
          "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
        },
        {
          "name": "slot",
          "text": "- Content is placed between the named slots if provided without a slot."
        },
        {
          "name": "slot",
          "text": "start - Content is placed to the left of the option text in LTR, and to the right in RTL."
        },
        {
          "name": "slot",
          "text": "top - Content is placed above the option text."
        },
        {
          "name": "slot",
          "text": "icon-only - Should be used on an icon in an option that has no text."
        },
        {
          "name": "slot",
          "text": "bottom - Content is placed below the option text."
        },
        {
          "name": "slot",
          "text": "end - Content is placed to the right of the option text in LTR, and to the left in RTL."
        },
        {
          "name": "part",
          "text": "native - The native HTML button or anchor element that wraps all child elements."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
          "complexType": {
            "original": "Color",
            "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
            "references": {
              "Color": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::Color"
              }
            }
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "アプリケーションのカラーパレットから使用する色を指定します。デフォルトのオプションは以下の通りです。 `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, と `\"dark\"` です．色に関する詳しい情報は [theming](/docs/theming/basics) を参照してください。",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "tertiary",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "type": "string & Record<never, never>"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "`true`の場合、ユーザーはアイテムオプションと対話することができません。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "download",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "download",
          "reflectToAttr": false,
          "docs": "この属性は、ブラウザが URL に移動する代わりに URL をダウンロードするように指示し、ユーザはローカルファイルとして保存するように促されます。この属性に値がある場合、保存のプロンプトであらかじめ入力されたファイル名として使用されます（ユーザーはファイル名を変更することができます）。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "expandable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "expandable",
          "reflectToAttr": false,
          "docs": "`true`の場合、オプションは利用可能な幅を占めるように展開し、他のオプションをカバーします。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "href",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "ハイパーリンクが指し示す URL または URL フラグメントを格納します。このプロパティが設定されている場合、アンカータグがレンダリングされます。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "rel",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "rel",
          "reflectToAttr": false,
          "docs": "ターゲットオブジェクトとリンクオブジェクトの関係を指定します。値は、スペースで区切られた[リンクタイプ](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types)のリストです。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "target",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "リンク先のURLを表示する場所を指定します。href`を指定した場合のみ適用される。特別なキーワードがあります。_blank\"`, `\"_self\"`, `\"_parent\"`, `\"_top\"`.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"button\" | \"reset\" | \"submit\"",
          "complexType": {
            "original": "'submit' | 'reset' | 'button'",
            "resolved": "\"button\" | \"reset\" | \"submit\"",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "ボタンの種類です。",
          "docsTags": [],
          "default": "'button'",
          "values": [
            {
              "value": "button",
              "type": "string"
            },
            {
              "value": "reset",
              "type": "string"
            },
            {
              "value": "submit",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--background",
          "annotation": "prop",
          "docs": "アイテムオプションの背景"
        },
        {
          "name": "--color",
          "annotation": "prop",
          "docs": "アイテムオプションのカラー"
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "slotがない状態で提供される場合、コンテンツは名前付きslotの間に配置されます。"
        },
        {
          "name": "bottom",
          "docs": "コンテンツは、オプションテキストの下に配置されます。"
        },
        {
          "name": "end",
          "docs": "コンテンツは、LTRではオプションテキストの右側に、RTLでは左側に配置されます。"
        },
        {
          "name": "icon-only",
          "docs": "テキストを持たないオプションのアイコンに使用されるべきです。"
        },
        {
          "name": "start",
          "docs": "コンテンツは、LTRではオプションテキストの左側に、RTLでは右側に配置されます。"
        },
        {
          "name": "top",
          "docs": "オプションテキストの上にコンテンツが配置されます。"
        }
      ],
      "parts": [
        {
          "name": "native",
          "docs": "すべての子要素をラップするネイティブHTMLのボタンまたはアンカー要素です。"
        }
      ],
      "dependents": [],
      "dependencies": [
        "ion-ripple-effect"
      ],
      "dependencyGraph": {
        "ion-item-option": [
          "ion-ripple-effect"
        ]
      }
    },
    {
      "filePath": "src/components/item-options/item-options.tsx",
      "encapsulation": "none",
      "tag": "ion-item-options",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "side",
          "type": "\"end\" | \"start\"",
          "complexType": {
            "original": "Side",
            "resolved": "\"end\" | \"start\"",
            "references": {
              "Side": {
                "location": "import",
                "path": "../menu/menu-interface",
                "id": "src/components/menu/menu-interface.ts::Side"
              }
            }
          },
          "mutable": false,
          "attr": "side",
          "reflectToAttr": false,
          "docs": "オプションボタンを配置する側を指定します。指定可能な値。start\"` と `\"end\"`.複数の `ion-item-options` がある場合は、それぞれにサイドを指定する必要があります。",
          "docsTags": [],
          "default": "'end'",
          "values": [
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "ionSwipe",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "アイテムが完全にスワイプされたときに発行されます。",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/item-sliding/item-sliding.tsx",
      "encapsulation": "none",
      "tag": "ion-item-sliding",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "`true`の場合、ユーザーはスライドアイテムを操作することができません。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "close",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "close() => Promise<void>",
          "parameters": [],
          "docs": "スライドしているアイテムを閉じる。アイテムは[リスト](./list)からも閉じることができます。",
          "docsTags": []
        },
        {
          "name": "closeOpened",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<boolean>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "closeOpened() => Promise<boolean>",
          "parameters": [],
          "docs": "リスト内のスライドアイテムをすべて閉じます。アイテムは、[リスト](./list)からも閉じることができます。",
          "docsTags": []
        },
        {
          "name": "getOpenAmount",
          "returns": {
            "type": "Promise<number>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<number>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<number>"
          },
          "signature": "getOpenAmount() => Promise<number>",
          "parameters": [],
          "docs": "アイテムが開いている量をピクセル単位で取得します。",
          "docsTags": []
        },
        {
          "name": "getSlidingRatio",
          "returns": {
            "type": "Promise<number>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<number>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<number>"
          },
          "signature": "getSlidingRatio() => Promise<number>",
          "parameters": [],
          "docs": "オプションの幅と比較した、アイテムのオープン量の比率を取得します。返された数値が正の場合、右側のオプションが開いていることになります。返された数値が負の場合、左側のオプションが開いています。数値の絶対値が1より大きい場合、その項目は選択肢の幅より多く開いていることになります。",
          "docsTags": []
        },
        {
          "name": "open",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(side: Side | undefined) => Promise<void>",
            "parameters": [
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "side The side of the options to open. If a side is not provided, it will open the first set of options it finds within the item."
                  }
                ],
                "text": "The side of the options to open. If a side is not provided, it will open the first set of options it finds within the item."
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "Side": {
                "location": "import",
                "path": "../menu/menu-interface",
                "id": "src/components/menu/menu-interface.ts::Side"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "open(side: Side | undefined) => Promise<void>",
          "parameters": [],
          "docs": "スライド式の項目を開く。",
          "docsTags": [
            {
              "name": "param",
              "text": "side The side of the options to open. If a side is not provided, it will open the first set of options it finds within the item."
            }
          ]
        }
      ],
      "events": [
        {
          "event": "ionDrag",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "スライド位置が変化したときに発行されます。",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/item/item.tsx",
      "encapsulation": "shadow",
      "tag": "ion-item",
      "docs": "",
      "docsTags": [
        {
          "name": "virtualProp",
          "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
        },
        {
          "name": "slot",
          "text": "- Content is placed between the named slots if provided without a slot."
        },
        {
          "name": "slot",
          "text": "start - Content is placed to the left of the item text in LTR, and to the right in RTL."
        },
        {
          "name": "slot",
          "text": "end - Content is placed to the right of the item text in LTR, and to the left in RTL."
        },
        {
          "name": "slot",
          "text": "helper - Content is placed under the item and displayed when no error is detected. **DEPRECATED** Use the \"helperText\" property on ion-input or ion-textarea instead."
        },
        {
          "name": "slot",
          "text": "error - Content is placed under the item and displayed when an error is detected. **DEPRECATED** Use the \"errorText\" property on ion-input or ion-textarea instead."
        },
        {
          "name": "part",
          "text": "native - The native HTML button, anchor or div element that wraps all child elements."
        },
        {
          "name": "part",
          "text": "detail-icon - The chevron icon for the item. Only applies when `detail=\"true\"`."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "button",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "button",
          "reflectToAttr": false,
          "docs": "`true`の場合、ボタンタグがレンダリングされ、アイテムはタップ可能になる。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
          "complexType": {
            "original": "Color",
            "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
            "references": {
              "Color": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::Color"
              }
            }
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "アプリケーションのカラーパレットから使用する色を指定します。デフォルトのオプションは以下の通りです。 `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, と `\"dark\"` です．色に関する詳しい情報は [theming](/docs/theming/basics) を参照してください。",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "tertiary",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "type": "string & Record<never, never>"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "counter",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "counter",
          "reflectToAttr": false,
          "docs": "`true`の場合、文字カウンタが使用された文字の比率と総文字数制限を表示します。内側の `ion-input` または `ion-textarea` に `maxlength` プロパティが設定されている場合にのみ適用されます。",
          "docsTags": [
            {
              "name": "deprecated",
              "text": "Use the `counter` property on `ion-input` or `ion-textarea` instead."
            }
          ],
          "default": "false",
          "deprecation": "Use the `counter` property on `ion-input` or `ion-textarea` instead.",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "counterFormatter",
          "type": "((inputLength: number, maxLength: number) => string) | undefined",
          "complexType": {
            "original": "CounterFormatter",
            "resolved": "((inputLength: number, maxLength: number) => string) | undefined",
            "references": {
              "CounterFormatter": {
                "location": "import",
                "path": "./item-interface",
                "id": "src/components/item/item-interface.ts::CounterFormatter"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "カウンターのテキストをフォーマットするために使用されるコールバックです。デフォルトでは、カウンターのテキストは\"itemLength / maxLength\"に設定されています。",
          "docsTags": [
            {
              "name": "deprecated",
              "text": "Use the `counterFormatter` property on `ion-input` or `ion-textarea` instead."
            }
          ],
          "deprecation": "Use the `counterFormatter` property on `ion-input` or `ion-textarea` instead.",
          "values": [
            {
              "type": "((inputLength: number, maxLength: number) => string)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "detail",
          "type": "boolean | undefined",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "detail",
          "reflectToAttr": false,
          "docs": "`true`の場合、アイテムに詳細矢印が表示されます。デフォルトは `false` で、`mode` が `ios` で `href` または `button` プロパティが存在する場合のみです。",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "detailIcon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "detail-icon",
          "reflectToAttr": false,
          "docs": "`detail` が `true` に設定されているときに使用するアイコンです。",
          "docsTags": [],
          "default": "chevronForward",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "`true`の場合、ユーザはそのアイテムと対話することができません。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "download",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "download",
          "reflectToAttr": false,
          "docs": "この属性は、ブラウザが URL に移動する代わりに URL をダウンロードするように指示し、ユーザはローカルファイルとして保存するように促されます。この属性に値がある場合、保存のプロンプトであらかじめ入力されたファイル名として使用されます（ユーザーはファイル名を変更することができます）。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "fill",
          "type": "\"outline\" | \"solid\" | undefined",
          "complexType": {
            "original": "'outline' | 'solid'",
            "resolved": "\"outline\" | \"solid\" | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "fill",
          "reflectToAttr": false,
          "docs": "アイテムの塗りつぶし。もし `\"solid\"` ならば、アイテムは背景を持つようになります。もし `\"outline\"` ならば、アイテムはボーダー付きの透明なものになります。md`モードでのみ使用可能です。",
          "docsTags": [
            {
              "name": "deprecated",
              "text": "Use the `fill` property on `ion-input` or `ion-textarea` instead."
            }
          ],
          "deprecation": "Use the `fill` property on `ion-input` or `ion-textarea` instead.",
          "values": [
            {
              "value": "outline",
              "type": "string"
            },
            {
              "value": "solid",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "href",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "ハイパーリンクが指し示す URL または URL フラグメントを格納します。このプロパティが設定されている場合、アンカータグがレンダリングされます。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "lines",
          "type": "\"full\" | \"inset\" | \"none\" | undefined",
          "complexType": {
            "original": "'full' | 'inset' | 'none'",
            "resolved": "\"full\" | \"inset\" | \"none\" | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "lines",
          "reflectToAttr": false,
          "docs": "アイテムに表示される下枠の表示方法。",
          "docsTags": [],
          "values": [
            {
              "value": "full",
              "type": "string"
            },
            {
              "value": "inset",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "rel",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "rel",
          "reflectToAttr": false,
          "docs": "ターゲットオブジェクトとリンクオブジェクトの関係を指定します。値は、スペースで区切られた[リンクタイプ](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types)のリストです。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "routerAnimation",
          "type": "((baseEl: any, opts?: any) => Animation) | undefined",
          "complexType": {
            "original": "AnimationBuilder | undefined",
            "resolved": "((baseEl: any, opts?: any) => Animation) | undefined",
            "references": {
              "AnimationBuilder": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::AnimationBuilder"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "ルータを使用する場合、`href`を使用して別のページに移動する際の遷移アニメーションを指定します。",
          "docsTags": [],
          "values": [
            {
              "type": "((baseEl: any, opts?: any) => Animation)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "routerDirection",
          "type": "\"back\" | \"forward\" | \"root\"",
          "complexType": {
            "original": "RouterDirection",
            "resolved": "\"back\" | \"forward\" | \"root\"",
            "references": {
              "RouterDirection": {
                "location": "import",
                "path": "../router/utils/interface",
                "id": "src/components/router/utils/interface.ts::RouterDirection"
              }
            }
          },
          "mutable": false,
          "attr": "router-direction",
          "reflectToAttr": false,
          "docs": "ルータを使用する場合、`href`を使用して他のページに移動する際の遷移方向を指定します。",
          "docsTags": [],
          "default": "'forward'",
          "values": [
            {
              "value": "back",
              "type": "string"
            },
            {
              "value": "forward",
              "type": "string"
            },
            {
              "value": "root",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "shape",
          "type": "\"round\" | undefined",
          "complexType": {
            "original": "'round'",
            "resolved": "\"round\" | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "shape",
          "reflectToAttr": false,
          "docs": "アイテムの形状を指定します。円形」の場合、境界線の半径が大きくなります。",
          "docsTags": [],
          "values": [
            {
              "value": "round",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "target",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "リンク先のURLを表示する場所を指定します。href`を指定した場合のみ適用される。特別なキーワードがあります。_blank\"`, `\"_self\"`, `\"_parent\"`, `\"_top\"`.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"button\" | \"reset\" | \"submit\"",
          "complexType": {
            "original": "'submit' | 'reset' | 'button'",
            "resolved": "\"button\" | \"reset\" | \"submit\"",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "ボタンの種類。onclick`または`button`プロパティが存在する場合にのみ使用される。",
          "docsTags": [],
          "default": "'button'",
          "values": [
            {
              "value": "button",
              "type": "string"
            },
            {
              "value": "reset",
              "type": "string"
            },
            {
              "value": "submit",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "ionInput",
          "capture": false,
          "passive": false
        },
        {
          "event": "ionColor",
          "capture": false,
          "passive": false
        },
        {
          "event": "ionStyle",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [
        {
          "name": "--background",
          "annotation": "prop",
          "docs": "アイテムの背景"
        },
        {
          "name": "--background-activated",
          "annotation": "prop",
          "docs": "押されたときのアイテムの背景。注意：これを設定すると、Material Designの波紋に干渉します。"
        },
        {
          "name": "--background-activated-opacity",
          "annotation": "prop",
          "docs": "押されたときのアイテム背景の不透明度"
        },
        {
          "name": "--background-focused",
          "annotation": "prop",
          "docs": "タブキーでフォーカスしたときのアイテムの背景"
        },
        {
          "name": "--background-focused-opacity",
          "annotation": "prop",
          "docs": "タブキーでフォーカスしたときのアイテムの背景の不透明度"
        },
        {
          "name": "--background-hover",
          "annotation": "prop",
          "docs": "ホバー時のアイテムの背景"
        },
        {
          "name": "--background-hover-opacity",
          "annotation": "prop",
          "docs": "ホバー時のアイテムの背景の不透明度"
        },
        {
          "name": "--border-color",
          "annotation": "prop",
          "docs": "アイテムの縁取りの色"
        },
        {
          "name": "--border-radius",
          "annotation": "prop",
          "docs": "アイテムの境界線の半径"
        },
        {
          "name": "--border-style",
          "annotation": "prop",
          "docs": "アイテムの枠のスタイル"
        },
        {
          "name": "--border-width",
          "annotation": "prop",
          "docs": "アイテムの枠の幅"
        },
        {
          "name": "--color",
          "annotation": "prop",
          "docs": "アイテムのカラー"
        },
        {
          "name": "--color-activated",
          "annotation": "prop",
          "docs": "押したときのアイテムの色"
        },
        {
          "name": "--color-focused",
          "annotation": "prop",
          "docs": "タブキーでフォーカスしたときのアイテムの色"
        },
        {
          "name": "--color-hover",
          "annotation": "prop",
          "docs": "ホバー時のアイテムの色"
        },
        {
          "name": "--detail-icon-color",
          "annotation": "prop",
          "docs": "アイテム詳細アイコンの色"
        },
        {
          "name": "--detail-icon-font-size",
          "annotation": "prop",
          "docs": "アイテム詳細アイコンのFont Size"
        },
        {
          "name": "--detail-icon-opacity",
          "annotation": "prop",
          "docs": "アイテム詳細アイコンの不透明度"
        },
        {
          "name": "--highlight-color-focused",
          "annotation": "prop",
          "docs": "フォーカスされたときのアイテムのハイライトの色。レガシーなフォーム構文を使用している input と textareas にのみ適用されます。廃止予定：モダンなフォーム構文を使用している場合、ハイライトは `ion-input` または `ion-textarea` にスタイル設定することができる。"
        },
        {
          "name": "--highlight-color-invalid",
          "annotation": "prop",
          "docs": "無効な場合の項目のハイライトの色。レガシーなフォーム構文を使用している input と textareas にのみ適用されます。廃止予定：モダンなフォーム構文を使用している場合、ハイライトは `ion-input` または `ion-textarea` にスタイル設定することができる。"
        },
        {
          "name": "--highlight-color-valid",
          "annotation": "prop",
          "docs": "有効な場合の項目のハイライトの色。レガシーなフォーム構文を使用している input と textareas にのみ適用されます。廃止予定：モダンなフォーム構文を使用している場合、ハイライトは `ion-input` または `ion-textarea` でスタイリングできる。"
        },
        {
          "name": "--highlight-height",
          "annotation": "prop",
          "docs": "アイテムのハイライトの高さ。レガシーなフォーム構文を使用している input と textareas にのみ適用されます。廃止予定：モダンなフォーム構文を使用している場合、ハイライトは `ion-input` または `ion-textarea` にスタイル設定することができる。"
        },
        {
          "name": "--inner-border-width",
          "annotation": "prop",
          "docs": "アイテム内枠の幅"
        },
        {
          "name": "--inner-box-shadow",
          "annotation": "prop",
          "docs": "アイテム内側のボックスシャドウ"
        },
        {
          "name": "--inner-padding-bottom",
          "annotation": "prop",
          "docs": "アイテム内側のBottom Padding"
        },
        {
          "name": "--inner-padding-end",
          "annotation": "prop",
          "docs": "方向が左から右の場合はRight Padding、方向がアイテムの内側の右から左の場合はLeft Paddingとなります。"
        },
        {
          "name": "--inner-padding-start",
          "annotation": "prop",
          "docs": "方向が左から右の場合はLeft Padding、方向が右から左の場合はRight Paddingがアイテム内側に入る"
        },
        {
          "name": "--inner-padding-top",
          "annotation": "prop",
          "docs": "アイテム内側のTop Padding"
        },
        {
          "name": "--min-height",
          "annotation": "prop",
          "docs": "アイテムの最小高さ"
        },
        {
          "name": "--padding-bottom",
          "annotation": "prop",
          "docs": "アイテムのBottom Padding"
        },
        {
          "name": "--padding-end",
          "annotation": "prop",
          "docs": "方向が左から右の場合はRight Padding、方向が右から左の場合はLeft Paddingで項目を囲む"
        },
        {
          "name": "--padding-start",
          "annotation": "prop",
          "docs": "方向が左から右の場合はLeft Padding、方向が右から左の場合はRight Paddingで項目を囲む"
        },
        {
          "name": "--padding-top",
          "annotation": "prop",
          "docs": "アイテムのTop Padding"
        },
        {
          "name": "--ripple-color",
          "annotation": "prop",
          "docs": "アイテム波及効果の色"
        },
        {
          "name": "--transition",
          "annotation": "prop",
          "docs": "アイテムの変遷"
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "slotがない状態で提供される場合、コンテンツは名前付きslotの間に配置されます。"
        },
        {
          "name": "end",
          "docs": "コンテンツは、LTRではアイテムテキストの右側に、RTLでは左側に配置されます。"
        },
        {
          "name": "error",
          "docs": "コンテンツはアイテムの下に配置され、エラーが検出されたときに表示されます。**DEPRECATED** 代わりに ion-input または ion-textarea の \"errorText\" プロパティを使用してください。"
        },
        {
          "name": "helper",
          "docs": "コンテンツはアイテムの下に配置され、エラーが検出されない場合に表示されます。**DEPRECATED** 代わりに ion-input または ion-textarea の \"helperText\" プロパティを使用してください。"
        },
        {
          "name": "start",
          "docs": "コンテンツは、LTRではアイテムテキストの左側に、RTLでは右側に配置されます。"
        }
      ],
      "parts": [
        {
          "name": "detail-icon",
          "docs": "アイテムのシェブロンアイコンを表示します。detail=\"true\"`のときのみ適用されます。"
        },
        {
          "name": "native",
          "docs": "すべての子要素をラップするネイティブHTMLのボタン、アンカー、またはdiv要素です。"
        }
      ],
      "dependents": [
        "ion-datetime",
        "ion-select-popover"
      ],
      "dependencies": [
        "ion-icon",
        "ion-ripple-effect",
        "ion-note"
      ],
      "dependencyGraph": {
        "ion-item": [
          "ion-icon",
          "ion-ripple-effect",
          "ion-note"
        ],
        "ion-datetime": [
          "ion-item"
        ],
        "ion-select-popover": [
          "ion-item"
        ]
      }
    },
    {
      "filePath": "src/components/label/label.tsx",
      "encapsulation": "scoped",
      "tag": "ion-label",
      "docs": "",
      "docsTags": [
        {
          "name": "virtualProp",
          "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
          "complexType": {
            "original": "Color",
            "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
            "references": {
              "Color": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::Color"
              }
            }
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "アプリケーションのカラーパレットから使用する色を指定します。デフォルトのオプションは以下の通りです。 `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, と `\"dark\"` です．色に関する詳しい情報は [theming](/docs/theming/basics) を参照してください。",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "tertiary",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "type": "string & Record<never, never>"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "position",
          "type": "\"fixed\" | \"floating\" | \"stacked\" | undefined",
          "complexType": {
            "original": "'fixed' | 'stacked' | 'floating'",
            "resolved": "\"fixed\" | \"floating\" | \"stacked\" | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "position",
          "reflectToAttr": false,
          "docs": "位置は、ラベルがアイテム内のどこで、どのように動作するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "fixed",
              "type": "string"
            },
            {
              "value": "floating",
              "type": "string"
            },
            {
              "value": "stacked",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--color",
          "annotation": "prop",
          "docs": "ラベルの色。このプロパティは `ion-label` を `ion-item` の内部で使用する場合にのみ利用可能です。"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [
        "ion-datetime",
        "ion-select-popover"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "ion-datetime": [
          "ion-label"
        ],
        "ion-select-popover": [
          "ion-label"
        ]
      }
    },
    {
      "filePath": "src/components/list-header/list-header.tsx",
      "encapsulation": "shadow",
      "tag": "ion-list-header",
      "docs": "",
      "docsTags": [
        {
          "name": "virtualProp",
          "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
          "complexType": {
            "original": "Color",
            "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
            "references": {
              "Color": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::Color"
              }
            }
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "アプリケーションのカラーパレットから使用する色を指定します。デフォルトのオプションは以下の通りです。 `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, と `\"dark\"` です．色に関する詳しい情報は [theming](/docs/theming/basics) を参照してください。",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "tertiary",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "type": "string & Record<never, never>"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "lines",
          "type": "\"full\" | \"inset\" | \"none\" | undefined",
          "complexType": {
            "original": "'full' | 'inset' | 'none'",
            "resolved": "\"full\" | \"inset\" | \"none\" | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "lines",
          "reflectToAttr": false,
          "docs": "リストヘッダーの下辺のボーダーをどのように表示するか。",
          "docsTags": [],
          "values": [
            {
              "value": "full",
              "type": "string"
            },
            {
              "value": "inset",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--background",
          "annotation": "prop",
          "docs": "リストヘッダーの背景"
        },
        {
          "name": "--border-color",
          "annotation": "prop",
          "docs": "リストヘッダーボーダーの色"
        },
        {
          "name": "--border-style",
          "annotation": "prop",
          "docs": "リストヘッダーボーダーのスタイル"
        },
        {
          "name": "--border-width",
          "annotation": "prop",
          "docs": "リストヘッダー枠の幅"
        },
        {
          "name": "--color",
          "annotation": "prop",
          "docs": "リストヘッダーテキストの色"
        },
        {
          "name": "--inner-border-width",
          "annotation": "prop",
          "docs": "リストヘッダー内枠の幅"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [
        "ion-select-popover"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "ion-select-popover": [
          "ion-list-header"
        ]
      }
    },
    {
      "filePath": "src/components/list/list.tsx",
      "encapsulation": "none",
      "tag": "ion-list",
      "docs": "",
      "docsTags": [
        {
          "name": "virtualProp",
          "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "inset",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "inset",
          "reflectToAttr": false,
          "docs": "`true`の場合、リストの周囲に余白ができ、角が丸くなる。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "lines",
          "type": "\"full\" | \"inset\" | \"none\" | undefined",
          "complexType": {
            "original": "'full' | 'inset' | 'none'",
            "resolved": "\"full\" | \"inset\" | \"none\" | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "lines",
          "reflectToAttr": false,
          "docs": "すべてのアイテムで、下のボーダーをどのように表示させるか。",
          "docsTags": [],
          "values": [
            {
              "value": "full",
              "type": "string"
            },
            {
              "value": "inset",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "closeSlidingItems",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<boolean>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "closeSlidingItems() => Promise<boolean>",
          "parameters": [],
          "docs": "リスト内で `ion-item-sliding` が使用されている場合、このメソッドは開いているスライドアイテムを閉じる。  実際に `ion-item-sliding` が閉じられた場合は `true` を返します。",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "ion-select-popover"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "ion-select-popover": [
          "ion-list"
        ]
      }
    },
    {
      "filePath": "src/components/loading/loading.tsx",
      "encapsulation": "scoped",
      "tag": "ion-loading",
      "docs": "",
      "docsTags": [
        {
          "name": "virtualProp",
          "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "animated",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "animated",
          "reflectToAttr": false,
          "docs": "`true`の場合、ロードインジケータをアニメーションで表示します。",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "backdropDismiss",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "backdrop-dismiss",
          "reflectToAttr": false,
          "docs": "`true`の場合、バックドロップがクリックされたときにローディングインジケータが解除される。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "cssClass",
          "type": "string | string[] | undefined",
          "complexType": {
            "original": "string | string[]",
            "resolved": "string | string[] | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "css-class",
          "reflectToAttr": false,
          "docs": "カスタムCSSに適用する追加のクラス。複数のクラスを指定する場合は、スペースで区切る必要があります。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "string[]"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "duration",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "duration",
          "reflectToAttr": false,
          "docs": "ローディングインジケータを解除するまでの待ち時間（ミリ秒）。",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "enterAnimation",
          "type": "((baseEl: any, opts?: any) => Animation) | undefined",
          "complexType": {
            "original": "AnimationBuilder",
            "resolved": "((baseEl: any, opts?: any) => Animation) | undefined",
            "references": {
              "AnimationBuilder": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::AnimationBuilder"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "ローディングインジケータが表示されたときに使用するアニメーションです。",
          "docsTags": [],
          "values": [
            {
              "type": "((baseEl: any, opts?: any) => Animation)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "htmlAttributes",
          "type": "undefined | { [key: string]: any; }",
          "complexType": {
            "original": "{ [key: string]: any }",
            "resolved": "undefined | { [key: string]: any; }",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "ローダーに渡す追加属性。",
          "docsTags": [],
          "values": [
            {
              "type": "undefined"
            },
            {
              "type": "{ [key: string]: any; }"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "isOpen",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "is-open",
          "reflectToAttr": false,
          "docs": "`true`の場合、ローディングインジケータは開きます。`false`の場合、ローディングインジケータは閉じます。より細かく表示を制御したい場合に使用します。そうでない場合は、loadingController または `trigger` プロパティを使用してください。注意: ローディングインジケータが終了しても、`isOpen`は自動的に `false`に戻されません。あなたのコードでそれを行う必要があります。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "keyboardClose",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "keyboard-close",
          "reflectToAttr": false,
          "docs": "`true`の場合、オーバーレイが表示されたときにキーボードが自動的に解除されます。",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "leaveAnimation",
          "type": "((baseEl: any, opts?: any) => Animation) | undefined",
          "complexType": {
            "original": "AnimationBuilder",
            "resolved": "((baseEl: any, opts?: any) => Animation) | undefined",
            "references": {
              "AnimationBuilder": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::AnimationBuilder"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "ローディングインジケータが解除されたときに使用するアニメーションです。",
          "docsTags": [],
          "values": [
            {
              "type": "((baseEl: any, opts?: any) => Animation)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "message",
          "type": "IonicSafeString | string | undefined",
          "complexType": {
            "original": "string | IonicSafeString",
            "resolved": "IonicSafeString | string | undefined",
            "references": {
              "IonicSafeString": {
                "location": "import",
                "path": "../../utils/sanitization",
                "id": "src/utils/sanitization/index.ts::IonicSafeString"
              }
            }
          },
          "mutable": false,
          "attr": "message",
          "reflectToAttr": false,
          "docs": "ローディングインジケータに表示するテキストコンテンツを任意で指定します。  このプロパティは、文字列としてカスタムHTMLを受け入れます。コンテンツはデフォルトでプレーンテキストとしてパースされます。カスタムHTMLを使用するには、Ionicの設定で `innerHTMLTemplatesEnabled` を `true` に設定する必要があります。",
          "docsTags": [],
          "values": [
            {
              "type": "IonicSafeString"
            },
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "showBackdrop",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-backdrop",
          "reflectToAttr": false,
          "docs": "`true`の場合、ロードインジケータの後ろにバックドロップが表示されます。",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "spinner",
          "type": "\"bubbles\" | \"circles\" | \"circular\" | \"crescent\" | \"dots\" | \"lines\" | \"lines-sharp\" | \"lines-sharp-small\" | \"lines-small\" | null | undefined",
          "complexType": {
            "original": "SpinnerTypes | null",
            "resolved": "\"bubbles\" | \"circles\" | \"circular\" | \"crescent\" | \"dots\" | \"lines\" | \"lines-sharp\" | \"lines-sharp-small\" | \"lines-small\" | null | undefined",
            "references": {
              "SpinnerTypes": {
                "location": "import",
                "path": "../spinner/spinner-configs",
                "id": "src/components/spinner/spinner-configs.ts::SpinnerTypes"
              }
            }
          },
          "mutable": true,
          "attr": "spinner",
          "reflectToAttr": false,
          "docs": "表示するスピナーの名前。",
          "docsTags": [],
          "values": [
            {
              "value": "bubbles",
              "type": "string"
            },
            {
              "value": "circles",
              "type": "string"
            },
            {
              "value": "circular",
              "type": "string"
            },
            {
              "value": "crescent",
              "type": "string"
            },
            {
              "value": "dots",
              "type": "string"
            },
            {
              "value": "lines",
              "type": "string"
            },
            {
              "value": "lines-sharp",
              "type": "string"
            },
            {
              "value": "lines-sharp-small",
              "type": "string"
            },
            {
              "value": "lines-small",
              "type": "string"
            },
            {
              "type": "null"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "translucent",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "translucent",
          "reflectToAttr": false,
          "docs": "`true`の場合、ロードインジケータは半透明になります。modeが `\"ios\"` で、デバイスが [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility) をサポートしている場合にのみ適用されます。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "trigger",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "trigger",
          "reflectToAttr": false,
          "docs": "クリックするとローディングインジケータが開くトリガー要素に対応するIDです。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "dismiss",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "complexType": {
            "signature": "(data?: any, role?: string) => Promise<boolean>",
            "parameters": [
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "data Any data to emit in the dismiss events."
                  }
                ],
                "text": "Any data to emit in the dismiss events."
              },
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "role The role of the element that is dismissing the loading.\nThis can be useful in a button handler for determining which button was\nclicked to dismiss the loading.\nSome examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`."
                  }
                ],
                "text": "The role of the element that is dismissing the loading.\nThis can be useful in a button handler for determining which button was\nclicked to dismiss the loading.\nSome examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`."
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "dismiss(data?: any, role?: string) => Promise<boolean>",
          "parameters": [],
          "docs": "ローディングオーバーレイが提示された後、それを解除します。",
          "docsTags": [
            {
              "name": "param",
              "text": "data Any data to emit in the dismiss events."
            },
            {
              "name": "param",
              "text": "role The role of the element that is dismissing the loading.\nThis can be useful in a button handler for determining which button was\nclicked to dismiss the loading.\nSome examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`."
            }
          ]
        },
        {
          "name": "onDidDismiss",
          "returns": {
            "type": "Promise<OverlayEventDetail<T>>",
            "docs": ""
          },
          "complexType": {
            "signature": "<T = any>() => Promise<OverlayEventDetail<T>>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "OverlayEventDetail": {
                "location": "import",
                "path": "../../utils/overlays-interface",
                "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
              },
              "T": {
                "location": "global",
                "id": "global::T"
              }
            },
            "return": "Promise<OverlayEventDetail<T>>"
          },
          "signature": "onDidDismiss<T = any>() => Promise<OverlayEventDetail<T>>",
          "parameters": [],
          "docs": "ローディングが解除されたタイミングを解決するPromiseを返します。",
          "docsTags": []
        },
        {
          "name": "onWillDismiss",
          "returns": {
            "type": "Promise<OverlayEventDetail<T>>",
            "docs": ""
          },
          "complexType": {
            "signature": "<T = any>() => Promise<OverlayEventDetail<T>>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "OverlayEventDetail": {
                "location": "import",
                "path": "../../utils/overlays-interface",
                "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
              },
              "T": {
                "location": "global",
                "id": "global::T"
              }
            },
            "return": "Promise<OverlayEventDetail<T>>"
          },
          "signature": "onWillDismiss<T = any>() => Promise<OverlayEventDetail<T>>",
          "parameters": [],
          "docs": "ローディングが解除されるタイミングを解決するPromiseを返します。",
          "docsTags": []
        },
        {
          "name": "present",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "present() => Promise<void>",
          "parameters": [],
          "docs": "作成後のローディングオーバーレイを提示します。",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "didDismiss",
          "detail": "OverlayEventDetail<any>",
          "bubbles": true,
          "complexType": {
            "original": "OverlayEventDetail",
            "resolved": "OverlayEventDetail<any>",
            "references": {
              "OverlayEventDetail": {
                "location": "import",
                "path": "../../utils/overlays-interface",
                "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "ローディングインジケータが解除された後に発行されます。ionLoadingDidDismissの略記。",
          "docsTags": []
        },
        {
          "event": "didPresent",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "ローディングインジケータが提示された後に放出される。ionLoadingWillDismissの略記。",
          "docsTags": []
        },
        {
          "event": "ionLoadingDidDismiss",
          "detail": "OverlayEventDetail<any>",
          "bubbles": true,
          "complexType": {
            "original": "OverlayEventDetail",
            "resolved": "OverlayEventDetail<any>",
            "references": {
              "OverlayEventDetail": {
                "location": "import",
                "path": "../../utils/overlays-interface",
                "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "ローディングが解除された後に発行されます。",
          "docsTags": []
        },
        {
          "event": "ionLoadingDidPresent",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "ローディングが提示された後に発行されます。",
          "docsTags": []
        },
        {
          "event": "ionLoadingWillDismiss",
          "detail": "OverlayEventDetail<any>",
          "bubbles": true,
          "complexType": {
            "original": "OverlayEventDetail",
            "resolved": "OverlayEventDetail<any>",
            "references": {
              "OverlayEventDetail": {
                "location": "import",
                "path": "../../utils/overlays-interface",
                "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "ローディングが解除される前に発行されます。",
          "docsTags": []
        },
        {
          "event": "ionLoadingWillPresent",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "ローディングが提示される前に発行されます。",
          "docsTags": []
        },
        {
          "event": "willDismiss",
          "detail": "OverlayEventDetail<any>",
          "bubbles": true,
          "complexType": {
            "original": "OverlayEventDetail",
            "resolved": "OverlayEventDetail<any>",
            "references": {
              "OverlayEventDetail": {
                "location": "import",
                "path": "../../utils/overlays-interface",
                "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "ローディングインジケータが解散する前に発行されます。ionLoadingWillDismissの略記です。",
          "docsTags": []
        },
        {
          "event": "willPresent",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "ローディングインジケータが提示される前に発行されます。ionLoadingWillPresentの略記。",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--backdrop-opacity",
          "annotation": "prop",
          "docs": "背景の不透明度"
        },
        {
          "name": "--background",
          "annotation": "prop",
          "docs": "ローディングダイアログの背景"
        },
        {
          "name": "--height",
          "annotation": "prop",
          "docs": "ローディングダイアログの高さ"
        },
        {
          "name": "--max-height",
          "annotation": "prop",
          "docs": "ローディングダイアログの最大の高さ"
        },
        {
          "name": "--max-width",
          "annotation": "prop",
          "docs": "ローディングダイアログの最大幅"
        },
        {
          "name": "--min-height",
          "annotation": "prop",
          "docs": "ローディングダイアログの最小高さ"
        },
        {
          "name": "--min-width",
          "annotation": "prop",
          "docs": "ローディングダイアログの最小幅"
        },
        {
          "name": "--spinner-color",
          "annotation": "prop",
          "docs": "ローディングスピナーの色"
        },
        {
          "name": "--width",
          "annotation": "prop",
          "docs": "ローディングダイアログの幅"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "ion-backdrop",
        "ion-spinner"
      ],
      "dependencyGraph": {
        "ion-loading": [
          "ion-backdrop",
          "ion-spinner"
        ]
      }
    },
    {
      "filePath": "src/components/menu-button/menu-button.tsx",
      "encapsulation": "shadow",
      "tag": "ion-menu-button",
      "docs": "",
      "docsTags": [
        {
          "name": "virtualProp",
          "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
        },
        {
          "name": "part",
          "text": "native - The native HTML button element that wraps all child elements."
        },
        {
          "name": "part",
          "text": "icon - The menu button icon (uses ion-icon)."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "autoHide",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "auto-hide",
          "reflectToAttr": false,
          "docs": "対応するメニューがアクティブでない場合、メニューボタンを自動的に非表示にします。",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
          "complexType": {
            "original": "Color",
            "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
            "references": {
              "Color": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::Color"
              }
            }
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "アプリケーションのカラーパレットから使用する色を指定します。デフォルトのオプションは以下の通りです。 `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, と `\"dark\"` です．色に関する詳しい情報は [theming](/docs/theming/basics) を参照してください。",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "tertiary",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "type": "string & Record<never, never>"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "`true`の場合、ユーザはメニューボタンを操作することができません。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "menu",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "menu",
          "reflectToAttr": false,
          "docs": "メニューの `menuId` プロパティに対応するオプションのプロパティです。メニュー側には `start` または `end` を指定することもできます。これは、トグルするための正しいメニューを見つけるために使用されます。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "type",
          "type": "\"button\" | \"reset\" | \"submit\"",
          "complexType": {
            "original": "'submit' | 'reset' | 'button'",
            "resolved": "\"button\" | \"reset\" | \"submit\"",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "ボタンの種類です。",
          "docsTags": [],
          "default": "'button'",
          "values": [
            {
              "value": "button",
              "type": "string"
            },
            {
              "value": "reset",
              "type": "string"
            },
            {
              "value": "submit",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "ionMenuChange",
          "target": "body",
          "capture": false,
          "passive": false
        },
        {
          "event": "ionSplitPaneVisible",
          "target": "body",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [
        {
          "name": "--background",
          "annotation": "prop",
          "docs": "メニューボタンの背景"
        },
        {
          "name": "--background-focused",
          "annotation": "prop",
          "docs": "タブキーでフォーカスしたときのメニューボタンの背景色"
        },
        {
          "name": "--background-focused-opacity",
          "annotation": "prop",
          "docs": "タブキーでフォーカスしたときのメニューボタンの背景の不透明度"
        },
        {
          "name": "--background-hover",
          "annotation": "prop",
          "docs": "ホバー時のメニューボタンの背景"
        },
        {
          "name": "--background-hover-opacity",
          "annotation": "prop",
          "docs": "ホバー時の背景の不透明度"
        },
        {
          "name": "--border-radius",
          "annotation": "prop",
          "docs": "メニューボタンのボーダー半径"
        },
        {
          "name": "--color",
          "annotation": "prop",
          "docs": "メニューボタンの色"
        },
        {
          "name": "--color-focused",
          "annotation": "prop",
          "docs": "タブキーでフォーカスしたときのメニューボタンの色"
        },
        {
          "name": "--color-hover",
          "annotation": "prop",
          "docs": "ホバー時のメニューボタンの色"
        },
        {
          "name": "--padding-bottom",
          "annotation": "prop",
          "docs": "ボタンのBottom Padding"
        },
        {
          "name": "--padding-end",
          "annotation": "prop",
          "docs": "ボタンの向きが左から右の場合はRight Padding、右から左の場合はLeft Paddingとなります。"
        },
        {
          "name": "--padding-start",
          "annotation": "prop",
          "docs": "ボタンの向きが左から右の場合はLeft Padding、右から左の場合はRight Paddingとなります。"
        },
        {
          "name": "--padding-top",
          "annotation": "prop",
          "docs": "ボタンのTop Padding"
        }
      ],
      "slots": [],
      "parts": [
        {
          "name": "icon",
          "docs": "メニューボタンのアイコン（ion-iconを使用）です。"
        },
        {
          "name": "native",
          "docs": "すべての子要素を包むネイティブ HTML ボタン要素。"
        }
      ],
      "dependents": [],
      "dependencies": [
        "ion-icon",
        "ion-ripple-effect"
      ],
      "dependencyGraph": {
        "ion-menu-button": [
          "ion-icon",
          "ion-ripple-effect"
        ]
      }
    },
    {
      "filePath": "src/components/menu-toggle/menu-toggle.tsx",
      "encapsulation": "shadow",
      "tag": "ion-menu-toggle",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- Content is placed inside the toggle to act as the click target."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "autoHide",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "auto-hide",
          "reflectToAttr": false,
          "docs": "対応するメニューがアクティブでない場合に、自動的にコンテンツを非表示にします。  デフォルトでは `true` になっています。メニューの状態に関係なく `ion-menu-toggle` を常に表示しておきたい場合は、`false` に変更します。",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "menu",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "menu",
          "reflectToAttr": false,
          "docs": "メニューの `menuId` プロパティに対応するオプションのプロパティです。メニュー側には `start` または `end` を指定することもできます。これは、トグルするための正しいメニューを見つけるために使用される。  このプロパティを使用しない場合、`ion-menu-toggle`は、最初にアクティブになったメニューをトグルします。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "ionMenuChange",
          "target": "body",
          "capture": false,
          "passive": false
        },
        {
          "event": "ionSplitPaneVisible",
          "target": "body",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "トグルの内側にコンテンツを配置し、クリックターゲットとして機能させます。"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/menu/menu.tsx",
      "encapsulation": "shadow",
      "tag": "ion-menu",
      "docs": "",
      "docsTags": [
        {
          "name": "part",
          "text": "container - The container for the menu content."
        },
        {
          "name": "part",
          "text": "backdrop - The backdrop that appears over the main content when the menu is open."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "contentId",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "content-id",
          "reflectToAttr": true,
          "docs": "メインコンテンツの `id` です。ルータを使用する場合は、通常 `ion-router-outlet` となります。ルータを使用しない場合は、通常、メインビューの `ion-content` となります。これは `ion-menu` 内の `ion-content` の ID ではありません。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "`true`の場合、メニューは無効化される。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxEdgeStart",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "max-edge-start",
          "reflectToAttr": false,
          "docs": "ドラッグでメニューを開く際のエッジのしきい値です。この値を超えてドラッグ/スワイプが行われた場合、メニューはトリガーされない。",
          "docsTags": [],
          "default": "50",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "menuId",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "menu-id",
          "reflectToAttr": true,
          "docs": "メニューのIDです。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "side",
          "type": "\"end\" | \"start\"",
          "complexType": {
            "original": "Side",
            "resolved": "\"end\" | \"start\"",
            "references": {
              "Side": {
                "location": "import",
                "path": "./menu-interface",
                "id": "src/components/menu/menu-interface.ts::Side"
              }
            }
          },
          "mutable": false,
          "attr": "side",
          "reflectToAttr": true,
          "docs": "メニューがビューのどの側に配置されるべきか。",
          "docsTags": [],
          "default": "'start'",
          "values": [
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "swipeGesture",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "swipe-gesture",
          "reflectToAttr": false,
          "docs": "`true`の場合、スワイプによるメニュー操作が有効になる。",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": true,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "メニューの表示形式を指定します。利用可能なオプション。overlay\"`, `\"reveal\"`, `\"push\"`.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "close",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "complexType": {
            "signature": "(animated?: boolean) => Promise<boolean>",
            "parameters": [
              {
                "tags": [],
                "text": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "close(animated?: boolean) => Promise<boolean>",
          "parameters": [],
          "docs": "メニューを閉じる。メニューが既に閉じられていたり、閉じることができない場合は、`false`を返します。",
          "docsTags": []
        },
        {
          "name": "isActive",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<boolean>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "isActive() => Promise<boolean>",
          "parameters": [],
          "docs": "メニューがアクティブであれば `true` を返します。  メニューがアクティブな状態とは、メニューを開いたり閉じたりできる状態、つまり有効な状態であり、`ion-split-pane`の一部でない状態であることを意味します。",
          "docsTags": []
        },
        {
          "name": "isOpen",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<boolean>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "isOpen() => Promise<boolean>",
          "parameters": [],
          "docs": "メニューが開いている場合は `true` を返します。",
          "docsTags": []
        },
        {
          "name": "open",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "complexType": {
            "signature": "(animated?: boolean) => Promise<boolean>",
            "parameters": [
              {
                "tags": [],
                "text": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "open(animated?: boolean) => Promise<boolean>",
          "parameters": [],
          "docs": "メニューを開く。メニューが既に開いているか、開くことができない場合は、`false`を返します。",
          "docsTags": []
        },
        {
          "name": "setOpen",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "complexType": {
            "signature": "(shouldOpen: boolean, animated?: boolean) => Promise<boolean>",
            "parameters": [
              {
                "tags": [],
                "text": ""
              },
              {
                "tags": [],
                "text": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "setOpen(shouldOpen: boolean, animated?: boolean) => Promise<boolean>",
          "parameters": [],
          "docs": "ボタンを開いたり閉じたりします。操作が正常に完了しない場合は `false` を返します。",
          "docsTags": []
        },
        {
          "name": "toggle",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "complexType": {
            "signature": "(animated?: boolean) => Promise<boolean>",
            "parameters": [
              {
                "tags": [],
                "text": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "toggle(animated?: boolean) => Promise<boolean>",
          "parameters": [],
          "docs": "メニューを切り替えます。メニューが既に開かれている場合は閉じようとし、そうでない場合は開こうとします。操作が正常に完了しない場合は、`false`を返します。",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "ionDidClose",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "メニューが閉じられたときに発行されます。",
          "docsTags": []
        },
        {
          "event": "ionDidOpen",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "メニューが開いているときに発行されます。",
          "docsTags": []
        },
        {
          "event": "ionWillClose",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "メニューが閉じられようとするときに発行されます。",
          "docsTags": []
        },
        {
          "event": "ionWillOpen",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "メニューが開かれようとするときに発行されます。",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "ionSplitPaneVisible",
          "target": "body",
          "capture": false,
          "passive": false
        },
        {
          "event": "click",
          "capture": true,
          "passive": false
        },
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [
        {
          "name": "--background",
          "annotation": "prop",
          "docs": "メニューの背景"
        },
        {
          "name": "--height",
          "annotation": "prop",
          "docs": "メニューの高さ"
        },
        {
          "name": "--max-height",
          "annotation": "prop",
          "docs": "メニューの最大の高さ"
        },
        {
          "name": "--max-width",
          "annotation": "prop",
          "docs": "メニューの最大幅"
        },
        {
          "name": "--min-height",
          "annotation": "prop",
          "docs": "メニューの高さの最小値"
        },
        {
          "name": "--min-width",
          "annotation": "prop",
          "docs": "メニューの最小幅"
        },
        {
          "name": "--width",
          "annotation": "prop",
          "docs": "メニューの幅"
        }
      ],
      "slots": [],
      "parts": [
        {
          "name": "backdrop",
          "docs": "メニューを開いているときに、メインコンテンツの上に表示される背景です。"
        },
        {
          "name": "container",
          "docs": "メニューの内容を格納するコンテナです。"
        }
      ],
      "dependents": [],
      "dependencies": [
        "ion-backdrop"
      ],
      "dependencyGraph": {
        "ion-menu": [
          "ion-backdrop"
        ]
      }
    },
    {
      "filePath": "src/components/modal/modal.tsx",
      "encapsulation": "shadow",
      "tag": "ion-modal",
      "docs": "",
      "docsTags": [
        {
          "name": "virtualProp",
          "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
        },
        {
          "name": "slot",
          "text": "- Content is placed inside of the `.modal-content` element."
        },
        {
          "name": "part",
          "text": "backdrop - The `ion-backdrop` element."
        },
        {
          "name": "part",
          "text": "content - The wrapper element for the default slot."
        },
        {
          "name": "part",
          "text": "handle - The handle that is displayed at the top of the sheet modal when `handle=\"true\"`."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "animated",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "animated",
          "reflectToAttr": false,
          "docs": "`true`の場合、モーダルはアニメーションを行います。",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "backdropBreakpoint",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "backdrop-breakpoint",
          "reflectToAttr": false,
          "docs": "シートモーダル使用時に背景がフェードインし始めるポイントを示す0～1の10進数値です。それ以前は、背景は非表示で、シートの下のコンテンツは操作可能です。この値は排他的で、指定された値の後に背景がアクティブになることを意味します。",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "backdropDismiss",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "backdrop-dismiss",
          "reflectToAttr": false,
          "docs": "`true`の場合、バックドロップがクリックされるとモーダルは解除されます。",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "breakpoints",
          "type": "number[] | undefined",
          "complexType": {
            "original": "number[]",
            "resolved": "number[] | undefined",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "シート モーダルを作成するときに使用するブレークポイントです。配列の各値は 0 から 1 の間の 10 進数でなければならず、0 はモーダルが完全に閉じていることを、1 はモーダルが完全に開いていることを示しています。値は、画面の高さではなく、モーダルの高さに対する相対値です。この配列の値の1つは、`initialBreakpoint` プロパティの値でなければなりません。例えば[0, .25, .5, 1]",
          "docsTags": [],
          "values": [
            {
              "type": "number[]"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "canDismiss",
          "type": "((data?: any, role?: string | undefined) => Promise<boolean>) | boolean",
          "complexType": {
            "original": "boolean | ((data?: any, role?: string) => Promise<boolean>)",
            "resolved": "((data?: any, role?: string | undefined) => Promise<boolean>) | boolean",
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            }
          },
          "mutable": false,
          "attr": "can-dismiss",
          "reflectToAttr": false,
          "docs": "モーダルが `dismiss` メソッドを呼び出したときに、終了できるかどうかを決定します。  値が `true` または値の関数が `true` を返す場合、モーダルは終了しようとするときに閉じます。値が `false` または値の関数が `false` を返す場合、モーダルは終了しようとしたときに閉じません。",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "((data?: any, role?: string"
            },
            {
              "type": "undefined) => Promise<boolean>)"
            },
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "enterAnimation",
          "type": "((baseEl: any, opts?: any) => Animation) | undefined",
          "complexType": {
            "original": "AnimationBuilder",
            "resolved": "((baseEl: any, opts?: any) => Animation) | undefined",
            "references": {
              "AnimationBuilder": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::AnimationBuilder"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "モーダルが表示されたときに使用するアニメーション。",
          "docsTags": [],
          "values": [
            {
              "type": "((baseEl: any, opts?: any) => Animation)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "handle",
          "type": "boolean | undefined",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "handle",
          "reflectToAttr": false,
          "docs": "シートモーダルの上部に表示される水平線です。 `breakpoints`と`initialBreakpoint`プロパティを設定すると、デフォルトで`true`になります。",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "handleBehavior",
          "type": "\"cycle\" | \"none\" | undefined",
          "complexType": {
            "original": "ModalHandleBehavior",
            "resolved": "\"cycle\" | \"none\" | undefined",
            "references": {
              "ModalHandleBehavior": {
                "location": "import",
                "path": "./modal-interface",
                "id": "src/components/modal/modal-interface.ts::ModalHandleBehavior"
              }
            }
          },
          "mutable": false,
          "attr": "handle-behavior",
          "reflectToAttr": false,
          "docs": "ハンドルが押されたときのシートモーダルのインタラクション動作です。  デフォルトは `\"none\"` で、ハンドルが押されてもモーダルはサイズも位置も変わりません。cycle\"` に設定すると、押されたときにモーダルが利用可能なブレークポイント間を循環するようになります。  ハンドルの動作は、`handle` プロパティが `false` に設定されている場合、または `breakpoints` プロパティが設定されていない場合（フルスクリーンまたはカード モーダルを使用している場合）には、利用できません。",
          "docsTags": [],
          "default": "'none'",
          "values": [
            {
              "value": "cycle",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "htmlAttributes",
          "type": "undefined | { [key: string]: any; }",
          "complexType": {
            "original": "{ [key: string]: any }",
            "resolved": "undefined | { [key: string]: any; }",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "モーダルに渡す追加属性。",
          "docsTags": [],
          "values": [
            {
              "type": "undefined"
            },
            {
              "type": "{ [key: string]: any; }"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "initialBreakpoint",
          "type": "number | undefined",
          "complexType": {
            "original": "number",
            "resolved": "number | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "initial-breakpoint",
          "reflectToAttr": false,
          "docs": "シートモーダル作成時にモーダルが開く初期点を示す 0 から 1 までの 10 進値。この値は `breakpoints` 配列にも記載されている必要があります。",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "isOpen",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "is-open",
          "reflectToAttr": false,
          "docs": "`true`の場合、モーダルは開かれます。 `false`の場合、モーダルは閉じます。それ以外の場合は、modalController または `trigger` プロパティを使用してください。注意: `isOpen` は、モーダルが終了しても自動的に `false` に戻されません。あなたのコードでそれを行う必要があります。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "keepContentsMounted",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "keep-contents-mounted",
          "reflectToAttr": false,
          "docs": "`true`の場合、モーダルの作成時に `ion-modal` に渡されたコンポーネントが自動的にマウントされます。このコンポーネントは、モーダルが終了してもマウントされたままです。しかし、モーダルが破棄されると、コンポーネントは破棄されます。このプロパティはリアクティブではないので、モーダルを最初に作成するときにのみ使用する必要があります。  注意：この機能は、Angular、React、Vue などの JavaScript フレームワークのインライン モーダルにのみ適用されます。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "keyboardClose",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "keyboard-close",
          "reflectToAttr": false,
          "docs": "`true`の場合、オーバーレイが表示されたときにキーボードが自動的に解除されます。",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "leaveAnimation",
          "type": "((baseEl: any, opts?: any) => Animation) | undefined",
          "complexType": {
            "original": "AnimationBuilder",
            "resolved": "((baseEl: any, opts?: any) => Animation) | undefined",
            "references": {
              "AnimationBuilder": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::AnimationBuilder"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "モーダルが解除されたときに使用するアニメーションです。",
          "docsTags": [],
          "values": [
            {
              "type": "((baseEl: any, opts?: any) => Animation)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "presentingElement",
          "type": "HTMLElement | undefined",
          "complexType": {
            "original": "HTMLElement",
            "resolved": "HTMLElement | undefined",
            "references": {
              "HTMLElement": {
                "location": "global",
                "id": "global::HTMLElement"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "モーダルを提示した要素です。カード提示効果や、複数のモーダルを重ねる場合に使用します。iOS modeでのみ適用されます。",
          "docsTags": [],
          "values": [
            {
              "type": "HTMLElement"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "showBackdrop",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-backdrop",
          "reflectToAttr": false,
          "docs": "`true`の場合、モーダルの後ろに背景が表示されます。このプロパティは、モーダルが表示されたときに背景が画面を暗くするかどうかを制御します。このプロパティは、背景がアクティブであるかどうか、または DOM に存在するかどうかを制御するものではありません。",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "trigger",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "trigger",
          "reflectToAttr": false,
          "docs": "クリックされたときにモーダルを開かせるトリガー要素に対応するIDです。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "dismiss",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "complexType": {
            "signature": "(data?: any, role?: string) => Promise<boolean>",
            "parameters": [
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "data Any data to emit in the dismiss events."
                  }
                ],
                "text": "Any data to emit in the dismiss events."
              },
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "role The role of the element that is dismissing the modal. For example, 'cancel' or 'backdrop'."
                  }
                ],
                "text": "The role of the element that is dismissing the modal. For example, 'cancel' or 'backdrop'."
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "ModalDismissOptions": {
                "location": "global",
                "id": "global::ModalDismissOptions"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "dismiss(data?: any, role?: string) => Promise<boolean>",
          "parameters": [],
          "docs": "モーダルオーバーレイが表示された後、それを解除します。",
          "docsTags": [
            {
              "name": "param",
              "text": "data Any data to emit in the dismiss events."
            },
            {
              "name": "param",
              "text": "role The role of the element that is dismissing the modal. For example, 'cancel' or 'backdrop'."
            }
          ]
        },
        {
          "name": "getCurrentBreakpoint",
          "returns": {
            "type": "Promise<number | undefined>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<number | undefined>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<number | undefined>"
          },
          "signature": "getCurrentBreakpoint() => Promise<number | undefined>",
          "parameters": [],
          "docs": "シートスタイルモーダルの現在のブレークポイントを返します。",
          "docsTags": []
        },
        {
          "name": "onDidDismiss",
          "returns": {
            "type": "Promise<OverlayEventDetail<T>>",
            "docs": ""
          },
          "complexType": {
            "signature": "<T = any>() => Promise<OverlayEventDetail<T>>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "OverlayEventDetail": {
                "location": "import",
                "path": "../../utils/overlays-interface",
                "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
              },
              "T": {
                "location": "global",
                "id": "global::T"
              }
            },
            "return": "Promise<OverlayEventDetail<T>>"
          },
          "signature": "onDidDismiss<T = any>() => Promise<OverlayEventDetail<T>>",
          "parameters": [],
          "docs": "モーダルが解除されたときに解決するPromiseを返します。",
          "docsTags": []
        },
        {
          "name": "onWillDismiss",
          "returns": {
            "type": "Promise<OverlayEventDetail<T>>",
            "docs": ""
          },
          "complexType": {
            "signature": "<T = any>() => Promise<OverlayEventDetail<T>>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "OverlayEventDetail": {
                "location": "import",
                "path": "../../utils/overlays-interface",
                "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
              },
              "T": {
                "location": "global",
                "id": "global::T"
              }
            },
            "return": "Promise<OverlayEventDetail<T>>"
          },
          "signature": "onWillDismiss<T = any>() => Promise<OverlayEventDetail<T>>",
          "parameters": [],
          "docs": "モーダルがいつ解散するかを解決するPromiseを返します。",
          "docsTags": []
        },
        {
          "name": "present",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "ModalPresentOptions": {
                "location": "global",
                "id": "global::ModalPresentOptions"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "present() => Promise<void>",
          "parameters": [],
          "docs": "モーダルオーバーレイを作成した後に提示します。",
          "docsTags": []
        },
        {
          "name": "setCurrentBreakpoint",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(breakpoint: number) => Promise<void>",
            "parameters": [
              {
                "tags": [],
                "text": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setCurrentBreakpoint(breakpoint: number) => Promise<void>",
          "parameters": [],
          "docs": "シートスタイルモーダルを特定のブレークポイントに移動します。ブレークポイントの値は、 `breakpoints` 配列で定義された値でなければなりません。",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "didDismiss",
          "detail": "OverlayEventDetail<any>",
          "bubbles": true,
          "complexType": {
            "original": "OverlayEventDetail",
            "resolved": "OverlayEventDetail<any>",
            "references": {
              "OverlayEventDetail": {
                "location": "import",
                "path": "../../utils/overlays-interface",
                "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "モーダルが解散した後に発行されます。ionModalDidDismiss の略記です。",
          "docsTags": []
        },
        {
          "event": "didPresent",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "モーダルが提示された後に発行されます。ionModalDidPresent の略記です。",
          "docsTags": []
        },
        {
          "event": "ionBreakpointDidChange",
          "detail": "ModalBreakpointChangeEventDetail",
          "bubbles": true,
          "complexType": {
            "original": "ModalBreakpointChangeEventDetail",
            "resolved": "ModalBreakpointChangeEventDetail",
            "references": {
              "ModalBreakpointChangeEventDetail": {
                "location": "import",
                "path": "./modal-interface",
                "id": "src/components/modal/modal-interface.ts::ModalBreakpointChangeEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "モーダルブレークポイントが変更された後に発行されます。",
          "docsTags": []
        },
        {
          "event": "ionModalDidDismiss",
          "detail": "OverlayEventDetail<any>",
          "bubbles": true,
          "complexType": {
            "original": "OverlayEventDetail",
            "resolved": "OverlayEventDetail<any>",
            "references": {
              "OverlayEventDetail": {
                "location": "import",
                "path": "../../utils/overlays-interface",
                "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "モーダルが終了した後に発行されます。",
          "docsTags": []
        },
        {
          "event": "ionModalDidPresent",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "モーダルが提示された後に発行されます。",
          "docsTags": []
        },
        {
          "event": "ionModalWillDismiss",
          "detail": "OverlayEventDetail<any>",
          "bubbles": true,
          "complexType": {
            "original": "OverlayEventDetail",
            "resolved": "OverlayEventDetail<any>",
            "references": {
              "OverlayEventDetail": {
                "location": "import",
                "path": "../../utils/overlays-interface",
                "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "モーダルが解散する前に発行されます。",
          "docsTags": []
        },
        {
          "event": "ionModalWillPresent",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "モーダルが提示される前に発行されます。",
          "docsTags": []
        },
        {
          "event": "willDismiss",
          "detail": "OverlayEventDetail<any>",
          "bubbles": true,
          "complexType": {
            "original": "OverlayEventDetail",
            "resolved": "OverlayEventDetail<any>",
            "references": {
              "OverlayEventDetail": {
                "location": "import",
                "path": "../../utils/overlays-interface",
                "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "モーダルが解散する前に発行されます。ionModalWillDismiss の略記です。",
          "docsTags": []
        },
        {
          "event": "willPresent",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "モーダルが提示される前に発行されます。ionModalWillPresent の略記です。",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--backdrop-opacity",
          "annotation": "prop",
          "docs": "背景の不透明度"
        },
        {
          "name": "--background",
          "annotation": "prop",
          "docs": "モーダルコンテンツの背景"
        },
        {
          "name": "--border-color",
          "annotation": "prop",
          "docs": "モーダルコンテンツのボーダーカラー"
        },
        {
          "name": "--border-radius",
          "annotation": "prop",
          "docs": "モーダルコンテンツのボーダー半径"
        },
        {
          "name": "--border-style",
          "annotation": "prop",
          "docs": "モーダルコンテンツのボーダースタイル"
        },
        {
          "name": "--border-width",
          "annotation": "prop",
          "docs": "モーダルコンテンツのボーダー幅"
        },
        {
          "name": "--height",
          "annotation": "prop",
          "docs": "モーダルの高さ"
        },
        {
          "name": "--max-height",
          "annotation": "prop",
          "docs": "モーダルの最大の高さ"
        },
        {
          "name": "--max-width",
          "annotation": "prop",
          "docs": "モーダルの最大幅"
        },
        {
          "name": "--min-height",
          "annotation": "prop",
          "docs": "モーダルの最小高さ"
        },
        {
          "name": "--min-width",
          "annotation": "prop",
          "docs": "モーダルの最小幅"
        },
        {
          "name": "--width",
          "annotation": "prop",
          "docs": "モーダルの幅"
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "コンテンツは `.modal-content` 要素の内側に配置されます。"
        }
      ],
      "parts": [
        {
          "name": "backdrop",
          "docs": "ion-backdrop`要素です。"
        },
        {
          "name": "content",
          "docs": "デフォルトslotのラッパー要素です。"
        },
        {
          "name": "handle",
          "docs": "handle=\"true\"`のときにシートモーダルの上部に表示されるハンドルです。"
        }
      ],
      "dependents": [],
      "dependencies": [
        "ion-backdrop"
      ],
      "dependencyGraph": {
        "ion-modal": [
          "ion-backdrop"
        ]
      }
    },
    {
      "filePath": "src/components/nav-link/nav-link.tsx",
      "encapsulation": "none",
      "tag": "ion-nav-link",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "component",
          "type": "Function | HTMLElement | ViewController | null | string | undefined",
          "complexType": {
            "original": "NavComponent",
            "resolved": "Function | HTMLElement | ViewController | null | string | undefined",
            "references": {
              "NavComponent": {
                "location": "import",
                "path": "../nav/nav-interface",
                "id": "src/components/nav/nav-interface.ts::NavComponent"
              }
            }
          },
          "mutable": false,
          "attr": "component",
          "reflectToAttr": false,
          "docs": "ナビゲート先のコンポーネント。 `routerDirection`が `\"forward\"` または `\"root\"` である場合にのみ使用します。",
          "docsTags": [],
          "values": [
            {
              "type": "Function"
            },
            {
              "type": "HTMLElement"
            },
            {
              "type": "ViewController"
            },
            {
              "type": "null"
            },
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "componentProps",
          "type": "undefined | { [key: string]: any; }",
          "complexType": {
            "original": "ComponentProps",
            "resolved": "undefined | { [key: string]: any; }",
            "references": {
              "ComponentProps": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::ComponentProps"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "コンポーネントにpropsとして渡したいデータ。routerDirection\"` が `\"forward\"` または `\"root\"` である場合のみ使用します。",
          "docsTags": [],
          "values": [
            {
              "type": "undefined"
            },
            {
              "type": "{ [key: string]: any; }"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "routerAnimation",
          "type": "((baseEl: any, opts?: any) => Animation) | undefined",
          "complexType": {
            "original": "AnimationBuilder",
            "resolved": "((baseEl: any, opts?: any) => Animation) | undefined",
            "references": {
              "AnimationBuilder": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::AnimationBuilder"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "別ページに移動する際の遷移アニメーション。",
          "docsTags": [],
          "values": [
            {
              "type": "((baseEl: any, opts?: any) => Animation)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "routerDirection",
          "type": "\"back\" | \"forward\" | \"root\"",
          "complexType": {
            "original": "RouterDirection",
            "resolved": "\"back\" | \"forward\" | \"root\"",
            "references": {
              "RouterDirection": {
                "location": "import",
                "path": "../router/utils/interface",
                "id": "src/components/router/utils/interface.ts::RouterDirection"
              }
            }
          },
          "mutable": false,
          "attr": "router-direction",
          "reflectToAttr": false,
          "docs": "別ページに移動する際の遷移方向です。",
          "docsTags": [],
          "default": "'forward'",
          "values": [
            {
              "value": "back",
              "type": "string"
            },
            {
              "value": "forward",
              "type": "string"
            },
            {
              "value": "root",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/nav/nav.tsx",
      "encapsulation": "shadow",
      "tag": "ion-nav",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "animated",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "animated",
          "reflectToAttr": false,
          "docs": "`true`の場合、コンポーネントの遷移をアニメーションで表現します。",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "animation",
          "type": "((baseEl: any, opts?: any) => Animation) | undefined",
          "complexType": {
            "original": "AnimationBuilder",
            "resolved": "((baseEl: any, opts?: any) => Animation) | undefined",
            "references": {
              "AnimationBuilder": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::AnimationBuilder"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "デフォルトでは、`ion-nav` はmode（ios または Material Design）に応じてページ間の遷移をアニメーション化します。しかし、このプロパティは `AnimationBuilder` 関数を使用して、独自の遷移を作成することができます。",
          "docsTags": [],
          "values": [
            {
              "type": "((baseEl: any, opts?: any) => Animation)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "root",
          "type": "Function | HTMLElement | ViewController | null | string | undefined",
          "complexType": {
            "original": "NavComponent",
            "resolved": "Function | HTMLElement | ViewController | null | string | undefined",
            "references": {
              "NavComponent": {
                "location": "import",
                "path": "./nav-interface",
                "id": "src/components/nav/nav-interface.ts::NavComponent"
              }
            }
          },
          "mutable": false,
          "attr": "root",
          "reflectToAttr": false,
          "docs": "ロードするルートNavComponent",
          "docsTags": [],
          "values": [
            {
              "type": "Function"
            },
            {
              "type": "HTMLElement"
            },
            {
              "type": "ViewController"
            },
            {
              "type": "null"
            },
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "rootParams",
          "type": "undefined | { [key: string]: any; }",
          "complexType": {
            "original": "ComponentProps",
            "resolved": "undefined | { [key: string]: any; }",
            "references": {
              "ComponentProps": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::ComponentProps"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "ルートコンポーネントの任意のパラメータ",
          "docsTags": [],
          "values": [
            {
              "type": "undefined"
            },
            {
              "type": "{ [key: string]: any; }"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "swipeGesture",
          "type": "boolean | undefined",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean | undefined",
            "references": {}
          },
          "mutable": true,
          "attr": "swipe-gesture",
          "reflectToAttr": false,
          "docs": "ナビコンポーネントがスワイプで戻ることができるようにする場合。",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "canGoBack",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "complexType": {
            "signature": "(view?: ViewController) => Promise<boolean>",
            "parameters": [
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "view The view to check."
                  }
                ],
                "text": "The view to check."
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "ViewController": {
                "location": "import",
                "path": "./view-controller",
                "id": "src/components/nav/view-controller.ts::ViewController"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "canGoBack(view?: ViewController) => Promise<boolean>",
          "parameters": [],
          "docs": "現在のビューが戻ることができる場合は `true` を返します。",
          "docsTags": [
            {
              "name": "param",
              "text": "view The view to check."
            }
          ]
        },
        {
          "name": "getActive",
          "returns": {
            "type": "Promise<ViewController | undefined>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<ViewController | undefined>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "ViewController": {
                "location": "import",
                "path": "./view-controller",
                "id": "src/components/nav/view-controller.ts::ViewController"
              }
            },
            "return": "Promise<ViewController | undefined>"
          },
          "signature": "getActive() => Promise<ViewController | undefined>",
          "parameters": [],
          "docs": "アクティブビューを取得します。",
          "docsTags": []
        },
        {
          "name": "getByIndex",
          "returns": {
            "type": "Promise<ViewController | undefined>",
            "docs": ""
          },
          "complexType": {
            "signature": "(index: number) => Promise<ViewController | undefined>",
            "parameters": [
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "index The index of the view."
                  }
                ],
                "text": "The index of the view."
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "ViewController": {
                "location": "import",
                "path": "./view-controller",
                "id": "src/components/nav/view-controller.ts::ViewController"
              }
            },
            "return": "Promise<ViewController | undefined>"
          },
          "signature": "getByIndex(index: number) => Promise<ViewController | undefined>",
          "parameters": [],
          "docs": "指定されたインデックスにあるビューを取得します。",
          "docsTags": [
            {
              "name": "param",
              "text": "index The index of the view."
            }
          ]
        },
        {
          "name": "getPrevious",
          "returns": {
            "type": "Promise<ViewController | undefined>",
            "docs": ""
          },
          "complexType": {
            "signature": "(view?: ViewController) => Promise<ViewController | undefined>",
            "parameters": [
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "view The view to get."
                  }
                ],
                "text": "The view to get."
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "ViewController": {
                "location": "import",
                "path": "./view-controller",
                "id": "src/components/nav/view-controller.ts::ViewController"
              }
            },
            "return": "Promise<ViewController | undefined>"
          },
          "signature": "getPrevious(view?: ViewController) => Promise<ViewController | undefined>",
          "parameters": [],
          "docs": "前のビューを取得します。",
          "docsTags": [
            {
              "name": "param",
              "text": "view The view to get."
            }
          ]
        },
        {
          "name": "insert",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "complexType": {
            "signature": "<T extends NavComponent>(insertIndex: number, component: T, componentProps?: ComponentProps<T> | null, opts?: NavOptions | null, done?: TransitionDoneFn) => Promise<boolean>",
            "parameters": [
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "insertIndex The index to insert the component at in the stack."
                  }
                ],
                "text": "The index to insert the component at in the stack."
              },
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "component The component to insert into the navigation stack."
                  }
                ],
                "text": "The component to insert into the navigation stack."
              },
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "componentProps Any properties of the component."
                  }
                ],
                "text": "Any properties of the component."
              },
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "opts The navigation options."
                  }
                ],
                "text": "The navigation options."
              },
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "done The transition complete function."
                  }
                ],
                "text": "The transition complete function."
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "NavComponent": {
                "location": "import",
                "path": "./nav-interface",
                "id": "src/components/nav/nav-interface.ts::NavComponent"
              },
              "T": {
                "location": "global",
                "id": "global::T"
              },
              "ComponentProps": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::ComponentProps"
              },
              "NavOptions": {
                "location": "import",
                "path": "./nav-interface",
                "id": "src/components/nav/nav-interface.ts::NavOptions"
              },
              "TransitionDoneFn": {
                "location": "import",
                "path": "./nav-interface",
                "id": "src/components/nav/nav-interface.ts::TransitionDoneFn"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "insert<T extends NavComponent>(insertIndex: number, component: T, componentProps?: ComponentProps<T> | null, opts?: NavOptions | null, done?: TransitionDoneFn) => Promise<boolean>",
          "parameters": [],
          "docs": "指定されたインデックスのナビゲーションスタックにコンポーネントを挿入します。これは、ナビゲーションスタックの任意の位置にコンポーネントを追加するのに便利です。",
          "docsTags": [
            {
              "name": "param",
              "text": "insertIndex The index to insert the component at in the stack."
            },
            {
              "name": "param",
              "text": "component The component to insert into the navigation stack."
            },
            {
              "name": "param",
              "text": "componentProps Any properties of the component."
            },
            {
              "name": "param",
              "text": "opts The navigation options."
            },
            {
              "name": "param",
              "text": "done The transition complete function."
            }
          ]
        },
        {
          "name": "insertPages",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "complexType": {
            "signature": "(insertIndex: number, insertComponents: NavComponent[] | NavComponentWithProps[], opts?: NavOptions | null, done?: TransitionDoneFn) => Promise<boolean>",
            "parameters": [
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "insertIndex The index to insert the components at in the stack."
                  }
                ],
                "text": "The index to insert the components at in the stack."
              },
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "insertComponents The components to insert into the navigation stack."
                  }
                ],
                "text": "The components to insert into the navigation stack."
              },
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "opts The navigation options."
                  }
                ],
                "text": "The navigation options."
              },
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "done The transition complete function."
                  }
                ],
                "text": "The transition complete function."
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "NavComponent": {
                "location": "import",
                "path": "./nav-interface",
                "id": "src/components/nav/nav-interface.ts::NavComponent"
              },
              "NavComponentWithProps": {
                "location": "import",
                "path": "./nav-interface",
                "id": "src/components/nav/nav-interface.ts::NavComponentWithProps"
              },
              "NavOptions": {
                "location": "import",
                "path": "./nav-interface",
                "id": "src/components/nav/nav-interface.ts::NavOptions"
              },
              "TransitionDoneFn": {
                "location": "import",
                "path": "./nav-interface",
                "id": "src/components/nav/nav-interface.ts::TransitionDoneFn"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "insertPages(insertIndex: number, insertComponents: NavComponent[] | NavComponentWithProps[], opts?: NavOptions | null, done?: TransitionDoneFn) => Promise<boolean>",
          "parameters": [],
          "docs": "指定されたインデックスのナビゲーションスタックにコンポーネントの配列を挿入します。配列の最後のコンポーネントはビューとしてインスタンス化され、アニメーションしてアクティブビューになります。",
          "docsTags": [
            {
              "name": "param",
              "text": "insertIndex The index to insert the components at in the stack."
            },
            {
              "name": "param",
              "text": "insertComponents The components to insert into the navigation stack."
            },
            {
              "name": "param",
              "text": "opts The navigation options."
            },
            {
              "name": "param",
              "text": "done The transition complete function."
            }
          ]
        },
        {
          "name": "pop",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "complexType": {
            "signature": "(opts?: NavOptions | null, done?: TransitionDoneFn) => Promise<boolean>",
            "parameters": [
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "opts The navigation options."
                  }
                ],
                "text": "The navigation options."
              },
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "done The transition complete function."
                  }
                ],
                "text": "The transition complete function."
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "NavOptions": {
                "location": "import",
                "path": "./nav-interface",
                "id": "src/components/nav/nav-interface.ts::NavOptions"
              },
              "TransitionDoneFn": {
                "location": "import",
                "path": "./nav-interface",
                "id": "src/components/nav/nav-interface.ts::TransitionDoneFn"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "pop(opts?: NavOptions | null, done?: TransitionDoneFn) => Promise<boolean>",
          "parameters": [],
          "docs": "ナビゲーションスタックからコンポーネントをポップオフします。現在のコンポーネントからナビゲートして戻る。",
          "docsTags": [
            {
              "name": "param",
              "text": "opts The navigation options."
            },
            {
              "name": "param",
              "text": "done The transition complete function."
            }
          ]
        },
        {
          "name": "popTo",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "complexType": {
            "signature": "(indexOrViewCtrl: number | ViewController, opts?: NavOptions | null, done?: TransitionDoneFn) => Promise<boolean>",
            "parameters": [
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "indexOrViewCtrl The index or view controller to pop to."
                  }
                ],
                "text": "The index or view controller to pop to."
              },
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "opts The navigation options."
                  }
                ],
                "text": "The navigation options."
              },
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "done The transition complete function."
                  }
                ],
                "text": "The transition complete function."
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "ViewController": {
                "location": "import",
                "path": "./view-controller",
                "id": "src/components/nav/view-controller.ts::ViewController"
              },
              "NavOptions": {
                "location": "import",
                "path": "./nav-interface",
                "id": "src/components/nav/nav-interface.ts::NavOptions"
              },
              "TransitionDoneFn": {
                "location": "import",
                "path": "./nav-interface",
                "id": "src/components/nav/nav-interface.ts::TransitionDoneFn"
              },
              "TransitionInstruction": {
                "location": "import",
                "path": "./nav-interface",
                "id": "src/components/nav/nav-interface.ts::TransitionInstruction"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "popTo(indexOrViewCtrl: number | ViewController, opts?: NavOptions | null, done?: TransitionDoneFn) => Promise<boolean>",
          "parameters": [],
          "docs": "ナビゲーションスタック内の特定のインデックスにポップします。",
          "docsTags": [
            {
              "name": "param",
              "text": "indexOrViewCtrl The index or view controller to pop to."
            },
            {
              "name": "param",
              "text": "opts The navigation options."
            },
            {
              "name": "param",
              "text": "done The transition complete function."
            }
          ]
        },
        {
          "name": "popToRoot",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "complexType": {
            "signature": "(opts?: NavOptions | null, done?: TransitionDoneFn) => Promise<boolean>",
            "parameters": [
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "opts The navigation options."
                  }
                ],
                "text": "The navigation options."
              },
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "done The transition complete function."
                  }
                ],
                "text": "The transition complete function."
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "NavOptions": {
                "location": "import",
                "path": "./nav-interface",
                "id": "src/components/nav/nav-interface.ts::NavOptions"
              },
              "TransitionDoneFn": {
                "location": "import",
                "path": "./nav-interface",
                "id": "src/components/nav/nav-interface.ts::TransitionDoneFn"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "popToRoot(opts?: NavOptions | null, done?: TransitionDoneFn) => Promise<boolean>",
          "parameters": [],
          "docs": "スタックのルートまで戻ってナビゲートする、それがどんなに遠くても。",
          "docsTags": [
            {
              "name": "param",
              "text": "opts The navigation options."
            },
            {
              "name": "param",
              "text": "done The transition complete function."
            }
          ]
        },
        {
          "name": "push",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "complexType": {
            "signature": "<T extends NavComponent>(component: T, componentProps?: ComponentProps<T> | null, opts?: NavOptions | null, done?: TransitionDoneFn) => Promise<boolean>",
            "parameters": [
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "component The component to push onto the navigation stack."
                  }
                ],
                "text": "The component to push onto the navigation stack."
              },
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "componentProps Any properties of the component."
                  }
                ],
                "text": "Any properties of the component."
              },
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "opts The navigation options."
                  }
                ],
                "text": "The navigation options."
              },
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "done The transition complete function."
                  }
                ],
                "text": "The transition complete function."
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "NavComponent": {
                "location": "import",
                "path": "./nav-interface",
                "id": "src/components/nav/nav-interface.ts::NavComponent"
              },
              "T": {
                "location": "global",
                "id": "global::T"
              },
              "ComponentProps": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::ComponentProps"
              },
              "NavOptions": {
                "location": "import",
                "path": "./nav-interface",
                "id": "src/components/nav/nav-interface.ts::NavOptions"
              },
              "TransitionDoneFn": {
                "location": "import",
                "path": "./nav-interface",
                "id": "src/components/nav/nav-interface.ts::TransitionDoneFn"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "push<T extends NavComponent>(component: T, componentProps?: ComponentProps<T> | null, opts?: NavOptions | null, done?: TransitionDoneFn) => Promise<boolean>",
          "parameters": [],
          "docs": "新しいコンポーネントを現在のナビゲーションスタックにプッシュします。追加情報があれば、オブジェクトとして一緒に渡す。この追加情報には、NavParamsからアクセスできます。",
          "docsTags": [
            {
              "name": "param",
              "text": "component The component to push onto the navigation stack."
            },
            {
              "name": "param",
              "text": "componentProps Any properties of the component."
            },
            {
              "name": "param",
              "text": "opts The navigation options."
            },
            {
              "name": "param",
              "text": "done The transition complete function."
            }
          ]
        },
        {
          "name": "removeIndex",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "complexType": {
            "signature": "(startIndex: number, removeCount?: number, opts?: NavOptions | null, done?: TransitionDoneFn) => Promise<boolean>",
            "parameters": [
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "startIndex The number to begin removal at."
                  }
                ],
                "text": "The number to begin removal at."
              },
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "removeCount The number of components to remove."
                  }
                ],
                "text": "The number of components to remove."
              },
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "opts The navigation options."
                  }
                ],
                "text": "The navigation options."
              },
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "done The transition complete function."
                  }
                ],
                "text": "The transition complete function."
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "NavOptions": {
                "location": "import",
                "path": "./nav-interface",
                "id": "src/components/nav/nav-interface.ts::NavOptions"
              },
              "TransitionDoneFn": {
                "location": "import",
                "path": "./nav-interface",
                "id": "src/components/nav/nav-interface.ts::TransitionDoneFn"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "removeIndex(startIndex: number, removeCount?: number, opts?: NavOptions | null, done?: TransitionDoneFn) => Promise<boolean>",
          "parameters": [],
          "docs": "指定されたインデックスにあるコンポーネントをナビゲーションスタックから削除します。",
          "docsTags": [
            {
              "name": "param",
              "text": "startIndex The number to begin removal at."
            },
            {
              "name": "param",
              "text": "removeCount The number of components to remove."
            },
            {
              "name": "param",
              "text": "opts The navigation options."
            },
            {
              "name": "param",
              "text": "done The transition complete function."
            }
          ]
        },
        {
          "name": "setPages",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "complexType": {
            "signature": "(views: NavComponent[] | NavComponentWithProps[], opts?: NavOptions | null, done?: TransitionDoneFn) => Promise<boolean>",
            "parameters": [
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "views The list of views to set as the navigation stack."
                  }
                ],
                "text": "The list of views to set as the navigation stack."
              },
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "opts The navigation options."
                  }
                ],
                "text": "The navigation options."
              },
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "done The transition complete function."
                  }
                ],
                "text": "The transition complete function."
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "NavComponent": {
                "location": "import",
                "path": "./nav-interface",
                "id": "src/components/nav/nav-interface.ts::NavComponent"
              },
              "NavComponentWithProps": {
                "location": "import",
                "path": "./nav-interface",
                "id": "src/components/nav/nav-interface.ts::NavComponentWithProps"
              },
              "NavOptions": {
                "location": "import",
                "path": "./nav-interface",
                "id": "src/components/nav/nav-interface.ts::NavOptions"
              },
              "TransitionDoneFn": {
                "location": "import",
                "path": "./nav-interface",
                "id": "src/components/nav/nav-interface.ts::TransitionDoneFn"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "setPages(views: NavComponent[] | NavComponentWithProps[], opts?: NavOptions | null, done?: TransitionDoneFn) => Promise<boolean>",
          "parameters": [],
          "docs": "現在のナビゲーションスタックのビューを設定し、最後のビューにナビゲートします。デフォルトではアニメーションは無効になっていますが、ナビゲーションコントローラーにオプションを渡すことで有効にすることができます。ナビゲーションパラメーターは、配列内の各ページに渡すこともできます。",
          "docsTags": [
            {
              "name": "param",
              "text": "views The list of views to set as the navigation stack."
            },
            {
              "name": "param",
              "text": "opts The navigation options."
            },
            {
              "name": "param",
              "text": "done The transition complete function."
            }
          ]
        },
        {
          "name": "setRoot",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "complexType": {
            "signature": "<T extends NavComponent>(component: T, componentProps?: ComponentProps<T> | null, opts?: NavOptions | null, done?: TransitionDoneFn) => Promise<boolean>",
            "parameters": [
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "component The component to set as the root of the navigation stack."
                  }
                ],
                "text": "The component to set as the root of the navigation stack."
              },
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "componentProps Any properties of the component."
                  }
                ],
                "text": "Any properties of the component."
              },
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "opts The navigation options."
                  }
                ],
                "text": "The navigation options."
              },
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "done The transition complete function."
                  }
                ],
                "text": "The transition complete function."
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "NavComponent": {
                "location": "import",
                "path": "./nav-interface",
                "id": "src/components/nav/nav-interface.ts::NavComponent"
              },
              "T": {
                "location": "global",
                "id": "global::T"
              },
              "ComponentProps": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::ComponentProps"
              },
              "NavOptions": {
                "location": "import",
                "path": "./nav-interface",
                "id": "src/components/nav/nav-interface.ts::NavOptions"
              },
              "TransitionDoneFn": {
                "location": "import",
                "path": "./nav-interface",
                "id": "src/components/nav/nav-interface.ts::TransitionDoneFn"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "setRoot<T extends NavComponent>(component: T, componentProps?: ComponentProps<T> | null, opts?: NavOptions | null, done?: TransitionDoneFn) => Promise<boolean>",
          "parameters": [],
          "docs": "現在のナビゲーションスタックのルートをコンポーネントに設定します。",
          "docsTags": [
            {
              "name": "param",
              "text": "component The component to set as the root of the navigation stack."
            },
            {
              "name": "param",
              "text": "componentProps Any properties of the component."
            },
            {
              "name": "param",
              "text": "opts The navigation options."
            },
            {
              "name": "param",
              "text": "done The transition complete function."
            }
          ]
        }
      ],
      "events": [
        {
          "event": "ionNavDidChange",
          "detail": "void",
          "bubbles": false,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "ナビのコンポーネントが変更されたときに発生するイベント",
          "docsTags": []
        },
        {
          "event": "ionNavWillChange",
          "detail": "void",
          "bubbles": false,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "ナビコンポーネントが変更されたときに発生するイベント",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/note/note.tsx",
      "encapsulation": "shadow",
      "tag": "ion-note",
      "docs": "",
      "docsTags": [
        {
          "name": "virtualProp",
          "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
          "complexType": {
            "original": "Color",
            "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
            "references": {
              "Color": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::Color"
              }
            }
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "アプリケーションのカラーパレットから使用する色を指定します。デフォルトのオプションは以下の通りです。 `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, と `\"dark\"` です．色に関する詳しい情報は [theming](/docs/theming/basics) を参照してください。",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "tertiary",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "type": "string & Record<never, never>"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--color",
          "annotation": "prop",
          "docs": "ノートの色"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [
        "ion-item"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "ion-item": [
          "ion-note"
        ]
      }
    },
    {
      "filePath": "src/components/picker/picker.tsx",
      "encapsulation": "scoped",
      "tag": "ion-picker",
      "docs": "",
      "docsTags": [
        {
          "name": "virtualProp",
          "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "animated",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "animated",
          "reflectToAttr": false,
          "docs": "`true`の場合、ピッカーはアニメーションを行います。",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "backdropDismiss",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "backdrop-dismiss",
          "reflectToAttr": false,
          "docs": "`true`の場合、バックドロップがクリックされるとピッカーが解除される。",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "buttons",
          "type": "PickerButton[]",
          "complexType": {
            "original": "PickerButton[]",
            "resolved": "PickerButton[]",
            "references": {
              "PickerButton": {
                "location": "import",
                "path": "./picker-interface",
                "id": "src/components/picker/picker-interface.ts::PickerButton"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "ピッカーの上部に表示されるボタンの配列。",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "PickerButton[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "columns",
          "type": "PickerColumn[]",
          "complexType": {
            "original": "PickerColumn[]",
            "resolved": "PickerColumn[]",
            "references": {
              "PickerColumn": {
                "location": "import",
                "path": "./picker-interface",
                "id": "src/components/picker/picker-interface.ts::PickerColumn"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "ピッカーに表示されるカラムの配列。",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "PickerColumn[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "cssClass",
          "type": "string | string[] | undefined",
          "complexType": {
            "original": "string | string[]",
            "resolved": "string | string[] | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "css-class",
          "reflectToAttr": false,
          "docs": "カスタムCSSに適用する追加のクラス。複数のクラスを指定する場合は、スペースで区切る必要があります。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "string[]"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "duration",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "duration",
          "reflectToAttr": false,
          "docs": "ピッカーが終了するまでの待ち時間をミリ秒単位で指定します。",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "enterAnimation",
          "type": "((baseEl: any, opts?: any) => Animation) | undefined",
          "complexType": {
            "original": "AnimationBuilder",
            "resolved": "((baseEl: any, opts?: any) => Animation) | undefined",
            "references": {
              "AnimationBuilder": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::AnimationBuilder"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "ピッカーが表示されたときに使用するアニメーション。",
          "docsTags": [],
          "values": [
            {
              "type": "((baseEl: any, opts?: any) => Animation)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "htmlAttributes",
          "type": "undefined | { [key: string]: any; }",
          "complexType": {
            "original": "{ [key: string]: any }",
            "resolved": "undefined | { [key: string]: any; }",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "ピッカーに渡す追加属性。",
          "docsTags": [],
          "values": [
            {
              "type": "undefined"
            },
            {
              "type": "{ [key: string]: any; }"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "isOpen",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "is-open",
          "reflectToAttr": false,
          "docs": "`true`の場合、ピッカーは開きます。`false`の場合、ピッカーは閉じます。ピッカーの表示をより細かく制御したい場合に使用します。それ以外の場合は pickerController や `trigger` プロパティを使用します。注意: ピッカーが終了しても `isOpen` は自動的に `false` に戻りません。あなたのコードでそれを行う必要があります。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "keyboardClose",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "keyboard-close",
          "reflectToAttr": false,
          "docs": "`true`の場合、オーバーレイが表示されたときにキーボードが自動的に解除されます。",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "leaveAnimation",
          "type": "((baseEl: any, opts?: any) => Animation) | undefined",
          "complexType": {
            "original": "AnimationBuilder",
            "resolved": "((baseEl: any, opts?: any) => Animation) | undefined",
            "references": {
              "AnimationBuilder": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::AnimationBuilder"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "ピッカーが解除されたときに使用するアニメーションです。",
          "docsTags": [],
          "values": [
            {
              "type": "((baseEl: any, opts?: any) => Animation)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "showBackdrop",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-backdrop",
          "reflectToAttr": false,
          "docs": "`true`の場合、ピッカーの後ろに背景が表示されます。",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "trigger",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "trigger",
          "reflectToAttr": false,
          "docs": "クリックするとピッカーが開くトリガー要素に対応するID。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "dismiss",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "complexType": {
            "signature": "(data?: any, role?: string) => Promise<boolean>",
            "parameters": [
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "data Any data to emit in the dismiss events."
                  }
                ],
                "text": "Any data to emit in the dismiss events."
              },
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "role The role of the element that is dismissing the picker.\nThis can be useful in a button handler for determining which button was\nclicked to dismiss the picker.\nSome examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`."
                  }
                ],
                "text": "The role of the element that is dismissing the picker.\nThis can be useful in a button handler for determining which button was\nclicked to dismiss the picker.\nSome examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`."
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "dismiss(data?: any, role?: string) => Promise<boolean>",
          "parameters": [],
          "docs": "ピッカー・オーバーレイが表示された後、それを解除します。",
          "docsTags": [
            {
              "name": "param",
              "text": "data Any data to emit in the dismiss events."
            },
            {
              "name": "param",
              "text": "role The role of the element that is dismissing the picker.\nThis can be useful in a button handler for determining which button was\nclicked to dismiss the picker.\nSome examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`."
            }
          ]
        },
        {
          "name": "getColumn",
          "returns": {
            "type": "Promise<PickerColumn | undefined>",
            "docs": ""
          },
          "complexType": {
            "signature": "(name: string) => Promise<PickerColumn | undefined>",
            "parameters": [
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "name The name of the column."
                  }
                ],
                "text": "The name of the column."
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "PickerColumn": {
                "location": "import",
                "path": "./picker-interface",
                "id": "src/components/picker/picker-interface.ts::PickerColumn"
              }
            },
            "return": "Promise<PickerColumn | undefined>"
          },
          "signature": "getColumn(name: string) => Promise<PickerColumn | undefined>",
          "parameters": [],
          "docs": "指定された名前に一致するカラムを取得します。",
          "docsTags": [
            {
              "name": "param",
              "text": "name The name of the column."
            }
          ]
        },
        {
          "name": "onDidDismiss",
          "returns": {
            "type": "Promise<OverlayEventDetail<T>>",
            "docs": ""
          },
          "complexType": {
            "signature": "<T = any>() => Promise<OverlayEventDetail<T>>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "OverlayEventDetail": {
                "location": "import",
                "path": "../../utils/overlays-interface",
                "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
              },
              "T": {
                "location": "global",
                "id": "global::T"
              }
            },
            "return": "Promise<OverlayEventDetail<T>>"
          },
          "signature": "onDidDismiss<T = any>() => Promise<OverlayEventDetail<T>>",
          "parameters": [],
          "docs": "ピッカーが解散したことを解決するPromiseを返します。",
          "docsTags": []
        },
        {
          "name": "onWillDismiss",
          "returns": {
            "type": "Promise<OverlayEventDetail<T>>",
            "docs": ""
          },
          "complexType": {
            "signature": "<T = any>() => Promise<OverlayEventDetail<T>>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "OverlayEventDetail": {
                "location": "import",
                "path": "../../utils/overlays-interface",
                "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
              },
              "T": {
                "location": "global",
                "id": "global::T"
              }
            },
            "return": "Promise<OverlayEventDetail<T>>"
          },
          "signature": "onWillDismiss<T = any>() => Promise<OverlayEventDetail<T>>",
          "parameters": [],
          "docs": "ピッカーが解散するタイミングを解決するPromiseを返します。",
          "docsTags": []
        },
        {
          "name": "present",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "present() => Promise<void>",
          "parameters": [],
          "docs": "ピッカー・オーバーレイを作成した後に提示します。",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "didDismiss",
          "detail": "OverlayEventDetail<any>",
          "bubbles": true,
          "complexType": {
            "original": "OverlayEventDetail",
            "resolved": "OverlayEventDetail<any>",
            "references": {
              "OverlayEventDetail": {
                "location": "import",
                "path": "../../utils/overlays-interface",
                "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "ピッカーが解散した後に発行されます。ionPickerDidDismissの略記です。",
          "docsTags": []
        },
        {
          "event": "didPresent",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "ピッカーが提示された後に発行されます。ionPickerWillDismissの略記です。",
          "docsTags": []
        },
        {
          "event": "ionPickerDidDismiss",
          "detail": "OverlayEventDetail<any>",
          "bubbles": true,
          "complexType": {
            "original": "OverlayEventDetail",
            "resolved": "OverlayEventDetail<any>",
            "references": {
              "OverlayEventDetail": {
                "location": "import",
                "path": "../../utils/overlays-interface",
                "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "ピッカーが解散した後に発行されます。",
          "docsTags": []
        },
        {
          "event": "ionPickerDidPresent",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "ピッカーが提示された後に発行されます。",
          "docsTags": []
        },
        {
          "event": "ionPickerWillDismiss",
          "detail": "OverlayEventDetail<any>",
          "bubbles": true,
          "complexType": {
            "original": "OverlayEventDetail",
            "resolved": "OverlayEventDetail<any>",
            "references": {
              "OverlayEventDetail": {
                "location": "import",
                "path": "../../utils/overlays-interface",
                "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "ピッカーが解散する前に発行されます。",
          "docsTags": []
        },
        {
          "event": "ionPickerWillPresent",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "ピッカーが提示される前に発行されます。",
          "docsTags": []
        },
        {
          "event": "willDismiss",
          "detail": "OverlayEventDetail<any>",
          "bubbles": true,
          "complexType": {
            "original": "OverlayEventDetail",
            "resolved": "OverlayEventDetail<any>",
            "references": {
              "OverlayEventDetail": {
                "location": "import",
                "path": "../../utils/overlays-interface",
                "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "ピッカーが解散する前に発行されます。ionPickerWillDismissの略記です。",
          "docsTags": []
        },
        {
          "event": "willPresent",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "ピッカーが提示される前に発行されます。ionPickerWillPresentの略記です。",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--backdrop-opacity",
          "annotation": "prop",
          "docs": "背景の不透明度"
        },
        {
          "name": "--background",
          "annotation": "prop",
          "docs": "ピッカーの背景"
        },
        {
          "name": "--background-rgb",
          "annotation": "prop",
          "docs": "ピッカーの背景（rgb形式）"
        },
        {
          "name": "--border-color",
          "annotation": "prop",
          "docs": "ピッカーのボーダーカラー"
        },
        {
          "name": "--border-radius",
          "annotation": "prop",
          "docs": "ピッカーのボーダー半径"
        },
        {
          "name": "--border-style",
          "annotation": "prop",
          "docs": "ピッカーのボーダースタイル"
        },
        {
          "name": "--border-width",
          "annotation": "prop",
          "docs": "ピッカーのボーダー幅"
        },
        {
          "name": "--height",
          "annotation": "prop",
          "docs": "ピッカーの高さ"
        },
        {
          "name": "--max-height",
          "annotation": "prop",
          "docs": "ピッカーの最大の高さ"
        },
        {
          "name": "--max-width",
          "annotation": "prop",
          "docs": "ピッカーの最大幅"
        },
        {
          "name": "--min-height",
          "annotation": "prop",
          "docs": "ピッカーの最小の高さ"
        },
        {
          "name": "--min-width",
          "annotation": "prop",
          "docs": "ピッカーの最小幅"
        },
        {
          "name": "--width",
          "annotation": "prop",
          "docs": "ピッカーの幅"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "ion-backdrop",
        "ion-picker-column"
      ],
      "dependencyGraph": {
        "ion-picker": [
          "ion-backdrop",
          "ion-picker-column"
        ]
      }
    },
    {
      "filePath": "src/components/popover/popover.tsx",
      "encapsulation": "shadow",
      "tag": "ion-popover",
      "docs": "",
      "docsTags": [
        {
          "name": "virtualProp",
          "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
        },
        {
          "name": "slot",
          "text": "- Content is placed inside of the `.popover-content` element."
        },
        {
          "name": "part",
          "text": "backdrop - The `ion-backdrop` element."
        },
        {
          "name": "part",
          "text": "arrow - The arrow that points to the reference element. Only applies on `ios` mode."
        },
        {
          "name": "part",
          "text": "content - The wrapper element for the default slot."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "alignment",
          "type": "\"center\" | \"end\" | \"start\" | undefined",
          "complexType": {
            "original": "PositionAlign",
            "resolved": "\"center\" | \"end\" | \"start\" | undefined",
            "references": {
              "PositionAlign": {
                "location": "import",
                "path": "./popover-interface",
                "id": "src/components/popover/popover-interface.ts::PositionAlign"
              }
            }
          },
          "mutable": true,
          "attr": "alignment",
          "reflectToAttr": false,
          "docs": "ポップオーバーのコンテンツを `reference` ポイントに揃える方法を記述します。デフォルトは `ios` モードでは `\"center\"` で、`md` モードでは `\"start\"` です。",
          "docsTags": [],
          "values": [
            {
              "value": "center",
              "type": "string"
            },
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "animated",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "animated",
          "reflectToAttr": false,
          "docs": "`true`の場合、ポップオーバーはアニメーションを行います。",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "arrow",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "arrow",
          "reflectToAttr": false,
          "docs": "`true`の場合、`ios` modeで動作しているとき、ポップオーバーは `reference` を指し示す矢印を表示します。 `md` modeでは適用されない。",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "backdropDismiss",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "backdrop-dismiss",
          "reflectToAttr": false,
          "docs": "`true`の場合、バックドロップがクリックされたときにポップオーバーが解除される。",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "component",
          "type": "Function | HTMLElement | null | string | undefined",
          "complexType": {
            "original": "ComponentRef",
            "resolved": "Function | HTMLElement | null | string | undefined",
            "references": {
              "ComponentRef": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::ComponentRef"
              }
            }
          },
          "mutable": false,
          "attr": "component",
          "reflectToAttr": false,
          "docs": "ポップオーバーの内側に表示するコンポーネントです。これを使う必要があるのは、JavaScriptフレームワークを使用していない場合だけです。そうでない場合は、`ion-popover`の中にコンポーネントを入れるだけでいいです。",
          "docsTags": [],
          "values": [
            {
              "type": "Function"
            },
            {
              "type": "HTMLElement"
            },
            {
              "type": "null"
            },
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "componentProps",
          "type": "undefined | { [key: string]: any; }",
          "complexType": {
            "original": "ComponentProps",
            "resolved": "undefined | { [key: string]: any; }",
            "references": {
              "ComponentProps": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::ComponentProps"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "ポップオーバー・コンポーネントに渡すデータです。これを使う必要があるのは、JavaScriptフレームワークを使用していない場合だけです。そうでなければ、コンポーネントに直接propsを設定すればよいのです。",
          "docsTags": [],
          "values": [
            {
              "type": "undefined"
            },
            {
              "type": "{ [key: string]: any; }"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "dismissOnSelect",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "dismiss-on-select",
          "reflectToAttr": false,
          "docs": "`true`の場合、コンテンツがクリックされると、ポップオーバーは自動的に解除される。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "enterAnimation",
          "type": "((baseEl: any, opts?: any) => Animation) | undefined",
          "complexType": {
            "original": "AnimationBuilder",
            "resolved": "((baseEl: any, opts?: any) => Animation) | undefined",
            "references": {
              "AnimationBuilder": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::AnimationBuilder"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "ポップオーバーが表示されたときに使用するアニメーションです。",
          "docsTags": [],
          "values": [
            {
              "type": "((baseEl: any, opts?: any) => Animation)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "event",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "event",
          "reflectToAttr": false,
          "docs": "ポップオーバー・アニメーションに渡すイベントです。",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "htmlAttributes",
          "type": "undefined | { [key: string]: any; }",
          "complexType": {
            "original": "{ [key: string]: any }",
            "resolved": "undefined | { [key: string]: any; }",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "ポップオーバーに渡す追加属性。",
          "docsTags": [],
          "values": [
            {
              "type": "undefined"
            },
            {
              "type": "{ [key: string]: any; }"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "isOpen",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "is-open",
          "reflectToAttr": false,
          "docs": "`true`の場合、ポップオーバーは開く。もし `false` ならば、ポップオーバーは閉じます。より細かく表示を制御する必要がある場合はこれを使用し、そうでない場合は popoverController または `trigger` プロパティを使用します。注意: ポップオーバーが閉じると `isOpen` は自動的に `false` に戻されません。あなたのコードでそれを行う必要があります。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "keepContentsMounted",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "keep-contents-mounted",
          "reflectToAttr": false,
          "docs": "`true`の場合、ポップオーバーの作成時に `ion-popover` に渡されたコンポーネントが自動的にマウントされます。このコンポーネントは、ポップオーバーが削除されてもマウントされたままです。ただし、ポップオーバーが破棄されると、コンポーネントは破棄されます。このプロパティはリアクティブではないので、ポップオーバーを最初に作成するときにのみ使用する必要があります。  注：この機能は、Angular、React、VueなどのJavaScriptフレームワークのインラインポップオーバーにのみ適用されます。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "keyboardClose",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "keyboard-close",
          "reflectToAttr": false,
          "docs": "`true`の場合、オーバーレイが表示されたときにキーボードが自動的に解除されます。",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "leaveAnimation",
          "type": "((baseEl: any, opts?: any) => Animation) | undefined",
          "complexType": {
            "original": "AnimationBuilder",
            "resolved": "((baseEl: any, opts?: any) => Animation) | undefined",
            "references": {
              "AnimationBuilder": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::AnimationBuilder"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "ポップオーバーが解除されたときに使用するアニメーションです。",
          "docsTags": [],
          "values": [
            {
              "type": "((baseEl: any, opts?: any) => Animation)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "reference",
          "type": "\"event\" | \"trigger\"",
          "complexType": {
            "original": "PositionReference",
            "resolved": "\"event\" | \"trigger\"",
            "references": {
              "PositionReference": {
                "location": "import",
                "path": "./popover-interface",
                "id": "src/components/popover/popover-interface.ts::PositionReference"
              }
            }
          },
          "mutable": false,
          "attr": "reference",
          "reflectToAttr": false,
          "docs": "ポップオーバーを何に対して相対的に配置するかを記述します。もし `\"trigger\"` ならば、ポップオーバーはトリガーボタンに相対して配置されます。イベントを渡すと、event.targetによって決定されます。もし `\"event\"` ならば、ポップオーバーはトリガーアクションのx/y座標に相対的に配置されます。イベントを渡す場合、これはevent.clientXとevent.clientYを介して決定されます。",
          "docsTags": [],
          "default": "'trigger'",
          "values": [
            {
              "value": "event",
              "type": "string"
            },
            {
              "value": "trigger",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showBackdrop",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-backdrop",
          "reflectToAttr": false,
          "docs": "`true`の場合、ポップオーバーの後ろに背景が表示されます。このプロパティは、ポップオーバーが表示されたときに背景が画面を暗くするかどうかを制御します。このプロパティは、背景がアクティブであるかどうか、またはDOMに存在するかどうかを制御しません。",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "side",
          "type": "\"bottom\" | \"end\" | \"left\" | \"right\" | \"start\" | \"top\"",
          "complexType": {
            "original": "PositionSide",
            "resolved": "\"bottom\" | \"end\" | \"left\" | \"right\" | \"start\" | \"top\"",
            "references": {
              "PositionSide": {
                "location": "import",
                "path": "./popover-interface",
                "id": "src/components/popover/popover-interface.ts::PositionSide"
              }
            }
          },
          "mutable": false,
          "attr": "side",
          "reflectToAttr": false,
          "docs": "ポップオーバーを `reference` ポイントのどちら側に配置するかを記述します。`\"start\"` と `\"end\"` の値はRTLを意識しており、`\"left\"` と `\"right\"` の値はそうではない。",
          "docsTags": [],
          "default": "'bottom'",
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"auto\" | \"cover\"",
          "complexType": {
            "original": "PopoverSize",
            "resolved": "\"auto\" | \"cover\"",
            "references": {
              "PopoverSize": {
                "location": "import",
                "path": "./popover-interface",
                "id": "src/components/popover/popover-interface.ts::PopoverSize"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "ポップオーバーの幅を計算する方法を記述します。もし `\"cover\"` なら、ポップオーバーの幅はトリガーの幅に合わせます。auto\"` の場合、ポップオーバーの幅は静的なデフォルト値に設定されます。",
          "docsTags": [],
          "default": "'auto'",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "cover",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "translucent",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "translucent",
          "reflectToAttr": false,
          "docs": "`true`の場合、ポップオーバーは半透明になります。modeが `\"ios\"` で、デバイスが [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility) をサポートしている場合にのみ適用されます。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "trigger",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "trigger",
          "reflectToAttr": false,
          "docs": "ポップオーバーを開かせるトリガー要素に対応するIDです。trigger-action`プロパティを使用して、ポップオーバーを開くためのインタラクションをカスタマイズすることができます。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "triggerAction",
          "type": "\"click\" | \"context-menu\" | \"hover\"",
          "complexType": {
            "original": "TriggerAction",
            "resolved": "\"click\" | \"context-menu\" | \"hover\"",
            "references": {
              "TriggerAction": {
                "location": "import",
                "path": "./popover-interface",
                "id": "src/components/popover/popover-interface.ts::TriggerAction"
              }
            }
          },
          "mutable": false,
          "attr": "trigger-action",
          "reflectToAttr": false,
          "docs": "どのようなトリガーとの相互作用でポップオーバーを開くべきかを記述します。 `trigger`プロパティが `undefined` の場合は適用されません。`\"click\"` の場合、トリガーが左クリックされたときにポップオーバーが表示されます。`\"hover\"` の場合、ポインタがトリガーの上に乗ったときにポップオーバーが表示されます。コンテキストメニューの場合、デスクトップでは右クリック、モバイルでは長押しでポップオーバーが表示されます。これは、デバイスの通常のコンテキストメニューが表示されるのを防ぐことにもなります。",
          "docsTags": [],
          "default": "'click'",
          "values": [
            {
              "value": "click",
              "type": "string"
            },
            {
              "value": "context-menu",
              "type": "string"
            },
            {
              "value": "hover",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "dismiss",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "complexType": {
            "signature": "(data?: any, role?: string, dismissParentPopover?: boolean) => Promise<boolean>",
            "parameters": [
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "data Any data to emit in the dismiss events."
                  }
                ],
                "text": "Any data to emit in the dismiss events."
              },
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "role The role of the element that is dismissing the popover. For example, 'cancel' or 'backdrop'."
                  }
                ],
                "text": "The role of the element that is dismissing the popover. For example, 'cancel' or 'backdrop'."
              },
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "dismissParentPopover If `true`, dismissing this popover will also dismiss\na parent popover if this popover is nested. Defaults to `true`."
                  }
                ],
                "text": "If `true`, dismissing this popover will also dismiss\na parent popover if this popover is nested. Defaults to `true`."
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "PopoverDismissOptions": {
                "location": "global",
                "id": "global::PopoverDismissOptions"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "dismiss(data?: any, role?: string, dismissParentPopover?: boolean) => Promise<boolean>",
          "parameters": [],
          "docs": "ポップオーバーオーバーレイが提示された後、それを解除します。",
          "docsTags": [
            {
              "name": "param",
              "text": "data Any data to emit in the dismiss events."
            },
            {
              "name": "param",
              "text": "role The role of the element that is dismissing the popover. For example, 'cancel' or 'backdrop'."
            },
            {
              "name": "param",
              "text": "dismissParentPopover If `true`, dismissing this popover will also dismiss\na parent popover if this popover is nested. Defaults to `true`."
            }
          ]
        },
        {
          "name": "onDidDismiss",
          "returns": {
            "type": "Promise<OverlayEventDetail<T>>",
            "docs": ""
          },
          "complexType": {
            "signature": "<T = any>() => Promise<OverlayEventDetail<T>>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "OverlayEventDetail": {
                "location": "import",
                "path": "../../utils/overlays-interface",
                "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
              },
              "T": {
                "location": "global",
                "id": "global::T"
              }
            },
            "return": "Promise<OverlayEventDetail<T>>"
          },
          "signature": "onDidDismiss<T = any>() => Promise<OverlayEventDetail<T>>",
          "parameters": [],
          "docs": "ポップオーバーが解除されたタイミングを解決するPromiseを返します。",
          "docsTags": []
        },
        {
          "name": "onWillDismiss",
          "returns": {
            "type": "Promise<OverlayEventDetail<T>>",
            "docs": ""
          },
          "complexType": {
            "signature": "<T = any>() => Promise<OverlayEventDetail<T>>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "OverlayEventDetail": {
                "location": "import",
                "path": "../../utils/overlays-interface",
                "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
              },
              "T": {
                "location": "global",
                "id": "global::T"
              }
            },
            "return": "Promise<OverlayEventDetail<T>>"
          },
          "signature": "onWillDismiss<T = any>() => Promise<OverlayEventDetail<T>>",
          "parameters": [],
          "docs": "ポップオーバーが解除されるタイミングを解決するPromiseを返します。",
          "docsTags": []
        },
        {
          "name": "present",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(event?: MouseEvent | TouchEvent | PointerEvent | CustomEvent) => Promise<void>",
            "parameters": [
              {
                "tags": [],
                "text": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "MouseEvent": {
                "location": "global",
                "id": "global::MouseEvent"
              },
              "TouchEvent": {
                "location": "global",
                "id": "global::TouchEvent"
              },
              "PointerEvent": {
                "location": "global",
                "id": "global::PointerEvent"
              },
              "CustomEvent": {
                "location": "global",
                "id": "global::CustomEvent"
              },
              "PopoverPresentOptions": {
                "location": "global",
                "id": "global::PopoverPresentOptions"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "present(event?: MouseEvent | TouchEvent | PointerEvent | CustomEvent) => Promise<void>",
          "parameters": [],
          "docs": "ポップオーバーが作成された後に、ポップオーバーを表示します。開発者は、マウス、タッチ、またはポインタイベントを渡すことで、そのイベントがディスパッチされた場所と相対的にポップオーバーを配置することができます。",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "didDismiss",
          "detail": "OverlayEventDetail<any>",
          "bubbles": true,
          "complexType": {
            "original": "OverlayEventDetail",
            "resolved": "OverlayEventDetail<any>",
            "references": {
              "OverlayEventDetail": {
                "location": "import",
                "path": "../../utils/overlays-interface",
                "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "ポップオーバーが解散した後に発行されます。ionPopoverDidDismissの略記です。",
          "docsTags": []
        },
        {
          "event": "didPresent",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "ポップオーバーが提示された後に発行されます。ionPopoverWillDismissの略記です。",
          "docsTags": []
        },
        {
          "event": "ionPopoverDidDismiss",
          "detail": "OverlayEventDetail<any>",
          "bubbles": true,
          "complexType": {
            "original": "OverlayEventDetail",
            "resolved": "OverlayEventDetail<any>",
            "references": {
              "OverlayEventDetail": {
                "location": "import",
                "path": "../../utils/overlays-interface",
                "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "ポップオーバーが解除された後に発行されます。",
          "docsTags": []
        },
        {
          "event": "ionPopoverDidPresent",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "ポップオーバーが表示された後に発行されます。",
          "docsTags": []
        },
        {
          "event": "ionPopoverWillDismiss",
          "detail": "OverlayEventDetail<any>",
          "bubbles": true,
          "complexType": {
            "original": "OverlayEventDetail",
            "resolved": "OverlayEventDetail<any>",
            "references": {
              "OverlayEventDetail": {
                "location": "import",
                "path": "../../utils/overlays-interface",
                "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "ポップオーバーが解除される前に発行されます。",
          "docsTags": []
        },
        {
          "event": "ionPopoverWillPresent",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "ポップオーバーが表示される前に発行されます。",
          "docsTags": []
        },
        {
          "event": "willDismiss",
          "detail": "OverlayEventDetail<any>",
          "bubbles": true,
          "complexType": {
            "original": "OverlayEventDetail",
            "resolved": "OverlayEventDetail<any>",
            "references": {
              "OverlayEventDetail": {
                "location": "import",
                "path": "../../utils/overlays-interface",
                "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "ポップオーバーが解散する前に発行されます。ionPopoverWillDismissの略記です。",
          "docsTags": []
        },
        {
          "event": "willPresent",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "ポップオーバーが提示される前に発行されます。ionPopoverWillPresentの略記です。",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--backdrop-opacity",
          "annotation": "prop",
          "docs": "背景の不透明度"
        },
        {
          "name": "--background",
          "annotation": "prop",
          "docs": "ポップオーバーの背景"
        },
        {
          "name": "--box-shadow",
          "annotation": "prop",
          "docs": "ポップオーバーのボックスシャドウ"
        },
        {
          "name": "--height",
          "annotation": "prop",
          "docs": "ポップオーバーの高さ"
        },
        {
          "name": "--max-height",
          "annotation": "prop",
          "docs": "ポップオーバーの最大の高さ"
        },
        {
          "name": "--max-width",
          "annotation": "prop",
          "docs": "ポップオーバーの最大幅"
        },
        {
          "name": "--min-height",
          "annotation": "prop",
          "docs": "ポップオーバーの高さの最小値"
        },
        {
          "name": "--min-width",
          "annotation": "prop",
          "docs": "ポップオーバーの最小幅"
        },
        {
          "name": "--offset-x",
          "annotation": "prop",
          "docs": "ポップオーバーをX軸方向に移動させる量"
        },
        {
          "name": "--offset-y",
          "annotation": "prop",
          "docs": "ポップオーバーをY軸方向に移動させる量を指定します。"
        },
        {
          "name": "--width",
          "annotation": "prop",
          "docs": "ポップオーバーの幅"
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "コンテンツは `.popover-content` 要素の内部に配置される。"
        }
      ],
      "parts": [
        {
          "name": "arrow",
          "docs": "参照要素を指し示す矢印。`ios` mode時のみ適用される。"
        },
        {
          "name": "backdrop",
          "docs": "ion-backdrop`要素です。"
        },
        {
          "name": "content",
          "docs": "デフォルトslotのラッパー要素です。"
        }
      ],
      "dependents": [
        "ion-datetime",
        "ion-select"
      ],
      "dependencies": [
        "ion-backdrop"
      ],
      "dependencyGraph": {
        "ion-popover": [
          "ion-backdrop"
        ],
        "ion-datetime": [
          "ion-popover"
        ],
        "ion-select": [
          "ion-popover"
        ]
      }
    },
    {
      "filePath": "src/components/progress-bar/progress-bar.tsx",
      "encapsulation": "shadow",
      "tag": "ion-progress-bar",
      "docs": "",
      "docsTags": [
        {
          "name": "virtualProp",
          "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
        },
        {
          "name": "part",
          "text": "progress - The progress bar that shows the current value when `type` is `\"determinate\"` and slides back and forth when `type` is `\"indeterminate\"`."
        },
        {
          "name": "part",
          "text": "stream - The animated circles that appear while buffering. This only shows when `buffer` is set and `type` is `\"determinate\"`."
        },
        {
          "name": "part",
          "text": "track - The track bar behind the progress bar. If the `buffer` property is set and `type` is `\"determinate\"` the track will be the\nwidth of the `buffer` value."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "buffer",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "buffer",
          "reflectToAttr": false,
          "docs": "バッファと値が1より小さい場合、バッファの円が表示されます。バッファは[0, 1]の間である必要があります。",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
          "complexType": {
            "original": "Color",
            "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
            "references": {
              "Color": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::Color"
              }
            }
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "アプリケーションのカラーパレットから使用する色を指定します。デフォルトのオプションは以下の通りです。 `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, と `\"dark\"` です．色に関する詳しい情報は [theming](/docs/theming/basics) を参照してください。",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "tertiary",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "type": "string & Record<never, never>"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "reversed",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "reversed",
          "reflectToAttr": false,
          "docs": "true の場合、プログレスバーの方向を反転させます。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"determinate\" | \"indeterminate\"",
          "complexType": {
            "original": "'determinate' | 'indeterminate'",
            "resolved": "\"determinate\" | \"indeterminate\"",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "処理にかかる時間が既知か否かに応じて、プログレスバーの状態を指定します。デフォルトのオプションは以下の通り。determinate\"` (アニメーションなし), `\"indeterminate\"` (左から右へアニメーションする).",
          "docsTags": [],
          "default": "'determinate'",
          "values": [
            {
              "value": "determinate",
              "type": "string"
            },
            {
              "value": "indeterminate",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "この値は、`type`が`\"determinate\"`である場合に、アクティブバーをどれだけ表示するかを決定するものです。値は [0, 1] の間であるべきです。",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--background",
          "annotation": "prop",
          "docs": "プログレストラックの背景、または `buffer` が設定されている場合はバッファバー。"
        },
        {
          "name": "--buffer-background",
          "annotation": "prop",
          "docs": "DEPRECATED、代わりに `--background` を使用します。"
        },
        {
          "name": "--progress-background",
          "annotation": "prop",
          "docs": "現在値を表すプログレスバーの背景"
        }
      ],
      "slots": [],
      "parts": [
        {
          "name": "progress",
          "docs": "type`が`\"determinate\"`のときは現在値を表示し、`type`が`\"indeterminate\"`のときは前後にスライドするプログレスバーです。"
        },
        {
          "name": "stream",
          "docs": "バッファリング中に表示されるアニメーションの円です。これは `buffer` が設定され、`type` が `\"determinate\"` のときのみ表示される。"
        },
        {
          "name": "track",
          "docs": "プログレスバーの後ろにあるトラックバーです。buffer`プロパティが設定され、`type`が `\"determinate\"` である場合、トラックは `buffer` 値の幅となる。"
        }
      ],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/radio-group/radio-group.tsx",
      "encapsulation": "none",
      "tag": "ion-radio-group",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "allowEmptySelection",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "allow-empty-selection",
          "reflectToAttr": false,
          "docs": "`true`の場合、ラジオを非選択にすることができる。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "フォームデータとともに送信されるコントロールの名前。",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "complexType": {
            "original": "any | null",
            "resolved": "any",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "無線グループの値です。",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "ionChange",
          "detail": "RadioGroupChangeEventDetail<any>",
          "bubbles": true,
          "complexType": {
            "original": "RadioGroupChangeEventDetail",
            "resolved": "RadioGroupChangeEventDetail<any>",
            "references": {
              "RadioGroupChangeEventDetail": {
                "location": "import",
                "path": "./radio-group-interface",
                "id": "src/components/radio-group/radio-group-interface.ts::RadioGroupChangeEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "値が変更されたときに発行されます。",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "keydown",
          "target": "document",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "ion-select-popover"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "ion-select-popover": [
          "ion-radio-group"
        ]
      }
    },
    {
      "filePath": "src/components/radio/radio.tsx",
      "encapsulation": "shadow",
      "tag": "ion-radio",
      "docs": "",
      "docsTags": [
        {
          "name": "virtualProp",
          "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
        },
        {
          "name": "slot",
          "text": "- The label text to associate with the radio. Use the \"labelPlacement\" property to control where the label is placed relative to the radio."
        },
        {
          "name": "part",
          "text": "container - The container for the radio mark."
        },
        {
          "name": "part",
          "text": "mark - The checkmark or dot used to indicate the checked state."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "alignment",
          "type": "\"center\" | \"start\"",
          "complexType": {
            "original": "'start' | 'center'",
            "resolved": "\"center\" | \"start\"",
            "references": {}
          },
          "mutable": false,
          "attr": "alignment",
          "reflectToAttr": false,
          "docs": "ラジオとラベルの十字軸上の配置を制御する方法。start\"`：ラベルとコントロールはLTRでは横軸の左側に、RTLでは右側に表示されます。center\"`：ラベルとコントロールはLTRでもRTLでも十字軸の中央に表示されます。",
          "docsTags": [],
          "default": "'center'",
          "values": [
            {
              "value": "center",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
          "complexType": {
            "original": "Color",
            "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
            "references": {
              "Color": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::Color"
              }
            }
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "アプリケーションのカラーパレットから使用する色を指定します。デフォルトのオプションは以下の通りです。 `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, と `\"dark\"` です．色に関する詳しい情報は [theming](/docs/theming/basics) を参照してください。",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "tertiary",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "type": "string & Record<never, never>"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "`true`の場合、ユーザはラジオと対話することができません。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "justify",
          "type": "\"end\" | \"space-between\" | \"start\"",
          "complexType": {
            "original": "'start' | 'end' | 'space-between'",
            "resolved": "\"end\" | \"space-between\" | \"start\"",
            "references": {}
          },
          "mutable": false,
          "attr": "justify",
          "reflectToAttr": false,
          "docs": "ラベルとラジオを1行にまとめる方法。`\"start\"` とします：ラベルとラジオは、LTRでは左側に、RTLでは右側に表示されます。`\"end\"`：ラベルとラジオは、LTRでは右に、RTLでは左に表示されます。`\"space-between\"`：ラベルとラジオは、2つの要素の間にスペースがある状態で、行の反対側の端に表示されます。",
          "docsTags": [],
          "default": "'space-between'",
          "values": [
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "space-between",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelPlacement",
          "type": "\"end\" | \"fixed\" | \"stacked\" | \"start\"",
          "complexType": {
            "original": "'start' | 'end' | 'fixed' | 'stacked'",
            "resolved": "\"end\" | \"fixed\" | \"stacked\" | \"start\"",
            "references": {}
          },
          "mutable": false,
          "attr": "label-placement",
          "reflectToAttr": false,
          "docs": "ラジオに対してラベルを配置する位置。start\"`：ラベルはLTRではラジオの左に、RTLでは右に表示されます。end\"`：ラベルはLTRではラジオの右、RTLでは左に表示される。fixed\"`：ラベルの幅が固定される以外は `\"start\"` と同じ動作をします。長いテキストは省略記号(\"...\")で切り捨てられます。stacked\"`：ラベルは向きに関係なくラジオの上に表示されます。ラベルの整列は `alignment` プロパティで制御できます。",
          "docsTags": [],
          "default": "'start'",
          "values": [
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "fixed",
              "type": "string"
            },
            {
              "value": "stacked",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "legacy",
          "type": "boolean | undefined",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "legacy",
          "reflectToAttr": false,
          "docs": "`legacy`プロパティを`true`に設定すると、レガシーフォームコントロールのマークアップを強制的に使用することができます。Ionicは、コンポーネントが`aria-label`属性またはラベルテキストを含むデフォルトスロットのいずれかを使用している場合にのみ、モダンフォームマークアップを選択するようになっています。そのため、`legacy`プロパティは、この自動オプトイン動作を回避したい場合にのみ、エスケープハッチとして使用する必要があります。なお、このプロパティはIonicの今後のメジャーリリースで削除され、すべてのフォームコンポーネントはモダンフォームマークアップを使用するようにオプトインされる予定です。",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "フォームデータとともに送信されるコントロールの名前。",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "complexType": {
            "original": "any | null",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "ラジオの値です。",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "ionBlur",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "ラジオボタンのフォーカスが外れたときに発行されます。",
          "docsTags": []
        },
        {
          "event": "ionFocus",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "ラジオボタンにフォーカスが当たったときに発行されます。",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--border-radius",
          "annotation": "prop",
          "docs": "ラジオのボーダー半径"
        },
        {
          "name": "--color",
          "annotation": "prop",
          "docs": "ラジオのカラー"
        },
        {
          "name": "--color-checked",
          "annotation": "prop",
          "docs": "チェックしたラジオの色"
        },
        {
          "name": "--inner-border-radius",
          "annotation": "prop",
          "docs": "内側のチェック付きラジオのボーダー半径"
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "ラジオに関連付けるラベルテキストです。\"labelPlacement\"プロパティを使用して、ラジオに対するラベルの相対的な配置を制御します。"
        }
      ],
      "parts": [
        {
          "name": "container",
          "docs": "ラジオマークの入れ物です。"
        },
        {
          "name": "mark",
          "docs": "チェックされた状態を示すために使用されるチェックマークまたはドットです。"
        }
      ],
      "dependents": [
        "ion-select-popover"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "ion-select-popover": [
          "ion-radio"
        ]
      }
    },
    {
      "filePath": "src/components/range/range.tsx",
      "encapsulation": "shadow",
      "tag": "ion-range",
      "docs": "",
      "docsTags": [
        {
          "name": "virtualProp",
          "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
        },
        {
          "name": "slot",
          "text": "label - The label text to associate with the range. Use the \"labelPlacement\" property to control where the label is placed relative to the range."
        },
        {
          "name": "slot",
          "text": "start - Content is placed to the left of the range slider in LTR, and to the right in RTL."
        },
        {
          "name": "slot",
          "text": "end - Content is placed to the right of the range slider in LTR, and to the left in RTL."
        },
        {
          "name": "part",
          "text": "tick - An inactive tick mark."
        },
        {
          "name": "part",
          "text": "tick-active - An active tick mark."
        },
        {
          "name": "part",
          "text": "pin - The counter that appears above a knob."
        },
        {
          "name": "part",
          "text": "knob - The handle that is used to drag the range."
        },
        {
          "name": "part",
          "text": "bar - The inactive part of the bar."
        },
        {
          "name": "part",
          "text": "bar-active - The active part of the bar."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "activeBarStart",
          "type": "number | undefined",
          "complexType": {
            "original": "number",
            "resolved": "number | undefined",
            "references": {}
          },
          "mutable": true,
          "attr": "active-bar-start",
          "reflectToAttr": false,
          "docs": "レンジアクティブバーの開始位置です。この機能は、ノブが1つの場合のみ有効です（dualKnobs=\"false\"）。有効な値は、min値以上、max値以下です。",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "color",
          "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
          "complexType": {
            "original": "Color",
            "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
            "references": {
              "Color": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::Color"
              }
            }
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "アプリケーションのカラーパレットから使用する色を指定します。デフォルトのオプションは以下の通りです。 `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, と `\"dark\"` です．色に関する詳しい情報は [theming](/docs/theming/basics) を参照してください。",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "tertiary",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "type": "string & Record<never, never>"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "debounce",
          "type": "number | undefined",
          "complexType": {
            "original": "number",
            "resolved": "number | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "debounce",
          "reflectToAttr": false,
          "docs": "レンジの値が変化するたびに `ionInput` イベントをトリガーするまでの待ち時間（ミリ秒単位）。",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "`true`の場合、ユーザは範囲と対話することができません。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dualKnobs",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "dual-knobs",
          "reflectToAttr": false,
          "docs": "2つのノブを表示します。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "コントロールのラベルとして表示するテキスト。プレーンテキストのみが必要な場合は `label` スロットよりもこちらを使用する。両方を使用する場合は、`label` プロパティが `label` スロットよりも優先される。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "labelPlacement",
          "type": "\"end\" | \"fixed\" | \"stacked\" | \"start\"",
          "complexType": {
            "original": "'start' | 'end' | 'fixed' | 'stacked'",
            "resolved": "\"end\" | \"fixed\" | \"stacked\" | \"start\"",
            "references": {}
          },
          "mutable": false,
          "attr": "label-placement",
          "reflectToAttr": false,
          "docs": "範囲に対するラベルの位置。start\"`：ラベルはLTRでは範囲の左側、RTLでは右側に表示される。end\"`：ラベルはLTRでは範囲の右側、RTLでは左側に表示される。fixed\"`：ラベルの幅が固定される以外は `\"start\"` と同じ動作をします。長いテキストは省略記号(\"...\")で切り捨てられます。積み上げ\"`：ラベルは方向に関係なく範囲の上に表示されます。",
          "docsTags": [],
          "default": "'start'",
          "values": [
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "fixed",
              "type": "string"
            },
            {
              "value": "stacked",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "legacy",
          "type": "boolean | undefined",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "legacy",
          "reflectToAttr": false,
          "docs": "`legacy`プロパティを`true`に設定すると、レガシーフォームコントロールのマークアップを強制的に使用することができます。Ionicは、コンポーネントが`aria-label`属性または`label`プロパティを使用している場合にのみ、最新のフォームマークアップを選択します。そのため、`legacy`プロパティは、この自動オプトイン動作を回避したい場合にのみ、エスケープハッチとして使用する必要があります。なお、このプロパティはIonicの今後のメジャーリリースで削除され、すべてのフォームコンポーネントはモダンフォームマークアップを使用するようオプトインされる予定です。",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "max",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "範囲の最大整数値。",
          "docsTags": [],
          "default": "100",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "min",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "min",
          "reflectToAttr": false,
          "docs": "範囲の最小の整数値。",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "フォームデータとともに送信されるコントロールの名前。",
          "docsTags": [],
          "default": "this.rangeId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pin",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "pin",
          "reflectToAttr": false,
          "docs": "`true`の場合、ノブを押したときに整数値のピンが表示されます。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pinFormatter",
          "type": "(value: number) => string | number",
          "complexType": {
            "original": "PinFormatter",
            "resolved": "(value: number) => string | number",
            "references": {
              "PinFormatter": {
                "location": "import",
                "path": "./range-interface",
                "id": "src/components/range/range-interface.ts::PinFormatter"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "ピンのテキストをフォーマットするために使用されるコールバックです。デフォルトでは、ピンのテキストは `Math.round(value)` に設定されます。",
          "docsTags": [],
          "default": "(value: number): number => Math.round(value)",
          "values": [
            {
              "type": "(value: number) => string"
            },
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "snaps",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "snaps",
          "reflectToAttr": false,
          "docs": "`true`の場合、ノブはステッププロパティの値に基づいて等間隔に配置されたティックマークにスナップします。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "step",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "step",
          "reflectToAttr": false,
          "docs": "値の粒度を指定します。",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "ticks",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "ticks",
          "reflectToAttr": false,
          "docs": "`true`の場合、ステップの値に基づいてティックマークを表示します。snaps`が `true` の場合のみ適用される。",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number | { lower: number; upper: number; }",
          "complexType": {
            "original": "RangeValue",
            "resolved": "number | { lower: number; upper: number; }",
            "references": {
              "RangeValue": {
                "location": "import",
                "path": "./range-interface",
                "id": "src/components/range/range-interface.ts::RangeValue"
              }
            }
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "範囲の値です。",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            },
            {
              "type": "{ lower: number; upper: number; }"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "ionBlur",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "レンジの焦点が合わなくなったときに発行されます。",
          "docsTags": []
        },
        {
          "event": "ionChange",
          "detail": "RangeChangeEventDetail",
          "bubbles": true,
          "complexType": {
            "original": "RangeChangeEventDetail",
            "resolved": "RangeChangeEventDetail",
            "references": {
              "RangeChangeEventDetail": {
                "location": "import",
                "path": "./range-interface",
                "id": "src/components/range/range-interface.ts::RangeChangeEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "`ionChange`イベントは、`<ion-range>`要素に対して、ユーザーがその要素の値を変更したときに発生します： - ドラッグした後にノブを離したとき - キーボードの矢印でノブを動かしたとき プログラムで値を変更したときは、`ionChange`イベントは発生しません。",
          "docsTags": []
        },
        {
          "event": "ionFocus",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "レンジのフォーカスが合ったときに発行されます。",
          "docsTags": []
        },
        {
          "event": "ionInput",
          "detail": "RangeChangeEventDetail",
          "bubbles": true,
          "complexType": {
            "original": "RangeChangeEventDetail",
            "resolved": "RangeChangeEventDetail",
            "references": {
              "RangeChangeEventDetail": {
                "location": "import",
                "path": "./range-interface",
                "id": "src/components/range/range-interface.ts::RangeChangeEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "`ionInput`イベントは、`<ion-range>`要素に対して、値が変更されたときに発生するイベントです。`ionChange`とは異なり、`ionInput`はユーザがノブをドラッグしている間、継続して発生します。",
          "docsTags": []
        },
        {
          "event": "ionKnobMoveEnd",
          "detail": "RangeKnobMoveEndEventDetail",
          "bubbles": true,
          "complexType": {
            "original": "RangeKnobMoveEndEventDetail",
            "resolved": "RangeKnobMoveEndEventDetail",
            "references": {
              "RangeKnobMoveEndEventDetail": {
                "location": "import",
                "path": "./range-interface",
                "id": "src/components/range/range-interface.ts::RangeKnobMoveEndEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "マウスドラッグ、タッチジェスチャー、キーボード操作など、ユーザーが範囲ノブの移動を終了したときに発行されます。",
          "docsTags": []
        },
        {
          "event": "ionKnobMoveStart",
          "detail": "RangeKnobMoveStartEventDetail",
          "bubbles": true,
          "complexType": {
            "original": "RangeKnobMoveStartEventDetail",
            "resolved": "RangeKnobMoveStartEventDetail",
            "references": {
              "RangeKnobMoveStartEventDetail": {
                "location": "import",
                "path": "./range-interface",
                "id": "src/components/range/range-interface.ts::RangeKnobMoveStartEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "マウスドラッグ、タッチジェスチャー、キーボード操作など、ユーザーがレンジノブの移動を開始したときに発行されます。",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--bar-background",
          "annotation": "prop",
          "docs": "レンジバーの背景"
        },
        {
          "name": "--bar-background-active",
          "annotation": "prop",
          "docs": "アクティブレンジバーの背景"
        },
        {
          "name": "--bar-border-radius",
          "annotation": "prop",
          "docs": "レンジバーのボーダー半径"
        },
        {
          "name": "--bar-height",
          "annotation": "prop",
          "docs": "レンジバーの高さ"
        },
        {
          "name": "--height",
          "annotation": "prop",
          "docs": "レンジの高さ"
        },
        {
          "name": "--knob-background",
          "annotation": "prop",
          "docs": "レンジノブの背景"
        },
        {
          "name": "--knob-border-radius",
          "annotation": "prop",
          "docs": "レンジツマミのボーダー半径"
        },
        {
          "name": "--knob-box-shadow",
          "annotation": "prop",
          "docs": "レンジノブのボックスシャドウ"
        },
        {
          "name": "--knob-size",
          "annotation": "prop",
          "docs": "レンジツマミの大きさ"
        },
        {
          "name": "--pin-background",
          "annotation": "prop",
          "docs": "レンジピンの背景（MD mode時のみ有効）"
        },
        {
          "name": "--pin-color",
          "annotation": "prop",
          "docs": "レンジピンの色（MD mode時のみ有効）"
        }
      ],
      "slots": [
        {
          "name": "end",
          "docs": "コンテンツは、LTRでは範囲スライダーの右側に、RTLでは左側に配置されます。"
        },
        {
          "name": "label",
          "docs": "範囲に関連付けるラベルテキスト。`\"labelPlacement`\"プロパティを使用して、ラベルが範囲に対してどの位置に配置されるかを制御します。"
        },
        {
          "name": "start",
          "docs": "コンテンツは、LTRでは範囲スライダーの左側に、RTLでは右側に配置されます。"
        }
      ],
      "parts": [
        {
          "name": "bar",
          "docs": "バーの非アクティブな部分。"
        },
        {
          "name": "bar-active",
          "docs": "バーのアクティブな部分です。"
        },
        {
          "name": "knob",
          "docs": "範囲をドラッグする際に使用するハンドル。"
        },
        {
          "name": "pin",
          "docs": "ノブの上に表示されるカウンターです。"
        },
        {
          "name": "tick",
          "docs": "非アクティブなティックマークです。"
        },
        {
          "name": "tick-active",
          "docs": "アクティブなティックマークです。"
        }
      ],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/refresher-content/refresher-content.tsx",
      "encapsulation": "none",
      "tag": "ion-refresher-content",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "pullingIcon",
          "type": "null | string | undefined",
          "complexType": {
            "original": "SpinnerTypes | string | null",
            "resolved": "null | string | undefined",
            "references": {
              "SpinnerTypes": {
                "location": "import",
                "path": "../spinner/spinner-configs",
                "id": "src/components/spinner/spinner-configs.ts::SpinnerTypes"
              }
            }
          },
          "mutable": true,
          "attr": "pulling-icon",
          "reflectToAttr": false,
          "docs": "プルダウン開始時に表示する静的なアイコンまたはスピナーです。スピナー名を指定することで、iOSデバイスでプルダウン時に徐々にティックマークが表示されるようにすることができます。",
          "docsTags": [],
          "values": [
            {
              "type": "null"
            },
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "pullingText",
          "type": "IonicSafeString | string | undefined",
          "complexType": {
            "original": "string | IonicSafeString",
            "resolved": "IonicSafeString | string | undefined",
            "references": {
              "IonicSafeString": {
                "location": "import",
                "path": "../../utils/sanitization",
                "id": "src/utils/sanitization/index.ts::IonicSafeString"
              }
            }
          },
          "mutable": false,
          "attr": "pulling-text",
          "reflectToAttr": false,
          "docs": "プルダウン開始時に表示したいテキストです。 `pullingText` は、文字列としてプレーンテキストまたはHTMLのいずれかを受け取ることができます。通常HTML用に予約されている文字を表示するには、エスケープする必要があります。例えば、`<Ionic>`は `&lt;Ionic&gt;` になります：[セキュリティ・ドキュメント](https://ionicframework.com/docs/faq/security) デフォルトでは、コンテンツはプレーンテキストとして解析されます。カスタムHTMLを使用するには、Ionicの設定で `innerHTMLTemplatesEnabled` を `true` に設定する必要があります。",
          "docsTags": [],
          "values": [
            {
              "type": "IonicSafeString"
            },
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "refreshingSpinner",
          "type": "\"bubbles\" | \"circles\" | \"circular\" | \"crescent\" | \"dots\" | \"lines\" | \"lines-sharp\" | \"lines-sharp-small\" | \"lines-small\" | null | undefined",
          "complexType": {
            "original": "SpinnerTypes | null",
            "resolved": "\"bubbles\" | \"circles\" | \"circular\" | \"crescent\" | \"dots\" | \"lines\" | \"lines-sharp\" | \"lines-sharp-small\" | \"lines-small\" | null | undefined",
            "references": {
              "SpinnerTypes": {
                "location": "import",
                "path": "../spinner/spinner-configs",
                "id": "src/components/spinner/spinner-configs.ts::SpinnerTypes"
              }
            }
          },
          "mutable": true,
          "attr": "refreshing-spinner",
          "reflectToAttr": false,
          "docs": "リフレッシュ開始を示すアニメーションSVGスピナー",
          "docsTags": [],
          "values": [
            {
              "value": "bubbles",
              "type": "string"
            },
            {
              "value": "circles",
              "type": "string"
            },
            {
              "value": "circular",
              "type": "string"
            },
            {
              "value": "crescent",
              "type": "string"
            },
            {
              "value": "dots",
              "type": "string"
            },
            {
              "value": "lines",
              "type": "string"
            },
            {
              "value": "lines-sharp",
              "type": "string"
            },
            {
              "value": "lines-sharp-small",
              "type": "string"
            },
            {
              "value": "lines-small",
              "type": "string"
            },
            {
              "type": "null"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "refreshingText",
          "type": "IonicSafeString | string | undefined",
          "complexType": {
            "original": "string | IonicSafeString",
            "resolved": "IonicSafeString | string | undefined",
            "references": {
              "IonicSafeString": {
                "location": "import",
                "path": "../../utils/sanitization",
                "id": "src/utils/sanitization/index.ts::IonicSafeString"
              }
            }
          },
          "mutable": false,
          "attr": "refreshing-text",
          "reflectToAttr": false,
          "docs": "リフレッシュを行う際に表示したいテキストです。 `refreshingText` には、文字列としてプレーンテキストまたはHTMLのいずれかを指定することができます。通常HTML用に予約されている文字を表示するには、エスケープする必要があります。例えば、`<Ionic>`は `&lt;Ionic&gt;` となります：[セキュリティ・ドキュメント](https://ionicframework.com/docs/faq/security) デフォルトでは、コンテンツはプレーンテキストとして解析されます。カスタムHTMLを使用するには、Ionicの設定で `innerHTMLTemplatesEnabled` を `true` に設定する必要があります。",
          "docsTags": [],
          "values": [
            {
              "type": "IonicSafeString"
            },
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "ion-spinner",
        "ion-icon"
      ],
      "dependencyGraph": {
        "ion-refresher-content": [
          "ion-spinner",
          "ion-icon"
        ]
      }
    },
    {
      "filePath": "src/components/refresher/refresher.tsx",
      "encapsulation": "none",
      "tag": "ion-refresher",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "closeDuration",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "close-duration",
          "reflectToAttr": false,
          "docs": "リフレッシャーを閉じるのにかかる時間。リフレッシュコンテンツがスピナーを使用している場合は適用されず、ネイティブリフレッシャーが有効になります。",
          "docsTags": [],
          "default": "'280ms'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "`true`の場合、リフレッシャーは非表示となる。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pullFactor",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "pull-factor",
          "reflectToAttr": false,
          "docs": "引きの速さを何倍にするか。引きのアニメーションを遅くするには、`1`より小さい数値を渡します。引っ張る速度を速くするには、`1`より大きい数値を渡します。デフォルト値は `1` で、カーソルの速度と同じです。もし負の値が渡された場合、代わりに `1` が係数となります。  例えば例えば、渡された値が `1.2` で、コンテンツが `10` ピクセルでドラッグされた場合、`10` ピクセルではなく、`12` ピクセルでドラッグされます（20% の増加です）。渡された値が `0.8` の場合、ドラッグされた量はカーソルの移動量より少ない `8` ピクセルとなります。  リフレッシュコンテンツがスピナーを使用している場合は適用されず、ネイティブリフレッシャーが有効になります。",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pullMax",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "pull-max",
          "reflectToAttr": false,
          "docs": "リフレッシャーが自動的に `refreshing` 状態になるまでの、引っ張りの最大距離。デフォルトは `pullMin + 60` の結果です。リフレッシュコンテンツがスピナーを使用している場合は適用されず、ネイティブリフレッシャーが有効になります。",
          "docsTags": [],
          "default": "this.pullMin + 60",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pullMin",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "pull-min",
          "reflectToAttr": false,
          "docs": "リフレッシャーが `refreshing` 状態になるまでに、ユーザが引き下げるべき最小距離。リフレッシャーコンテンツがスピナーを使用する場合は適用されず、ネイティブリフレッシャーが有効になる。",
          "docsTags": [],
          "default": "60",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "snapbackDuration",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "snapback-duration",
          "reflectToAttr": false,
          "docs": "リフレッシャーが `refreshing` 状態にスナップバックするのにかかる時間。リフレッシュコンテンツがスピナーを使用している場合は適用されず、ネイティブリフレッシュが有効になります。",
          "docsTags": [],
          "default": "'280ms'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "cancel",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "cancel() => Promise<void>",
          "parameters": [],
          "docs": "リフレッシュの状態を `refreshing` から `cancelling` に変更します。",
          "docsTags": []
        },
        {
          "name": "complete",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "complete() => Promise<void>",
          "parameters": [],
          "docs": "非同期操作が完了したら `complete()` を呼び出します。例えば、`refreshing`状態は、アプリがAJAXリクエストからより多くのデータを受信するなど、非同期操作を実行している間です。データを受信したら、このメソッドを呼び出して、リフレッシュが完了したことを示し、リフレッシュャを閉じます。このメソッドは、リフレッシャーの状態を `refreshing` から `completing` に変更します。",
          "docsTags": []
        },
        {
          "name": "getProgress",
          "returns": {
            "type": "Promise<number>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<number>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<number>"
          },
          "signature": "getProgress() => Promise<number>",
          "parameters": [],
          "docs": "ユーザーがどれだけ下に引っ張られたかを表す数値です。数値 `0` は、ユーザーが全く下に引いていないことを表します。数値 `1` および `1` より大きい数値は、ユーザーが手を離したときに更新が行われるほど十分に下に引っ張られたことを表します。もしユーザーが手を離し、数値が `1` より小さい場合は、更新は行われず、コンテンツは元の位置に戻ります。",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "ionPull",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "ユーザーがコンテンツを引き下げ、リフレッシャーを露出している間に発行されます。",
          "docsTags": []
        },
        {
          "event": "ionRefresh",
          "detail": "RefresherEventDetail",
          "bubbles": true,
          "complexType": {
            "original": "RefresherEventDetail",
            "resolved": "RefresherEventDetail",
            "references": {
              "RefresherEventDetail": {
                "location": "import",
                "path": "./refresher-interface",
                "id": "src/components/refresher/refresher-interface.ts::RefresherEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "ユーザーがコンテンツから手を離し、`pullMin`を越えて下に引いたとき、またはコンテンツを下に引き、pullMaxを越えたときに発行されます。リフレッシャーの状態を `refreshing` に更新します。非同期処理が完了したら `complete()` メソッドを呼び出す必要があります。",
          "docsTags": []
        },
        {
          "event": "ionStart",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "ユーザーが引き下げを開始するときに発行されます。",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/reorder-group/reorder-group.tsx",
      "encapsulation": "none",
      "tag": "ion-reorder-group",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "`true`の場合、リオーダーは非表示になる。",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "complete",
          "returns": {
            "type": "Promise<any>",
            "docs": ""
          },
          "complexType": {
            "signature": "(listOrReorder?: boolean | any[]) => Promise<any>",
            "parameters": [
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "listOrReorder A list of items to be sorted and returned in the new order or a\nboolean of whether or not the reorder should reposition the item."
                  }
                ],
                "text": "A list of items to be sorted and returned in the new order or a\nboolean of whether or not the reorder should reposition the item."
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<any>"
          },
          "signature": "complete(listOrReorder?: boolean | any[]) => Promise<any>",
          "parameters": [],
          "docs": "再注文操作を完了します。ionItemReorder` イベントで呼び出す必要がある。  アイテムのリストが渡された場合、リストは適切な順序に並び替えられ、返される。  パラメータが渡されない場合、または `true` が渡された場合、並べ替えは完了し、アイテムはドラッグされた位置に留まります。 `false`が渡された場合、並び替えは完了し、アイテムは元の位置に跳ね返されます。",
          "docsTags": [
            {
              "name": "param",
              "text": "listOrReorder A list of items to be sorted and returned in the new order or a\nboolean of whether or not the reorder should reposition the item."
            }
          ]
        }
      ],
      "events": [
        {
          "event": "ionItemReorder",
          "detail": "ItemReorderEventDetail",
          "bubbles": true,
          "complexType": {
            "original": "ItemReorderEventDetail",
            "resolved": "ItemReorderEventDetail",
            "references": {
              "ItemReorderEventDetail": {
                "location": "import",
                "path": "./reorder-group-interface",
                "id": "src/components/reorder-group/reorder-group-interface.ts::ItemReorderEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "再注文アクションを完了させるためにリッスンする必要があるイベント。イベントが発生したら、再注文のアクションを確定するために `complete()` メソッドを呼び出す必要があります。",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/reorder/reorder.tsx",
      "encapsulation": "shadow",
      "tag": "ion-reorder",
      "docs": "",
      "docsTags": [
        {
          "name": "part",
          "text": "icon - The icon of the reorder handle (uses ion-icon)."
        }
      ],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "click",
          "capture": true,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [
        {
          "name": "icon",
          "docs": "リオーダーハンドルのアイコンです（ion-iconを使用）。"
        }
      ],
      "dependents": [],
      "dependencies": [
        "ion-icon"
      ],
      "dependencyGraph": {
        "ion-reorder": [
          "ion-icon"
        ]
      }
    },
    {
      "filePath": "src/components/ripple-effect/ripple-effect.tsx",
      "encapsulation": "shadow",
      "tag": "ion-ripple-effect",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "type",
          "type": "\"bounded\" | \"unbounded\"",
          "complexType": {
            "original": "'bounded' | 'unbounded'",
            "resolved": "\"bounded\" | \"unbounded\"",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "リップル効果の種類を設定します： - `bounded`：リップル効果はユーザーのクリック位置から拡大します - `unbounded`：リップル効果はボタンの中心から拡大し、コンテナを溢れさせます。  注：境界のある波紋のサーフェスは、overflowプロパティをhiddenに設定し、境界のない波紋のサーフェスは、visibleに設定する必要があります。",
          "docsTags": [],
          "default": "'bounded'",
          "values": [
            {
              "value": "bounded",
              "type": "string"
            },
            {
              "value": "unbounded",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "addRipple",
          "returns": {
            "type": "Promise<() => void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(x: number, y: number) => Promise<() => void>",
            "parameters": [
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "x The horizontal coordinate of where the ripple should start."
                  }
                ],
                "text": "The horizontal coordinate of where the ripple should start."
              },
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "y The vertical coordinate of where the ripple should start."
                  }
                ],
                "text": "The vertical coordinate of where the ripple should start."
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<() => void>"
          },
          "signature": "addRipple(x: number, y: number) => Promise<() => void>",
          "parameters": [],
          "docs": "親要素に波及効果を付加します。",
          "docsTags": [
            {
              "name": "param",
              "text": "x The horizontal coordinate of where the ripple should start."
            },
            {
              "name": "param",
              "text": "y The vertical coordinate of where the ripple should start."
            }
          ]
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "ion-action-sheet",
        "ion-alert",
        "ion-back-button",
        "ion-button",
        "ion-card",
        "ion-chip",
        "ion-datetime-button",
        "ion-fab-button",
        "ion-item",
        "ion-item-option",
        "ion-menu-button",
        "ion-segment-button",
        "ion-tab-button",
        "ion-toast"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "ion-action-sheet": [
          "ion-ripple-effect"
        ],
        "ion-alert": [
          "ion-ripple-effect"
        ],
        "ion-back-button": [
          "ion-ripple-effect"
        ],
        "ion-button": [
          "ion-ripple-effect"
        ],
        "ion-card": [
          "ion-ripple-effect"
        ],
        "ion-chip": [
          "ion-ripple-effect"
        ],
        "ion-datetime-button": [
          "ion-ripple-effect"
        ],
        "ion-fab-button": [
          "ion-ripple-effect"
        ],
        "ion-item": [
          "ion-ripple-effect"
        ],
        "ion-item-option": [
          "ion-ripple-effect"
        ],
        "ion-menu-button": [
          "ion-ripple-effect"
        ],
        "ion-segment-button": [
          "ion-ripple-effect"
        ],
        "ion-tab-button": [
          "ion-ripple-effect"
        ],
        "ion-toast": [
          "ion-ripple-effect"
        ]
      }
    },
    {
      "filePath": "src/components/route-redirect/route-redirect.tsx",
      "encapsulation": "none",
      "tag": "ion-route-redirect",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "from",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "from",
          "reflectToAttr": false,
          "docs": "リダイレクトルートは、あるURLから別のURLへリダイレクトさせるルートです。このプロパティは、その \"from\" URLです。このプロパティを適用するには、ナビゲートされるURLと完全に一致する必要があります。  この値で指定されるパスは、最初の `/` スラッシュが指定されていない場合でも、常に絶対パスとなります。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "to",
          "type": "null | string | undefined",
          "complexType": {
            "original": "string | undefined | null",
            "resolved": "null | string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "to",
          "reflectToAttr": false,
          "docs": "リダイレクトルートは、あるURLから別のURLへリダイレクトさせるルートです。このプロパティは、その \"to \"URLです。定義された `ion-route-redirect` ルールにマッチした場合、ルータはこのプロパティで指定されたパスにリダイレクトします。  このプロパティの値は、常に `ion-router` で定義されたルートの範囲内の絶対パスであり、別のルータや別のドメインへのリダイレクトを実行するために使用することはできません。  これは仮想的なリダイレクトであり、実際のブラウザのリフレッシュを引き起こすことはないことに注意してください。  このプロパティが指定されていない場合、または値が `undefined` の場合、たとえ \"from\" の値が一致しても、リダイレクトルート全体は noop となります。",
          "docsTags": [],
          "values": [
            {
              "type": "null"
            },
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "ionRouteRedirectChanged",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "このルールの値がDOMから追加/削除されたり、パブリックプロパティが変更されたりしたときに発生する内部イベントです。  ion-router`は、ルータルールの内部レジストリを更新するために、このイベントを捕捉します。",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/route/route.tsx",
      "encapsulation": "none",
      "tag": "ion-route",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "beforeEnter",
          "type": "(() => NavigationHookResult | Promise<NavigationHookResult>) | undefined",
          "complexType": {
            "original": "NavigationHookCallback",
            "resolved": "(() => NavigationHookResult | Promise<NavigationHookResult>) | undefined",
            "references": {
              "NavigationHookCallback": {
                "location": "import",
                "path": "./route-interface",
                "id": "src/components/route/route-interface.ts::NavigationHookCallback"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "ルーターがアクセスしようとしたときに発生するナビゲーションフックです。 `true`を返すとナビゲーションを進めることができ、`false`を返すとナビゲーションをキャンセルすることができます。NavigationHookOptions`オブジェクトを返すと、ルーターは指定されたパスにリダイレクトするようになります。",
          "docsTags": [],
          "values": [
            {
              "type": "(() => NavigationHookResult"
            },
            {
              "type": "Promise<NavigationHookResult>)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "beforeLeave",
          "type": "(() => NavigationHookResult | Promise<NavigationHookResult>) | undefined",
          "complexType": {
            "original": "NavigationHookCallback",
            "resolved": "(() => NavigationHookResult | Promise<NavigationHookResult>) | undefined",
            "references": {
              "NavigationHookCallback": {
                "location": "import",
                "path": "./route-interface",
                "id": "src/components/route/route-interface.ts::NavigationHookCallback"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "ルートが離脱しようとしたときに発生するナビゲーションフックです。 `true`を返すとナビゲーションを進めることができ、`false`を返すとナビゲーションをキャンセルすることができます。NavigationHookOptions`オブジェクトを返すと、ルーターは指定されたパスにリダイレクトするようになります。",
          "docsTags": [],
          "values": [
            {
              "type": "(() => NavigationHookResult"
            },
            {
              "type": "Promise<NavigationHookResult>)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "component",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "component",
          "reflectToAttr": false,
          "docs": "ルートが一致したときに、ナビゲーションアウトレット（`ion-tabs`、`ion-nav`）にロード/選択するコンポーネントの名前。  このプロパティの値は、常にロードするコンポーネントのタグ名とは限らず、`ion-tabs`では、実際には選択する `ion-tab` の名前を指します。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "componentProps",
          "type": "undefined | { [key: string]: any; }",
          "complexType": {
            "original": "{ [key: string]: any }",
            "resolved": "undefined | { [key: string]: any; }",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "キーとなる値 `{ 'red': true, 'blue':'white'}` には、レンダリング時に定義されたコンポーネントに渡すべき小道具が含まれる。",
          "docsTags": [],
          "values": [
            {
              "type": "undefined"
            },
            {
              "type": "{ [key: string]: any; }"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "url",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "url",
          "reflectToAttr": false,
          "docs": "このルートを適用するために一致させる必要がある相対パスです。  expressjs と同様にパスを受け付けるので、/foo/:bar のような url でパラメータを定義し、受信する props で bar を利用することができます。",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "ionRouteDataChanged",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "このルートがいつ変更されたかを知るために `ion-router` が内部で使用します。",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/router-link/router-link.tsx",
      "encapsulation": "shadow",
      "tag": "ion-router-link",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
          "complexType": {
            "original": "Color",
            "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
            "references": {
              "Color": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::Color"
              }
            }
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "アプリケーションのカラーパレットから使用する色を指定します。デフォルトのオプションは以下の通りです。 `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, と `\"dark\"` です．色に関する詳しい情報は [theming](/docs/theming/basics) を参照してください。",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "tertiary",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "type": "string & Record<never, never>"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "href",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "ハイパーリンクが指し示す URL または URL フラグメントを格納します。このプロパティが設定されている場合、アンカータグがレンダリングされます。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rel",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "rel",
          "reflectToAttr": false,
          "docs": "ターゲットオブジェクトとリンクオブジェクトの関係を指定します。値は、スペースで区切られた[リンクタイプ](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types)のリストです。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "routerAnimation",
          "type": "((baseEl: any, opts?: any) => Animation) | undefined",
          "complexType": {
            "original": "AnimationBuilder | undefined",
            "resolved": "((baseEl: any, opts?: any) => Animation) | undefined",
            "references": {
              "AnimationBuilder": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::AnimationBuilder"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "ルータを使用する場合、`href`を使用して別のページに移動する際の遷移アニメーションを指定します。",
          "docsTags": [],
          "values": [
            {
              "type": "((baseEl: any, opts?: any) => Animation)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "routerDirection",
          "type": "\"back\" | \"forward\" | \"root\"",
          "complexType": {
            "original": "RouterDirection",
            "resolved": "\"back\" | \"forward\" | \"root\"",
            "references": {
              "RouterDirection": {
                "location": "import",
                "path": "../router/utils/interface",
                "id": "src/components/router/utils/interface.ts::RouterDirection"
              }
            }
          },
          "mutable": false,
          "attr": "router-direction",
          "reflectToAttr": false,
          "docs": "ルータを使用する場合、`href`を使用して他のページに移動する際の遷移方向を指定します。",
          "docsTags": [],
          "default": "'forward'",
          "values": [
            {
              "value": "back",
              "type": "string"
            },
            {
              "value": "forward",
              "type": "string"
            },
            {
              "value": "root",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "target",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "リンク先のURLを表示する場所を指定します。href`を指定した場合のみ適用される。特別なキーワードがあります。_blank\"`, `\"_self\"`, `\"_parent\"`, `\"_top\"`.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--background",
          "annotation": "prop",
          "docs": "ルーターリンクの背景"
        },
        {
          "name": "--color",
          "annotation": "prop",
          "docs": "ルーターリンクの文字色"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/router-outlet/router-outlet.tsx",
      "encapsulation": "shadow",
      "tag": "ion-router-outlet",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "animated",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "animated",
          "reflectToAttr": false,
          "docs": "`true`の場合、ルータ・アウトレットはコンポーネントの遷移をアニメーションで表現する必要があります。",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "animation",
          "type": "((baseEl: any, opts?: any) => Animation) | undefined",
          "complexType": {
            "original": "AnimationBuilder",
            "resolved": "((baseEl: any, opts?: any) => Animation) | undefined",
            "references": {
              "AnimationBuilder": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::AnimationBuilder"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "このプロパティは、AnimationBuilder の機能を使用して、カスタムトランジションを作成することができます。",
          "docsTags": [],
          "values": [
            {
              "type": "((baseEl: any, opts?: any) => Animation)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "complexType": {
            "original": "\"ios\" | \"md\"",
            "resolved": "\"ios\" | \"md\"",
            "references": {
              "Mode": {
                "location": "global",
                "id": "global::Mode"
              }
            }
          },
          "mutable": true,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "default": "getIonMode(this)",
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/router/router.tsx",
      "encapsulation": "none",
      "tag": "ion-router",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "root",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "root",
          "reflectToAttr": false,
          "docs": "URLのマッチング時に使用するルートパスです。デフォルトでは\"/\"に設定されていますが、すべてのURLパスに対して代替プレフィックスを指定することができます。",
          "docsTags": [],
          "default": "'/'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "useHash",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "use-hash",
          "reflectToAttr": false,
          "docs": "ルーターは2つの \"モード \"で動作します。- ハッシュを使用します。ハッシュあり： `/index.html#/path/to/page` - ハッシュなし。ハッシュなし： `/path/to/page` - ハッシュあり： `/index.html#/path/to/page` どちらを使うかは、アプリの要件や配置される場所によって異なるかもしれません。  通常、\"ハッシュなし\"ナビゲーションはSEOに有利で、よりユーザーフレンドリーですが、適切に動作させるためにサーバー側の追加設定が必要な場合があります。  一方、ハッシュ・ナビゲーションは、ファイル・プロトコルで動作するため、導入が非常に簡単です。  デフォルトでは、このプロパティは `true` です。ハッシュのない URL を許可するには `false` に変更します。",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "back",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "back() => Promise<void>",
          "parameters": [],
          "docs": "window.historyで前ページに戻る。",
          "docsTags": []
        },
        {
          "name": "push",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "complexType": {
            "signature": "(path: string, direction?: RouterDirection, animation?: AnimationBuilder) => Promise<boolean>",
            "parameters": [
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "path The path to navigate to."
                  }
                ],
                "text": "The path to navigate to."
              },
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "direction The direction of the animation. Defaults to `\"forward\"`."
                  }
                ],
                "text": "The direction of the animation. Defaults to `\"forward\"`."
              },
              {
                "tags": [],
                "text": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "RouterDirection": {
                "location": "import",
                "path": "./utils/interface",
                "id": "src/components/router/utils/interface.ts::RouterDirection"
              },
              "AnimationBuilder": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::AnimationBuilder"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "push(path: string, direction?: RouterDirection, animation?: AnimationBuilder) => Promise<boolean>",
          "parameters": [],
          "docs": "指定されたパスに移動します。",
          "docsTags": [
            {
              "name": "param",
              "text": "path The path to navigate to."
            },
            {
              "name": "param",
              "text": "direction The direction of the animation. Defaults to `\"forward\"`."
            }
          ]
        }
      ],
      "events": [
        {
          "event": "ionRouteDidChange",
          "detail": "RouterEventDetail",
          "bubbles": true,
          "complexType": {
            "original": "RouterEventDetail",
            "resolved": "RouterEventDetail",
            "references": {
              "RouterEventDetail": {
                "location": "import",
                "path": "./utils/interface",
                "id": "src/components/router/utils/interface.ts::RouterEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "ルートが変更されたときに発行されます。",
          "docsTags": []
        },
        {
          "event": "ionRouteWillChange",
          "detail": "RouterEventDetail",
          "bubbles": true,
          "complexType": {
            "original": "RouterEventDetail",
            "resolved": "RouterEventDetail",
            "references": {
              "RouterEventDetail": {
                "location": "import",
                "path": "./utils/interface",
                "id": "src/components/router/utils/interface.ts::RouterEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "ルートが変更されようとするときに発行されます。イベント",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "popstate",
          "target": "window",
          "capture": false,
          "passive": false
        },
        {
          "event": "ionBackButton",
          "target": "document",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/row/row.tsx",
      "encapsulation": "shadow",
      "tag": "ion-row",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/searchbar/searchbar.tsx",
      "encapsulation": "scoped",
      "tag": "ion-searchbar",
      "docs": "",
      "docsTags": [
        {
          "name": "virtualProp",
          "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "animated",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "animated",
          "reflectToAttr": false,
          "docs": "`true`の場合、検索バーのアニメーションを有効にします。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autocomplete",
          "type": "\"name\" | \"email\" | \"tel\" | \"url\" | \"on\" | \"off\" | \"honorific-prefix\" | \"given-name\" | \"additional-name\" | \"family-name\" | \"honorific-suffix\" | \"nickname\" | \"username\" | \"new-password\" | \"current-password\" | \"one-time-code\" | \"organization-title\" | \"organization\" | \"street-address\" | \"address-line1\" | \"address-line2\" | \"address-line3\" | \"address-level4\" | \"address-level3\" | \"address-level2\" | \"address-level1\" | \"country\" | \"country-name\" | \"postal-code\" | \"cc-name\" | \"cc-given-name\" | \"cc-additional-name\" | \"cc-family-name\" | \"cc-number\" | \"cc-exp\" | \"cc-exp-month\" | \"cc-exp-year\" | \"cc-csc\" | \"cc-type\" | \"transaction-currency\" | \"transaction-amount\" | \"language\" | \"bday\" | \"bday-day\" | \"bday-month\" | \"bday-year\" | \"sex\" | \"tel-country-code\" | \"tel-national\" | \"tel-area-code\" | \"tel-local\" | \"tel-extension\" | \"impp\" | \"photo\"",
          "complexType": {
            "original": "AutocompleteTypes",
            "resolved": "\"name\" | \"email\" | \"tel\" | \"url\" | \"on\" | \"off\" | \"honorific-prefix\" | \"given-name\" | \"additional-name\" | \"family-name\" | \"honorific-suffix\" | \"nickname\" | \"username\" | \"new-password\" | \"current-password\" | \"one-time-code\" | \"organization-title\" | \"organization\" | \"street-address\" | \"address-line1\" | \"address-line2\" | \"address-line3\" | \"address-level4\" | \"address-level3\" | \"address-level2\" | \"address-level1\" | \"country\" | \"country-name\" | \"postal-code\" | \"cc-name\" | \"cc-given-name\" | \"cc-additional-name\" | \"cc-family-name\" | \"cc-number\" | \"cc-exp\" | \"cc-exp-month\" | \"cc-exp-year\" | \"cc-csc\" | \"cc-type\" | \"transaction-currency\" | \"transaction-amount\" | \"language\" | \"bday\" | \"bday-day\" | \"bday-month\" | \"bday-year\" | \"sex\" | \"tel-country-code\" | \"tel-national\" | \"tel-area-code\" | \"tel-local\" | \"tel-extension\" | \"impp\" | \"photo\"",
            "references": {
              "AutocompleteTypes": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::AutocompleteTypes"
              }
            }
          },
          "mutable": false,
          "attr": "autocomplete",
          "reflectToAttr": false,
          "docs": "Inputのオートコンプリートプロパティを設定します。",
          "docsTags": [],
          "default": "'off'",
          "values": [
            {
              "value": "name",
              "type": "string"
            },
            {
              "value": "email",
              "type": "string"
            },
            {
              "value": "tel",
              "type": "string"
            },
            {
              "value": "url",
              "type": "string"
            },
            {
              "value": "on",
              "type": "string"
            },
            {
              "value": "off",
              "type": "string"
            },
            {
              "value": "honorific-prefix",
              "type": "string"
            },
            {
              "value": "given-name",
              "type": "string"
            },
            {
              "value": "additional-name",
              "type": "string"
            },
            {
              "value": "family-name",
              "type": "string"
            },
            {
              "value": "honorific-suffix",
              "type": "string"
            },
            {
              "value": "nickname",
              "type": "string"
            },
            {
              "value": "username",
              "type": "string"
            },
            {
              "value": "new-password",
              "type": "string"
            },
            {
              "value": "current-password",
              "type": "string"
            },
            {
              "value": "one-time-code",
              "type": "string"
            },
            {
              "value": "organization-title",
              "type": "string"
            },
            {
              "value": "organization",
              "type": "string"
            },
            {
              "value": "street-address",
              "type": "string"
            },
            {
              "value": "address-line1",
              "type": "string"
            },
            {
              "value": "address-line2",
              "type": "string"
            },
            {
              "value": "address-line3",
              "type": "string"
            },
            {
              "value": "address-level4",
              "type": "string"
            },
            {
              "value": "address-level3",
              "type": "string"
            },
            {
              "value": "address-level2",
              "type": "string"
            },
            {
              "value": "address-level1",
              "type": "string"
            },
            {
              "value": "country",
              "type": "string"
            },
            {
              "value": "country-name",
              "type": "string"
            },
            {
              "value": "postal-code",
              "type": "string"
            },
            {
              "value": "cc-name",
              "type": "string"
            },
            {
              "value": "cc-given-name",
              "type": "string"
            },
            {
              "value": "cc-additional-name",
              "type": "string"
            },
            {
              "value": "cc-family-name",
              "type": "string"
            },
            {
              "value": "cc-number",
              "type": "string"
            },
            {
              "value": "cc-exp",
              "type": "string"
            },
            {
              "value": "cc-exp-month",
              "type": "string"
            },
            {
              "value": "cc-exp-year",
              "type": "string"
            },
            {
              "value": "cc-csc",
              "type": "string"
            },
            {
              "value": "cc-type",
              "type": "string"
            },
            {
              "value": "transaction-currency",
              "type": "string"
            },
            {
              "value": "transaction-amount",
              "type": "string"
            },
            {
              "value": "language",
              "type": "string"
            },
            {
              "value": "bday",
              "type": "string"
            },
            {
              "value": "bday-day",
              "type": "string"
            },
            {
              "value": "bday-month",
              "type": "string"
            },
            {
              "value": "bday-year",
              "type": "string"
            },
            {
              "value": "sex",
              "type": "string"
            },
            {
              "value": "tel-country-code",
              "type": "string"
            },
            {
              "value": "tel-national",
              "type": "string"
            },
            {
              "value": "tel-area-code",
              "type": "string"
            },
            {
              "value": "tel-local",
              "type": "string"
            },
            {
              "value": "tel-extension",
              "type": "string"
            },
            {
              "value": "impp",
              "type": "string"
            },
            {
              "value": "photo",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autocorrect",
          "type": "\"off\" | \"on\"",
          "complexType": {
            "original": "'on' | 'off'",
            "resolved": "\"off\" | \"on\"",
            "references": {}
          },
          "mutable": false,
          "attr": "autocorrect",
          "reflectToAttr": false,
          "docs": "Inputのオートコレクトプロパティを設定します。",
          "docsTags": [],
          "default": "'off'",
          "values": [
            {
              "value": "off",
              "type": "string"
            },
            {
              "value": "on",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "cancelButtonIcon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "cancel-button-icon",
          "reflectToAttr": false,
          "docs": "キャンセルボタンのアイコンを設定します。 `md` modeのみに適用されます。デフォルトは `arrow-back-sharp` です。",
          "docsTags": [],
          "default": "config.get('backButtonIcon', arrowBackSharp) as string",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "cancelButtonText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "cancel-button-text",
          "reflectToAttr": false,
          "docs": "キャンセルボタンのテキストを設定します。 `ios` modeのみ適用されます。",
          "docsTags": [],
          "default": "'Cancel'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "clearIcon",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "clear-icon",
          "reflectToAttr": false,
          "docs": "クリアアイコンを設定します。デフォルトは `ios` の場合は `close-circle` 、`md` の場合は `close-sharp` です。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "color",
          "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
          "complexType": {
            "original": "Color",
            "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
            "references": {
              "Color": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::Color"
              }
            }
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "アプリケーションのカラーパレットから使用する色を指定します。デフォルトのオプションは以下の通りです。 `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, と `\"dark\"` です．色に関する詳しい情報は [theming](/docs/theming/basics) を参照してください。",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "tertiary",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "type": "string & Record<never, never>"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "debounce",
          "type": "number | undefined",
          "complexType": {
            "original": "number",
            "resolved": "number | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "debounce",
          "reflectToAttr": false,
          "docs": "キーを押すたびに `ionInput` イベントが発生するまでの待ち時間をミリ秒単位で設定します。",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "`true`の場合、ユーザはInputと対話することができません。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "enterkeyhint",
          "type": "\"done\" | \"enter\" | \"go\" | \"next\" | \"previous\" | \"search\" | \"send\" | undefined",
          "complexType": {
            "original": "'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'",
            "resolved": "\"done\" | \"enter\" | \"go\" | \"next\" | \"previous\" | \"search\" | \"send\" | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "enterkeyhint",
          "reflectToAttr": false,
          "docs": "どのエンターキーを表示するかのブラウザへのヒント。指定可能な値。enter\"`, `\"done\"`, `\"go\"`, `\"next\"`, `\"previous\"`, `\"search\"`, and `\"send\"`.",
          "docsTags": [],
          "values": [
            {
              "value": "done",
              "type": "string"
            },
            {
              "value": "enter",
              "type": "string"
            },
            {
              "value": "go",
              "type": "string"
            },
            {
              "value": "next",
              "type": "string"
            },
            {
              "value": "previous",
              "type": "string"
            },
            {
              "value": "search",
              "type": "string"
            },
            {
              "value": "send",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "inputmode",
          "type": "\"decimal\" | \"email\" | \"none\" | \"numeric\" | \"search\" | \"tel\" | \"text\" | \"url\" | undefined",
          "complexType": {
            "original": "'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search'",
            "resolved": "\"decimal\" | \"email\" | \"none\" | \"numeric\" | \"search\" | \"tel\" | \"text\" | \"url\" | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "inputmode",
          "reflectToAttr": false,
          "docs": "どのキーボードを表示するかのブラウザへのヒント。指定可能な値。none\"`, `\"text\"`, `\"tel\"`, `\"url\"`, `\"email\"`, `\"numeric\"`, `\"decimal\"`, and `\"search\"`.",
          "docsTags": [],
          "values": [
            {
              "value": "decimal",
              "type": "string"
            },
            {
              "value": "email",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "numeric",
              "type": "string"
            },
            {
              "value": "search",
              "type": "string"
            },
            {
              "value": "tel",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            },
            {
              "value": "url",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "フォームで使用する場合は、フォーム・データと一緒に送信されるコントロールの名前を設定します。",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Inputのplaceholderを設定します。 `placeholder` には、文字列としてプレーンテキストまたはHTMLのいずれかを指定することができます。通常HTML用に予約されている文字を表示するには、エスケープする必要があります。例えば `<Ionic>` は `&lt;Ionic&gt;` になります。詳細は [セキュリティ・ドキュメンテーション](https://ionicframework.com/docs/faq/security) をご覧ください。",
          "docsTags": [],
          "default": "'Search'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "searchIcon",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "search-icon",
          "reflectToAttr": false,
          "docs": "検索アイコンとして使用するアイコンです。デフォルトは `ios` modeでは `search-outline` 、`md` modeでは `search-sharp` です。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "showCancelButton",
          "type": "\"always\" | \"focus\" | \"never\"",
          "complexType": {
            "original": "'never' | 'focus' | 'always'",
            "resolved": "\"always\" | \"focus\" | \"never\"",
            "references": {}
          },
          "mutable": false,
          "attr": "show-cancel-button",
          "reflectToAttr": false,
          "docs": "キャンセルボタンに関する動作を設定します。デフォルトは `\"never\"` です。focus\"` に設定すると、フォーカスが当たったときにキャンセルボタンを表示します。never\"`に設定すると、キャンセルボタンを非表示にします。always\"` に設定すると、フォーカスの状態に関係なくキャンセルボタンを表示します。",
          "docsTags": [],
          "default": "'never'",
          "values": [
            {
              "value": "always",
              "type": "string"
            },
            {
              "value": "focus",
              "type": "string"
            },
            {
              "value": "never",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showClearButton",
          "type": "\"always\" | \"focus\" | \"never\"",
          "complexType": {
            "original": "'never' | 'focus' | 'always'",
            "resolved": "\"always\" | \"focus\" | \"never\"",
            "references": {}
          },
          "mutable": false,
          "attr": "show-clear-button",
          "reflectToAttr": false,
          "docs": "クリアボタンに関する動作を設定します。デフォルトは `\"focus\"` です。`\"focus\"`に設定すると、Inputが空でない場合、フォーカス時にクリアボタンを表示します。`\"never\"`に設定すると、クリアボタンを非表示にします。`\"always\"`に設定すると、フォーカスの状態に関係なくクリアボタンを表示するが、Inputが空でない場合にのみクリアボタンを表示します。",
          "docsTags": [],
          "default": "'always'",
          "values": [
            {
              "value": "always",
              "type": "string"
            },
            {
              "value": "focus",
              "type": "string"
            },
            {
              "value": "never",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "spellcheck",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "spellcheck",
          "reflectToAttr": false,
          "docs": "`true`の場合、入力値のスペルチェックを有効にします。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"email\" | \"number\" | \"password\" | \"search\" | \"tel\" | \"text\" | \"url\"",
          "complexType": {
            "original": "'text' | 'password' | 'email' | 'number' | 'search' | 'tel' | 'url'",
            "resolved": "\"email\" | \"number\" | \"password\" | \"search\" | \"tel\" | \"text\" | \"url\"",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Inputの種類を設定します。",
          "docsTags": [],
          "default": "'search'",
          "values": [
            {
              "value": "email",
              "type": "string"
            },
            {
              "value": "number",
              "type": "string"
            },
            {
              "value": "password",
              "type": "string"
            },
            {
              "value": "search",
              "type": "string"
            },
            {
              "value": "tel",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            },
            {
              "value": "url",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "null | string | undefined",
          "complexType": {
            "original": "string | null",
            "resolved": "null | string | undefined",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "検索バーの値。",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "null"
            },
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getInputElement",
          "returns": {
            "type": "Promise<HTMLInputElement>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<HTMLInputElement>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLInputElement": {
                "location": "global",
                "id": "global::HTMLInputElement"
              }
            },
            "return": "Promise<HTMLInputElement>"
          },
          "signature": "getInputElement() => Promise<HTMLInputElement>",
          "parameters": [],
          "docs": "要素の内部で使用されているネイティブの `<input>` 要素を返します。",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "ion-searchbar` のネイティブ `input` にフォーカスを設定する。グローバルな `input.focus()` の代わりにこのメソッドを使用する。  ページ入力時に入力にフォーカスを当てたい開発者は、 `ionViewDidEnter()` ライフサイクルメソッド内で `setFocus()` を呼び出す必要がある。  オーバーレイが表示されたときに入力にフォーカスを当てたい開発者は、 `didPresent` が解決した後に `setFocus` を呼び出してください。",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "ionBlur",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Inputのフォーカスが外れたときに発行されます。",
          "docsTags": []
        },
        {
          "event": "ionCancel",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "キャンセルボタンがクリックされたときに発行されます。",
          "docsTags": []
        },
        {
          "event": "ionChange",
          "detail": "SearchbarChangeEventDetail",
          "bubbles": true,
          "complexType": {
            "original": "SearchbarChangeEventDetail",
            "resolved": "SearchbarChangeEventDetail",
            "references": {
              "SearchbarChangeEventDetail": {
                "location": "import",
                "path": "./searchbar-interface",
                "id": "src/components/searchbar/searchbar-interface.ts::SearchbarChangeEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "`ionChange` イベントは、`<ion-searchbar>` 要素に対して、ユーザがその要素の値を変更したときに発生します。ionInput` イベントとは異なり、要素の値が変更されるたびに `ionChange` イベントが発生する必要はない。`ionChange`イベントは、ユーザーによって値がコミットされたときに発生します。これは、要素のフォーカスが外れたときや、\"Enter \"キーが押されたときに発生します。また、クリアボタンやキャンセルボタンをクリックしたときにも `ionChange` イベントが発生することがあります。",
          "docsTags": []
        },
        {
          "event": "ionClear",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Clear Inputボタンがクリックされたときに発行されます。",
          "docsTags": []
        },
        {
          "event": "ionFocus",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Inputにフォーカスが当たったときに発行されます。",
          "docsTags": []
        },
        {
          "event": "ionInput",
          "detail": "SearchbarInputEventDetail",
          "bubbles": true,
          "complexType": {
            "original": "SearchbarInputEventDetail",
            "resolved": "SearchbarInputEventDetail",
            "references": {
              "SearchbarInputEventDetail": {
                "location": "import",
                "path": "./searchbar-interface",
                "id": "src/components/searchbar/searchbar-interface.ts::SearchbarInputEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "ion-searchbar`要素の `value` が変更されたときに発行されます。",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--background",
          "annotation": "prop",
          "docs": "検索バーのInputの背景"
        },
        {
          "name": "--border-radius",
          "annotation": "prop",
          "docs": "検索バーのInputのボーダー半径"
        },
        {
          "name": "--box-shadow",
          "annotation": "prop",
          "docs": "検索バーのInputのボックスシャドウ"
        },
        {
          "name": "--cancel-button-color",
          "annotation": "prop",
          "docs": "検索バーのキャンセルボタンの色"
        },
        {
          "name": "--clear-button-color",
          "annotation": "prop",
          "docs": "検索バーのクリアボタンの色"
        },
        {
          "name": "--color",
          "annotation": "prop",
          "docs": "検索バーのテキストの色"
        },
        {
          "name": "--icon-color",
          "annotation": "prop",
          "docs": "検索バーのアイコンの色"
        },
        {
          "name": "--placeholder-color",
          "annotation": "prop",
          "docs": "検索バーのPlaceholderの色"
        },
        {
          "name": "--placeholder-font-style",
          "annotation": "prop",
          "docs": "検索バーのPlaceholderのFont Style"
        },
        {
          "name": "--placeholder-font-weight",
          "annotation": "prop",
          "docs": "検索バーのPlaceholderのFont Weight"
        },
        {
          "name": "--placeholder-opacity",
          "annotation": "prop",
          "docs": "検索バーのPlaceholderの不透明度"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "ion-icon"
      ],
      "dependencyGraph": {
        "ion-searchbar": [
          "ion-icon"
        ]
      }
    },
    {
      "filePath": "src/components/segment-button/segment-button.tsx",
      "encapsulation": "shadow",
      "tag": "ion-segment-button",
      "docs": "",
      "docsTags": [
        {
          "name": "virtualProp",
          "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
        },
        {
          "name": "part",
          "text": "native - The native HTML button element that wraps all child elements."
        },
        {
          "name": "part",
          "text": "indicator - The indicator displayed on the checked segment button."
        },
        {
          "name": "part",
          "text": "indicator-background - The background element for the indicator displayed on the checked segment button."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "`true`の場合、ユーザーはセグメントボタンを操作することができません。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "layout",
          "type": "\"icon-bottom\" | \"icon-end\" | \"icon-hide\" | \"icon-start\" | \"icon-top\" | \"label-hide\" | undefined",
          "complexType": {
            "original": "SegmentButtonLayout",
            "resolved": "\"icon-bottom\" | \"icon-end\" | \"icon-hide\" | \"icon-start\" | \"icon-top\" | \"label-hide\" | undefined",
            "references": {
              "SegmentButtonLayout": {
                "location": "import",
                "path": "./segment-button-interface",
                "id": "src/components/segment-button/segment-button-interface.ts::SegmentButtonLayout"
              }
            }
          },
          "mutable": false,
          "attr": "layout",
          "reflectToAttr": false,
          "docs": "セグメント内のテキストとアイコンのレイアウトを設定します。",
          "docsTags": [],
          "default": "'icon-top'",
          "values": [
            {
              "value": "icon-bottom",
              "type": "string"
            },
            {
              "value": "icon-end",
              "type": "string"
            },
            {
              "value": "icon-hide",
              "type": "string"
            },
            {
              "value": "icon-start",
              "type": "string"
            },
            {
              "value": "icon-top",
              "type": "string"
            },
            {
              "value": "label-hide",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "type",
          "type": "\"button\" | \"reset\" | \"submit\"",
          "complexType": {
            "original": "'submit' | 'reset' | 'button'",
            "resolved": "\"button\" | \"reset\" | \"submit\"",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "ボタンの種類です。",
          "docsTags": [],
          "default": "'button'",
          "values": [
            {
              "value": "button",
              "type": "string"
            },
            {
              "value": "reset",
              "type": "string"
            },
            {
              "value": "submit",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number | string",
          "complexType": {
            "original": "SegmentValue",
            "resolved": "number | string",
            "references": {
              "SegmentValue": {
                "location": "import",
                "path": "../segment/segment-interface",
                "id": "src/components/segment/segment-interface.ts::SegmentValue"
              }
            }
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "セグメントボタンの値です。",
          "docsTags": [],
          "default": "'ion-sb-' + ids++",
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--background",
          "annotation": "prop",
          "docs": "セグメントボタンの背景"
        },
        {
          "name": "--background-checked",
          "annotation": "prop",
          "docs": "チェックしたセグメントボタンの背景"
        },
        {
          "name": "--background-focused",
          "annotation": "prop",
          "docs": "タブキーでフォーカスされたときのセグメントボタンの背景"
        },
        {
          "name": "--background-focused-opacity",
          "annotation": "prop",
          "docs": "タブキーでフォーカスしたときのセグメントボタンの背景の不透明度"
        },
        {
          "name": "--background-hover",
          "annotation": "prop",
          "docs": "セグメントボタンがホバーされたときの背景"
        },
        {
          "name": "--background-hover-opacity",
          "annotation": "prop",
          "docs": "ホバー時のセグメントボタンの背景の不透明度"
        },
        {
          "name": "--border-color",
          "annotation": "prop",
          "docs": "セグメントボタンのボーダーの色"
        },
        {
          "name": "--border-radius",
          "annotation": "prop",
          "docs": "セグメントボタンのボーダーの半径"
        },
        {
          "name": "--border-style",
          "annotation": "prop",
          "docs": "セグメントボタンのボーダーのスタイル"
        },
        {
          "name": "--border-width",
          "annotation": "prop",
          "docs": "セグメントボタンの枠の幅"
        },
        {
          "name": "--color",
          "annotation": "prop",
          "docs": "セグメントボタンの色"
        },
        {
          "name": "--color-checked",
          "annotation": "prop",
          "docs": "チェックしたセグメントボタンの色"
        },
        {
          "name": "--color-focused",
          "annotation": "prop",
          "docs": "タブキーでフォーカスしたときのセグメントボタンの色"
        },
        {
          "name": "--color-hover",
          "annotation": "prop",
          "docs": "ホバー時のセグメントボタンの色"
        },
        {
          "name": "--indicator-box-shadow",
          "annotation": "prop",
          "docs": "チェックしたセグメントボタンのインジケーターにボックスシャドウを付ける"
        },
        {
          "name": "--indicator-color",
          "annotation": "prop",
          "docs": "チェックしたセグメントボタンのインジケーターの色"
        },
        {
          "name": "--indicator-height",
          "annotation": "prop",
          "docs": "チェックしたセグメントボタンのインジケータの高さ"
        },
        {
          "name": "--indicator-transform",
          "annotation": "prop",
          "docs": "チェックされたセグメントボタンのインジケータのトランスフォーム"
        },
        {
          "name": "--indicator-transition",
          "annotation": "prop",
          "docs": "チェックしたセグメントボタンのインジケーターの遷移"
        },
        {
          "name": "--margin-bottom",
          "annotation": "prop",
          "docs": "セグメントボタンのBottom Margin"
        },
        {
          "name": "--margin-end",
          "annotation": "prop",
          "docs": "セグメントボタンの方向が左から右の場合はRight Margin、右から左の場合はLeft Margin"
        },
        {
          "name": "--margin-start",
          "annotation": "prop",
          "docs": "セグメントボタンの方向が左から右の場合はLeft Margin、右から左の場合はRight Margin"
        },
        {
          "name": "--margin-top",
          "annotation": "prop",
          "docs": "セグメントボタンのTop Margin"
        },
        {
          "name": "--padding-bottom",
          "annotation": "prop",
          "docs": "セグメントボタンのBottom Padding"
        },
        {
          "name": "--padding-end",
          "annotation": "prop",
          "docs": "セグメントボタンの向きが左から右の場合はRight Padding、右から左の場合はLeft Paddingとなります。"
        },
        {
          "name": "--padding-start",
          "annotation": "prop",
          "docs": "セグメントボタンの向きが左から右の場合はLeft Padding、右から左の場合はRight Paddingとなります。"
        },
        {
          "name": "--padding-top",
          "annotation": "prop",
          "docs": "セグメントボタンのTop Padding"
        },
        {
          "name": "--transition",
          "annotation": "prop",
          "docs": "セグメントボタンの遷移"
        }
      ],
      "slots": [],
      "parts": [
        {
          "name": "indicator",
          "docs": "チェックしたセグメントボタンに表示されるインジケーターです。"
        },
        {
          "name": "indicator-background",
          "docs": "チェックしたセグメントボタンに表示されるインジケータの背景要素です。"
        },
        {
          "name": "native",
          "docs": "すべての子要素を包むネイティブ HTML ボタン要素。"
        }
      ],
      "dependents": [],
      "dependencies": [
        "ion-ripple-effect"
      ],
      "dependencyGraph": {
        "ion-segment-button": [
          "ion-ripple-effect"
        ]
      }
    },
    {
      "filePath": "src/components/segment/segment.tsx",
      "encapsulation": "shadow",
      "tag": "ion-segment",
      "docs": "",
      "docsTags": [
        {
          "name": "virtualProp",
          "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
          "complexType": {
            "original": "Color",
            "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
            "references": {
              "Color": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::Color"
              }
            }
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "アプリケーションのカラーパレットから使用する色を指定します。デフォルトのオプションは以下の通りです。 `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, と `\"dark\"` です．色に関する詳しい情報は [theming](/docs/theming/basics) を参照してください。",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "tertiary",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "type": "string & Record<never, never>"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "`true`の場合、ユーザーはセグメントと対話することができません。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "scrollable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "scrollable",
          "reflectToAttr": false,
          "docs": "`true`の場合、セグメントボタンはオーバーフローし、ユーザーはスワイプしてそれらを見ることができます。また、スワイプして隠れたボタンを見るために、ボタンの間でインジケータをドラッグするジェスチャーを無効にします。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectOnFocus",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "select-on-focus",
          "reflectToAttr": false,
          "docs": "`true`の場合、キーボードで `ion-segment-button` に移動すると、その要素にフォーカスが当たって選択される。 `false` の場合、キーボードによるナビゲーションは `ion-segment-button` 要素にのみフォーカスを当てます。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "swipeGesture",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "swipe-gesture",
          "reflectToAttr": false,
          "docs": "`true`の場合、ユーザーはセグメントボタンの間をスワイプしてアクティブにすることができます。",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number | string | undefined",
          "complexType": {
            "original": "SegmentValue",
            "resolved": "number | string | undefined",
            "references": {
              "SegmentValue": {
                "location": "import",
                "path": "./segment-interface",
                "id": "src/components/segment/segment-interface.ts::SegmentValue"
              }
            }
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "セグメントの価値",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "ionChange",
          "detail": "SegmentChangeEventDetail",
          "bubbles": true,
          "complexType": {
            "original": "SegmentChangeEventDetail",
            "resolved": "SegmentChangeEventDetail",
            "references": {
              "SegmentChangeEventDetail": {
                "location": "import",
                "path": "./segment-interface",
                "id": "src/components/segment/segment-interface.ts::SegmentChangeEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "valueプロパティが変更され、`ion-segment`からドラッグポインタが解放されたときに発行されます。",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [
        {
          "name": "--background",
          "annotation": "prop",
          "docs": "セグメントボタンの背景"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/select-option/select-option.tsx",
      "encapsulation": "shadow",
      "tag": "ion-select-option",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "`true`の場合、ユーザは選択オプションと対話することができません。このプロパティは、`interface=\"action-sheet\"`の場合には適用されない。なぜなら、`ion-action-sheet`はボタンを無効にすることができないからです。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "complexType": {
            "original": "any | null",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "オプションのテキスト値です。",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/select/select.tsx",
      "encapsulation": "shadow",
      "tag": "ion-select",
      "docs": "",
      "docsTags": [
        {
          "name": "virtualProp",
          "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
        },
        {
          "name": "slot",
          "text": "label - The label text to associate with the select. Use the `labelPlacement` property to control where the label is placed relative to the select. Use this if you need to render a label with custom HTML."
        },
        {
          "name": "part",
          "text": "placeholder - The text displayed in the select when there is no value."
        },
        {
          "name": "part",
          "text": "text - The displayed value of the select."
        },
        {
          "name": "part",
          "text": "icon - The select icon container."
        },
        {
          "name": "part",
          "text": "container - The container for the selected text or placeholder."
        },
        {
          "name": "part",
          "text": "label - The label text describing the select."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "cancelText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "cancel-text",
          "reflectToAttr": false,
          "docs": "キャンセルボタンに表示するテキストです。",
          "docsTags": [],
          "default": "'Cancel'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
          "complexType": {
            "original": "Color",
            "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
            "references": {
              "Color": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::Color"
              }
            }
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "アプリケーションのカラーパレットから使用する色を指定します。デフォルトのオプションは以下の通りです：`\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, と `\"dark\"` です．色についての詳細は [theming](/docs/theming/basics) を参照してください。  このプロパティは、modern select構文を使用する場合にのみ利用可能です。",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "tertiary",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "type": "string & Record<never, never>"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "compareWith",
          "type": "((currentValue: any, compareValue: any) => boolean) | null | string | undefined",
          "complexType": {
            "original": "string | SelectCompareFn | null",
            "resolved": "((currentValue: any, compareValue: any) => boolean) | null | string | undefined",
            "references": {
              "SelectCompareFn": {
                "location": "import",
                "path": "./select-interface",
                "id": "src/components/select/select-interface.ts::SelectCompareFn"
              }
            }
          },
          "mutable": false,
          "attr": "compare-with",
          "reflectToAttr": false,
          "docs": "オブジェクトの値を比較するために使用されるプロパティ名または関数。",
          "docsTags": [],
          "values": [
            {
              "type": "((currentValue: any, compareValue: any) => boolean)"
            },
            {
              "type": "null"
            },
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "`true`の場合、ユーザはセレクトと対話することができません。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "expandedIcon",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "expanded-icon",
          "reflectToAttr": false,
          "docs": "セレクトが開いているときに表示するトグルアイコン。定義されている場合、`md`モードでのアイコン回転の動作は無効になる。未定義の場合、セレクトが開いているときも閉じているときも `toggleIcon` が使用される。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "fill",
          "type": "\"outline\" | \"solid\" | undefined",
          "complexType": {
            "original": "'outline' | 'solid'",
            "resolved": "\"outline\" | \"solid\" | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "fill",
          "reflectToAttr": false,
          "docs": "アイテムの塗りつぶし。もし `\"solid\"` ならば、アイテムは背景を持つようになります。もし `\"outline\"` ならば、アイテムはボーダー付きの透明なものになります。md`モードでのみ使用可能です。",
          "docsTags": [],
          "values": [
            {
              "value": "outline",
              "type": "string"
            },
            {
              "value": "solid",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "interface",
          "type": "\"action-sheet\" | \"alert\" | \"popover\"",
          "complexType": {
            "original": "SelectInterface",
            "resolved": "\"action-sheet\" | \"alert\" | \"popover\"",
            "references": {
              "SelectInterface": {
                "location": "import",
                "path": "./select-interface",
                "id": "src/components/select/select-interface.ts::SelectInterface"
              }
            }
          },
          "mutable": false,
          "attr": "interface",
          "reflectToAttr": false,
          "docs": "selectが使用するインターフェース。action-sheet`, `popover` または `alert`.",
          "docsTags": [],
          "default": "'alert'",
          "values": [
            {
              "value": "action-sheet",
              "type": "string"
            },
            {
              "value": "alert",
              "type": "string"
            },
            {
              "value": "popover",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "interfaceOptions",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "interface-options",
          "reflectToAttr": false,
          "docs": "alert`、`action-sheet`、`popover` インターフェースが取ることができる追加オプション。各インターフェイスの作成オプションについては、 [ion-alert docs](./alert), [ion-action-sheet docs](./action-sheet), [ion-popover docs](./popover) を参照してください。  注意: `interfaceOptions` は `alert` インターフェースで `inputs` や `buttons` をオーバーライドしません。",
          "docsTags": [],
          "default": "{}",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "justify",
          "type": "\"end\" | \"space-between\" | \"start\"",
          "complexType": {
            "original": "'start' | 'end' | 'space-between'",
            "resolved": "\"end\" | \"space-between\" | \"start\"",
            "references": {}
          },
          "mutable": false,
          "attr": "justify",
          "reflectToAttr": false,
          "docs": "ラベルとセレクトを1行にまとめる方法。`labelPlacement`が `\"floating\"` または `\"stacked\"` に設定されている場合、ラベルとセレクトが異なる行にあるときは `justify` は適用されません。`\"start\"`：ラベルとセレクトはLTRでは左側に、RTLでは右側に表示されます。`\"end\"`：ラベルとセレクトはLTRでは右に、RTLでは左に表示されます。\"space-between\"`：ラベルとセレクトは行の反対側の端に表示され、2つの要素の間にはスペースがあります。",
          "docsTags": [],
          "default": "'space-between'",
          "values": [
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "space-between",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "セレクトに関連付けられた可視ラベル。  プレーンテキストのラベルをレンダリングする必要がある場合に使用する。  label`プロパティは `label` スロットよりも優先される。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "labelPlacement",
          "type": "\"end\" | \"fixed\" | \"floating\" | \"stacked\" | \"start\" | undefined",
          "complexType": {
            "original": "'start' | 'end' | 'floating' | 'stacked' | 'fixed'",
            "resolved": "\"end\" | \"fixed\" | \"floating\" | \"stacked\" | \"start\" | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "label-placement",
          "reflectToAttr": false,
          "docs": "セレクトに対してラベルを配置する位置。`\"start\"`：ラベルはLTRではセレクトの左側に、RTLでは右側に表示されます。`\"end\"`：ラベルはLTRではセレクトの右側に、RTLでは左側に表示されます。\"floating\"`：ラベルは、セレクトがフォーカスされているか、セレクトに値がある場合、小さく表示され、セレクトの上に表示されます。それ以外の場合は、セレクトの上に表示されます。\"stacked\"`：ラベルは、セレクトがぼやけた状態や値がない状態でも、小さく表示され、セレクトの上に表示されます。`\"fixed\"`：ラベルの幅が固定される以外は、`\"start\"`と同じ動作になります。長いテキストは省略記号（\"...\"）で切り捨てられます。`\"floating\"`や \"stacked\"`を使用する場合は、selectに `value` か `placeholder` のどちらかを指定して初期化することをお勧めします。",
          "docsTags": [],
          "default": "'start'",
          "values": [
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "fixed",
              "type": "string"
            },
            {
              "value": "floating",
              "type": "string"
            },
            {
              "value": "stacked",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "legacy",
          "type": "boolean | undefined",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "legacy",
          "reflectToAttr": false,
          "docs": "`legacy`プロパティを`true`に設定すると、レガシーフォームコントロールのマークアップを強制的に使用することができます。Ionicは、コンポーネントが`aria-label`属性または`label`プロパティを使用している場合にのみ、最新のフォームマークアップを選択します。そのため、`legacy`プロパティは、この自動オプトイン動作を回避したい場合にのみ、エスケープハッチとして使用する必要があります。なお、このプロパティはIonicの今後のメジャーリリースで削除され、すべてのフォームコンポーネントはモダンフォームマークアップを使用するようオプトインされる予定です。",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "multiple",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "multiple",
          "reflectToAttr": false,
          "docs": "`true`の場合、selectは複数の値を受け入れることができる。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "フォームデータとともに送信されるコントロールの名前。",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "okText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "ok-text",
          "reflectToAttr": false,
          "docs": "okボタンに表示するテキストです。",
          "docsTags": [],
          "default": "'OK'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "セレクトが空のときに表示するテキストです。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "selectedText",
          "type": "null | string | undefined",
          "complexType": {
            "original": "string | null",
            "resolved": "null | string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "selected-text",
          "reflectToAttr": false,
          "docs": "選択されたオプションの値の代わりに表示するテキストです。",
          "docsTags": [],
          "values": [
            {
              "type": "null"
            },
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "shape",
          "type": "\"round\" | undefined",
          "complexType": {
            "original": "'round'",
            "resolved": "\"round\" | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "shape",
          "reflectToAttr": false,
          "docs": "セレクトの形状を指定します。`round`の場合、境界線の半径が大きくなります。",
          "docsTags": [],
          "values": [
            {
              "value": "round",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "toggleIcon",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "toggle-icon",
          "reflectToAttr": false,
          "docs": "使用するトグルアイコン。デフォルトは `ios` モードの場合は `chevronExpand` で、`md` モードの場合は `caretDownSharp` である。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "complexType": {
            "original": "any | null",
            "resolved": "any",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "セレクトの値です。",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "open",
          "returns": {
            "type": "Promise<any>",
            "docs": ""
          },
          "complexType": {
            "signature": "(event?: UIEvent) => Promise<any>",
            "parameters": [
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "event The user interface event that called the open."
                  }
                ],
                "text": "The user interface event that called the open."
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "UIEvent": {
                "location": "global",
                "id": "global::UIEvent"
              },
              "HTMLElement": {
                "location": "global",
                "id": "global::HTMLElement"
              }
            },
            "return": "Promise<any>"
          },
          "signature": "open(event?: UIEvent) => Promise<any>",
          "parameters": [],
          "docs": "セレクトオーバーレイを開きます。オーバーレイは `ion-select` の `interface` プロパティによって、アラート、アクションシート、ポップオーバーのいずれかになります。",
          "docsTags": [
            {
              "name": "param",
              "text": "event The user interface event that called the open."
            }
          ]
        }
      ],
      "events": [
        {
          "event": "ionBlur",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "セレクトのフォーカスが外れたときに発行されます。",
          "docsTags": []
        },
        {
          "event": "ionCancel",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "選択がキャンセルされたときに発行されます。",
          "docsTags": []
        },
        {
          "event": "ionChange",
          "detail": "SelectChangeEventDetail<any>",
          "bubbles": true,
          "complexType": {
            "original": "SelectChangeEventDetail",
            "resolved": "SelectChangeEventDetail<any>",
            "references": {
              "SelectChangeEventDetail": {
                "location": "import",
                "path": "./select-interface",
                "id": "src/components/select/select-interface.ts::SelectChangeEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "値が変更されたときに発行されます。",
          "docsTags": []
        },
        {
          "event": "ionDismiss",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "オーバーレイが解除されたときに発行されます。",
          "docsTags": []
        },
        {
          "event": "ionFocus",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "セレクトにフォーカスが当たったときに発行されます。",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--background",
          "annotation": "prop",
          "docs": "セレクトの背景"
        },
        {
          "name": "--border-color",
          "annotation": "prop",
          "docs": "セレクトボーダーの色"
        },
        {
          "name": "--border-radius",
          "annotation": "prop",
          "docs": "選択枠の半径。fill=\"outline \"を使う場合、半径が大きいと表示が不 均一になることがあります。"
        },
        {
          "name": "--border-style",
          "annotation": "prop",
          "docs": "セレクトボーダーのスタイル"
        },
        {
          "name": "--border-width",
          "annotation": "prop",
          "docs": "セレクトボーダーの幅"
        },
        {
          "name": "--highlight-color-focused",
          "annotation": "prop",
          "docs": "フォーカス時のセレクトのハイライトの色"
        },
        {
          "name": "--highlight-color-invalid",
          "annotation": "prop",
          "docs": "無効時のセレクトのハイライトの色"
        },
        {
          "name": "--highlight-color-valid",
          "annotation": "prop",
          "docs": "有効時のセレクトのハイライトの色"
        },
        {
          "name": "--padding-bottom",
          "annotation": "prop",
          "docs": "セレクトのBottom Padding"
        },
        {
          "name": "--padding-end",
          "annotation": "prop",
          "docs": "セレクトの方向が左から右の場合はRight Padding、右から左の場合はLeft Paddingを行う"
        },
        {
          "name": "--padding-start",
          "annotation": "prop",
          "docs": "セレクトの方向が左から右の場合はLeft Padding、右から左の場合はRight Padding"
        },
        {
          "name": "--padding-top",
          "annotation": "prop",
          "docs": "セレクトのTop Padding"
        },
        {
          "name": "--placeholder-color",
          "annotation": "prop",
          "docs": "セレクトPlaceholderテキストの色"
        },
        {
          "name": "--placeholder-opacity",
          "annotation": "prop",
          "docs": "選択Placeholderテキストの不透明度"
        },
        {
          "name": "--ripple-color",
          "annotation": "prop",
          "docs": "MDモード時のリップルエフェクトの色です。"
        }
      ],
      "slots": [
        {
          "name": "label",
          "docs": "セレクトに関連付けるラベルテキスト。labelPlacement`プロパティを使用して、selectに対するラベルの位置を制御します。ラベルをカスタムHTMLでレンダリングする必要がある場合に使用します。"
        }
      ],
      "parts": [
        {
          "name": "container",
          "docs": "選択テキストまたはプレースホルダーのコンテナ。"
        },
        {
          "name": "icon",
          "docs": "セレクトアイコンのコンテナです。"
        },
        {
          "name": "label",
          "docs": "セレクトを表すラベルテキスト。"
        },
        {
          "name": "placeholder",
          "docs": "値がないときにセレクトに表示されるテキスト。"
        },
        {
          "name": "text",
          "docs": "セレクトの表示値です。"
        }
      ],
      "dependents": [],
      "dependencies": [
        "ion-select-popover",
        "ion-popover",
        "ion-action-sheet",
        "ion-alert",
        "ion-icon"
      ],
      "dependencyGraph": {
        "ion-select": [
          "ion-select-popover",
          "ion-popover",
          "ion-action-sheet",
          "ion-alert",
          "ion-icon"
        ],
        "ion-select-popover": [
          "ion-item",
          "ion-checkbox",
          "ion-radio-group",
          "ion-radio",
          "ion-list",
          "ion-list-header",
          "ion-label"
        ],
        "ion-item": [
          "ion-icon",
          "ion-ripple-effect",
          "ion-note"
        ],
        "ion-popover": [
          "ion-backdrop"
        ],
        "ion-action-sheet": [
          "ion-backdrop",
          "ion-icon",
          "ion-ripple-effect"
        ],
        "ion-alert": [
          "ion-ripple-effect",
          "ion-backdrop"
        ]
      }
    },
    {
      "filePath": "src/components/skeleton-text/skeleton-text.tsx",
      "encapsulation": "shadow",
      "tag": "ion-skeleton-text",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "animated",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "animated",
          "reflectToAttr": false,
          "docs": "`true`の場合、スケルトンテキストをアニメーションさせる。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--background",
          "annotation": "prop",
          "docs": "スケルトンテキストの背景"
        },
        {
          "name": "--background-rgb",
          "annotation": "prop",
          "docs": "スケルトンテキストの背景（rgb形式"
        },
        {
          "name": "--border-radius",
          "annotation": "prop",
          "docs": "スケルトンテキストのボーダー半径"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/slide/slide.tsx",
      "encapsulation": "none",
      "tag": "ion-slide",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/slides/slides.tsx",
      "encapsulation": "none",
      "tag": "ion-slides",
      "docs": "",
      "docsTags": [
        {
          "name": "virtualProp",
          "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "options",
          "type": "any",
          "mutable": false,
          "attr": "options",
          "reflectToAttr": false,
          "docs": "swiperインスタンスに渡すオプションです。有効なオプションについては、https://swiperjs.com/swiper-api を参照してください。",
          "docsTags": [],
          "default": "{}",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pager",
          "type": "boolean",
          "mutable": false,
          "attr": "pager",
          "reflectToAttr": false,
          "docs": "もし `true` ならば、ページネーションを表示します。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scrollbar",
          "type": "boolean",
          "mutable": false,
          "attr": "scrollbar",
          "reflectToAttr": false,
          "docs": "`true`の場合、スクロールバーを表示します。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getActiveIndex",
          "returns": {
            "type": "Promise<number>",
            "docs": ""
          },
          "signature": "getActiveIndex() => Promise<number>",
          "parameters": [],
          "docs": "アクティブなスライドのインデックスを取得します。",
          "docsTags": []
        },
        {
          "name": "getPreviousIndex",
          "returns": {
            "type": "Promise<number>",
            "docs": ""
          },
          "signature": "getPreviousIndex() => Promise<number>",
          "parameters": [],
          "docs": "前のスライドのインデックスを取得します。",
          "docsTags": []
        },
        {
          "name": "getSwiper",
          "returns": {
            "type": "Promise<any>",
            "docs": ""
          },
          "signature": "getSwiper() => Promise<any>",
          "parameters": [],
          "docs": "Swiperのインスタンスを取得します。これを使用して、SwiperのフルAPIにアクセスします。すべてのAPIオプションについては、https://swiperjs.com/swiper-api を参照してください。",
          "docsTags": []
        },
        {
          "name": "isBeginning",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "signature": "isBeginning() => Promise<boolean>",
          "parameters": [],
          "docs": "現在のスライドが最初のスライドであるか否かを取得します。",
          "docsTags": []
        },
        {
          "name": "isEnd",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "signature": "isEnd() => Promise<boolean>",
          "parameters": [],
          "docs": "現在のスライドが最後のスライドであるか否かを取得します。",
          "docsTags": []
        },
        {
          "name": "length",
          "returns": {
            "type": "Promise<number>",
            "docs": ""
          },
          "signature": "length() => Promise<number>",
          "parameters": [],
          "docs": "スライドの総枚数を取得します。",
          "docsTags": []
        },
        {
          "name": "lockSwipeToNext",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "lockSwipeToNext(lock: boolean) => Promise<void>",
          "parameters": [],
          "docs": "次のスライドにスライドする機能をロックまたはアンロックします。",
          "docsTags": [
            {
              "name": "param",
              "text": "lock If `true`, disable swiping to the next slide."
            }
          ]
        },
        {
          "name": "lockSwipeToPrev",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "lockSwipeToPrev(lock: boolean) => Promise<void>",
          "parameters": [],
          "docs": "前のスライドにスライドする機能をロックまたはアンロックします。",
          "docsTags": [
            {
              "name": "param",
              "text": "lock If `true`, disable swiping to the previous slide."
            }
          ]
        },
        {
          "name": "lockSwipes",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "lockSwipes(lock: boolean) => Promise<void>",
          "parameters": [],
          "docs": "次のスライドや前のスライドにスライドする機能をロックまたはアンロックします。",
          "docsTags": [
            {
              "name": "param",
              "text": "lock If `true`, disable swiping to the next and previous slide."
            }
          ]
        },
        {
          "name": "slideNext",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "slideNext(speed?: number, runCallbacks?: boolean) => Promise<void>",
          "parameters": [],
          "docs": "次のスライドに遷移します。",
          "docsTags": [
            {
              "name": "param",
              "text": "speed The transition duration (in ms)."
            },
            {
              "name": "param",
              "text": "runCallbacks If true, the transition will produce [Transition/SlideChange][Start/End] transition events."
            }
          ]
        },
        {
          "name": "slidePrev",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "slidePrev(speed?: number, runCallbacks?: boolean) => Promise<void>",
          "parameters": [],
          "docs": "前のスライドに遷移します。",
          "docsTags": [
            {
              "name": "param",
              "text": "speed The transition duration (in ms)."
            },
            {
              "name": "param",
              "text": "runCallbacks If true, the transition will produce the [Transition/SlideChange][Start/End] transition events."
            }
          ]
        },
        {
          "name": "slideTo",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "slideTo(index: number, speed?: number, runCallbacks?: boolean) => Promise<void>",
          "parameters": [],
          "docs": "指定されたスライドに遷移します。",
          "docsTags": [
            {
              "name": "param",
              "text": "index The index of the slide to transition to."
            },
            {
              "name": "param",
              "text": "speed The transition duration (in ms)."
            },
            {
              "name": "param",
              "text": "runCallbacks If true, the transition will produce [Transition/SlideChange][Start/End] transition events."
            }
          ]
        },
        {
          "name": "startAutoplay",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "startAutoplay() => Promise<void>",
          "parameters": [],
          "docs": "オートプレイを開始します。",
          "docsTags": []
        },
        {
          "name": "stopAutoplay",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "stopAutoplay() => Promise<void>",
          "parameters": [],
          "docs": "自動再生を停止します。",
          "docsTags": []
        },
        {
          "name": "update",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "update() => Promise<void>",
          "parameters": [],
          "docs": "基礎となるスライダーの実装を更新します。子スライダーを追加または削除した場合に呼び出します。",
          "docsTags": []
        },
        {
          "name": "updateAutoHeight",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "updateAutoHeight(speed?: number) => Promise<void>",
          "parameters": [],
          "docs": "speed」パラメータに等しい時間、スイーパーの高さを強制的に更新する（autoHeightが有効な場合）。",
          "docsTags": [
            {
              "name": "param",
              "text": "speed The transition duration (in ms)."
            }
          ]
        }
      ],
      "events": [
        {
          "event": "ionSlideDidChange",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "アクティブスライドが変更された後に発行されます。",
          "docsTags": []
        },
        {
          "event": "ionSlideDoubleTap",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "ユーザがスライドのコンテナをダブルタップしたときに発生します。",
          "docsTags": []
        },
        {
          "event": "ionSlideDrag",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "スライダーがアクティブに移動しているときに発行されます。",
          "docsTags": []
        },
        {
          "event": "ionSlideNextEnd",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "次のスライドが終了したときに発行されます。",
          "docsTags": []
        },
        {
          "event": "ionSlideNextStart",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "次のスライドが開始されたときに発行されます。",
          "docsTags": []
        },
        {
          "event": "ionSlidePrevEnd",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "前のスライドが終了したときに発行されます。",
          "docsTags": []
        },
        {
          "event": "ionSlidePrevStart",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "前のスライドが開始されたときに発行されます。",
          "docsTags": []
        },
        {
          "event": "ionSlideReachEnd",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "スライダーが最後のスライドになったときに発行されます。",
          "docsTags": []
        },
        {
          "event": "ionSlideReachStart",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "スライダーが初期位置にあるときに発行されます。",
          "docsTags": []
        },
        {
          "event": "ionSlidesDidLoad",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Swiperの初期化後に発行されます。",
          "docsTags": []
        },
        {
          "event": "ionSlideTap",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "ユーザがスライドのコンテナをタップ/クリックしたときに発行されます。",
          "docsTags": []
        },
        {
          "event": "ionSlideTouchEnd",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "ユーザーがタッチを離したときに発行されます。",
          "docsTags": []
        },
        {
          "event": "ionSlideTouchStart",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "ユーザーがスライダーに初めて触れたときに発行されます。",
          "docsTags": []
        },
        {
          "event": "ionSlideTransitionEnd",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "スライド遷移が終了したときに発行されます。",
          "docsTags": []
        },
        {
          "event": "ionSlideTransitionStart",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "スライド遷移が開始されたときに発行されます。",
          "docsTags": []
        },
        {
          "event": "ionSlideWillChange",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "アクティブスライドが変更される前に発行されます。",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--bullet-background",
          "annotation": "prop",
          "docs": "ページネーションの箇条書きの背景"
        },
        {
          "name": "--bullet-background-active",
          "annotation": "prop",
          "docs": "アクティブなページネーションバレットの背景"
        },
        {
          "name": "--progress-bar-background",
          "annotation": "prop",
          "docs": "ページネーションの進行バーの背景"
        },
        {
          "name": "--progress-bar-background-active",
          "annotation": "prop",
          "docs": "アクティブなページネーションの進行バーの背景"
        },
        {
          "name": "--scroll-bar-background",
          "annotation": "prop",
          "docs": "ページネーション用スクロールバーの背景"
        },
        {
          "name": "--scroll-bar-background-active",
          "annotation": "prop",
          "docs": "アクティブなページネーションのスクロールバーの背景"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/spinner/spinner.tsx",
      "encapsulation": "shadow",
      "tag": "ion-spinner",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
          "complexType": {
            "original": "Color",
            "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
            "references": {
              "Color": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::Color"
              }
            }
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "アプリケーションのカラーパレットから使用する色を指定します。デフォルトのオプションは以下の通りです。 `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, と `\"dark\"` です．色に関する詳しい情報は [theming](/docs/theming/basics) を参照してください。",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "tertiary",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "type": "string & Record<never, never>"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "duration",
          "type": "number | undefined",
          "complexType": {
            "original": "number",
            "resolved": "number | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "duration",
          "reflectToAttr": false,
          "docs": "スピナーアニメーションの持続時間（ミリ秒）。デフォルトはスピナーによって異なる。",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "\"bubbles\" | \"circles\" | \"circular\" | \"crescent\" | \"dots\" | \"lines\" | \"lines-sharp\" | \"lines-sharp-small\" | \"lines-small\" | undefined",
          "complexType": {
            "original": "SpinnerTypes",
            "resolved": "\"bubbles\" | \"circles\" | \"circular\" | \"crescent\" | \"dots\" | \"lines\" | \"lines-sharp\" | \"lines-sharp-small\" | \"lines-small\" | undefined",
            "references": {
              "SpinnerTypes": {
                "location": "import",
                "path": "./spinner-configs",
                "id": "src/components/spinner/spinner-configs.ts::SpinnerTypes"
              }
            }
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "使用するSVGスピナーの名前。名前が提供されない場合、プラットフォームのデフォルトのスピナーが使用されます。",
          "docsTags": [],
          "values": [
            {
              "value": "bubbles",
              "type": "string"
            },
            {
              "value": "circles",
              "type": "string"
            },
            {
              "value": "circular",
              "type": "string"
            },
            {
              "value": "crescent",
              "type": "string"
            },
            {
              "value": "dots",
              "type": "string"
            },
            {
              "value": "lines",
              "type": "string"
            },
            {
              "value": "lines-sharp",
              "type": "string"
            },
            {
              "value": "lines-sharp-small",
              "type": "string"
            },
            {
              "value": "lines-small",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "paused",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "paused",
          "reflectToAttr": false,
          "docs": "`true`の場合、スピナーのアニメーションは一時停止されます。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--color",
          "annotation": "prop",
          "docs": "スピナーの色"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [
        "ion-infinite-scroll-content",
        "ion-loading",
        "ion-refresher-content"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "ion-infinite-scroll-content": [
          "ion-spinner"
        ],
        "ion-loading": [
          "ion-spinner"
        ],
        "ion-refresher-content": [
          "ion-spinner"
        ]
      }
    },
    {
      "filePath": "src/components/split-pane/split-pane.tsx",
      "encapsulation": "shadow",
      "tag": "ion-split-pane",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "contentId",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "content-id",
          "reflectToAttr": true,
          "docs": "メインコンテンツの `id` です。ルータを使用する場合は、通常 `ion-router-outlet` となります。ルータを使用しない場合は、通常、メインビューの `ion-content` となります。これは `ion-menu` 内の `ion-content` の ID ではありません。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "`true`の場合、分割ペインが非表示になります。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "when",
          "type": "boolean | string",
          "complexType": {
            "original": "string | boolean",
            "resolved": "boolean | string",
            "references": {}
          },
          "mutable": false,
          "attr": "when",
          "reflectToAttr": false,
          "docs": "分割パネルを表示するタイミング。CSSメディアクエリ式、またはショートカット式を指定します。また、ブーリアン表現も可能です。",
          "docsTags": [],
          "default": "QUERY['lg']",
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "ionSplitPaneVisible",
          "detail": "{ visible: boolean; }",
          "bubbles": true,
          "complexType": {
            "original": "{ visible: boolean }",
            "resolved": "{ visible: boolean; }",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "分割画面の表示が変わったときに呼び出される式",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--border",
          "annotation": "prop",
          "docs": "ペイン間のボーダー"
        },
        {
          "name": "--side-max-width",
          "annotation": "prop",
          "docs": "サイドペインの最大幅を指定します。分割ペインが折りたたまれた状態では適用されません。"
        },
        {
          "name": "--side-min-width",
          "annotation": "prop",
          "docs": "サイドペインの最小幅を指定します。分割ペインが折りたたまれた状態では適用されません。"
        },
        {
          "name": "--side-width",
          "annotation": "prop",
          "docs": "サイドペインの幅を指定します。分割ペインが折りたたまれた状態では適用されません。"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/tab-bar/tab-bar.tsx",
      "encapsulation": "shadow",
      "tag": "ion-tab-bar",
      "docs": "",
      "docsTags": [
        {
          "name": "virtualProp",
          "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
          "complexType": {
            "original": "Color",
            "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
            "references": {
              "Color": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::Color"
              }
            }
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "アプリケーションのカラーパレットから使用する色を指定します。デフォルトのオプションは以下の通りです。 `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, と `\"dark\"` です．色に関する詳しい情報は [theming](/docs/theming/basics) を参照してください。",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "tertiary",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "type": "string & Record<never, never>"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "selectedTab",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "selected-tab",
          "reflectToAttr": false,
          "docs": "選択されたタブコンポーネント",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "translucent",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "translucent",
          "reflectToAttr": false,
          "docs": "`true`の場合、タブバーを半透明にします。modeが `\"ios\"` で、デバイスが [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility) をサポートしている場合にのみ適用されます。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--background",
          "annotation": "prop",
          "docs": "タブバーの背景"
        },
        {
          "name": "--border",
          "annotation": "prop",
          "docs": "タブバーの境界線"
        },
        {
          "name": "--color",
          "annotation": "prop",
          "docs": "タブバーの色"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/tab-button/tab-button.tsx",
      "encapsulation": "shadow",
      "tag": "ion-tab-button",
      "docs": "",
      "docsTags": [
        {
          "name": "virtualProp",
          "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
        },
        {
          "name": "part",
          "text": "native - The native HTML anchor element that wraps all child elements."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "`true`の場合、ユーザはタブボタンを操作することができません。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "download",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "download",
          "reflectToAttr": false,
          "docs": "この属性は、ブラウザが URL に移動する代わりに URL をダウンロードするように指示し、ユーザはローカルファイルとして保存するように促されます。この属性に値がある場合、保存のプロンプトであらかじめ入力されたファイル名として使用されます（ユーザーはファイル名を変更することができます）。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "href",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "ハイパーリンクが指し示す URL または URL フラグメントを格納します。このプロパティが設定されている場合、アンカータグがレンダリングされます。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "layout",
          "type": "\"icon-bottom\" | \"icon-end\" | \"icon-hide\" | \"icon-start\" | \"icon-top\" | \"label-hide\" | undefined",
          "complexType": {
            "original": "TabButtonLayout",
            "resolved": "\"icon-bottom\" | \"icon-end\" | \"icon-hide\" | \"icon-start\" | \"icon-top\" | \"label-hide\" | undefined",
            "references": {
              "TabButtonLayout": {
                "location": "import",
                "path": "../tab-bar/tab-bar-interface",
                "id": "src/components/tab-bar/tab-bar-interface.ts::TabButtonLayout"
              }
            }
          },
          "mutable": true,
          "attr": "layout",
          "reflectToAttr": false,
          "docs": "タブバーのテキストとアイコンのレイアウトを設定します。デフォルトは`\"icon-top\"`です。",
          "docsTags": [],
          "values": [
            {
              "value": "icon-bottom",
              "type": "string"
            },
            {
              "value": "icon-end",
              "type": "string"
            },
            {
              "value": "icon-hide",
              "type": "string"
            },
            {
              "value": "icon-start",
              "type": "string"
            },
            {
              "value": "icon-top",
              "type": "string"
            },
            {
              "value": "label-hide",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "rel",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "rel",
          "reflectToAttr": false,
          "docs": "ターゲットオブジェクトとリンクオブジェクトの関係を指定します。値は、スペースで区切られた[リンクタイプ](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types)のリストです。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "selected",
          "reflectToAttr": false,
          "docs": "選択されたタブコンポーネント",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tab",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "tab",
          "reflectToAttr": false,
          "docs": "各 `ion-tab` にはタブ ID を指定する必要があります。これは、選択されたタブを参照したり、ルータがタブを切り替えたりするために内部的に使用される。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "target",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "リンク先のURLを表示する場所を指定します。href`を指定した場合のみ適用される。特別なキーワードがあります。_blank\"`, `\"_self\"`, `\"_parent\"`, `\"_top\"`.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "ionTabBarChanged",
          "target": "window",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [
        {
          "name": "--background",
          "annotation": "prop",
          "docs": "タブボタンの背景"
        },
        {
          "name": "--background-focused",
          "annotation": "prop",
          "docs": "タブキーでフォーカスされたときのタブボタンの背景"
        },
        {
          "name": "--background-focused-opacity",
          "annotation": "prop",
          "docs": "タブキーでフォーカスしたときのタブボタンの背景の不透明度"
        },
        {
          "name": "--color",
          "annotation": "prop",
          "docs": "タブボタンの色"
        },
        {
          "name": "--color-focused",
          "annotation": "prop",
          "docs": "タブキーでフォーカスしたときのタブボタンの色"
        },
        {
          "name": "--color-selected",
          "annotation": "prop",
          "docs": "選択されたタブボタンの色"
        },
        {
          "name": "--padding-bottom",
          "annotation": "prop",
          "docs": "タブボタンのBottom Padding"
        },
        {
          "name": "--padding-end",
          "annotation": "prop",
          "docs": "タブボタンの向きが左から右の場合はRight Padding、右から左の場合はLeft Paddingとなります。"
        },
        {
          "name": "--padding-start",
          "annotation": "prop",
          "docs": "タブボタンの向きが左から右の場合はLeft Padding、右から左の場合はRight Paddingとなります。"
        },
        {
          "name": "--padding-top",
          "annotation": "prop",
          "docs": "タブボタンのTop Padding"
        },
        {
          "name": "--ripple-color",
          "annotation": "prop",
          "docs": "ボタンリプルエフェクトの色"
        }
      ],
      "slots": [],
      "parts": [
        {
          "name": "native",
          "docs": "すべての子要素を包むネイティブHTMLのアンカー要素です。"
        }
      ],
      "dependents": [],
      "dependencies": [
        "ion-ripple-effect"
      ],
      "dependencyGraph": {
        "ion-tab-button": [
          "ion-ripple-effect"
        ]
      }
    },
    {
      "filePath": "src/components/tab/tab.tsx",
      "encapsulation": "shadow",
      "tag": "ion-tab",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "component",
          "type": "Function | HTMLElement | null | string | undefined",
          "complexType": {
            "original": "ComponentRef",
            "resolved": "Function | HTMLElement | null | string | undefined",
            "references": {
              "ComponentRef": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::ComponentRef"
              }
            }
          },
          "mutable": false,
          "attr": "component",
          "reflectToAttr": false,
          "docs": "タブの内側に表示するコンポーネントです。",
          "docsTags": [],
          "values": [
            {
              "type": "Function"
            },
            {
              "type": "HTMLElement"
            },
            {
              "type": "null"
            },
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "tab",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "tab",
          "reflectToAttr": false,
          "docs": "各 `ion-tab` にはタブ ID を指定する必要があります。これは、選択されたタブを参照したり、ルータがタブを切り替えたりするために内部的に使用される。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [
        {
          "name": "setActive",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setActive() => Promise<void>",
          "parameters": [],
          "docs": "タブのアクティブコンポーネントを設定します。",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/tabs/tabs.tsx",
      "encapsulation": "shadow",
      "tag": "ion-tabs",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- Content is placed between the named slots if provided without a slot."
        },
        {
          "name": "slot",
          "text": "top - Content is placed at the top of the screen."
        },
        {
          "name": "slot",
          "text": "bottom - Content is placed at the bottom of the screen."
        }
      ],
      "usage": {},
      "props": [],
      "methods": [
        {
          "name": "getSelected",
          "returns": {
            "type": "Promise<string | undefined>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<string | undefined>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<string | undefined>"
          },
          "signature": "getSelected() => Promise<string | undefined>",
          "parameters": [],
          "docs": "現在選択されているタブを取得します。このメソッドは、バニラJavaScriptプロジェクトでのみ使用できます。Angular、React、Vueのタブの実装は、各フレームワークのルーターと結合しています。",
          "docsTags": []
        },
        {
          "name": "getTab",
          "returns": {
            "type": "Promise<HTMLIonTabElement | undefined>",
            "docs": ""
          },
          "complexType": {
            "signature": "(tab: string | HTMLIonTabElement) => Promise<HTMLIonTabElement | undefined>",
            "parameters": [
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "tab The tab instance to select. If passed a string, it should be the value of the tab's `tab` property."
                  }
                ],
                "text": "The tab instance to select. If passed a string, it should be the value of the tab's `tab` property."
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLIonTabElement": {
                "location": "global",
                "id": "global::HTMLIonTabElement"
              }
            },
            "return": "Promise<HTMLIonTabElement | undefined>"
          },
          "signature": "getTab(tab: string | HTMLIonTabElement) => Promise<HTMLIonTabElement | undefined>",
          "parameters": [],
          "docs": "特定のタブを `tab` プロパティの値または要素参照で取得する。このメソッドは vanilla JavaScript プロジェクトでのみ利用可能です。Angular、React、Vue のタブの実装は、それぞれのフレームワークのルータと結合しています。",
          "docsTags": [
            {
              "name": "param",
              "text": "tab The tab instance to select. If passed a string, it should be the value of the tab's `tab` property."
            }
          ]
        },
        {
          "name": "select",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "complexType": {
            "signature": "(tab: string | HTMLIonTabElement) => Promise<boolean>",
            "parameters": [
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "tab The tab instance to select. If passed a string, it should be the value of the tab's `tab` property."
                  }
                ],
                "text": "The tab instance to select. If passed a string, it should be the value of the tab's `tab` property."
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLIonTabElement": {
                "location": "global",
                "id": "global::HTMLIonTabElement"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "select(tab: string | HTMLIonTabElement) => Promise<boolean>",
          "parameters": [],
          "docs": "タブを `tab` プロパティの値または要素参照で選択する。このメソッドはバニラJavaScriptプロジェクトでのみ利用可能です。Angular、React、Vue のタブの実装は、それぞれのフレームワークのルータと結合しています。",
          "docsTags": [
            {
              "name": "param",
              "text": "tab The tab instance to select. If passed a string, it should be the value of the tab's `tab` property."
            }
          ]
        }
      ],
      "events": [
        {
          "event": "ionTabsDidChange",
          "detail": "{ tab: string; }",
          "bubbles": false,
          "complexType": {
            "original": "{ tab: string }",
            "resolved": "{ tab: string; }",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "ナビゲーションが新しいコンポーネントに遷移し終わったときに発行されます。",
          "docsTags": []
        },
        {
          "event": "ionTabsWillChange",
          "detail": "{ tab: string; }",
          "bubbles": false,
          "complexType": {
            "original": "{ tab: string }",
            "resolved": "{ tab: string; }",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "ナビゲーションが新しいコンポーネントに移行しようとするときに発行されます。",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "slotがない状態で提供される場合、コンテンツは名前付きslotの間に配置されます。"
        },
        {
          "name": "bottom",
          "docs": "コンテンツは画面下部に配置されます。"
        },
        {
          "name": "top",
          "docs": "コンテンツは画面上部に配置されます。"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/text/text.tsx",
      "encapsulation": "shadow",
      "tag": "ion-text",
      "docs": "",
      "docsTags": [
        {
          "name": "virtualProp",
          "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
          "complexType": {
            "original": "Color",
            "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
            "references": {
              "Color": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::Color"
              }
            }
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "アプリケーションのカラーパレットから使用する色を指定します。デフォルトのオプションは以下の通りです。 `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, と `\"dark\"` です．色に関する詳しい情報は [theming](/docs/theming/basics) を参照してください。",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "tertiary",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "type": "string & Record<never, never>"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/textarea/textarea.tsx",
      "encapsulation": "scoped",
      "tag": "ion-textarea",
      "docs": "",
      "docsTags": [
        {
          "name": "virtualProp",
          "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
        },
        {
          "name": "slot",
          "text": "label - The label text to associate with the textarea. Use the `labelPlacement` property to control where the label is placed relative to the textarea. Use this if you need to render a label with custom HTML. (EXPERIMENTAL)"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "autoGrow",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "auto-grow",
          "reflectToAttr": true,
          "docs": "`true`の場合、textareaコンテナはtextareaの内容に応じて拡大・縮小します。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autocapitalize",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "autocapitalize",
          "reflectToAttr": false,
          "docs": "テキスト値がユーザーによって入力／編集される際に、自動的に大文字にするかどうか、またどのようにするかについて示します。利用可能なオプションoff\"`, `\"none\"`, `\"on\"`, `\"sentences\"`, `\"words\"`, `\"characters\"`.",
          "docsTags": [],
          "default": "'none'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autofocus",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": false,
          "docs": "この Boolean 属性により、ページロード時にフォームコントロールにInputフォーカスが当たるように指定することができます。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "clearOnEdit",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "clear-on-edit",
          "reflectToAttr": false,
          "docs": "true`の場合、編集時にフォーカスが当たった後、値がクリアされる。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
          "complexType": {
            "original": "Color",
            "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
            "references": {
              "Color": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::Color"
              }
            }
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "アプリケーションのカラーパレットから使用する色を指定します。デフォルトのオプションは以下の通りです。 `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, と `\"dark\"` です．色に関する詳しい情報は [theming](/docs/theming/basics) を参照してください。",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "tertiary",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "type": "string & Record<never, never>"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "cols",
          "type": "number | undefined",
          "complexType": {
            "original": "number",
            "resolved": "number | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "cols",
          "reflectToAttr": true,
          "docs": "テキストコントロールの可視幅を、平均文字幅で指定します。指定する場合は、正の整数である必要があります。",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "counter",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "counter",
          "reflectToAttr": false,
          "docs": "`true`の場合、文字カウンタが使用された文字の比率と総文字数制限を表示します。カウンターを正しく計算するために、開発者は `maxlength` プロパティも設定する必要があります。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "counterFormatter",
          "type": "((inputLength: number, maxLength: number) => string) | undefined",
          "complexType": {
            "original": "(inputLength: number, maxLength: number) => string",
            "resolved": "((inputLength: number, maxLength: number) => string) | undefined",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "カウンターのテキストをフォーマットするために使用されるコールバックです。デフォルトでは、カウンターのテキストは\"itemLength / maxLength\"に設定されています。",
          "docsTags": [],
          "values": [
            {
              "type": "((inputLength: number, maxLength: number) => string)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "debounce",
          "type": "number | undefined",
          "complexType": {
            "original": "number",
            "resolved": "number | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "debounce",
          "reflectToAttr": false,
          "docs": "キーを押すたびに `ionInput` イベントが発生するまでの待ち時間をミリ秒単位で設定します。",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "`true`の場合、ユーザはテキストエリアと対話することができません。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "enterkeyhint",
          "type": "\"done\" | \"enter\" | \"go\" | \"next\" | \"previous\" | \"search\" | \"send\" | undefined",
          "complexType": {
            "original": "'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'",
            "resolved": "\"done\" | \"enter\" | \"go\" | \"next\" | \"previous\" | \"search\" | \"send\" | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "enterkeyhint",
          "reflectToAttr": false,
          "docs": "どのエンターキーを表示するかのブラウザへのヒント。指定可能な値。enter\"`, `\"done\"`, `\"go\"`, `\"next\"`, `\"previous\"`, `\"search\"`, and `\"send\"`.",
          "docsTags": [],
          "values": [
            {
              "value": "done",
              "type": "string"
            },
            {
              "value": "enter",
              "type": "string"
            },
            {
              "value": "go",
              "type": "string"
            },
            {
              "value": "next",
              "type": "string"
            },
            {
              "value": "previous",
              "type": "string"
            },
            {
              "value": "search",
              "type": "string"
            },
            {
              "value": "send",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "errorText",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "error-text",
          "reflectToAttr": false,
          "docs": "テキストエリアの下に配置され、エラーが検出されたときに表示されるテキストです。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "fill",
          "type": "\"outline\" | \"solid\" | undefined",
          "complexType": {
            "original": "'outline' | 'solid'",
            "resolved": "\"outline\" | \"solid\" | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "fill",
          "reflectToAttr": false,
          "docs": "アイテムの塗りつぶし。もし `\"solid\"` ならば、アイテムは背景を持つようになります。もし `\"outline\"` ならば、アイテムはボーダー付きの透明なものになります。md`モードでのみ使用可能です。",
          "docsTags": [],
          "values": [
            {
              "value": "outline",
              "type": "string"
            },
            {
              "value": "solid",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "helperText",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "helper-text",
          "reflectToAttr": false,
          "docs": "textareaの下に配置され、エラーが検出されなかった場合に表示されるテキストです。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "inputmode",
          "type": "\"decimal\" | \"email\" | \"none\" | \"numeric\" | \"search\" | \"tel\" | \"text\" | \"url\" | undefined",
          "complexType": {
            "original": "'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search'",
            "resolved": "\"decimal\" | \"email\" | \"none\" | \"numeric\" | \"search\" | \"tel\" | \"text\" | \"url\" | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "inputmode",
          "reflectToAttr": false,
          "docs": "どのキーボードを表示するかのブラウザへのヒント。指定可能な値。none\"`, `\"text\"`, `\"tel\"`, `\"url\"`, `\"email\"`, `\"numeric\"`, `\"decimal\"`, and `\"search\"`.",
          "docsTags": [],
          "values": [
            {
              "value": "decimal",
              "type": "string"
            },
            {
              "value": "email",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "numeric",
              "type": "string"
            },
            {
              "value": "search",
              "type": "string"
            },
            {
              "value": "tel",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            },
            {
              "value": "url",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "label",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "textareaに関連付けられた可視ラベル。  プレーンテキストのラベルをレンダリングする必要がある場合に使用する。  両方が使用されている場合、`label` プロパティが `label` スロットよりも優先される。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "labelPlacement",
          "type": "\"end\" | \"fixed\" | \"floating\" | \"stacked\" | \"start\"",
          "complexType": {
            "original": "'start' | 'end' | 'floating' | 'stacked' | 'fixed'",
            "resolved": "\"end\" | \"fixed\" | \"floating\" | \"stacked\" | \"start\"",
            "references": {}
          },
          "mutable": false,
          "attr": "label-placement",
          "reflectToAttr": false,
          "docs": "テキストエリアと相対的にラベルを配置する場所。\"start\"`：ラベルはLTRではテキストエリアの左側に、RTLでは右側に表示されます。`\"end\"`：ラベルはLTRではテキストエリアの右側に、RTLでは左側に表示されます。\"floating\"`：ラベルは、テキストエリアにフォーカスが当たっているか、値がある場合、小さく表示され、テキストエリアの上に表示されます。それ以外の場合はtextareaの上に表示されます。`\"stacked\"`：テキストエリアがぼやけた状態や値がない場合でも、ラベルは小さく表示され、テキストエリアの上に表示されます。固定\"`：ラベルの幅が固定される以外は、`\"start\"`と同じ動作になります。長いテキストは省略記号（\"...\"）で切り捨てられます。",
          "docsTags": [],
          "default": "'start'",
          "values": [
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "fixed",
              "type": "string"
            },
            {
              "value": "floating",
              "type": "string"
            },
            {
              "value": "stacked",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "legacy",
          "type": "boolean | undefined",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "legacy",
          "reflectToAttr": false,
          "docs": "`legacy`プロパティを`true`に設定すると、レガシーフォームコントロールのマークアップを強制的に使用することができます。Ionicは、コンポーネントが`aria-label`属性またはラベルテキストを含むデフォルトスロットのいずれかを使用している場合にのみ、モダンフォームマークアップを選択するようになっています。そのため、`legacy`プロパティは、この自動オプトイン動作を回避したい場合にのみ、エスケープハッチとして使用する必要があります。なお、このプロパティはIonicの今後のメジャーリリースで削除され、すべてのフォームコンポーネントはモダンフォームマークアップを使用するようにオプトインされる予定です。",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "maxlength",
          "type": "number | undefined",
          "complexType": {
            "original": "number",
            "resolved": "number | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "maxlength",
          "reflectToAttr": false,
          "docs": "この属性は、ユーザが入力できる最大文字数を指定します。",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "minlength",
          "type": "number | undefined",
          "complexType": {
            "original": "number",
            "resolved": "number | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "minlength",
          "reflectToAttr": false,
          "docs": "この属性は、ユーザーが入力できる最小の文字数を指定します。",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "フォームデータとともに送信されるコントロールの名前。",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "入力が値を持つ前に表示される指示文。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "`true`の場合、ユーザーは値を変更することができません。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "`true`の場合、ユーザーはフォームを送信する前に値を入力する必要があります。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rows",
          "type": "number | undefined",
          "complexType": {
            "original": "number",
            "resolved": "number | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "rows",
          "reflectToAttr": false,
          "docs": "コントロールの可視テキスト行数。",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "shape",
          "type": "\"round\" | undefined",
          "complexType": {
            "original": "'round'",
            "resolved": "\"round\" | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "shape",
          "reflectToAttr": false,
          "docs": "テキストエリアの形状を指定します。round \"の場合、ボーダーの半径が大きくなります。",
          "docsTags": [],
          "values": [
            {
              "value": "round",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "spellcheck",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "spellcheck",
          "reflectToAttr": false,
          "docs": "`true`の場合、その要素のスペルチェックと文法チェックが行われる。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "null | string | undefined",
          "complexType": {
            "original": "string | null",
            "resolved": "null | string | undefined",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "textareaの値です。",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "null"
            },
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "wrap",
          "type": "\"hard\" | \"off\" | \"soft\" | undefined",
          "complexType": {
            "original": "'hard' | 'soft' | 'off'",
            "resolved": "\"hard\" | \"off\" | \"soft\" | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "wrap",
          "reflectToAttr": false,
          "docs": "コントロールがテキストをどのように折り返すかを示します。",
          "docsTags": [],
          "values": [
            {
              "value": "hard",
              "type": "string"
            },
            {
              "value": "off",
              "type": "string"
            },
            {
              "value": "soft",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getInputElement",
          "returns": {
            "type": "Promise<HTMLTextAreaElement>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<HTMLTextAreaElement>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLTextAreaElement": {
                "location": "global",
                "id": "global::HTMLTextAreaElement"
              }
            },
            "return": "Promise<HTMLTextAreaElement>"
          },
          "signature": "getInputElement() => Promise<HTMLTextAreaElement>",
          "parameters": [],
          "docs": "要素の内部で使用されるネイティブの `<textarea>` 要素を返します。",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "ion-textarea` のネイティブ `textarea` にフォーカスを設定します。グローバルな `textarea.focus()` の代わりに、このメソッドを使用します。",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "ionBlur",
          "detail": "FocusEvent",
          "bubbles": true,
          "complexType": {
            "original": "FocusEvent",
            "resolved": "FocusEvent",
            "references": {
              "FocusEvent": {
                "location": "global",
                "id": "global::FocusEvent"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Inputのフォーカスが外れたときに発行されます。",
          "docsTags": []
        },
        {
          "event": "ionChange",
          "detail": "TextareaChangeEventDetail",
          "bubbles": true,
          "complexType": {
            "original": "TextareaChangeEventDetail",
            "resolved": "TextareaChangeEventDetail",
            "references": {
              "TextareaChangeEventDetail": {
                "location": "import",
                "path": "./textarea-interface",
                "id": "src/components/textarea/textarea-interface.ts::TextareaChangeEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "onChange` イベントは、ユーザが textarea の値を変更したときに発生する。ionInput` イベントとは異なり、`ionChange` イベントは値が変更された後に要素のフォーカスが外れたときに発生する。",
          "docsTags": []
        },
        {
          "event": "ionFocus",
          "detail": "FocusEvent",
          "bubbles": true,
          "complexType": {
            "original": "FocusEvent",
            "resolved": "FocusEvent",
            "references": {
              "FocusEvent": {
                "location": "global",
                "id": "global::FocusEvent"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Inputにフォーカスが当たったときに発行されます。",
          "docsTags": []
        },
        {
          "event": "ionInput",
          "detail": "TextareaInputEventDetail",
          "bubbles": true,
          "complexType": {
            "original": "TextareaInputEventDetail",
            "resolved": "TextareaInputEventDetail",
            "references": {
              "TextareaInputEventDetail": {
                "location": "import",
                "path": "./textarea-interface",
                "id": "src/components/textarea/textarea-interface.ts::TextareaInputEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "ionInput` イベントは、ユーザが textarea の値を変更するたびに発生する。ionChange` イベントとは異なり、 `ionInput` イベントは textarea の値が変更されるたびに発生する。これは通常、ユーザがキーを入力するたびに発生する。  clearOnEdit` が有効な場合、ユーザが textarea をクリアするためにキーダウンを行うと、 `ionInput` イベントが発生する。",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--background",
          "annotation": "prop",
          "docs": "textareaの背景"
        },
        {
          "name": "--border-color",
          "annotation": "prop",
          "docs": "ヘルパーテキスト、エラーテキスト、カウンターを使用する場合のテキストエリア下のボーダーの色"
        },
        {
          "name": "--border-radius",
          "annotation": "prop",
          "docs": "テキストエリアの境界半径"
        },
        {
          "name": "--border-style",
          "annotation": "prop",
          "docs": "ヘルパーテキスト、エラーテキスト、カウンター使用時のテキストエリア下のボーダーのスタイル"
        },
        {
          "name": "--border-width",
          "annotation": "prop",
          "docs": "ヘルパーテキスト、エラーテキスト、カウンターを使用する場合のテキストエリア下のボーダーの幅"
        },
        {
          "name": "--color",
          "annotation": "prop",
          "docs": "本文の色"
        },
        {
          "name": "--highlight-color-focused",
          "annotation": "prop",
          "docs": "フォーカスされたときのテキストエリアのハイライトの色"
        },
        {
          "name": "--highlight-color-invalid",
          "annotation": "prop",
          "docs": "無効時のテキストエリア上のハイライトの色"
        },
        {
          "name": "--highlight-color-valid",
          "annotation": "prop",
          "docs": "有効時のテキストエリアのハイライトの色"
        },
        {
          "name": "--padding-bottom",
          "annotation": "prop",
          "docs": "テキストエリアのBottom Padding"
        },
        {
          "name": "--padding-end",
          "annotation": "prop",
          "docs": "テキストエリアの方向が左から右の場合はRight Padding、右から左の場合はLeft Paddingを使用します。"
        },
        {
          "name": "--padding-start",
          "annotation": "prop",
          "docs": "textareaの方向が左から右の場合はLeft Padding、右から左の場合はRight Padding。"
        },
        {
          "name": "--padding-top",
          "annotation": "prop",
          "docs": "textareaのTop Padding"
        },
        {
          "name": "--placeholder-color",
          "annotation": "prop",
          "docs": "Placeholderテキストの色"
        },
        {
          "name": "--placeholder-font-style",
          "annotation": "prop",
          "docs": "Placeholderテキストのスタイル"
        },
        {
          "name": "--placeholder-font-weight",
          "annotation": "prop",
          "docs": "Placeholderテキストの重さ"
        },
        {
          "name": "--placeholder-opacity",
          "annotation": "prop",
          "docs": "Placeholderテキストの不透明度"
        }
      ],
      "slots": [
        {
          "name": "label",
          "docs": "テキストエリアに関連付けるラベルテキスト。labelPlacement`プロパティを使用して、textareaに対するラベルの位置を制御する。ラベルをカスタム HTML でレンダリングする必要がある場合に使用します。(実験的)"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/thumbnail/thumbnail.tsx",
      "encapsulation": "shadow",
      "tag": "ion-thumbnail",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--border-radius",
          "annotation": "prop",
          "docs": "サムネイルのボーダー半径"
        },
        {
          "name": "--size",
          "annotation": "prop",
          "docs": "サムネイルの大きさ"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/title/title.tsx",
      "encapsulation": "shadow",
      "tag": "ion-title",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
          "complexType": {
            "original": "Color",
            "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
            "references": {
              "Color": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::Color"
              }
            }
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "アプリケーションのカラーパレットから使用する色を指定します。デフォルトのオプションは以下の通りです。 `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, と `\"dark\"` です．色に関する詳しい情報は [theming](/docs/theming/basics) を参照してください。",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "tertiary",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "type": "string & Record<never, never>"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "size",
          "type": "\"large\" | \"small\" | undefined",
          "complexType": {
            "original": "'large' | 'small'",
            "resolved": "\"large\" | \"small\" | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "ツールバーのタイトルの大きさを指定します。",
          "docsTags": [],
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--color",
          "annotation": "prop",
          "docs": "タイトルの文字色"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/toast/toast.tsx",
      "encapsulation": "shadow",
      "tag": "ion-toast",
      "docs": "",
      "docsTags": [
        {
          "name": "virtualProp",
          "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
        },
        {
          "name": "part",
          "text": "button - Any button element that is displayed inside of the toast."
        },
        {
          "name": "part",
          "text": "button cancel - Any button element with role \"cancel\" that is displayed inside of the toast."
        },
        {
          "name": "part",
          "text": "container - The element that wraps all child elements."
        },
        {
          "name": "part",
          "text": "header - The header text of the toast."
        },
        {
          "name": "part",
          "text": "message - The body text of the toast."
        },
        {
          "name": "part",
          "text": "icon - The icon that appears next to the toast content."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "animated",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "animated",
          "reflectToAttr": false,
          "docs": "`true`の場合、トーストはアニメーションします。",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "buttons",
          "type": "(string | ToastButton)[] | undefined",
          "complexType": {
            "original": "(ToastButton | string)[]",
            "resolved": "(string | ToastButton)[] | undefined",
            "references": {
              "ToastButton": {
                "location": "import",
                "path": "./toast-interface",
                "id": "src/components/toast/toast-interface.ts::ToastButton"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "トースト用のボタンがずらり。",
          "docsTags": [],
          "values": [
            {
              "type": "(string"
            },
            {
              "type": "ToastButton)[]"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "color",
          "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
          "complexType": {
            "original": "Color",
            "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
            "references": {
              "Color": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::Color"
              }
            }
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "アプリケーションのカラーパレットから使用する色を指定します。デフォルトのオプションは以下の通りです。 `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, と `\"dark\"` です．色に関する詳しい情報は [theming](/docs/theming/basics) を参照してください。",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "tertiary",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "type": "string & Record<never, never>"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "cssClass",
          "type": "string | string[] | undefined",
          "complexType": {
            "original": "string | string[]",
            "resolved": "string | string[] | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "css-class",
          "reflectToAttr": false,
          "docs": "カスタムCSSに適用する追加のクラス。複数のクラスを指定する場合は、スペースで区切る必要があります。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "string[]"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "duration",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "duration",
          "reflectToAttr": false,
          "docs": "トーストを隠すまでに何ミリ秒待つかを指定します。デフォルトでは、`dismiss()`が呼ばれるまで表示されます。",
          "docsTags": [],
          "default": "config.getNumber('toastDuration', 0)",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "enterAnimation",
          "type": "((baseEl: any, opts?: any) => Animation) | undefined",
          "complexType": {
            "original": "AnimationBuilder",
            "resolved": "((baseEl: any, opts?: any) => Animation) | undefined",
            "references": {
              "AnimationBuilder": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::AnimationBuilder"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "乾杯の音頭をとるときに使うアニメーションです。",
          "docsTags": [],
          "values": [
            {
              "type": "((baseEl: any, opts?: any) => Animation)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "header",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "header",
          "reflectToAttr": false,
          "docs": "トーストに表示されるヘッダー。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "htmlAttributes",
          "type": "undefined | { [key: string]: any; }",
          "complexType": {
            "original": "{ [key: string]: any }",
            "resolved": "undefined | { [key: string]: any; }",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "トーストに渡す追加の属性。",
          "docsTags": [],
          "values": [
            {
              "type": "undefined"
            },
            {
              "type": "{ [key: string]: any; }"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "icon",
          "type": "string | undefined",
          "complexType": {
            "original": "string",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "表示するアイコンの名前、または有効なSVGファイルへのパスを指定します。ion-icon`を参照。https://ionic.io/ionicons",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "isOpen",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "is-open",
          "reflectToAttr": false,
          "docs": "もし `true` ならば、トーストは表示されます。もし `false` ならば、トーストは閉じます。プレゼンテーションの細かい制御が必要な場合はこれを使用し、そうでない場合は toastController または `trigger` プロパティを使用してください。注意: トーストが終了しても `isOpen` は自動的に `false` に戻りません。あなたのコードでそれを行う必要があります。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "keyboardClose",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "keyboard-close",
          "reflectToAttr": false,
          "docs": "`true`の場合、オーバーレイが表示されたときにキーボードが自動的に解除されます。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "layout",
          "type": "\"baseline\" | \"stacked\"",
          "complexType": {
            "original": "ToastLayout",
            "resolved": "\"baseline\" | \"stacked\"",
            "references": {
              "ToastLayout": {
                "location": "import",
                "path": "./toast-interface",
                "id": "src/components/toast/toast-interface.ts::ToastLayout"
              }
            }
          },
          "mutable": false,
          "attr": "layout",
          "reflectToAttr": false,
          "docs": "トーストのメッセージやボタンの配置を定義します。'baseline'を指定します。メッセージとボタンは同じ行に表示されます。メッセージテキストはメッセージコンテナ内で折り返すことができます。'stacked':ボタンコンテナとメッセージが重なるように表示されます。ボタンに長いテキストがある場合に使用します。",
          "docsTags": [],
          "default": "'baseline'",
          "values": [
            {
              "value": "baseline",
              "type": "string"
            },
            {
              "value": "stacked",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "leaveAnimation",
          "type": "((baseEl: any, opts?: any) => Animation) | undefined",
          "complexType": {
            "original": "AnimationBuilder",
            "resolved": "((baseEl: any, opts?: any) => Animation) | undefined",
            "references": {
              "AnimationBuilder": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::AnimationBuilder"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "トーストの解散時に使用するアニメーションです。",
          "docsTags": [],
          "values": [
            {
              "type": "((baseEl: any, opts?: any) => Animation)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "message",
          "type": "IonicSafeString | string | undefined",
          "complexType": {
            "original": "string | IonicSafeString",
            "resolved": "IonicSafeString | string | undefined",
            "references": {
              "IonicSafeString": {
                "location": "import",
                "path": "../../utils/sanitization",
                "id": "src/utils/sanitization/index.ts::IonicSafeString"
              }
            }
          },
          "mutable": false,
          "attr": "message",
          "reflectToAttr": false,
          "docs": "トーストに表示するメッセージ。このプロパティは、文字列としてカスタムHTMLを受け入れます。デフォルトではコンテンツはプレーンテキストとしてパースされます。カスタムHTMLを使用するには、Ionicの設定で `innerHTMLTemplatesEnabled` を `true` に設定する必要があります。",
          "docsTags": [],
          "values": [
            {
              "type": "IonicSafeString"
            },
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "position",
          "type": "\"bottom\" | \"middle\" | \"top\"",
          "complexType": {
            "original": "ToastPosition",
            "resolved": "\"bottom\" | \"middle\" | \"top\"",
            "references": {
              "ToastPosition": {
                "location": "import",
                "path": "./toast-interface",
                "id": "src/components/toast/toast-interface.ts::ToastPosition"
              }
            }
          },
          "mutable": false,
          "attr": "position",
          "reflectToAttr": false,
          "docs": "The starting position of the toast on the screen. Can be tweaked further\nusing the `positionAnchor` property.",
          "docsTags": [],
          "default": "'bottom'",
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "middle",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "positionAnchor",
          "type": "HTMLElement | string | undefined",
          "complexType": {
            "original": "HTMLElement | string",
            "resolved": "HTMLElement | string | undefined",
            "references": {
              "HTMLElement": {
                "location": "global",
                "id": "global::HTMLElement"
              }
            }
          },
          "mutable": false,
          "attr": "position-anchor",
          "reflectToAttr": false,
          "docs": "The element to anchor the toast's position to. Can be set as a direct reference\nor the ID of the element. With `position=\"bottom\"`, the toast will sit above the\nchosen element. With `position=\"top\"`, the toast will sit below the chosen element.\nWith `position=\"middle\"`, the value of `positionAnchor` is ignored.",
          "docsTags": [],
          "values": [
            {
              "type": "HTMLElement"
            },
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "translucent",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "translucent",
          "reflectToAttr": false,
          "docs": "`true`の場合、トーストは半透明になります。modeが `\"ios\"` で、デバイスが [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility) をサポートしている場合にのみ適用されます。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "trigger",
          "type": "string | undefined",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "trigger",
          "reflectToAttr": false,
          "docs": "クリックされたときにトーストを開かせるトリガー要素に対応するID。",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "dismiss",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "complexType": {
            "signature": "(data?: any, role?: string) => Promise<boolean>",
            "parameters": [
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "data Any data to emit in the dismiss events."
                  }
                ],
                "text": "Any data to emit in the dismiss events."
              },
              {
                "tags": [
                  {
                    "name": "param",
                    "text": "role The role of the element that is dismissing the toast.\nThis can be useful in a button handler for determining which button was\nclicked to dismiss the toast.\nSome examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`."
                  }
                ],
                "text": "The role of the element that is dismissing the toast.\nThis can be useful in a button handler for determining which button was\nclicked to dismiss the toast.\nSome examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`."
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "ToastDismissOptions": {
                "location": "import",
                "path": "./toast-interface",
                "id": "src/components/toast/toast-interface.ts::ToastDismissOptions"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "dismiss(data?: any, role?: string) => Promise<boolean>",
          "parameters": [],
          "docs": "トーストのオーバーレイが提示された後、それを解除します。",
          "docsTags": [
            {
              "name": "param",
              "text": "data Any data to emit in the dismiss events."
            },
            {
              "name": "param",
              "text": "role The role of the element that is dismissing the toast.\nThis can be useful in a button handler for determining which button was\nclicked to dismiss the toast.\nSome examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`."
            }
          ]
        },
        {
          "name": "onDidDismiss",
          "returns": {
            "type": "Promise<OverlayEventDetail<T>>",
            "docs": ""
          },
          "complexType": {
            "signature": "<T = any>() => Promise<OverlayEventDetail<T>>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "OverlayEventDetail": {
                "location": "import",
                "path": "../../utils/overlays-interface",
                "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
              },
              "T": {
                "location": "global",
                "id": "global::T"
              }
            },
            "return": "Promise<OverlayEventDetail<T>>"
          },
          "signature": "onDidDismiss<T = any>() => Promise<OverlayEventDetail<T>>",
          "parameters": [],
          "docs": "トーストが解散したことを解決するPromiseを返します。",
          "docsTags": []
        },
        {
          "name": "onWillDismiss",
          "returns": {
            "type": "Promise<OverlayEventDetail<T>>",
            "docs": ""
          },
          "complexType": {
            "signature": "<T = any>() => Promise<OverlayEventDetail<T>>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "OverlayEventDetail": {
                "location": "import",
                "path": "../../utils/overlays-interface",
                "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
              },
              "T": {
                "location": "global",
                "id": "global::T"
              }
            },
            "return": "Promise<OverlayEventDetail<T>>"
          },
          "signature": "onWillDismiss<T = any>() => Promise<OverlayEventDetail<T>>",
          "parameters": [],
          "docs": "トーストが解散するタイミングを解決するPromiseを返します。",
          "docsTags": []
        },
        {
          "name": "present",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "ToastPresentOptions": {
                "location": "import",
                "path": "./toast-interface",
                "id": "src/components/toast/toast-interface.ts::ToastPresentOptions"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "present() => Promise<void>",
          "parameters": [],
          "docs": "トーストのオーバーレイを作成した後に提示します。",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "didDismiss",
          "detail": "OverlayEventDetail<any>",
          "bubbles": true,
          "complexType": {
            "original": "OverlayEventDetail",
            "resolved": "OverlayEventDetail<any>",
            "references": {
              "OverlayEventDetail": {
                "location": "import",
                "path": "../../utils/overlays-interface",
                "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "トーストが終了した後に発行されます。ionToastDidDismissの略記。",
          "docsTags": []
        },
        {
          "event": "didPresent",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "トーストがはじまった後に発行されます。ionToastWillDismissの略語。",
          "docsTags": []
        },
        {
          "event": "ionToastDidDismiss",
          "detail": "OverlayEventDetail<any>",
          "bubbles": true,
          "complexType": {
            "original": "OverlayEventDetail",
            "resolved": "OverlayEventDetail<any>",
            "references": {
              "OverlayEventDetail": {
                "location": "import",
                "path": "../../utils/overlays-interface",
                "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "トーストが解散した後に発行されます。",
          "docsTags": []
        },
        {
          "event": "ionToastDidPresent",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "トーストが提示された後に発行されます。",
          "docsTags": []
        },
        {
          "event": "ionToastWillDismiss",
          "detail": "OverlayEventDetail<any>",
          "bubbles": true,
          "complexType": {
            "original": "OverlayEventDetail",
            "resolved": "OverlayEventDetail<any>",
            "references": {
              "OverlayEventDetail": {
                "location": "import",
                "path": "../../utils/overlays-interface",
                "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "乾杯が解散する前に発行されます。",
          "docsTags": []
        },
        {
          "event": "ionToastWillPresent",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "トーストが提示される前に発行されます。",
          "docsTags": []
        },
        {
          "event": "willDismiss",
          "detail": "OverlayEventDetail<any>",
          "bubbles": true,
          "complexType": {
            "original": "OverlayEventDetail",
            "resolved": "OverlayEventDetail<any>",
            "references": {
              "OverlayEventDetail": {
                "location": "import",
                "path": "../../utils/overlays-interface",
                "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "トーストが終了する前に発行されます。ionToastWillDismissの略語です。",
          "docsTags": []
        },
        {
          "event": "willPresent",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "トーストが表示される前に発行されます。ionToastWillPresentの略記。",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--background",
          "annotation": "prop",
          "docs": "乾杯の背景"
        },
        {
          "name": "--border-color",
          "annotation": "prop",
          "docs": "トーストのボーダーカラー"
        },
        {
          "name": "--border-radius",
          "annotation": "prop",
          "docs": "トーストのボーダー半径"
        },
        {
          "name": "--border-style",
          "annotation": "prop",
          "docs": "トーストのボーダースタイル"
        },
        {
          "name": "--border-width",
          "annotation": "prop",
          "docs": "トーストのボーダー幅"
        },
        {
          "name": "--box-shadow",
          "annotation": "prop",
          "docs": "乾杯の箱影"
        },
        {
          "name": "--button-color",
          "annotation": "prop",
          "docs": "ボタンテキストの色"
        },
        {
          "name": "--color",
          "annotation": "prop",
          "docs": "トーストの文字色"
        },
        {
          "name": "--end",
          "annotation": "prop",
          "docs": "方向が左から右の場合は右から、方向が右から左の場合は左から位置すること"
        },
        {
          "name": "--height",
          "annotation": "prop",
          "docs": "トーストの高さ"
        },
        {
          "name": "--max-height",
          "annotation": "prop",
          "docs": "トーストの最大の高さ"
        },
        {
          "name": "--max-width",
          "annotation": "prop",
          "docs": "トーストの最大幅"
        },
        {
          "name": "--min-height",
          "annotation": "prop",
          "docs": "トーストの最小の高さ"
        },
        {
          "name": "--min-width",
          "annotation": "prop",
          "docs": "トーストの最小幅"
        },
        {
          "name": "--start",
          "annotation": "prop",
          "docs": "方向が左から右の場合は左から、方向が右から左の場合は右から位置すること"
        },
        {
          "name": "--white-space",
          "annotation": "prop",
          "docs": "乾杯メッセージのホワイトスペース"
        },
        {
          "name": "--width",
          "annotation": "prop",
          "docs": "トーストの幅"
        }
      ],
      "slots": [],
      "parts": [
        {
          "name": "button",
          "docs": "トーストの内側に表示される任意のボタン要素。"
        },
        {
          "name": "button cancel",
          "docs": "トーストの内側に表示される、\"cancel \"というロールを持つボタン要素。"
        },
        {
          "name": "container",
          "docs": "すべての子要素を包む要素。"
        },
        {
          "name": "header",
          "docs": "乾杯のヘッダーテキストです。"
        },
        {
          "name": "icon",
          "docs": "トーストの内容の横に表示されるアイコンです。"
        },
        {
          "name": "message",
          "docs": "乾杯の音頭の本文です。"
        }
      ],
      "dependents": [],
      "dependencies": [
        "ion-icon",
        "ion-ripple-effect"
      ],
      "dependencyGraph": {
        "ion-toast": [
          "ion-icon",
          "ion-ripple-effect"
        ]
      }
    },
    {
      "filePath": "src/components/toggle/toggle.tsx",
      "encapsulation": "shadow",
      "tag": "ion-toggle",
      "docs": "",
      "docsTags": [
        {
          "name": "virtualProp",
          "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
        },
        {
          "name": "slot",
          "text": "- The label text to associate with the toggle. Use the \"labelPlacement\" property to control where the label is placed relative to the toggle."
        },
        {
          "name": "part",
          "text": "track - The background track of the toggle."
        },
        {
          "name": "part",
          "text": "handle - The toggle handle, or knob, used to change the checked state."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "alignment",
          "type": "\"center\" | \"start\"",
          "complexType": {
            "original": "'start' | 'center'",
            "resolved": "\"center\" | \"start\"",
            "references": {}
          },
          "mutable": false,
          "attr": "alignment",
          "reflectToAttr": false,
          "docs": "十字軸上のトグルとラベルの配置を制御する方法。start\"`：ラベルとコントロールはLTRでは十字軸の左側に、RTLでは右側に表示されます。center\"`：ラベルとコントロールはLTRでもRTLでも十字軸の中央に表示されます。",
          "docsTags": [],
          "default": "'center'",
          "values": [
            {
              "value": "center",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "checked",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "checked",
          "reflectToAttr": false,
          "docs": "`true`の場合、トグルが選択されます。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
          "complexType": {
            "original": "Color",
            "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
            "references": {
              "Color": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::Color"
              }
            }
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "アプリケーションのカラーパレットから使用する色を指定します。デフォルトのオプションは以下の通りです。 `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, と `\"dark\"` です．色に関する詳しい情報は [theming](/docs/theming/basics) を参照してください。",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "tertiary",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "type": "string & Record<never, never>"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "`true`の場合、ユーザーはトグルを操作することができません。",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "enableOnOffLabels",
          "type": "boolean | undefined",
          "complexType": {
            "original": "boolean | undefined",
            "resolved": "boolean | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "enable-on-off-labels",
          "reflectToAttr": false,
          "docs": "トグル内のオン／オフアクセシビリティスイッチラベルを有効にします。",
          "docsTags": [],
          "default": "config.get('toggleOnOffLabels')",
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "justify",
          "type": "\"end\" | \"space-between\" | \"start\"",
          "complexType": {
            "original": "'start' | 'end' | 'space-between'",
            "resolved": "\"end\" | \"space-between\" | \"start\"",
            "references": {}
          },
          "mutable": false,
          "attr": "justify",
          "reflectToAttr": false,
          "docs": "ラベルとトグルを1行にまとめる方法。`\"start\"`：ラベルとトグルは、LTRでは左に、RTLでは右に表示されます。`\"end\"`：ラベルとトグルは、LTRでは右に、RTLでは左に表示されます。`\"space-between\"`：ラベルとトグルは、2つの要素の間にスペースがある状態で、行の反対側の端に表示されます。",
          "docsTags": [],
          "default": "'space-between'",
          "values": [
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "space-between",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelPlacement",
          "type": "\"end\" | \"fixed\" | \"stacked\" | \"start\"",
          "complexType": {
            "original": "'start' | 'end' | 'fixed' | 'stacked'",
            "resolved": "\"end\" | \"fixed\" | \"stacked\" | \"start\"",
            "references": {}
          },
          "mutable": false,
          "attr": "label-placement",
          "reflectToAttr": false,
          "docs": "入力に対するラベルの位置。start\"`：ラベルはLTRではトグルの左に、RTLでは右に表示されます。end\"`：ラベルはLTRではトグルの右、RTLでは左に表示されます。fixed\"`：ラベルの幅が固定される以外は `\"start\"` と同じ動作をします。長いテキストは省略記号(\"...\")で切り捨てられます。stacked\"`：ラベルは向きに関係なくトグルの上に表示されます。ラベルの整列は `alignment` プロパティで制御できます。",
          "docsTags": [],
          "default": "'start'",
          "values": [
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "fixed",
              "type": "string"
            },
            {
              "value": "stacked",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "legacy",
          "type": "boolean | undefined",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "legacy",
          "reflectToAttr": false,
          "docs": "`legacy`プロパティを`true`に設定すると、レガシーフォームコントロールのマークアップを強制的に使用することができます。Ionicは、コンポーネントが`aria-label`属性またはラベルテキストを含むデフォルトスロットのいずれかを使用している場合にのみ、モダンフォームマークアップを選択するようになっています。そのため、`legacy`プロパティは、この自動オプトイン動作を回避したい場合にのみ、エスケープハッチとして使用する必要があります。なお、このプロパティはIonicの今後のメジャーリリースで削除され、すべてのフォームコンポーネントはモダンフォームマークアップを使用するようにオプトインされる予定です。",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "フォームデータとともに送信されるコントロールの名前。",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "null | string | undefined",
          "complexType": {
            "original": "string | null",
            "resolved": "null | string | undefined",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "トグルの値は、チェックされているかどうかを意味するものではありません。  トグルの値は `<input type=\"checkbox\">` の値に類似しており、トグルがネイティブの `<form>` に参加する場合にのみ使用されます。",
          "docsTags": [],
          "default": "'on'",
          "values": [
            {
              "type": "null"
            },
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "ionBlur",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "トグルのフォーカスが外れたときに発行されます。",
          "docsTags": []
        },
        {
          "event": "ionChange",
          "detail": "ToggleChangeEventDetail<any>",
          "bubbles": true,
          "complexType": {
            "original": "ToggleChangeEventDetail",
            "resolved": "ToggleChangeEventDetail<any>",
            "references": {
              "ToggleChangeEventDetail": {
                "location": "import",
                "path": "./toggle-interface",
                "id": "src/components/toggle/toggle-interface.ts::ToggleChangeEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "ユーザがトグルのオン/オフを切り替えたときに発行されます。プログラムによって `checked` プロパティの値が変更された場合は発生しません。",
          "docsTags": []
        },
        {
          "event": "ionFocus",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "トグルにフォーカスが当たったときに発行されます。",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--border-radius",
          "annotation": "prop",
          "docs": "トグルトラックのボーダー半径"
        },
        {
          "name": "--handle-background",
          "annotation": "prop",
          "docs": "トグルハンドルの背景"
        },
        {
          "name": "--handle-background-checked",
          "annotation": "prop",
          "docs": "チェックしたときのトグルハンドルの背景"
        },
        {
          "name": "--handle-border-radius",
          "annotation": "prop",
          "docs": "トグルハンドルのボーダー半径"
        },
        {
          "name": "--handle-box-shadow",
          "annotation": "prop",
          "docs": "トグルハンドルのボックスシャドウ"
        },
        {
          "name": "--handle-height",
          "annotation": "prop",
          "docs": "トグルハンドルの高さ"
        },
        {
          "name": "--handle-max-height",
          "annotation": "prop",
          "docs": "トグルハンドルの最大の高さ"
        },
        {
          "name": "--handle-spacing",
          "annotation": "prop",
          "docs": "トグルハンドル周辺の横方向の間隔"
        },
        {
          "name": "--handle-transition",
          "annotation": "prop",
          "docs": "トグルハンドルの変遷"
        },
        {
          "name": "--handle-width",
          "annotation": "prop",
          "docs": "トグルハンドルの幅"
        },
        {
          "name": "--track-background",
          "annotation": "prop",
          "docs": "トグルトラックの背景"
        },
        {
          "name": "--track-background-checked",
          "annotation": "prop",
          "docs": "チェックしたときのトグルトラックの背景"
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "トグルに関連付けるラベルテキストです。`\"labelPlacement`\"プロパティを使用して、トグルに対してラベルを配置する位置を制御します。"
        }
      ],
      "parts": [
        {
          "name": "handle",
          "docs": "チェックした状態を変更するために使用するトグルハンドル（つまみ）です。"
        },
        {
          "name": "track",
          "docs": "トグルの背景トラックです。"
        }
      ],
      "dependents": [],
      "dependencies": [
        "ion-icon"
      ],
      "dependencyGraph": {
        "ion-toggle": [
          "ion-icon"
        ]
      }
    },
    {
      "filePath": "src/components/toolbar/toolbar.tsx",
      "encapsulation": "shadow",
      "tag": "ion-toolbar",
      "docs": "",
      "docsTags": [
        {
          "name": "virtualProp",
          "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
        },
        {
          "name": "slot",
          "text": "- Content is placed between the named slots if provided without a slot."
        },
        {
          "name": "slot",
          "text": "start - Content is placed to the left of the toolbar text in LTR, and to the right in RTL."
        },
        {
          "name": "slot",
          "text": "secondary - Content is placed to the left of the toolbar text in `ios` mode, and directly to the right in `md` mode."
        },
        {
          "name": "slot",
          "text": "primary - Content is placed to the right of the toolbar text in `ios` mode, and to the far right in `md` mode."
        },
        {
          "name": "slot",
          "text": "end - Content is placed to the right of the toolbar text in LTR, and to the left in RTL."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
          "complexType": {
            "original": "Color",
            "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
            "references": {
              "Color": {
                "location": "import",
                "path": "../../interface",
                "id": "src/interface.d.ts::Color"
              }
            }
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "アプリケーションのカラーパレットから使用する色を指定します。デフォルトのオプションは以下の通りです。 `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, と `\"dark\"` です．色に関する詳しい情報は [theming](/docs/theming/basics) を参照してください。",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "tertiary",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "type": "string & Record<never, never>"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"ios\" | \"md\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "modeは、どのプラットフォームのスタイルを使用するかを決定します。",
          "docsTags": [],
          "values": [
            {
              "value": "ios",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "ionStyle",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [
        {
          "name": "--background",
          "annotation": "prop",
          "docs": "ツールバーの背景"
        },
        {
          "name": "--border-color",
          "annotation": "prop",
          "docs": "ツールバーの枠の色"
        },
        {
          "name": "--border-style",
          "annotation": "prop",
          "docs": "ツールバーのボーダーのスタイル"
        },
        {
          "name": "--border-width",
          "annotation": "prop",
          "docs": "ツールバーの枠の幅"
        },
        {
          "name": "--color",
          "annotation": "prop",
          "docs": "ツールバーテキストの色"
        },
        {
          "name": "--min-height",
          "annotation": "prop",
          "docs": "ツールバーの最小高さ"
        },
        {
          "name": "--opacity",
          "annotation": "prop",
          "docs": "ツールバーの背景の不透明度"
        },
        {
          "name": "--padding-bottom",
          "annotation": "prop",
          "docs": "ツールバーのBottom Padding"
        },
        {
          "name": "--padding-end",
          "annotation": "prop",
          "docs": "ツールバーの向きが左から右の場合はRight Padding、右から左の場合はLeft Paddingを使用します。"
        },
        {
          "name": "--padding-start",
          "annotation": "prop",
          "docs": "ツールバーの方向が左から右の場合はLeft Padding、右から左の場合はRight Paddingを使用します。"
        },
        {
          "name": "--padding-top",
          "annotation": "prop",
          "docs": "ツールバーのTop Padding"
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "slotがない状態で提供される場合、コンテンツは名前付きslotの間に配置されます。"
        },
        {
          "name": "end",
          "docs": "コンテンツは、LTRではツールバーテキストの右側に、RTLでは左側に配置されます。"
        },
        {
          "name": "primary",
          "docs": "コンテンツは、`ios` modeではツールバーテキストの右側に、`md` modeでは右端に配置されます。"
        },
        {
          "name": "secondary",
          "docs": "コンテンツは、`ios` modeではツールバーテキストの左側に、`md` modeでは右側に直接配置されます。"
        },
        {
          "name": "start",
          "docs": "コンテンツは、LTRではツールバーテキストの左側に、RTLでは右側に配置されます。"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/virtual-scroll/virtual-scroll.tsx",
      "encapsulation": "none",
      "tag": "ion-virtual-scroll",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "approxFooterHeight",
          "type": "number",
          "mutable": false,
          "attr": "approx-footer-height",
          "reflectToAttr": false,
          "docs": "各フッターテンプレートのセルのおおよその幅を指定します。この寸法は、初期化時に作成されるべきセルの数を決定したり、スクロール可能な領域の高さを計算したりするのに使用されます。この高さの値には `px` 単位しか使用できません。各セルの実際のレンダリングサイズはアプリのCSSから得られますが、この近似値はアイテムがレンダリングされる前に初期寸法を計算するために使用されることに注意してください。",
          "docsTags": [],
          "default": "30",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "approxHeaderHeight",
          "type": "number",
          "mutable": false,
          "attr": "approx-header-height",
          "reflectToAttr": false,
          "docs": "各ヘッダーテンプレートのセルのおおよその高さを表します。この寸法は、初期化時に作成されるべきセルの数を決定したり、スクロール可能な領域の高さを計算したりするのに使用されます。この高さの値には `px` 単位しか使用できません。各セルの実際のレンダリングサイズはアプリのCSSから得られますが、この近似値はアイテムがレンダリングされる前に初期寸法を計算するために使用されることに注意してください。",
          "docsTags": [],
          "default": "30",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "approxItemHeight",
          "type": "number",
          "mutable": false,
          "attr": "approx-item-height",
          "reflectToAttr": false,
          "docs": "仮想アイテムの高さがデフォルトよりかなり大きくなる場合は、これを指定することが重要です。 各仮想アイテムテンプレートのセルのおおよその高さ。この寸法は、初期化時に作成されるべきセルの数を決定したり、スクロール可能な領域の高さを計算したりするのに使用されます。この高さの値には `px` 単位しか使用できません。各セルの実際のレンダリングサイズはアプリの CSS から得られるもので、この近似値はアイテムがレンダリングされる前に初期寸法を計算するのに役立つものであることに注意してください。",
          "docsTags": [],
          "default": "45",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "footerFn",
          "type": "((item: any, index: number, items: any[]) => string | null | undefined) | undefined",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "セクションフッターと与えられたテンプレート内で使用されるデータは、`footerFn`に関数を渡すことで動的に作成することができます。フッター関数内のロジックは、フッターテンプレートを使用するかどうか、またフッターテンプレートにどのようなデータを与えるかを決定することができます。フッターセルが作成されない場合は、関数は `null` を返さなければなりません。",
          "docsTags": [],
          "values": [
            {
              "type": "((item: any, index: number, items: any[]) => string"
            },
            {
              "type": "null"
            },
            {
              "type": "undefined)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "footerHeight",
          "type": "((item: any, index: number) => number) | undefined",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "各項目のフッターをその高さ内にマッピングするオプション関数。",
          "docsTags": [],
          "values": [
            {
              "type": "((item: any, index: number) => number)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "headerFn",
          "type": "((item: any, index: number, items: any[]) => string | null | undefined) | undefined",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "セクションヘッダーとそのテンプレート内で使用されるデータは、`headerFn`に関数を渡すことによって動的に作成することができます。例えば、大きな連絡先リストでは、通常、アルファベットの各文字の間に仕切りがあります。アプリは独自のカスタム `headerFn` を提供することができ、データセット内の各レコードで呼び出される。ヘッダー関数内のロジックは、ヘッダーテンプレートを使用するかどうか、またヘッダーテンプレートにどのようなデータを与えるかを決定することができる。ヘッダーセルが作成されない場合は、この関数は `null` を返さなければなりません。",
          "docsTags": [],
          "values": [
            {
              "type": "((item: any, index: number, items: any[]) => string"
            },
            {
              "type": "null"
            },
            {
              "type": "undefined)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "headerHeight",
          "type": "((item: any, index: number) => number) | undefined",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "各項目のヘッダを高さの範囲内でマッピングするオプション関数。",
          "docsTags": [],
          "values": [
            {
              "type": "((item: any, index: number) => number)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "itemHeight",
          "type": "((item: any, index: number) => number) | undefined",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "各アイテムをその高さ内にマッピングするオプションの関数です。この関数が提供されると、`ion-virtual-scroll`によって重い最適化と高速パスが取られるようになり、大幅な性能向上が期待できる。  この関数は、DOMの読み込みをすべてスキップすることができ、Doingすることで大幅なパフォーマンスの向上につながります。",
          "docsTags": [],
          "values": [
            {
              "type": "((item: any, index: number) => number)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "items",
          "type": "any[] | undefined",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "仮想スクロール内のテンプレートを構築するためのデータです。このデータが変更された場合、仮想スクロール全体がリセットされることになります。",
          "docsTags": [],
          "values": [
            {
              "type": "any[]"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "nodeRender",
          "type": "((el: HTMLElement | null, cell: Cell, domIndex: number) => HTMLElement) | undefined",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "注：Vanilla JS APIのみです。",
          "docsTags": [],
          "values": [
            {
              "type": "((el: HTMLElement"
            },
            {
              "type": "null, cell: Cell, domIndex: number) => HTMLElement)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "renderFooter",
          "type": "((item: any, index: number) => any) | undefined",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "注：ステンシル用のJSX APIのみ。  フッターをレンダリングするためのrender関数を提供します。JSXのvirtual-domを返します。",
          "docsTags": [],
          "values": [
            {
              "type": "((item: any, index: number) => any)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "renderHeader",
          "type": "((item: any, index: number) => any) | undefined",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "注：ステンシル用のJSX APIのみ。  レンダリングされるヘッダーのrender関数を提供します。JSXのvirtual-domを返します。",
          "docsTags": [],
          "values": [
            {
              "type": "((item: any, index: number) => any)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "renderItem",
          "type": "((item: any, index: number) => any) | undefined",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "注：ステンシル用のJSX APIのみ。  レンダリングするアイテムのレンダー関数を用意します。JSXのvirtual-domを返します。",
          "docsTags": [],
          "values": [
            {
              "type": "((item: any, index: number) => any)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "checkEnd",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "checkEnd() => Promise<void>",
          "parameters": [],
          "docs": "このメソッドは、アイテム配列の末尾をダーティとしてマークし、再レンダリングできるようにします。  これは次のように呼び出すのと同じです： ``js virtualScroll.checkRange(lastItemLen); ```。",
          "docsTags": []
        },
        {
          "name": "checkRange",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "checkRange(offset: number, len?: number) => Promise<void>",
          "parameters": [],
          "docs": "このメソッドは、アイテムのサブセットをダーティとしてマークし、再レンダリングができるようにします。アイテムは、コンテンツまたはそのスタイルが変更されるたびに、ダーティとしてマークされる必要があります。  更新されるアイテムのサブセットは、オフセットと長さで指定することができます。",
          "docsTags": []
        },
        {
          "name": "positionForItem",
          "returns": {
            "type": "Promise<number>",
            "docs": ""
          },
          "signature": "positionForItem(index: number) => Promise<number>",
          "parameters": [],
          "docs": "指定されたインデックスの位置にある仮想アイテムの位置を返します。",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [
        {
          "event": "resize",
          "target": "window",
          "capture": false,
          "passive": true
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    }
  ]
}