{
  "filePath": "src/components/modal/modal.tsx",
  "encapsulation": "shadow",
  "tag": "ion-modal",
  "docs": "",
  "docsTags": [
    {
      "name": "virtualProp",
      "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
    },
    {
      "name": "slot",
      "text": "- Content is placed inside of the `.modal-content` element."
    },
    {
      "name": "part",
      "text": "backdrop - The `ion-backdrop` element."
    },
    {
      "name": "part",
      "text": "content - The wrapper element for the default slot."
    },
    {
      "name": "part",
      "text": "handle - The handle that is displayed at the top of the sheet modal when `handle=\"true\"`."
    }
  ],
  "usage": {},
  "props": [
    {
      "name": "animated",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "animated",
      "reflectToAttr": false,
      "docs": "If `true`, the modal will animate.",
      "docsTags": [
        {
          "name": "default",
          "text": "true"
        }
      ],
      "default": "true",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "backdropBreakpoint",
      "type": "number",
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "mutable": false,
      "attr": "backdrop-breakpoint",
      "reflectToAttr": false,
      "docs": "A decimal value between 0 and 1 that indicates the\npoint after which the backdrop will begin to fade in\nwhen using a sheet modal. Prior to this point, the\nbackdrop will be hidden and the content underneath\nthe sheet can be interacted with. This value is exclusive\nmeaning the backdrop will become active after the value\nspecified.",
      "docsTags": [
        {
          "name": "default",
          "text": "0"
        }
      ],
      "default": "0",
      "values": [
        {
          "type": "number"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "backdropDismiss",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "backdrop-dismiss",
      "reflectToAttr": false,
      "docs": "If `true`, the modal will be dismissed when the backdrop is clicked.",
      "docsTags": [
        {
          "name": "default",
          "text": "true"
        }
      ],
      "default": "true",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "breakpoints",
      "type": "number[] | undefined",
      "complexType": {
        "original": "number[]",
        "resolved": "number[] | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "breakpoints",
      "reflectToAttr": false,
      "docs": "The breakpoints to use when creating a sheet modal. Each value in the\narray must be a decimal between 0 and 1 where 0 indicates the modal is fully\nclosed and 1 indicates the modal is fully open. Values are relative\nto the height of the modal, not the height of the screen. One of the values in this\narray must be the value of the `initialBreakpoint` property.\nFor example: [0, .25, .5, 1]",
      "docsTags": [],
      "values": [
        {
          "type": "number[]"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "canDismiss",
      "type": "((data?: any, role?: string | undefined) => Promise<boolean>) | boolean",
      "complexType": {
        "original": "boolean | ((data?: any, role?: string) => Promise<boolean>)",
        "resolved": "((data?: any, role?: string | undefined) => Promise<boolean>) | boolean",
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          }
        }
      },
      "mutable": false,
      "attr": "can-dismiss",
      "reflectToAttr": false,
      "docs": "Determines whether or not a modal can dismiss\nwhen calling the `dismiss` method.\n\nIf the value is `true` or the value's function returns `true`, the modal will close when trying to dismiss.\nIf the value is `false` or the value's function returns `false`, the modal will not close when trying to dismiss.\n\nSee https://ionicframework.com/docs/troubleshooting/runtime#accessing-this\nif you need to access `this` from within the callback.",
      "docsTags": [
        {
          "name": "default",
          "text": "true"
        }
      ],
      "default": "true",
      "values": [
        {
          "type": "((data?: any, role?: string"
        },
        {
          "type": "undefined) => Promise<boolean>)"
        },
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "enterAnimation",
      "type": "((baseEl: any, opts?: any) => Animation) | undefined",
      "complexType": {
        "original": "AnimationBuilder",
        "resolved": "((baseEl: any, opts?: any) => Animation) | undefined",
        "references": {
          "AnimationBuilder": {
            "location": "import",
            "path": "../../interface",
            "id": "src/interface.d.ts::AnimationBuilder"
          }
        }
      },
      "mutable": false,
      "attr": "enter-animation",
      "reflectToAttr": false,
      "docs": "Animation to use when the modal is presented.",
      "docsTags": [],
      "values": [
        {
          "type": "((baseEl: any, opts?: any) => Animation)"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "expandToScroll",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "expand-to-scroll",
      "reflectToAttr": false,
      "docs": "Controls whether scrolling or dragging within the sheet modal expands\nit to a larger breakpoint. This only takes effect when `breakpoints`\nand `initialBreakpoint` are set.\n\nIf `true`, scrolling or dragging anywhere in the modal will first expand\nit to the next breakpoint. Once fully expanded, scrolling will affect the\ncontent.\nIf `false`, scrolling will always affect the content. The modal will\nonly expand when dragging the header or handle. The modal will close when\ndragging the header or handle. It can also be closed when dragging the\ncontent, but only if the content is scrolled to the top.",
      "docsTags": [
        {
          "name": "default",
          "text": "true"
        }
      ],
      "default": "true",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "focusTrap",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "focus-trap",
      "reflectToAttr": false,
      "docs": "If `true`, focus will not be allowed to move outside of this overlay.\nIf `false`, focus will be allowed to move outside of the overlay.\n\nIn most scenarios this property should remain set to `true`. Setting\nthis property to `false` can cause severe accessibility issues as users\nrelying on assistive technologies may be able to move focus into\na confusing state. We recommend only setting this to `false` when\nabsolutely necessary.\n\nDevelopers may want to consider disabling focus trapping if this\noverlay presents a non-Ionic overlay from a 3rd party library.\nDevelopers would disable focus trapping on the Ionic overlay\nwhen presenting the 3rd party overlay and then re-enable\nfocus trapping when dismissing the 3rd party overlay and moving\nfocus back to the Ionic overlay.",
      "docsTags": [
        {
          "name": "default",
          "text": "true"
        }
      ],
      "default": "true",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "handle",
      "type": "boolean | undefined",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "handle",
      "reflectToAttr": false,
      "docs": "The horizontal line that displays at the top of a sheet modal. It is `true` by default when\nsetting the `breakpoints` and `initialBreakpoint` properties.",
      "docsTags": [],
      "values": [
        {
          "type": "boolean"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "handleBehavior",
      "type": "\"cycle\" | \"none\" | undefined",
      "complexType": {
        "original": "ModalHandleBehavior",
        "resolved": "\"cycle\" | \"none\" | undefined",
        "references": {
          "ModalHandleBehavior": {
            "location": "import",
            "path": "./modal-interface",
            "id": "src/components/modal/modal-interface.ts::ModalHandleBehavior"
          }
        }
      },
      "mutable": false,
      "attr": "handle-behavior",
      "reflectToAttr": false,
      "docs": "The interaction behavior for the sheet modal when the handle is pressed.\n\nDefaults to `\"none\"`, which  means the modal will not change size or position when the handle is pressed.\nSet to `\"cycle\"` to let the modal cycle between available breakpoints when pressed.\n\nHandle behavior is unavailable when the `handle` property is set to `false` or\nwhen the `breakpoints` property is not set (using a fullscreen or card modal).",
      "docsTags": [
        {
          "name": "default",
          "text": "'none'"
        }
      ],
      "default": "'none'",
      "values": [
        {
          "value": "cycle",
          "type": "string"
        },
        {
          "value": "none",
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "htmlAttributes",
      "type": "undefined | { [key: string]: any; }",
      "complexType": {
        "original": "{ [key: string]: any }",
        "resolved": "undefined | { [key: string]: any; }",
        "references": {}
      },
      "mutable": false,
      "attr": "html-attributes",
      "reflectToAttr": false,
      "docs": "Additional attributes to pass to the modal.",
      "docsTags": [],
      "values": [
        {
          "type": "undefined"
        },
        {
          "type": "{ [key: string]: any; }"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "initialBreakpoint",
      "type": "number | undefined",
      "complexType": {
        "original": "number",
        "resolved": "number | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "initial-breakpoint",
      "reflectToAttr": false,
      "docs": "A decimal value between 0 and 1 that indicates the\ninitial point the modal will open at when creating a\nsheet modal. This value must also be listed in the\n`breakpoints` array.",
      "docsTags": [],
      "values": [
        {
          "type": "number"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "isOpen",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "is-open",
      "reflectToAttr": false,
      "docs": "If `true`, the modal will open. If `false`, the modal will close.\nUse this if you need finer grained control over presentation, otherwise\njust use the modalController or the `trigger` property.\nNote: `isOpen` will not automatically be set back to `false` when\nthe modal dismisses. You will need to do that in your code.",
      "docsTags": [
        {
          "name": "default",
          "text": "false"
        }
      ],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "keepContentsMounted",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "keep-contents-mounted",
      "reflectToAttr": false,
      "docs": "If `true`, the component passed into `ion-modal` will\nautomatically be mounted when the modal is created. The\ncomponent will remain mounted even when the modal is dismissed.\nHowever, the component will be destroyed when the modal is\ndestroyed. This property is not reactive and should only be\nused when initially creating a modal.\n\nNote: This feature only applies to inline modals in JavaScript\nframeworks such as Angular, React, and Vue.",
      "docsTags": [
        {
          "name": "default",
          "text": "false"
        }
      ],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "keyboardClose",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "keyboard-close",
      "reflectToAttr": false,
      "docs": "If `true`, the keyboard will be automatically dismissed when the overlay is presented.",
      "docsTags": [
        {
          "name": "default",
          "text": "true"
        }
      ],
      "default": "true",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "leaveAnimation",
      "type": "((baseEl: any, opts?: any) => Animation) | undefined",
      "complexType": {
        "original": "AnimationBuilder",
        "resolved": "((baseEl: any, opts?: any) => Animation) | undefined",
        "references": {
          "AnimationBuilder": {
            "location": "import",
            "path": "../../interface",
            "id": "src/interface.d.ts::AnimationBuilder"
          }
        }
      },
      "mutable": false,
      "attr": "leave-animation",
      "reflectToAttr": false,
      "docs": "Animation to use when the modal is dismissed.",
      "docsTags": [],
      "values": [
        {
          "type": "((baseEl: any, opts?: any) => Animation)"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "mode",
      "type": "\"ios\" | \"md\"",
      "mutable": false,
      "attr": "mode",
      "reflectToAttr": false,
      "docs": "The mode determines which platform styles to use.",
      "docsTags": [],
      "values": [
        {
          "value": "ios",
          "type": "string"
        },
        {
          "value": "md",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "presentingElement",
      "type": "HTMLElement | undefined",
      "complexType": {
        "original": "HTMLElement",
        "resolved": "HTMLElement | undefined",
        "references": {
          "HTMLElement": {
            "location": "global",
            "id": "global::HTMLElement"
          }
        }
      },
      "mutable": false,
      "attr": "presenting-element",
      "reflectToAttr": false,
      "docs": "The element that presented the modal. This is used for card presentation effects\nand for stacking multiple modals on top of each other. Only applies in iOS mode.",
      "docsTags": [],
      "values": [
        {
          "type": "HTMLElement"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "showBackdrop",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "show-backdrop",
      "reflectToAttr": false,
      "docs": "If `true`, a backdrop will be displayed behind the modal.\nThis property controls whether or not the backdrop\ndarkens the screen when the modal is presented.\nIt does not control whether or not the backdrop\nis active or present in the DOM.",
      "docsTags": [
        {
          "name": "default",
          "text": "true"
        }
      ],
      "default": "true",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "trigger",
      "type": "string | undefined",
      "complexType": {
        "original": "string | undefined",
        "resolved": "string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "trigger",
      "reflectToAttr": false,
      "docs": "An ID corresponding to the trigger element that\ncauses the modal to open when clicked.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    }
  ],
  "methods": [
    {
      "name": "dismiss",
      "returns": {
        "type": "Promise<boolean>",
        "docs": ""
      },
      "complexType": {
        "signature": "(data?: any, role?: string) => Promise<boolean>",
        "parameters": [
          {
            "name": "data",
            "type": "any",
            "docs": "Any data to emit in the dismiss events."
          },
          {
            "name": "role",
            "type": "string | undefined",
            "docs": "The role of the element that is dismissing the modal. For example, 'cancel' or 'backdrop'.\n\nThis is a no-op if the overlay has not been presented yet. If you want\nto remove an overlay from the DOM that was never presented, use the\n[remove](https://developer.mozilla.org/en-US/docs/Web/API/Element/remove) method."
          }
        ],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          },
          "ModalDismissOptions": {
            "location": "global",
            "id": "global::ModalDismissOptions"
          }
        },
        "return": "Promise<boolean>"
      },
      "signature": "dismiss(data?: any, role?: string) => Promise<boolean>",
      "parameters": [
        {
          "name": "data",
          "type": "any",
          "docs": "Any data to emit in the dismiss events."
        },
        {
          "name": "role",
          "type": "string | undefined",
          "docs": "The role of the element that is dismissing the modal. For example, 'cancel' or 'backdrop'.\n\nThis is a no-op if the overlay has not been presented yet. If you want\nto remove an overlay from the DOM that was never presented, use the\n[remove](https://developer.mozilla.org/en-US/docs/Web/API/Element/remove) method."
        }
      ],
      "docs": "Dismiss the modal overlay after it has been presented.",
      "docsTags": [
        {
          "name": "param",
          "text": "data Any data to emit in the dismiss events."
        },
        {
          "name": "param",
          "text": "role The role of the element that is dismissing the modal. For example, 'cancel' or 'backdrop'.\n\nThis is a no-op if the overlay has not been presented yet. If you want\nto remove an overlay from the DOM that was never presented, use the\n[remove](https://developer.mozilla.org/en-US/docs/Web/API/Element/remove) method."
        }
      ]
    },
    {
      "name": "getCurrentBreakpoint",
      "returns": {
        "type": "Promise<number | undefined>",
        "docs": ""
      },
      "complexType": {
        "signature": "() => Promise<number | undefined>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          }
        },
        "return": "Promise<number | undefined>"
      },
      "signature": "getCurrentBreakpoint() => Promise<number | undefined>",
      "parameters": [],
      "docs": "Returns the current breakpoint of a sheet style modal",
      "docsTags": []
    },
    {
      "name": "onDidDismiss",
      "returns": {
        "type": "Promise<OverlayEventDetail<T>>",
        "docs": ""
      },
      "complexType": {
        "signature": "<T = any>() => Promise<OverlayEventDetail<T>>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          },
          "OverlayEventDetail": {
            "location": "import",
            "path": "../../utils/overlays-interface",
            "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
          },
          "T": {
            "location": "global",
            "id": "global::T"
          }
        },
        "return": "Promise<OverlayEventDetail<T>>"
      },
      "signature": "onDidDismiss<T = any>() => Promise<OverlayEventDetail<T>>",
      "parameters": [],
      "docs": "Returns a promise that resolves when the modal did dismiss.",
      "docsTags": []
    },
    {
      "name": "onWillDismiss",
      "returns": {
        "type": "Promise<OverlayEventDetail<T>>",
        "docs": ""
      },
      "complexType": {
        "signature": "<T = any>() => Promise<OverlayEventDetail<T>>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          },
          "OverlayEventDetail": {
            "location": "import",
            "path": "../../utils/overlays-interface",
            "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
          },
          "T": {
            "location": "global",
            "id": "global::T"
          }
        },
        "return": "Promise<OverlayEventDetail<T>>"
      },
      "signature": "onWillDismiss<T = any>() => Promise<OverlayEventDetail<T>>",
      "parameters": [],
      "docs": "Returns a promise that resolves when the modal will dismiss.",
      "docsTags": []
    },
    {
      "name": "present",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          },
          "ModalPresentOptions": {
            "location": "global",
            "id": "global::ModalPresentOptions"
          }
        },
        "return": "Promise<void>"
      },
      "signature": "present() => Promise<void>",
      "parameters": [],
      "docs": "Present the modal overlay after it has been created.",
      "docsTags": []
    },
    {
      "name": "setCurrentBreakpoint",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "complexType": {
        "signature": "(breakpoint: number) => Promise<void>",
        "parameters": [
          {
            "name": "breakpoint",
            "type": "number",
            "docs": ""
          }
        ],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          }
        },
        "return": "Promise<void>"
      },
      "signature": "setCurrentBreakpoint(breakpoint: number) => Promise<void>",
      "parameters": [
        {
          "name": "breakpoint",
          "type": "number",
          "docs": ""
        }
      ],
      "docs": "Move a sheet style modal to a specific breakpoint. The breakpoint value must\nbe a value defined in your `breakpoints` array.",
      "docsTags": []
    }
  ],
  "events": [
    {
      "event": "didDismiss",
      "detail": "OverlayEventDetail<any>",
      "bubbles": true,
      "complexType": {
        "original": "OverlayEventDetail",
        "resolved": "OverlayEventDetail<any>",
        "references": {
          "OverlayEventDetail": {
            "location": "import",
            "path": "../../utils/overlays-interface",
            "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted after the modal has dismissed.\nShorthand for ionModalDidDismiss.",
      "docsTags": []
    },
    {
      "event": "didPresent",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted after the modal has presented.\nShorthand for ionModalDidPresent.",
      "docsTags": []
    },
    {
      "event": "ionBreakpointDidChange",
      "detail": "ModalBreakpointChangeEventDetail",
      "bubbles": true,
      "complexType": {
        "original": "ModalBreakpointChangeEventDetail",
        "resolved": "ModalBreakpointChangeEventDetail",
        "references": {
          "ModalBreakpointChangeEventDetail": {
            "location": "import",
            "path": "./modal-interface",
            "id": "src/components/modal/modal-interface.ts::ModalBreakpointChangeEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted after the modal breakpoint has changed.",
      "docsTags": []
    },
    {
      "event": "ionModalDidDismiss",
      "detail": "OverlayEventDetail<any>",
      "bubbles": true,
      "complexType": {
        "original": "OverlayEventDetail",
        "resolved": "OverlayEventDetail<any>",
        "references": {
          "OverlayEventDetail": {
            "location": "import",
            "path": "../../utils/overlays-interface",
            "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted after the modal has dismissed.",
      "docsTags": []
    },
    {
      "event": "ionModalDidPresent",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted after the modal has presented.",
      "docsTags": []
    },
    {
      "event": "ionModalWillDismiss",
      "detail": "OverlayEventDetail<any>",
      "bubbles": true,
      "complexType": {
        "original": "OverlayEventDetail",
        "resolved": "OverlayEventDetail<any>",
        "references": {
          "OverlayEventDetail": {
            "location": "import",
            "path": "../../utils/overlays-interface",
            "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted before the modal has dismissed.",
      "docsTags": []
    },
    {
      "event": "ionModalWillPresent",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted before the modal has presented.",
      "docsTags": []
    },
    {
      "event": "willDismiss",
      "detail": "OverlayEventDetail<any>",
      "bubbles": true,
      "complexType": {
        "original": "OverlayEventDetail",
        "resolved": "OverlayEventDetail<any>",
        "references": {
          "OverlayEventDetail": {
            "location": "import",
            "path": "../../utils/overlays-interface",
            "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted before the modal has dismissed.\nShorthand for ionModalWillDismiss.",
      "docsTags": []
    },
    {
      "event": "willPresent",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted before the modal has presented.\nShorthand for ionModalWillPresent.",
      "docsTags": []
    }
  ],
  "listeners": [],
  "styles": [
    {
      "name": "--backdrop-opacity",
      "annotation": "prop",
      "docs": "Opacity of the backdrop",
      "mode": "ios"
    },
    {
      "name": "--backdrop-opacity",
      "annotation": "prop",
      "docs": "Opacity of the backdrop",
      "mode": "md"
    },
    {
      "name": "--background",
      "annotation": "prop",
      "docs": "Background of the modal content",
      "mode": "ios"
    },
    {
      "name": "--background",
      "annotation": "prop",
      "docs": "Background of the modal content",
      "mode": "md"
    },
    {
      "name": "--border-color",
      "annotation": "prop",
      "docs": "Border color of the modal content",
      "mode": "ios"
    },
    {
      "name": "--border-color",
      "annotation": "prop",
      "docs": "Border color of the modal content",
      "mode": "md"
    },
    {
      "name": "--border-radius",
      "annotation": "prop",
      "docs": "Border radius of the modal content",
      "mode": "ios"
    },
    {
      "name": "--border-radius",
      "annotation": "prop",
      "docs": "Border radius of the modal content",
      "mode": "md"
    },
    {
      "name": "--border-style",
      "annotation": "prop",
      "docs": "Border style of the modal content",
      "mode": "ios"
    },
    {
      "name": "--border-style",
      "annotation": "prop",
      "docs": "Border style of the modal content",
      "mode": "md"
    },
    {
      "name": "--border-width",
      "annotation": "prop",
      "docs": "Border width of the modal content",
      "mode": "ios"
    },
    {
      "name": "--border-width",
      "annotation": "prop",
      "docs": "Border width of the modal content",
      "mode": "md"
    },
    {
      "name": "--height",
      "annotation": "prop",
      "docs": "Height of the modal",
      "mode": "ios"
    },
    {
      "name": "--height",
      "annotation": "prop",
      "docs": "Height of the modal",
      "mode": "md"
    },
    {
      "name": "--max-height",
      "annotation": "prop",
      "docs": "Maximum height of the modal",
      "mode": "ios"
    },
    {
      "name": "--max-height",
      "annotation": "prop",
      "docs": "Maximum height of the modal",
      "mode": "md"
    },
    {
      "name": "--max-width",
      "annotation": "prop",
      "docs": "Maximum width of the modal",
      "mode": "ios"
    },
    {
      "name": "--max-width",
      "annotation": "prop",
      "docs": "Maximum width of the modal",
      "mode": "md"
    },
    {
      "name": "--min-height",
      "annotation": "prop",
      "docs": "Minimum height of the modal",
      "mode": "ios"
    },
    {
      "name": "--min-height",
      "annotation": "prop",
      "docs": "Minimum height of the modal",
      "mode": "md"
    },
    {
      "name": "--min-width",
      "annotation": "prop",
      "docs": "Minimum width of the modal",
      "mode": "ios"
    },
    {
      "name": "--min-width",
      "annotation": "prop",
      "docs": "Minimum width of the modal",
      "mode": "md"
    },
    {
      "name": "--width",
      "annotation": "prop",
      "docs": "Width of the modal",
      "mode": "ios"
    },
    {
      "name": "--width",
      "annotation": "prop",
      "docs": "Width of the modal",
      "mode": "md"
    }
  ],
  "slots": [
    {
      "name": "",
      "docs": "Content is placed inside of the `.modal-content` element."
    }
  ],
  "parts": [
    {
      "name": "backdrop",
      "docs": "The `ion-backdrop` element."
    },
    {
      "name": "content",
      "docs": "The wrapper element for the default slot."
    },
    {
      "name": "handle",
      "docs": "The handle that is displayed at the top of the sheet modal when `handle=\"true\"`."
    }
  ],
  "dependents": [
    "ion-select"
  ],
  "dependencies": [
    "ion-backdrop"
  ],
  "dependencyGraph": {
    "ion-modal": [
      "ion-backdrop"
    ],
    "ion-select": [
      "ion-modal"
    ]
  }
}