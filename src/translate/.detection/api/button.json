{
  "filePath": "src/components/button/button.tsx",
  "encapsulation": "shadow",
  "tag": "ion-button",
  "docs": "",
  "docsTags": [
    {
      "name": "virtualProp",
      "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
    },
    {
      "name": "slot",
      "text": "- Content is placed between the named slots if provided without a slot."
    },
    {
      "name": "slot",
      "text": "icon-only - Should be used on an icon in a button that has no text."
    },
    {
      "name": "slot",
      "text": "start - Content is placed to the left of the button text in LTR, and to the right in RTL."
    },
    {
      "name": "slot",
      "text": "end - Content is placed to the right of the button text in LTR, and to the left in RTL."
    },
    {
      "name": "part",
      "text": "native - The native HTML button or anchor element that wraps all child elements."
    }
  ],
  "usage": {},
  "props": [
    {
      "name": "buttonType",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": true,
      "attr": "button-type",
      "reflectToAttr": false,
      "docs": "The type of button.",
      "docsTags": [
        {
          "name": "default",
          "text": "'button'"
        }
      ],
      "default": "'button'",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "color",
      "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
      "complexType": {
        "original": "Color",
        "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
        "references": {
          "Color": {
            "location": "import",
            "path": "../../interface",
            "id": "src/interface.d.ts::Color"
          }
        }
      },
      "mutable": false,
      "attr": "color",
      "reflectToAttr": true,
      "docs": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
      "docsTags": [],
      "values": [
        {
          "value": "danger",
          "type": "string"
        },
        {
          "value": "dark",
          "type": "string"
        },
        {
          "value": "light",
          "type": "string"
        },
        {
          "value": "medium",
          "type": "string"
        },
        {
          "value": "primary",
          "type": "string"
        },
        {
          "value": "secondary",
          "type": "string"
        },
        {
          "value": "success",
          "type": "string"
        },
        {
          "value": "tertiary",
          "type": "string"
        },
        {
          "value": "warning",
          "type": "string"
        },
        {
          "type": "string & Record<never, never>"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "disabled",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "disabled",
      "reflectToAttr": true,
      "docs": "If `true`, the user cannot interact with the button.",
      "docsTags": [
        {
          "name": "default",
          "text": "false"
        }
      ],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "download",
      "type": "string | undefined",
      "complexType": {
        "original": "string | undefined",
        "resolved": "string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "download",
      "reflectToAttr": false,
      "docs": "This attribute instructs browsers to download a URL instead of navigating to\nit, so the user will be prompted to save it as a local file. If the attribute\nhas a value, it is used as the pre-filled file name in the Save prompt\n(the user can still change the file name if they want).",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "expand",
      "type": "\"block\" | \"full\" | undefined",
      "complexType": {
        "original": "'full' | 'block'",
        "resolved": "\"block\" | \"full\" | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "expand",
      "reflectToAttr": true,
      "docs": "Set to `\"block\"` for a full-width button or to `\"full\"` for a full-width button\nwith square corners and no left or right borders.",
      "docsTags": [],
      "values": [
        {
          "value": "block",
          "type": "string"
        },
        {
          "value": "full",
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "fill",
      "type": "\"clear\" | \"default\" | \"outline\" | \"solid\" | undefined",
      "complexType": {
        "original": "'clear' | 'outline' | 'solid' | 'default'",
        "resolved": "\"clear\" | \"default\" | \"outline\" | \"solid\" | undefined",
        "references": {}
      },
      "mutable": true,
      "attr": "fill",
      "reflectToAttr": true,
      "docs": "Set to `\"clear\"` for a transparent button that resembles a flat button, to `\"outline\"`\nfor a transparent button with a border, or to `\"solid\"` for a button with a filled background.\nThe default fill is `\"solid\"` except inside of a toolbar, where the default is `\"clear\"`.",
      "docsTags": [],
      "values": [
        {
          "value": "clear",
          "type": "string"
        },
        {
          "value": "default",
          "type": "string"
        },
        {
          "value": "outline",
          "type": "string"
        },
        {
          "value": "solid",
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "form",
      "type": "HTMLFormElement | string | undefined",
      "complexType": {
        "original": "string | HTMLFormElement",
        "resolved": "HTMLFormElement | string | undefined",
        "references": {
          "HTMLFormElement": {
            "location": "global",
            "id": "global::HTMLFormElement"
          }
        }
      },
      "mutable": false,
      "attr": "form",
      "reflectToAttr": false,
      "docs": "The HTML form element or form element id. Used to submit a form when the button is not a child of the form.",
      "docsTags": [],
      "values": [
        {
          "type": "HTMLFormElement"
        },
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "href",
      "type": "string | undefined",
      "complexType": {
        "original": "string | undefined",
        "resolved": "string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "href",
      "reflectToAttr": false,
      "docs": "Contains a URL or a URL fragment that the hyperlink points to.\nIf this property is set, an anchor tag will be rendered.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "mode",
      "type": "\"ios\" | \"md\"",
      "mutable": false,
      "attr": "mode",
      "reflectToAttr": false,
      "docs": "The mode determines which platform styles to use.",
      "docsTags": [],
      "values": [
        {
          "value": "ios",
          "type": "string"
        },
        {
          "value": "md",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "rel",
      "type": "string | undefined",
      "complexType": {
        "original": "string | undefined",
        "resolved": "string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "rel",
      "reflectToAttr": false,
      "docs": "Specifies the relationship of the target object to the link object.\nThe value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "routerAnimation",
      "type": "((baseEl: any, opts?: any) => Animation) | undefined",
      "complexType": {
        "original": "AnimationBuilder | undefined",
        "resolved": "((baseEl: any, opts?: any) => Animation) | undefined",
        "references": {
          "AnimationBuilder": {
            "location": "import",
            "path": "../../interface",
            "id": "src/interface.d.ts::AnimationBuilder"
          }
        }
      },
      "mutable": false,
      "attr": "router-animation",
      "reflectToAttr": false,
      "docs": "When using a router, it specifies the transition animation when navigating to\nanother page using `href`.",
      "docsTags": [],
      "values": [
        {
          "type": "((baseEl: any, opts?: any) => Animation)"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "routerDirection",
      "type": "\"back\" | \"forward\" | \"root\"",
      "complexType": {
        "original": "RouterDirection",
        "resolved": "\"back\" | \"forward\" | \"root\"",
        "references": {
          "RouterDirection": {
            "location": "import",
            "path": "../router/utils/interface",
            "id": "src/components/router/utils/interface.ts::RouterDirection"
          }
        }
      },
      "mutable": false,
      "attr": "router-direction",
      "reflectToAttr": false,
      "docs": "When using a router, it specifies the transition direction when navigating to\nanother page using `href`.",
      "docsTags": [
        {
          "name": "default",
          "text": "'forward'"
        }
      ],
      "default": "'forward'",
      "values": [
        {
          "value": "back",
          "type": "string"
        },
        {
          "value": "forward",
          "type": "string"
        },
        {
          "value": "root",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "shape",
      "type": "\"round\" | undefined",
      "complexType": {
        "original": "'round'",
        "resolved": "\"round\" | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "shape",
      "reflectToAttr": true,
      "docs": "Set to `\"round\"` for a button with more rounded corners.",
      "docsTags": [],
      "values": [
        {
          "value": "round",
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "size",
      "type": "\"default\" | \"large\" | \"small\" | undefined",
      "complexType": {
        "original": "'small' | 'default' | 'large'",
        "resolved": "\"default\" | \"large\" | \"small\" | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "size",
      "reflectToAttr": true,
      "docs": "Set to `\"small\"` for a button with less height and padding, to `\"default\"`\nfor a button with the default height and padding, or to `\"large\"` for a button\nwith more height and padding. By default the size is unset, unless the button\nis inside of an item, where the size is `\"small\"` by default. Set the size to\n`\"default\"` inside of an item to make it a standard size button.",
      "docsTags": [],
      "values": [
        {
          "value": "default",
          "type": "string"
        },
        {
          "value": "large",
          "type": "string"
        },
        {
          "value": "small",
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "strong",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "strong",
      "reflectToAttr": false,
      "docs": "If `true`, activates a button with a heavier font weight.",
      "docsTags": [
        {
          "name": "default",
          "text": "false"
        }
      ],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "target",
      "type": "string | undefined",
      "complexType": {
        "original": "string | undefined",
        "resolved": "string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "target",
      "reflectToAttr": false,
      "docs": "Specifies where to display the linked URL.\nOnly applies when an `href` is provided.\nSpecial keywords: `\"_blank\"`, `\"_self\"`, `\"_parent\"`, `\"_top\"`.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "type",
      "type": "\"button\" | \"reset\" | \"submit\"",
      "complexType": {
        "original": "'submit' | 'reset' | 'button'",
        "resolved": "\"button\" | \"reset\" | \"submit\"",
        "references": {}
      },
      "mutable": false,
      "attr": "type",
      "reflectToAttr": false,
      "docs": "The type of the button.",
      "docsTags": [
        {
          "name": "default",
          "text": "'button'"
        }
      ],
      "default": "'button'",
      "values": [
        {
          "value": "button",
          "type": "string"
        },
        {
          "value": "reset",
          "type": "string"
        },
        {
          "value": "submit",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    }
  ],
  "methods": [],
  "events": [
    {
      "event": "ionBlur",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the button loses focus.",
      "docsTags": []
    },
    {
      "event": "ionFocus",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the button has focus.",
      "docsTags": []
    }
  ],
  "listeners": [],
  "styles": [
    {
      "name": "--background",
      "annotation": "prop",
      "docs": "Background of the button",
      "mode": "ios"
    },
    {
      "name": "--background",
      "annotation": "prop",
      "docs": "Background of the button",
      "mode": "md"
    },
    {
      "name": "--background-activated",
      "annotation": "prop",
      "docs": "Background of the button when pressed. Note: setting this will interfere with the Material Design ripple.",
      "mode": "ios"
    },
    {
      "name": "--background-activated",
      "annotation": "prop",
      "docs": "Background of the button when pressed. Note: setting this will interfere with the Material Design ripple.",
      "mode": "md"
    },
    {
      "name": "--background-activated-opacity",
      "annotation": "prop",
      "docs": "Opacity of the button when pressed",
      "mode": "ios"
    },
    {
      "name": "--background-activated-opacity",
      "annotation": "prop",
      "docs": "Opacity of the button when pressed",
      "mode": "md"
    },
    {
      "name": "--background-focused",
      "annotation": "prop",
      "docs": "Background of the button when focused with the tab key",
      "mode": "ios"
    },
    {
      "name": "--background-focused",
      "annotation": "prop",
      "docs": "Background of the button when focused with the tab key",
      "mode": "md"
    },
    {
      "name": "--background-focused-opacity",
      "annotation": "prop",
      "docs": "Opacity of the button when focused with the tab key",
      "mode": "ios"
    },
    {
      "name": "--background-focused-opacity",
      "annotation": "prop",
      "docs": "Opacity of the button when focused with the tab key",
      "mode": "md"
    },
    {
      "name": "--background-hover",
      "annotation": "prop",
      "docs": "Background of the button on hover",
      "mode": "ios"
    },
    {
      "name": "--background-hover",
      "annotation": "prop",
      "docs": "Background of the button on hover",
      "mode": "md"
    },
    {
      "name": "--background-hover-opacity",
      "annotation": "prop",
      "docs": "Opacity of the background on hover",
      "mode": "ios"
    },
    {
      "name": "--background-hover-opacity",
      "annotation": "prop",
      "docs": "Opacity of the background on hover",
      "mode": "md"
    },
    {
      "name": "--border-color",
      "annotation": "prop",
      "docs": "Border color of the button",
      "mode": "ios"
    },
    {
      "name": "--border-color",
      "annotation": "prop",
      "docs": "Border color of the button",
      "mode": "md"
    },
    {
      "name": "--border-radius",
      "annotation": "prop",
      "docs": "Border radius of the button",
      "mode": "ios"
    },
    {
      "name": "--border-radius",
      "annotation": "prop",
      "docs": "Border radius of the button",
      "mode": "md"
    },
    {
      "name": "--border-style",
      "annotation": "prop",
      "docs": "Border style of the button",
      "mode": "ios"
    },
    {
      "name": "--border-style",
      "annotation": "prop",
      "docs": "Border style of the button",
      "mode": "md"
    },
    {
      "name": "--border-width",
      "annotation": "prop",
      "docs": "Border width of the button",
      "mode": "ios"
    },
    {
      "name": "--border-width",
      "annotation": "prop",
      "docs": "Border width of the button",
      "mode": "md"
    },
    {
      "name": "--box-shadow",
      "annotation": "prop",
      "docs": "Box shadow of the button",
      "mode": "ios"
    },
    {
      "name": "--box-shadow",
      "annotation": "prop",
      "docs": "Box shadow of the button",
      "mode": "md"
    },
    {
      "name": "--color",
      "annotation": "prop",
      "docs": "Text color of the button",
      "mode": "ios"
    },
    {
      "name": "--color",
      "annotation": "prop",
      "docs": "Text color of the button",
      "mode": "md"
    },
    {
      "name": "--color-activated",
      "annotation": "prop",
      "docs": "Text color of the button when pressed",
      "mode": "ios"
    },
    {
      "name": "--color-activated",
      "annotation": "prop",
      "docs": "Text color of the button when pressed",
      "mode": "md"
    },
    {
      "name": "--color-focused",
      "annotation": "prop",
      "docs": "Text color of the button when focused with the tab key",
      "mode": "ios"
    },
    {
      "name": "--color-focused",
      "annotation": "prop",
      "docs": "Text color of the button when focused with the tab key",
      "mode": "md"
    },
    {
      "name": "--color-hover",
      "annotation": "prop",
      "docs": "Text color of the button when hover",
      "mode": "ios"
    },
    {
      "name": "--color-hover",
      "annotation": "prop",
      "docs": "Text color of the button when hover",
      "mode": "md"
    },
    {
      "name": "--opacity",
      "annotation": "prop",
      "docs": "Opacity of the button",
      "mode": "ios"
    },
    {
      "name": "--opacity",
      "annotation": "prop",
      "docs": "Opacity of the button",
      "mode": "md"
    },
    {
      "name": "--padding-bottom",
      "annotation": "prop",
      "docs": "Bottom padding of the button",
      "mode": "ios"
    },
    {
      "name": "--padding-bottom",
      "annotation": "prop",
      "docs": "Bottom padding of the button",
      "mode": "md"
    },
    {
      "name": "--padding-end",
      "annotation": "prop",
      "docs": "Right padding if direction is left-to-right, and left padding if direction is right-to-left of the button",
      "mode": "ios"
    },
    {
      "name": "--padding-end",
      "annotation": "prop",
      "docs": "Right padding if direction is left-to-right, and left padding if direction is right-to-left of the button",
      "mode": "md"
    },
    {
      "name": "--padding-start",
      "annotation": "prop",
      "docs": "Left padding if direction is left-to-right, and right padding if direction is right-to-left of the button",
      "mode": "ios"
    },
    {
      "name": "--padding-start",
      "annotation": "prop",
      "docs": "Left padding if direction is left-to-right, and right padding if direction is right-to-left of the button",
      "mode": "md"
    },
    {
      "name": "--padding-top",
      "annotation": "prop",
      "docs": "Top padding of the button",
      "mode": "ios"
    },
    {
      "name": "--padding-top",
      "annotation": "prop",
      "docs": "Top padding of the button",
      "mode": "md"
    },
    {
      "name": "--ripple-color",
      "annotation": "prop",
      "docs": "Color of the button ripple effect",
      "mode": "ios"
    },
    {
      "name": "--ripple-color",
      "annotation": "prop",
      "docs": "Color of the button ripple effect",
      "mode": "md"
    },
    {
      "name": "--transition",
      "annotation": "prop",
      "docs": "Transition of the button",
      "mode": "ios"
    },
    {
      "name": "--transition",
      "annotation": "prop",
      "docs": "Transition of the button",
      "mode": "md"
    }
  ],
  "slots": [
    {
      "name": "",
      "docs": "Content is placed between the named slots if provided without a slot."
    },
    {
      "name": "end",
      "docs": "Content is placed to the right of the button text in LTR, and to the left in RTL."
    },
    {
      "name": "icon-only",
      "docs": "Should be used on an icon in a button that has no text."
    },
    {
      "name": "start",
      "docs": "Content is placed to the left of the button text in LTR, and to the right in RTL."
    }
  ],
  "parts": [
    {
      "name": "native",
      "docs": "The native HTML button or anchor element that wraps all child elements."
    }
  ],
  "dependents": [
    "ion-datetime",
    "ion-input-password-toggle",
    "ion-select-modal"
  ],
  "dependencies": [
    "ion-ripple-effect"
  ],
  "dependencyGraph": {
    "ion-button": [
      "ion-ripple-effect"
    ],
    "ion-datetime": [
      "ion-button"
    ],
    "ion-input-password-toggle": [
      "ion-button"
    ],
    "ion-select-modal": [
      "ion-button"
    ]
  }
}