{
  "filePath": "src/components/menu/menu.tsx",
  "encapsulation": "shadow",
  "tag": "ion-menu",
  "docs": "",
  "docsTags": [
    {
      "name": "part",
      "text": "container - The container for the menu content."
    },
    {
      "name": "part",
      "text": "backdrop - The backdrop that appears over the main content when the menu is open."
    }
  ],
  "usage": {},
  "props": [
    {
      "name": "contentId",
      "type": "string | undefined",
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "content-id",
      "reflectToAttr": true,
      "docs": "The `id` of the main content. When using\na router this is typically `ion-router-outlet`.\nWhen not using a router, this is typically\nyour main view's `ion-content`. This is not the\nid of the `ion-content` inside of your `ion-menu`.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "disabled",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": true,
      "attr": "disabled",
      "reflectToAttr": false,
      "docs": "If `true`, the menu is disabled.",
      "docsTags": [
        {
          "name": "default",
          "text": "false"
        }
      ],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "maxEdgeStart",
      "type": "number",
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "mutable": false,
      "attr": "max-edge-start",
      "reflectToAttr": false,
      "docs": "The edge threshold for dragging the menu open.\nIf a drag/swipe happens over this value, the menu is not triggered.",
      "docsTags": [
        {
          "name": "default",
          "text": "50"
        }
      ],
      "default": "50",
      "values": [
        {
          "type": "number"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "menuId",
      "type": "string | undefined",
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "menu-id",
      "reflectToAttr": true,
      "docs": "An id for the menu.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "side",
      "type": "\"end\" | \"start\"",
      "complexType": {
        "original": "Side",
        "resolved": "\"end\" | \"start\"",
        "references": {
          "Side": {
            "location": "import",
            "path": "./menu-interface",
            "id": "src/components/menu/menu-interface.ts::Side"
          }
        }
      },
      "mutable": false,
      "attr": "side",
      "reflectToAttr": true,
      "docs": "Which side of the view the menu should be placed.",
      "docsTags": [
        {
          "name": "default",
          "text": "'start'"
        }
      ],
      "default": "'start'",
      "values": [
        {
          "value": "end",
          "type": "string"
        },
        {
          "value": "start",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "swipeGesture",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "swipe-gesture",
      "reflectToAttr": false,
      "docs": "If `true`, swiping the menu is enabled.",
      "docsTags": [
        {
          "name": "default",
          "text": "true"
        }
      ],
      "default": "true",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "type",
      "type": "\"overlay\" | \"push\" | \"reveal\" | undefined",
      "complexType": {
        "original": "MenuType",
        "resolved": "\"overlay\" | \"push\" | \"reveal\" | undefined",
        "references": {
          "MenuType": {
            "location": "import",
            "path": "./menu-interface",
            "id": "src/components/menu/menu-interface.ts::MenuType"
          }
        }
      },
      "mutable": true,
      "attr": "type",
      "reflectToAttr": false,
      "docs": "The display type of the menu.\nAvailable options: `\"overlay\"`, `\"reveal\"`, `\"push\"`.",
      "docsTags": [],
      "values": [
        {
          "value": "overlay",
          "type": "string"
        },
        {
          "value": "push",
          "type": "string"
        },
        {
          "value": "reveal",
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    }
  ],
  "methods": [
    {
      "name": "close",
      "returns": {
        "type": "Promise<boolean>",
        "docs": ""
      },
      "complexType": {
        "signature": "(animated?: boolean, role?: string) => Promise<boolean>",
        "parameters": [
          {
            "name": "animated",
            "type": "boolean",
            "docs": "If `true`, the menu will animate when closing. If `false`,\nthe menu will close instantly without animation. Defaults to `true`."
          },
          {
            "name": "role",
            "type": "string | undefined",
            "docs": "The role of the element that is closing the menu.\nThis can be useful in a button handler for determining which button was\nclicked to close the menu. Some examples include:\n`\"cancel\"`, `\"destructive\"`, `\"selected\"`, and `\"backdrop\"`."
          }
        ],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          }
        },
        "return": "Promise<boolean>"
      },
      "signature": "close(animated?: boolean, role?: string) => Promise<boolean>",
      "parameters": [
        {
          "name": "animated",
          "type": "boolean",
          "docs": "If `true`, the menu will animate when closing. If `false`,\nthe menu will close instantly without animation. Defaults to `true`."
        },
        {
          "name": "role",
          "type": "string | undefined",
          "docs": "The role of the element that is closing the menu.\nThis can be useful in a button handler for determining which button was\nclicked to close the menu. Some examples include:\n`\"cancel\"`, `\"destructive\"`, `\"selected\"`, and `\"backdrop\"`."
        }
      ],
      "docs": "Closes the menu. If the menu is already closed or it can't be closed,\nit returns `false`.",
      "docsTags": [
        {
          "name": "param",
          "text": "animated If `true`, the menu will animate when closing. If `false`,\nthe menu will close instantly without animation. Defaults to `true`."
        },
        {
          "name": "param",
          "text": "role The role of the element that is closing the menu.\nThis can be useful in a button handler for determining which button was\nclicked to close the menu. Some examples include:\n`\"cancel\"`, `\"destructive\"`, `\"selected\"`, and `\"backdrop\"`."
        }
      ]
    },
    {
      "name": "isActive",
      "returns": {
        "type": "Promise<boolean>",
        "docs": ""
      },
      "complexType": {
        "signature": "() => Promise<boolean>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          }
        },
        "return": "Promise<boolean>"
      },
      "signature": "isActive() => Promise<boolean>",
      "parameters": [],
      "docs": "Returns `true` if the menu is active.\n\nA menu is active when it can be opened or closed, meaning it's enabled\nand it's not part of a `ion-split-pane`.",
      "docsTags": []
    },
    {
      "name": "isOpen",
      "returns": {
        "type": "Promise<boolean>",
        "docs": ""
      },
      "complexType": {
        "signature": "() => Promise<boolean>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          }
        },
        "return": "Promise<boolean>"
      },
      "signature": "isOpen() => Promise<boolean>",
      "parameters": [],
      "docs": "Returns `true` is the menu is open.",
      "docsTags": []
    },
    {
      "name": "open",
      "returns": {
        "type": "Promise<boolean>",
        "docs": ""
      },
      "complexType": {
        "signature": "(animated?: boolean) => Promise<boolean>",
        "parameters": [
          {
            "name": "animated",
            "type": "boolean",
            "docs": "If `true`, the menu will animate when opening.\nIf `false`, the menu will open instantly without animation.\nDefaults to `true`."
          }
        ],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          }
        },
        "return": "Promise<boolean>"
      },
      "signature": "open(animated?: boolean) => Promise<boolean>",
      "parameters": [
        {
          "name": "animated",
          "type": "boolean",
          "docs": "If `true`, the menu will animate when opening.\nIf `false`, the menu will open instantly without animation.\nDefaults to `true`."
        }
      ],
      "docs": "Opens the menu. If the menu is already open or it can't be opened,\nit returns `false`.",
      "docsTags": [
        {
          "name": "param",
          "text": "animated If `true`, the menu will animate when opening.\nIf `false`, the menu will open instantly without animation.\nDefaults to `true`."
        }
      ]
    },
    {
      "name": "setOpen",
      "returns": {
        "type": "Promise<boolean>",
        "docs": ""
      },
      "complexType": {
        "signature": "(shouldOpen: boolean, animated?: boolean, role?: string) => Promise<boolean>",
        "parameters": [
          {
            "name": "shouldOpen",
            "type": "boolean",
            "docs": "If `true`, the menu will open. If `false`, the menu\nwill close."
          },
          {
            "name": "animated",
            "type": "boolean",
            "docs": "If `true`, the menu will animate when opening/closing.\nIf `false`, the menu will open/close instantly without animation."
          },
          {
            "name": "role",
            "type": "string | undefined",
            "docs": "The role of the element that is closing the menu."
          }
        ],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          },
          "HTMLElement": {
            "location": "global",
            "id": "global::HTMLElement"
          }
        },
        "return": "Promise<boolean>"
      },
      "signature": "setOpen(shouldOpen: boolean, animated?: boolean, role?: string) => Promise<boolean>",
      "parameters": [
        {
          "name": "shouldOpen",
          "type": "boolean",
          "docs": "If `true`, the menu will open. If `false`, the menu\nwill close."
        },
        {
          "name": "animated",
          "type": "boolean",
          "docs": "If `true`, the menu will animate when opening/closing.\nIf `false`, the menu will open/close instantly without animation."
        },
        {
          "name": "role",
          "type": "string | undefined",
          "docs": "The role of the element that is closing the menu."
        }
      ],
      "docs": "Opens or closes the menu.\nIf the operation can't be completed successfully, it returns `false`.",
      "docsTags": [
        {
          "name": "param",
          "text": "shouldOpen If `true`, the menu will open. If `false`, the menu\nwill close."
        },
        {
          "name": "param",
          "text": "animated If `true`, the menu will animate when opening/closing.\nIf `false`, the menu will open/close instantly without animation."
        },
        {
          "name": "param",
          "text": "role The role of the element that is closing the menu."
        }
      ]
    },
    {
      "name": "toggle",
      "returns": {
        "type": "Promise<boolean>",
        "docs": ""
      },
      "complexType": {
        "signature": "(animated?: boolean) => Promise<boolean>",
        "parameters": [
          {
            "name": "animated",
            "type": "boolean",
            "docs": "If `true`, the menu will animate when opening/closing.\nIf `false`, the menu will open/close instantly without animation.\nDefaults to `true`."
          }
        ],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          }
        },
        "return": "Promise<boolean>"
      },
      "signature": "toggle(animated?: boolean) => Promise<boolean>",
      "parameters": [
        {
          "name": "animated",
          "type": "boolean",
          "docs": "If `true`, the menu will animate when opening/closing.\nIf `false`, the menu will open/close instantly without animation.\nDefaults to `true`."
        }
      ],
      "docs": "Toggles the menu. If the menu is already open, it will try to close,\notherwise it will try to open it.\nIf the operation can't be completed successfully, it returns `false`.",
      "docsTags": [
        {
          "name": "param",
          "text": "animated If `true`, the menu will animate when opening/closing.\nIf `false`, the menu will open/close instantly without animation.\nDefaults to `true`."
        }
      ]
    }
  ],
  "events": [
    {
      "event": "ionDidClose",
      "detail": "MenuCloseEventDetail",
      "bubbles": true,
      "complexType": {
        "original": "MenuCloseEventDetail",
        "resolved": "MenuCloseEventDetail",
        "references": {
          "MenuCloseEventDetail": {
            "location": "import",
            "path": "./menu-interface",
            "id": "src/components/menu/menu-interface.ts::MenuCloseEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the menu is closed.",
      "docsTags": []
    },
    {
      "event": "ionDidOpen",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the menu is open.",
      "docsTags": []
    },
    {
      "event": "ionWillClose",
      "detail": "MenuCloseEventDetail",
      "bubbles": true,
      "complexType": {
        "original": "MenuCloseEventDetail",
        "resolved": "MenuCloseEventDetail",
        "references": {
          "MenuCloseEventDetail": {
            "location": "import",
            "path": "./menu-interface",
            "id": "src/components/menu/menu-interface.ts::MenuCloseEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the menu is about to be closed.",
      "docsTags": []
    },
    {
      "event": "ionWillOpen",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the menu is about to be opened.",
      "docsTags": []
    }
  ],
  "listeners": [
    {
      "event": "ionSplitPaneVisible",
      "target": "body",
      "capture": false,
      "passive": false
    },
    {
      "event": "click",
      "capture": true,
      "passive": false
    }
  ],
  "styles": [
    {
      "name": "--background",
      "annotation": "prop",
      "docs": "Background of the menu",
      "mode": "ios"
    },
    {
      "name": "--background",
      "annotation": "prop",
      "docs": "Background of the menu",
      "mode": "md"
    },
    {
      "name": "--height",
      "annotation": "prop",
      "docs": "Height of the menu",
      "mode": "ios"
    },
    {
      "name": "--height",
      "annotation": "prop",
      "docs": "Height of the menu",
      "mode": "md"
    },
    {
      "name": "--max-height",
      "annotation": "prop",
      "docs": "Maximum height of the menu",
      "mode": "ios"
    },
    {
      "name": "--max-height",
      "annotation": "prop",
      "docs": "Maximum height of the menu",
      "mode": "md"
    },
    {
      "name": "--max-width",
      "annotation": "prop",
      "docs": "Maximum width of the menu",
      "mode": "ios"
    },
    {
      "name": "--max-width",
      "annotation": "prop",
      "docs": "Maximum width of the menu",
      "mode": "md"
    },
    {
      "name": "--min-height",
      "annotation": "prop",
      "docs": "Minimum height of the menu",
      "mode": "ios"
    },
    {
      "name": "--min-height",
      "annotation": "prop",
      "docs": "Minimum height of the menu",
      "mode": "md"
    },
    {
      "name": "--min-width",
      "annotation": "prop",
      "docs": "Minimum width of the menu",
      "mode": "ios"
    },
    {
      "name": "--min-width",
      "annotation": "prop",
      "docs": "Minimum width of the menu",
      "mode": "md"
    },
    {
      "name": "--width",
      "annotation": "prop",
      "docs": "Width of the menu",
      "mode": "ios"
    },
    {
      "name": "--width",
      "annotation": "prop",
      "docs": "Width of the menu",
      "mode": "md"
    }
  ],
  "slots": [],
  "parts": [
    {
      "name": "backdrop",
      "docs": "The backdrop that appears over the main content when the menu is open."
    },
    {
      "name": "container",
      "docs": "The container for the menu content."
    }
  ],
  "dependents": [],
  "dependencies": [
    "ion-backdrop"
  ],
  "dependencyGraph": {
    "ion-menu": [
      "ion-backdrop"
    ]
  }
}