{
  "filePath": "src/components/popover/popover.tsx",
  "encapsulation": "shadow",
  "tag": "ion-popover",
  "docs": "",
  "docsTags": [
    {
      "name": "virtualProp",
      "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
    },
    {
      "name": "slot",
      "text": "- Content is placed inside of the `.popover-content` element."
    },
    {
      "name": "part",
      "text": "backdrop - The `ion-backdrop` element."
    },
    {
      "name": "part",
      "text": "arrow - The arrow that points to the reference element. Only applies on `ios` mode."
    },
    {
      "name": "part",
      "text": "content - The wrapper element for the default slot."
    }
  ],
  "usage": {},
  "props": [
    {
      "name": "alignment",
      "type": "\"center\" | \"end\" | \"start\" | undefined",
      "complexType": {
        "original": "PositionAlign",
        "resolved": "\"center\" | \"end\" | \"start\" | undefined",
        "references": {
          "PositionAlign": {
            "location": "import",
            "path": "./popover-interface",
            "id": "src/components/popover/popover-interface.ts::PositionAlign"
          }
        }
      },
      "mutable": true,
      "attr": "alignment",
      "reflectToAttr": false,
      "docs": "Describes how to align the popover content with the `reference` point.\nDefaults to `\"center\"` for `ios` mode, and `\"start\"` for `md` mode.",
      "docsTags": [],
      "values": [
        {
          "value": "center",
          "type": "string"
        },
        {
          "value": "end",
          "type": "string"
        },
        {
          "value": "start",
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "animated",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "animated",
      "reflectToAttr": false,
      "docs": "If `true`, the popover will animate.",
      "docsTags": [
        {
          "name": "default",
          "text": "true"
        }
      ],
      "default": "true",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "arrow",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "arrow",
      "reflectToAttr": false,
      "docs": "If `true`, the popover will display an arrow that points at the\n`reference` when running in `ios` mode. Does not apply in `md` mode.",
      "docsTags": [
        {
          "name": "default",
          "text": "true"
        }
      ],
      "default": "true",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "backdropDismiss",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "backdrop-dismiss",
      "reflectToAttr": false,
      "docs": "If `true`, the popover will be dismissed when the backdrop is clicked.",
      "docsTags": [
        {
          "name": "default",
          "text": "true"
        }
      ],
      "default": "true",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "component",
      "type": "Function | HTMLElement | null | string | undefined",
      "complexType": {
        "original": "ComponentRef",
        "resolved": "Function | HTMLElement | null | string | undefined",
        "references": {
          "ComponentRef": {
            "location": "import",
            "path": "../../interface",
            "id": "src/interface.d.ts::ComponentRef"
          }
        }
      },
      "mutable": false,
      "attr": "component",
      "reflectToAttr": false,
      "docs": "The component to display inside of the popover.\nYou only need to use this if you are not using\na JavaScript framework. Otherwise, you can just\nslot your component inside of `ion-popover`.",
      "docsTags": [],
      "values": [
        {
          "type": "Function"
        },
        {
          "type": "HTMLElement"
        },
        {
          "type": "null"
        },
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "componentProps",
      "type": "undefined | { [key: string]: any; }",
      "complexType": {
        "original": "ComponentProps",
        "resolved": "undefined | { [key: string]: any; }",
        "references": {
          "ComponentProps": {
            "location": "import",
            "path": "../../interface",
            "id": "src/interface.d.ts::ComponentProps"
          }
        }
      },
      "mutable": false,
      "attr": "component-props",
      "reflectToAttr": false,
      "docs": "The data to pass to the popover component.\nYou only need to use this if you are not using\na JavaScript framework. Otherwise, you can just\nset the props directly on your component.",
      "docsTags": [],
      "values": [
        {
          "type": "undefined"
        },
        {
          "type": "{ [key: string]: any; }"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "dismissOnSelect",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "dismiss-on-select",
      "reflectToAttr": false,
      "docs": "If `true`, the popover will be automatically\ndismissed when the content has been clicked.",
      "docsTags": [
        {
          "name": "default",
          "text": "false"
        }
      ],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "enterAnimation",
      "type": "((baseEl: any, opts?: any) => Animation) | undefined",
      "complexType": {
        "original": "AnimationBuilder",
        "resolved": "((baseEl: any, opts?: any) => Animation) | undefined",
        "references": {
          "AnimationBuilder": {
            "location": "import",
            "path": "../../interface",
            "id": "src/interface.d.ts::AnimationBuilder"
          }
        }
      },
      "mutable": false,
      "attr": "enter-animation",
      "reflectToAttr": false,
      "docs": "Animation to use when the popover is presented.",
      "docsTags": [],
      "values": [
        {
          "type": "((baseEl: any, opts?: any) => Animation)"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "event",
      "type": "any",
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      },
      "mutable": false,
      "attr": "event",
      "reflectToAttr": false,
      "docs": "The event to pass to the popover animation.",
      "docsTags": [],
      "values": [
        {
          "type": "any"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "focusTrap",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "focus-trap",
      "reflectToAttr": false,
      "docs": "If `true`, focus will not be allowed to move outside of this overlay.\nIf `false`, focus will be allowed to move outside of the overlay.\n\nIn most scenarios this property should remain set to `true`. Setting\nthis property to `false` can cause severe accessibility issues as users\nrelying on assistive technologies may be able to move focus into\na confusing state. We recommend only setting this to `false` when\nabsolutely necessary.\n\nDevelopers may want to consider disabling focus trapping if this\noverlay presents a non-Ionic overlay from a 3rd party library.\nDevelopers would disable focus trapping on the Ionic overlay\nwhen presenting the 3rd party overlay and then re-enable\nfocus trapping when dismissing the 3rd party overlay and moving\nfocus back to the Ionic overlay.",
      "docsTags": [
        {
          "name": "default",
          "text": "true"
        }
      ],
      "default": "true",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "htmlAttributes",
      "type": "undefined | { [key: string]: any; }",
      "complexType": {
        "original": "{ [key: string]: any }",
        "resolved": "undefined | { [key: string]: any; }",
        "references": {}
      },
      "mutable": false,
      "attr": "html-attributes",
      "reflectToAttr": false,
      "docs": "Additional attributes to pass to the popover.",
      "docsTags": [],
      "values": [
        {
          "type": "undefined"
        },
        {
          "type": "{ [key: string]: any; }"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "isOpen",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "is-open",
      "reflectToAttr": false,
      "docs": "If `true`, the popover will open. If `false`, the popover will close.\nUse this if you need finer grained control over presentation, otherwise\njust use the popoverController or the `trigger` property.\nNote: `isOpen` will not automatically be set back to `false` when\nthe popover dismisses. You will need to do that in your code.",
      "docsTags": [
        {
          "name": "default",
          "text": "false"
        }
      ],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "keepContentsMounted",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "keep-contents-mounted",
      "reflectToAttr": false,
      "docs": "If `true`, the component passed into `ion-popover` will\nautomatically be mounted when the popover is created. The\ncomponent will remain mounted even when the popover is dismissed.\nHowever, the component will be destroyed when the popover is\ndestroyed. This property is not reactive and should only be\nused when initially creating a popover.\n\nNote: This feature only applies to inline popovers in JavaScript\nframeworks such as Angular, React, and Vue.",
      "docsTags": [
        {
          "name": "default",
          "text": "false"
        }
      ],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "keyboardClose",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "keyboard-close",
      "reflectToAttr": false,
      "docs": "If `true`, the keyboard will be automatically dismissed when the overlay is presented.",
      "docsTags": [
        {
          "name": "default",
          "text": "true"
        }
      ],
      "default": "true",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "leaveAnimation",
      "type": "((baseEl: any, opts?: any) => Animation) | undefined",
      "complexType": {
        "original": "AnimationBuilder",
        "resolved": "((baseEl: any, opts?: any) => Animation) | undefined",
        "references": {
          "AnimationBuilder": {
            "location": "import",
            "path": "../../interface",
            "id": "src/interface.d.ts::AnimationBuilder"
          }
        }
      },
      "mutable": false,
      "attr": "leave-animation",
      "reflectToAttr": false,
      "docs": "Animation to use when the popover is dismissed.",
      "docsTags": [],
      "values": [
        {
          "type": "((baseEl: any, opts?: any) => Animation)"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "mode",
      "type": "\"ios\" | \"md\"",
      "mutable": false,
      "attr": "mode",
      "reflectToAttr": false,
      "docs": "The mode determines which platform styles to use.",
      "docsTags": [],
      "values": [
        {
          "value": "ios",
          "type": "string"
        },
        {
          "value": "md",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "reference",
      "type": "\"event\" | \"trigger\"",
      "complexType": {
        "original": "PositionReference",
        "resolved": "\"event\" | \"trigger\"",
        "references": {
          "PositionReference": {
            "location": "import",
            "path": "./popover-interface",
            "id": "src/components/popover/popover-interface.ts::PositionReference"
          }
        }
      },
      "mutable": false,
      "attr": "reference",
      "reflectToAttr": false,
      "docs": "Describes what to position the popover relative to.\nIf `\"trigger\"`, the popover will be positioned relative\nto the trigger button. If passing in an event, this is\ndetermined via event.target.\nIf `\"event\"`, the popover will be positioned relative\nto the x/y coordinates of the trigger action. If passing\nin an event, this is determined via event.clientX and event.clientY.",
      "docsTags": [
        {
          "name": "default",
          "text": "'trigger'"
        }
      ],
      "default": "'trigger'",
      "values": [
        {
          "value": "event",
          "type": "string"
        },
        {
          "value": "trigger",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "showBackdrop",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "show-backdrop",
      "reflectToAttr": false,
      "docs": "If `true`, a backdrop will be displayed behind the popover.\nThis property controls whether or not the backdrop\ndarkens the screen when the popover is presented.\nIt does not control whether or not the backdrop\nis active or present in the DOM.",
      "docsTags": [
        {
          "name": "default",
          "text": "true"
        }
      ],
      "default": "true",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "side",
      "type": "\"bottom\" | \"end\" | \"left\" | \"right\" | \"start\" | \"top\"",
      "complexType": {
        "original": "PositionSide",
        "resolved": "\"bottom\" | \"end\" | \"left\" | \"right\" | \"start\" | \"top\"",
        "references": {
          "PositionSide": {
            "location": "import",
            "path": "./popover-interface",
            "id": "src/components/popover/popover-interface.ts::PositionSide"
          }
        }
      },
      "mutable": false,
      "attr": "side",
      "reflectToAttr": false,
      "docs": "Describes which side of the `reference` point to position\nthe popover on. The `\"start\"` and `\"end\"` values are RTL-aware,\nand the `\"left\"` and `\"right\"` values are not.",
      "docsTags": [
        {
          "name": "default",
          "text": "'bottom'"
        }
      ],
      "default": "'bottom'",
      "values": [
        {
          "value": "bottom",
          "type": "string"
        },
        {
          "value": "end",
          "type": "string"
        },
        {
          "value": "left",
          "type": "string"
        },
        {
          "value": "right",
          "type": "string"
        },
        {
          "value": "start",
          "type": "string"
        },
        {
          "value": "top",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "size",
      "type": "\"auto\" | \"cover\"",
      "complexType": {
        "original": "PopoverSize",
        "resolved": "\"auto\" | \"cover\"",
        "references": {
          "PopoverSize": {
            "location": "import",
            "path": "./popover-interface",
            "id": "src/components/popover/popover-interface.ts::PopoverSize"
          }
        }
      },
      "mutable": false,
      "attr": "size",
      "reflectToAttr": false,
      "docs": "Describes how to calculate the popover width.\nIf `\"cover\"`, the popover width will match the width of the trigger.\nIf `\"auto\"`, the popover width will be set to a static default value.",
      "docsTags": [
        {
          "name": "default",
          "text": "'auto'"
        }
      ],
      "default": "'auto'",
      "values": [
        {
          "value": "auto",
          "type": "string"
        },
        {
          "value": "cover",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "translucent",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "translucent",
      "reflectToAttr": false,
      "docs": "If `true`, the popover will be translucent.\nOnly applies when the mode is `\"ios\"` and the device supports\n[`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).",
      "docsTags": [
        {
          "name": "default",
          "text": "false"
        }
      ],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "trigger",
      "type": "string | undefined",
      "complexType": {
        "original": "string | undefined",
        "resolved": "string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "trigger",
      "reflectToAttr": false,
      "docs": "An ID corresponding to the trigger element that\ncauses the popover to open. Use the `trigger-action`\nproperty to customize the interaction that results in\nthe popover opening.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "triggerAction",
      "type": "\"click\" | \"context-menu\" | \"hover\"",
      "complexType": {
        "original": "TriggerAction",
        "resolved": "\"click\" | \"context-menu\" | \"hover\"",
        "references": {
          "TriggerAction": {
            "location": "import",
            "path": "./popover-interface",
            "id": "src/components/popover/popover-interface.ts::TriggerAction"
          }
        }
      },
      "mutable": false,
      "attr": "trigger-action",
      "reflectToAttr": false,
      "docs": "Describes what kind of interaction with the trigger that\nshould cause the popover to open. Does not apply when the `trigger`\nproperty is `undefined`.\nIf `\"click\"`, the popover will be presented when the trigger is left clicked.\nIf `\"hover\"`, the popover will be presented when a pointer hovers over the trigger.\nIf `\"context-menu\"`, the popover will be presented when the trigger is right\nclicked on desktop and long pressed on mobile. This will also prevent your\ndevice's normal context menu from appearing.",
      "docsTags": [
        {
          "name": "default",
          "text": "'click'"
        }
      ],
      "default": "'click'",
      "values": [
        {
          "value": "click",
          "type": "string"
        },
        {
          "value": "context-menu",
          "type": "string"
        },
        {
          "value": "hover",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    }
  ],
  "methods": [
    {
      "name": "dismiss",
      "returns": {
        "type": "Promise<boolean>",
        "docs": ""
      },
      "complexType": {
        "signature": "(data?: any, role?: string, dismissParentPopover?: boolean) => Promise<boolean>",
        "parameters": [
          {
            "name": "data",
            "type": "any",
            "docs": "Any data to emit in the dismiss events."
          },
          {
            "name": "role",
            "type": "string | undefined",
            "docs": "The role of the element that is dismissing the popover. For example, 'cancel' or 'backdrop'."
          },
          {
            "name": "dismissParentPopover",
            "type": "boolean",
            "docs": "If `true`, dismissing this popover will also dismiss\na parent popover if this popover is nested. Defaults to `true`.\n\nThis is a no-op if the overlay has not been presented yet. If you want\nto remove an overlay from the DOM that was never presented, use the\n[remove](https://developer.mozilla.org/en-US/docs/Web/API/Element/remove) method."
          }
        ],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          },
          "PopoverDismissOptions": {
            "location": "global",
            "id": "global::PopoverDismissOptions"
          }
        },
        "return": "Promise<boolean>"
      },
      "signature": "dismiss(data?: any, role?: string, dismissParentPopover?: boolean) => Promise<boolean>",
      "parameters": [
        {
          "name": "data",
          "type": "any",
          "docs": "Any data to emit in the dismiss events."
        },
        {
          "name": "role",
          "type": "string | undefined",
          "docs": "The role of the element that is dismissing the popover. For example, 'cancel' or 'backdrop'."
        },
        {
          "name": "dismissParentPopover",
          "type": "boolean",
          "docs": "If `true`, dismissing this popover will also dismiss\na parent popover if this popover is nested. Defaults to `true`.\n\nThis is a no-op if the overlay has not been presented yet. If you want\nto remove an overlay from the DOM that was never presented, use the\n[remove](https://developer.mozilla.org/en-US/docs/Web/API/Element/remove) method."
        }
      ],
      "docs": "Dismiss the popover overlay after it has been presented.",
      "docsTags": [
        {
          "name": "param",
          "text": "data Any data to emit in the dismiss events."
        },
        {
          "name": "param",
          "text": "role The role of the element that is dismissing the popover. For example, 'cancel' or 'backdrop'."
        },
        {
          "name": "param",
          "text": "dismissParentPopover If `true`, dismissing this popover will also dismiss\na parent popover if this popover is nested. Defaults to `true`.\n\nThis is a no-op if the overlay has not been presented yet. If you want\nto remove an overlay from the DOM that was never presented, use the\n[remove](https://developer.mozilla.org/en-US/docs/Web/API/Element/remove) method."
        }
      ]
    },
    {
      "name": "onDidDismiss",
      "returns": {
        "type": "Promise<OverlayEventDetail<T>>",
        "docs": ""
      },
      "complexType": {
        "signature": "<T = any>() => Promise<OverlayEventDetail<T>>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          },
          "OverlayEventDetail": {
            "location": "import",
            "path": "../../utils/overlays-interface",
            "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
          },
          "T": {
            "location": "global",
            "id": "global::T"
          }
        },
        "return": "Promise<OverlayEventDetail<T>>"
      },
      "signature": "onDidDismiss<T = any>() => Promise<OverlayEventDetail<T>>",
      "parameters": [],
      "docs": "Returns a promise that resolves when the popover did dismiss.",
      "docsTags": []
    },
    {
      "name": "onWillDismiss",
      "returns": {
        "type": "Promise<OverlayEventDetail<T>>",
        "docs": ""
      },
      "complexType": {
        "signature": "<T = any>() => Promise<OverlayEventDetail<T>>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          },
          "OverlayEventDetail": {
            "location": "import",
            "path": "../../utils/overlays-interface",
            "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
          },
          "T": {
            "location": "global",
            "id": "global::T"
          }
        },
        "return": "Promise<OverlayEventDetail<T>>"
      },
      "signature": "onWillDismiss<T = any>() => Promise<OverlayEventDetail<T>>",
      "parameters": [],
      "docs": "Returns a promise that resolves when the popover will dismiss.",
      "docsTags": []
    },
    {
      "name": "present",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "complexType": {
        "signature": "(event?: MouseEvent | TouchEvent | PointerEvent | CustomEvent) => Promise<void>",
        "parameters": [
          {
            "name": "event",
            "type": "MouseEvent | PointerEvent | TouchEvent | CustomEvent<any> | undefined",
            "docs": ""
          }
        ],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          },
          "MouseEvent": {
            "location": "global",
            "id": "global::MouseEvent"
          },
          "TouchEvent": {
            "location": "global",
            "id": "global::TouchEvent"
          },
          "PointerEvent": {
            "location": "global",
            "id": "global::PointerEvent"
          },
          "CustomEvent": {
            "location": "global",
            "id": "global::CustomEvent"
          },
          "PopoverPresentOptions": {
            "location": "global",
            "id": "global::PopoverPresentOptions"
          }
        },
        "return": "Promise<void>"
      },
      "signature": "present(event?: MouseEvent | TouchEvent | PointerEvent | CustomEvent) => Promise<void>",
      "parameters": [
        {
          "name": "event",
          "type": "MouseEvent | PointerEvent | TouchEvent | CustomEvent<any> | undefined",
          "docs": ""
        }
      ],
      "docs": "Present the popover overlay after it has been created.\nDevelopers can pass a mouse, touch, or pointer event\nto position the popover relative to where that event\nwas dispatched.",
      "docsTags": []
    }
  ],
  "events": [
    {
      "event": "didDismiss",
      "detail": "OverlayEventDetail<any>",
      "bubbles": true,
      "complexType": {
        "original": "OverlayEventDetail",
        "resolved": "OverlayEventDetail<any>",
        "references": {
          "OverlayEventDetail": {
            "location": "import",
            "path": "../../utils/overlays-interface",
            "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted after the popover has dismissed.\nShorthand for ionPopoverDidDismiss.",
      "docsTags": []
    },
    {
      "event": "didPresent",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted after the popover has presented.\nShorthand for ionPopoverWillDismiss.",
      "docsTags": []
    },
    {
      "event": "ionPopoverDidDismiss",
      "detail": "OverlayEventDetail<any>",
      "bubbles": true,
      "complexType": {
        "original": "OverlayEventDetail",
        "resolved": "OverlayEventDetail<any>",
        "references": {
          "OverlayEventDetail": {
            "location": "import",
            "path": "../../utils/overlays-interface",
            "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted after the popover has dismissed.",
      "docsTags": []
    },
    {
      "event": "ionPopoverDidPresent",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted after the popover has presented.",
      "docsTags": []
    },
    {
      "event": "ionPopoverWillDismiss",
      "detail": "OverlayEventDetail<any>",
      "bubbles": true,
      "complexType": {
        "original": "OverlayEventDetail",
        "resolved": "OverlayEventDetail<any>",
        "references": {
          "OverlayEventDetail": {
            "location": "import",
            "path": "../../utils/overlays-interface",
            "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted before the popover has dismissed.",
      "docsTags": []
    },
    {
      "event": "ionPopoverWillPresent",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted before the popover has presented.",
      "docsTags": []
    },
    {
      "event": "willDismiss",
      "detail": "OverlayEventDetail<any>",
      "bubbles": true,
      "complexType": {
        "original": "OverlayEventDetail",
        "resolved": "OverlayEventDetail<any>",
        "references": {
          "OverlayEventDetail": {
            "location": "import",
            "path": "../../utils/overlays-interface",
            "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted before the popover has dismissed.\nShorthand for ionPopoverWillDismiss.",
      "docsTags": []
    },
    {
      "event": "willPresent",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted before the popover has presented.\nShorthand for ionPopoverWillPresent.",
      "docsTags": []
    }
  ],
  "listeners": [],
  "styles": [
    {
      "name": "--backdrop-opacity",
      "annotation": "prop",
      "docs": "Opacity of the backdrop",
      "mode": "ios"
    },
    {
      "name": "--backdrop-opacity",
      "annotation": "prop",
      "docs": "Opacity of the backdrop",
      "mode": "md"
    },
    {
      "name": "--background",
      "annotation": "prop",
      "docs": "Background of the popover",
      "mode": "ios"
    },
    {
      "name": "--background",
      "annotation": "prop",
      "docs": "Background of the popover",
      "mode": "md"
    },
    {
      "name": "--box-shadow",
      "annotation": "prop",
      "docs": "Box shadow of the popover",
      "mode": "ios"
    },
    {
      "name": "--box-shadow",
      "annotation": "prop",
      "docs": "Box shadow of the popover",
      "mode": "md"
    },
    {
      "name": "--height",
      "annotation": "prop",
      "docs": "Height of the popover",
      "mode": "ios"
    },
    {
      "name": "--height",
      "annotation": "prop",
      "docs": "Height of the popover",
      "mode": "md"
    },
    {
      "name": "--max-height",
      "annotation": "prop",
      "docs": "Maximum height of the popover",
      "mode": "ios"
    },
    {
      "name": "--max-height",
      "annotation": "prop",
      "docs": "Maximum height of the popover",
      "mode": "md"
    },
    {
      "name": "--max-width",
      "annotation": "prop",
      "docs": "Maximum width of the popover",
      "mode": "ios"
    },
    {
      "name": "--max-width",
      "annotation": "prop",
      "docs": "Maximum width of the popover",
      "mode": "md"
    },
    {
      "name": "--min-height",
      "annotation": "prop",
      "docs": "Minimum height of the popover",
      "mode": "ios"
    },
    {
      "name": "--min-height",
      "annotation": "prop",
      "docs": "Minimum height of the popover",
      "mode": "md"
    },
    {
      "name": "--min-width",
      "annotation": "prop",
      "docs": "Minimum width of the popover",
      "mode": "ios"
    },
    {
      "name": "--min-width",
      "annotation": "prop",
      "docs": "Minimum width of the popover",
      "mode": "md"
    },
    {
      "name": "--offset-x",
      "annotation": "prop",
      "docs": "The amount to move the popover by on the x-axis",
      "mode": "ios"
    },
    {
      "name": "--offset-x",
      "annotation": "prop",
      "docs": "The amount to move the popover by on the x-axis",
      "mode": "md"
    },
    {
      "name": "--offset-y",
      "annotation": "prop",
      "docs": "The amount to move the popover by on the y-axis",
      "mode": "ios"
    },
    {
      "name": "--offset-y",
      "annotation": "prop",
      "docs": "The amount to move the popover by on the y-axis",
      "mode": "md"
    },
    {
      "name": "--width",
      "annotation": "prop",
      "docs": "Width of the popover",
      "mode": "ios"
    },
    {
      "name": "--width",
      "annotation": "prop",
      "docs": "Width of the popover",
      "mode": "md"
    }
  ],
  "slots": [
    {
      "name": "",
      "docs": "Content is placed inside of the `.popover-content` element."
    }
  ],
  "parts": [
    {
      "name": "arrow",
      "docs": "The arrow that points to the reference element. Only applies on `ios` mode."
    },
    {
      "name": "backdrop",
      "docs": "The `ion-backdrop` element."
    },
    {
      "name": "content",
      "docs": "The wrapper element for the default slot."
    }
  ],
  "dependents": [
    "ion-datetime",
    "ion-select"
  ],
  "dependencies": [
    "ion-backdrop"
  ],
  "dependencyGraph": {
    "ion-popover": [
      "ion-backdrop"
    ],
    "ion-datetime": [
      "ion-popover"
    ],
    "ion-select": [
      "ion-popover"
    ]
  }
}