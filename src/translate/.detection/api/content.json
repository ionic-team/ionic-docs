{
  "filePath": "src/components/content/content.tsx",
  "encapsulation": "shadow",
  "tag": "ion-content",
  "docs": "",
  "docsTags": [
    {
      "name": "slot",
      "text": "- Content is placed in the scrollable area if provided without a slot."
    },
    {
      "name": "slot",
      "text": "fixed - Should be used for fixed content that should not scroll."
    },
    {
      "name": "part",
      "text": "background - The background of the content."
    },
    {
      "name": "part",
      "text": "scroll - The scrollable container of the content."
    }
  ],
  "usage": {},
  "props": [
    {
      "name": "color",
      "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
      "complexType": {
        "original": "Color",
        "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
        "references": {
          "Color": {
            "location": "import",
            "path": "../../interface",
            "id": "src/interface.d.ts::Color"
          }
        }
      },
      "mutable": false,
      "attr": "color",
      "reflectToAttr": true,
      "docs": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
      "docsTags": [],
      "values": [
        {
          "value": "danger",
          "type": "string"
        },
        {
          "value": "dark",
          "type": "string"
        },
        {
          "value": "light",
          "type": "string"
        },
        {
          "value": "medium",
          "type": "string"
        },
        {
          "value": "primary",
          "type": "string"
        },
        {
          "value": "secondary",
          "type": "string"
        },
        {
          "value": "success",
          "type": "string"
        },
        {
          "value": "tertiary",
          "type": "string"
        },
        {
          "value": "warning",
          "type": "string"
        },
        {
          "type": "string & Record<never, never>"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "forceOverscroll",
      "type": "boolean | undefined",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean | undefined",
        "references": {}
      },
      "mutable": true,
      "attr": "force-overscroll",
      "reflectToAttr": false,
      "docs": "If `true` and the content does not cause an overflow scroll, the scroll interaction will cause a bounce.\nIf the content exceeds the bounds of ionContent, nothing will change.\nNote, this does not disable the system bounce on iOS. That is an OS level setting.",
      "docsTags": [],
      "values": [
        {
          "type": "boolean"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "fullscreen",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "fullscreen",
      "reflectToAttr": false,
      "docs": "If `true`, the content will scroll behind the headers\nand footers. This effect can easily be seen by setting the toolbar\nto transparent.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "scrollEvents",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "scroll-events",
      "reflectToAttr": false,
      "docs": "Because of performance reasons, ionScroll events are disabled by default, in order to enable them\nand start listening from (ionScroll), set this property to `true`.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "scrollX",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "scroll-x",
      "reflectToAttr": false,
      "docs": "If you want to enable the content scrolling in the X axis, set this property to `true`.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "scrollY",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "scroll-y",
      "reflectToAttr": false,
      "docs": "If you want to disable the content scrolling in the Y axis, set this property to `false`.",
      "docsTags": [],
      "default": "true",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    }
  ],
  "methods": [
    {
      "name": "getScrollElement",
      "returns": {
        "type": "Promise<HTMLElement>",
        "docs": ""
      },
      "complexType": {
        "signature": "() => Promise<HTMLElement>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          },
          "HTMLElement": {
            "location": "global",
            "id": "global::HTMLElement"
          }
        },
        "return": "Promise<HTMLElement>"
      },
      "signature": "getScrollElement() => Promise<HTMLElement>",
      "parameters": [],
      "docs": "Get the element where the actual scrolling takes place.\nThis element can be used to subscribe to `scroll` events or manually modify\n`scrollTop`. However, it's recommended to use the API provided by `ion-content`:\n\ni.e. Using `ionScroll`, `ionScrollStart`, `ionScrollEnd` for scrolling events\nand `scrollToPoint()` to scroll the content into a certain point.",
      "docsTags": []
    },
    {
      "name": "scrollByPoint",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "complexType": {
        "signature": "(x: number, y: number, duration: number) => Promise<void>",
        "parameters": [
          {
            "tags": [
              {
                "name": "param",
                "text": "x The amount to scroll by on the horizontal axis."
              }
            ],
            "text": "The amount to scroll by on the horizontal axis."
          },
          {
            "tags": [
              {
                "name": "param",
                "text": "y The amount to scroll by on the vertical axis."
              }
            ],
            "text": "The amount to scroll by on the vertical axis."
          },
          {
            "tags": [
              {
                "name": "param",
                "text": "duration The amount of time to take scrolling by that amount."
              }
            ],
            "text": "The amount of time to take scrolling by that amount."
          }
        ],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          }
        },
        "return": "Promise<void>"
      },
      "signature": "scrollByPoint(x: number, y: number, duration: number) => Promise<void>",
      "parameters": [],
      "docs": "Scroll by a specified X/Y distance in the component.",
      "docsTags": [
        {
          "name": "param",
          "text": "x The amount to scroll by on the horizontal axis."
        },
        {
          "name": "param",
          "text": "y The amount to scroll by on the vertical axis."
        },
        {
          "name": "param",
          "text": "duration The amount of time to take scrolling by that amount."
        }
      ]
    },
    {
      "name": "scrollToBottom",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "complexType": {
        "signature": "(duration?: number) => Promise<void>",
        "parameters": [
          {
            "tags": [
              {
                "name": "param",
                "text": "duration The amount of time to take scrolling to the bottom. Defaults to `0`."
              }
            ],
            "text": "The amount of time to take scrolling to the bottom. Defaults to `0`."
          }
        ],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          }
        },
        "return": "Promise<void>"
      },
      "signature": "scrollToBottom(duration?: number) => Promise<void>",
      "parameters": [],
      "docs": "Scroll to the bottom of the component.",
      "docsTags": [
        {
          "name": "param",
          "text": "duration The amount of time to take scrolling to the bottom. Defaults to `0`."
        }
      ]
    },
    {
      "name": "scrollToPoint",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "complexType": {
        "signature": "(x: number | undefined | null, y: number | undefined | null, duration?: number) => Promise<void>",
        "parameters": [
          {
            "tags": [
              {
                "name": "param",
                "text": "x The point to scroll to on the horizontal axis."
              }
            ],
            "text": "The point to scroll to on the horizontal axis."
          },
          {
            "tags": [
              {
                "name": "param",
                "text": "y The point to scroll to on the vertical axis."
              }
            ],
            "text": "The point to scroll to on the vertical axis."
          },
          {
            "tags": [
              {
                "name": "param",
                "text": "duration The amount of time to take scrolling to that point. Defaults to `0`."
              }
            ],
            "text": "The amount of time to take scrolling to that point. Defaults to `0`."
          }
        ],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          }
        },
        "return": "Promise<void>"
      },
      "signature": "scrollToPoint(x: number | undefined | null, y: number | undefined | null, duration?: number) => Promise<void>",
      "parameters": [],
      "docs": "Scroll to a specified X/Y location in the component.",
      "docsTags": [
        {
          "name": "param",
          "text": "x The point to scroll to on the horizontal axis."
        },
        {
          "name": "param",
          "text": "y The point to scroll to on the vertical axis."
        },
        {
          "name": "param",
          "text": "duration The amount of time to take scrolling to that point. Defaults to `0`."
        }
      ]
    },
    {
      "name": "scrollToTop",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "complexType": {
        "signature": "(duration?: number) => Promise<void>",
        "parameters": [
          {
            "tags": [
              {
                "name": "param",
                "text": "duration The amount of time to take scrolling to the top. Defaults to `0`."
              }
            ],
            "text": "The amount of time to take scrolling to the top. Defaults to `0`."
          }
        ],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          }
        },
        "return": "Promise<void>"
      },
      "signature": "scrollToTop(duration?: number) => Promise<void>",
      "parameters": [],
      "docs": "Scroll to the top of the component.",
      "docsTags": [
        {
          "name": "param",
          "text": "duration The amount of time to take scrolling to the top. Defaults to `0`."
        }
      ]
    }
  ],
  "events": [
    {
      "event": "ionScroll",
      "detail": "ScrollDetail",
      "bubbles": true,
      "complexType": {
        "original": "ScrollDetail",
        "resolved": "ScrollDetail",
        "references": {
          "ScrollDetail": {
            "location": "import",
            "path": "./content-interface",
            "id": "src/components/content/content-interface.ts::ScrollDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted while scrolling. This event is disabled by default.\nSet `scrollEvents` to `true` to enable.",
      "docsTags": []
    },
    {
      "event": "ionScrollEnd",
      "detail": "ScrollBaseDetail",
      "bubbles": true,
      "complexType": {
        "original": "ScrollBaseDetail",
        "resolved": "ScrollBaseDetail",
        "references": {
          "ScrollBaseDetail": {
            "location": "import",
            "path": "./content-interface",
            "id": "src/components/content/content-interface.ts::ScrollBaseDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the scroll has ended. This event is disabled by default.\nSet `scrollEvents` to `true` to enable.",
      "docsTags": []
    },
    {
      "event": "ionScrollStart",
      "detail": "ScrollBaseDetail",
      "bubbles": true,
      "complexType": {
        "original": "ScrollBaseDetail",
        "resolved": "ScrollBaseDetail",
        "references": {
          "ScrollBaseDetail": {
            "location": "import",
            "path": "./content-interface",
            "id": "src/components/content/content-interface.ts::ScrollBaseDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the scroll has started. This event is disabled by default.\nSet `scrollEvents` to `true` to enable.",
      "docsTags": []
    }
  ],
  "listeners": [
    {
      "event": "resize",
      "target": "window",
      "capture": false,
      "passive": true
    }
  ],
  "styles": [
    {
      "name": "--background",
      "annotation": "prop",
      "docs": "Background of the content"
    },
    {
      "name": "--color",
      "annotation": "prop",
      "docs": "Color of the content"
    },
    {
      "name": "--keyboard-offset",
      "annotation": "prop",
      "docs": "Keyboard offset of the content"
    },
    {
      "name": "--offset-bottom",
      "annotation": "prop",
      "docs": "Offset bottom of the content"
    },
    {
      "name": "--offset-top",
      "annotation": "prop",
      "docs": "Offset top of the content"
    },
    {
      "name": "--padding-bottom",
      "annotation": "prop",
      "docs": "Bottom padding of the content"
    },
    {
      "name": "--padding-end",
      "annotation": "prop",
      "docs": "Right padding if direction is left-to-right, and left padding if direction is right-to-left of the content"
    },
    {
      "name": "--padding-start",
      "annotation": "prop",
      "docs": "Left padding if direction is left-to-right, and right padding if direction is right-to-left of the content"
    },
    {
      "name": "--padding-top",
      "annotation": "prop",
      "docs": "Top padding of the content"
    }
  ],
  "slots": [
    {
      "name": "",
      "docs": "Content is placed in the scrollable area if provided without a slot."
    },
    {
      "name": "fixed",
      "docs": "Should be used for fixed content that should not scroll."
    }
  ],
  "parts": [
    {
      "name": "background",
      "docs": "The background of the content."
    },
    {
      "name": "scroll",
      "docs": "The scrollable container of the content."
    }
  ],
  "dependents": [],
  "dependencies": [],
  "dependencyGraph": {}
}