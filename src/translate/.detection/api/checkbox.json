{
  "filePath": "src/components/checkbox/checkbox.tsx",
  "encapsulation": "shadow",
  "tag": "ion-checkbox",
  "docs": "",
  "docsTags": [
    {
      "name": "virtualProp",
      "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
    },
    {
      "name": "slot",
      "text": "- The label text to associate with the checkbox. Use the \"labelPlacement\" property to control where the label is placed relative to the checkbox."
    },
    {
      "name": "part",
      "text": "container - The container for the checkbox mark."
    },
    {
      "name": "part",
      "text": "label - The label text describing the checkbox."
    },
    {
      "name": "part",
      "text": "mark - The checkmark used to indicate the checked state."
    },
    {
      "name": "part",
      "text": "supporting-text - Supporting text displayed beneath the checkbox label."
    },
    {
      "name": "part",
      "text": "helper-text - Supporting text displayed beneath the checkbox label when the checkbox is valid."
    },
    {
      "name": "part",
      "text": "error-text - Supporting text displayed beneath the checkbox label when the checkbox is invalid and touched."
    }
  ],
  "usage": {},
  "props": [
    {
      "name": "alignment",
      "type": "\"center\" | \"start\" | undefined",
      "complexType": {
        "original": "'start' | 'center'",
        "resolved": "\"center\" | \"start\" | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "alignment",
      "reflectToAttr": false,
      "docs": "How to control the alignment of the checkbox and label on the cross axis.\n`\"start\"`: The label and control will appear on the left of the cross axis in LTR, and on the right side in RTL.\n`\"center\"`: The label and control will appear at the center of the cross axis in both LTR and RTL.\nSetting this property will change the checkbox `display` to `block`.",
      "docsTags": [],
      "values": [
        {
          "value": "center",
          "type": "string"
        },
        {
          "value": "start",
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "checked",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": true,
      "attr": "checked",
      "reflectToAttr": false,
      "docs": "If `true`, the checkbox is selected.",
      "docsTags": [
        {
          "name": "default",
          "text": "false"
        }
      ],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "color",
      "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
      "complexType": {
        "original": "Color",
        "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
        "references": {
          "Color": {
            "location": "import",
            "path": "../../interface",
            "id": "src/interface.d.ts::Color"
          }
        }
      },
      "mutable": false,
      "attr": "color",
      "reflectToAttr": true,
      "docs": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
      "docsTags": [],
      "values": [
        {
          "value": "danger",
          "type": "string"
        },
        {
          "value": "dark",
          "type": "string"
        },
        {
          "value": "light",
          "type": "string"
        },
        {
          "value": "medium",
          "type": "string"
        },
        {
          "value": "primary",
          "type": "string"
        },
        {
          "value": "secondary",
          "type": "string"
        },
        {
          "value": "success",
          "type": "string"
        },
        {
          "value": "tertiary",
          "type": "string"
        },
        {
          "value": "warning",
          "type": "string"
        },
        {
          "type": "string & Record<never, never>"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "disabled",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "disabled",
      "reflectToAttr": false,
      "docs": "If `true`, the user cannot interact with the checkbox.",
      "docsTags": [
        {
          "name": "default",
          "text": "false"
        }
      ],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "errorText",
      "type": "string | undefined",
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "error-text",
      "reflectToAttr": false,
      "docs": "Text that is placed under the checkbox label and displayed when an error is detected.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "helperText",
      "type": "string | undefined",
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "helper-text",
      "reflectToAttr": false,
      "docs": "Text that is placed under the checkbox label and displayed when no error is detected.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "indeterminate",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": true,
      "attr": "indeterminate",
      "reflectToAttr": false,
      "docs": "If `true`, the checkbox will visually appear as indeterminate.",
      "docsTags": [
        {
          "name": "default",
          "text": "false"
        }
      ],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "justify",
      "type": "\"end\" | \"space-between\" | \"start\" | undefined",
      "complexType": {
        "original": "'start' | 'end' | 'space-between'",
        "resolved": "\"end\" | \"space-between\" | \"start\" | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "justify",
      "reflectToAttr": false,
      "docs": "How to pack the label and checkbox within a line.\n`\"start\"`: The label and checkbox will appear on the left in LTR and\non the right in RTL.\n`\"end\"`: The label and checkbox will appear on the right in LTR and\non the left in RTL.\n`\"space-between\"`: The label and checkbox will appear on opposite\nends of the line with space between the two elements.\nSetting this property will change the checkbox `display` to `block`.",
      "docsTags": [],
      "values": [
        {
          "value": "end",
          "type": "string"
        },
        {
          "value": "space-between",
          "type": "string"
        },
        {
          "value": "start",
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "labelPlacement",
      "type": "\"end\" | \"fixed\" | \"stacked\" | \"start\"",
      "complexType": {
        "original": "'start' | 'end' | 'fixed' | 'stacked'",
        "resolved": "\"end\" | \"fixed\" | \"stacked\" | \"start\"",
        "references": {}
      },
      "mutable": false,
      "attr": "label-placement",
      "reflectToAttr": false,
      "docs": "Where to place the label relative to the checkbox.\n`\"start\"`: The label will appear to the left of the checkbox in LTR and to the right in RTL.\n`\"end\"`: The label will appear to the right of the checkbox in LTR and to the left in RTL.\n`\"fixed\"`: The label has the same behavior as `\"start\"` except it also has a fixed width. Long text will be truncated with ellipses (\"...\").\n`\"stacked\"`: The label will appear above the checkbox regardless of the direction. The alignment of the label can be controlled with the `alignment` property.",
      "docsTags": [
        {
          "name": "default",
          "text": "'start'"
        }
      ],
      "default": "'start'",
      "values": [
        {
          "value": "end",
          "type": "string"
        },
        {
          "value": "fixed",
          "type": "string"
        },
        {
          "value": "stacked",
          "type": "string"
        },
        {
          "value": "start",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "mode",
      "type": "\"ios\" | \"md\"",
      "mutable": false,
      "attr": "mode",
      "reflectToAttr": false,
      "docs": "The mode determines which platform styles to use.",
      "docsTags": [],
      "values": [
        {
          "value": "ios",
          "type": "string"
        },
        {
          "value": "md",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "name",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "name",
      "reflectToAttr": false,
      "docs": "The name of the control, which is submitted with the form data.",
      "docsTags": [
        {
          "name": "default",
          "text": "this.inputId"
        }
      ],
      "default": "this.inputId",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "required",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "required",
      "reflectToAttr": false,
      "docs": "If true, screen readers will announce it as a required field. This property\nworks only for accessibility purposes, it will not prevent the form from\nsubmitting if the value is invalid.",
      "docsTags": [
        {
          "name": "default",
          "text": "false"
        }
      ],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "value",
      "type": "any",
      "complexType": {
        "original": "any | null",
        "resolved": "any",
        "references": {}
      },
      "mutable": false,
      "attr": "value",
      "reflectToAttr": false,
      "docs": "The value of the checkbox does not mean if it's checked or not, use the `checked`\nproperty for that.\n\nThe value of a checkbox is analogous to the value of an `<input type=\"checkbox\">`,\nit's only used when the checkbox participates in a native `<form>`.",
      "docsTags": [
        {
          "name": "default",
          "text": "'on'"
        }
      ],
      "default": "'on'",
      "values": [
        {
          "type": "any"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    }
  ],
  "methods": [],
  "events": [
    {
      "event": "ionBlur",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the checkbox loses focus.",
      "docsTags": []
    },
    {
      "event": "ionChange",
      "detail": "CheckboxChangeEventDetail<any>",
      "bubbles": true,
      "complexType": {
        "original": "CheckboxChangeEventDetail",
        "resolved": "CheckboxChangeEventDetail<any>",
        "references": {
          "CheckboxChangeEventDetail": {
            "location": "import",
            "path": "./checkbox-interface",
            "id": "src/components/checkbox/checkbox-interface.ts::CheckboxChangeEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the checked property has changed as a result of a user action such as a click.\n\nThis event will not emit when programmatically setting the `checked` property.",
      "docsTags": []
    },
    {
      "event": "ionFocus",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the checkbox has focus.",
      "docsTags": []
    }
  ],
  "listeners": [],
  "styles": [
    {
      "name": "--border-color",
      "annotation": "prop",
      "docs": "Border color of the checkbox icon",
      "mode": "ios"
    },
    {
      "name": "--border-color",
      "annotation": "prop",
      "docs": "Border color of the checkbox icon",
      "mode": "md"
    },
    {
      "name": "--border-color-checked",
      "annotation": "prop",
      "docs": "Border color of the checkbox icon when checked",
      "mode": "ios"
    },
    {
      "name": "--border-color-checked",
      "annotation": "prop",
      "docs": "Border color of the checkbox icon when checked",
      "mode": "md"
    },
    {
      "name": "--border-radius",
      "annotation": "prop",
      "docs": "Border radius of the checkbox icon",
      "mode": "ios"
    },
    {
      "name": "--border-radius",
      "annotation": "prop",
      "docs": "Border radius of the checkbox icon",
      "mode": "md"
    },
    {
      "name": "--border-style",
      "annotation": "prop",
      "docs": "Border style of the checkbox icon",
      "mode": "ios"
    },
    {
      "name": "--border-style",
      "annotation": "prop",
      "docs": "Border style of the checkbox icon",
      "mode": "md"
    },
    {
      "name": "--border-width",
      "annotation": "prop",
      "docs": "Border width of the checkbox icon",
      "mode": "ios"
    },
    {
      "name": "--border-width",
      "annotation": "prop",
      "docs": "Border width of the checkbox icon",
      "mode": "md"
    },
    {
      "name": "--checkbox-background",
      "annotation": "prop",
      "docs": "Background of the checkbox icon",
      "mode": "ios"
    },
    {
      "name": "--checkbox-background",
      "annotation": "prop",
      "docs": "Background of the checkbox icon",
      "mode": "md"
    },
    {
      "name": "--checkbox-background-checked",
      "annotation": "prop",
      "docs": "Background of the checkbox icon when checked",
      "mode": "ios"
    },
    {
      "name": "--checkbox-background-checked",
      "annotation": "prop",
      "docs": "Background of the checkbox icon when checked",
      "mode": "md"
    },
    {
      "name": "--checkmark-color",
      "annotation": "prop",
      "docs": "Color of the checkbox checkmark when checked",
      "mode": "ios"
    },
    {
      "name": "--checkmark-color",
      "annotation": "prop",
      "docs": "Color of the checkbox checkmark when checked",
      "mode": "md"
    },
    {
      "name": "--checkmark-width",
      "annotation": "prop",
      "docs": "Stroke width of the checkbox checkmark",
      "mode": "ios"
    },
    {
      "name": "--checkmark-width",
      "annotation": "prop",
      "docs": "Stroke width of the checkbox checkmark",
      "mode": "md"
    },
    {
      "name": "--size",
      "annotation": "prop",
      "docs": "Size of the checkbox icon",
      "mode": "ios"
    },
    {
      "name": "--size",
      "annotation": "prop",
      "docs": "Size of the checkbox icon",
      "mode": "md"
    },
    {
      "name": "--transition",
      "annotation": "prop",
      "docs": "Transition of the checkbox icon",
      "mode": "ios"
    },
    {
      "name": "--transition",
      "annotation": "prop",
      "docs": "Transition of the checkbox icon",
      "mode": "md"
    }
  ],
  "slots": [
    {
      "name": "",
      "docs": "The label text to associate with the checkbox. Use the \"labelPlacement\" property to control where the label is placed relative to the checkbox."
    }
  ],
  "parts": [
    {
      "name": "container",
      "docs": "The container for the checkbox mark."
    },
    {
      "name": "error-text",
      "docs": "Supporting text displayed beneath the checkbox label when the checkbox is invalid and touched."
    },
    {
      "name": "helper-text",
      "docs": "Supporting text displayed beneath the checkbox label when the checkbox is valid."
    },
    {
      "name": "label",
      "docs": "The label text describing the checkbox."
    },
    {
      "name": "mark",
      "docs": "The checkmark used to indicate the checked state."
    },
    {
      "name": "supporting-text",
      "docs": "Supporting text displayed beneath the checkbox label."
    }
  ],
  "dependents": [
    "ion-select-modal",
    "ion-select-popover"
  ],
  "dependencies": [],
  "dependencyGraph": {
    "ion-select-modal": [
      "ion-checkbox"
    ],
    "ion-select-popover": [
      "ion-checkbox"
    ]
  }
}