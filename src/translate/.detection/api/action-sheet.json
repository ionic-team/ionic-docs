{
  "filePath": "src/components/action-sheet/action-sheet.tsx",
  "encapsulation": "scoped",
  "tag": "ion-action-sheet",
  "docs": "",
  "docsTags": [
    {
      "name": "virtualProp",
      "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
    }
  ],
  "usage": {},
  "props": [
    {
      "name": "animated",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "animated",
      "reflectToAttr": false,
      "docs": "If `true`, the action sheet will animate.",
      "docsTags": [
        {
          "name": "default",
          "text": "true"
        }
      ],
      "default": "true",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "backdropDismiss",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "backdrop-dismiss",
      "reflectToAttr": false,
      "docs": "If `true`, the action sheet will be dismissed when the backdrop is clicked.",
      "docsTags": [
        {
          "name": "default",
          "text": "true"
        }
      ],
      "default": "true",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "buttons",
      "type": "(string | ActionSheetButton<any>)[]",
      "complexType": {
        "original": "(ActionSheetButton | string)[]",
        "resolved": "(string | ActionSheetButton<any>)[]",
        "references": {
          "ActionSheetButton": {
            "location": "import",
            "path": "./action-sheet-interface",
            "id": "src/components/action-sheet/action-sheet-interface.ts::ActionSheetButton"
          }
        }
      },
      "mutable": false,
      "attr": "buttons",
      "reflectToAttr": false,
      "docs": "An array of buttons for the action sheet.",
      "docsTags": [
        {
          "name": "default",
          "text": "[]"
        }
      ],
      "default": "[]",
      "values": [
        {
          "type": "(string"
        },
        {
          "type": "ActionSheetButton<any>)[]"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "cssClass",
      "type": "string | string[] | undefined",
      "complexType": {
        "original": "string | string[]",
        "resolved": "string | string[] | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "css-class",
      "reflectToAttr": false,
      "docs": "Additional classes to apply for custom CSS. If multiple classes are\nprovided they should be separated by spaces.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "string[]"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "enterAnimation",
      "type": "((baseEl: any, opts?: any) => Animation) | undefined",
      "complexType": {
        "original": "AnimationBuilder",
        "resolved": "((baseEl: any, opts?: any) => Animation) | undefined",
        "references": {
          "AnimationBuilder": {
            "location": "import",
            "path": "../../interface",
            "id": "src/interface.d.ts::AnimationBuilder"
          }
        }
      },
      "mutable": false,
      "attr": "enter-animation",
      "reflectToAttr": false,
      "docs": "Animation to use when the action sheet is presented.",
      "docsTags": [],
      "values": [
        {
          "type": "((baseEl: any, opts?: any) => Animation)"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "header",
      "type": "string | undefined",
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "header",
      "reflectToAttr": false,
      "docs": "Title for the action sheet.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "htmlAttributes",
      "type": "undefined | { [key: string]: any; }",
      "complexType": {
        "original": "{ [key: string]: any }",
        "resolved": "undefined | { [key: string]: any; }",
        "references": {}
      },
      "mutable": false,
      "attr": "html-attributes",
      "reflectToAttr": false,
      "docs": "Additional attributes to pass to the action sheet.",
      "docsTags": [],
      "values": [
        {
          "type": "undefined"
        },
        {
          "type": "{ [key: string]: any; }"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "isOpen",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "is-open",
      "reflectToAttr": false,
      "docs": "If `true`, the action sheet will open. If `false`, the action sheet will close.\nUse this if you need finer grained control over presentation, otherwise\njust use the actionSheetController or the `trigger` property.\nNote: `isOpen` will not automatically be set back to `false` when\nthe action sheet dismisses. You will need to do that in your code.",
      "docsTags": [
        {
          "name": "default",
          "text": "false"
        }
      ],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "keyboardClose",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "keyboard-close",
      "reflectToAttr": false,
      "docs": "If `true`, the keyboard will be automatically dismissed when the overlay is presented.",
      "docsTags": [
        {
          "name": "default",
          "text": "true"
        }
      ],
      "default": "true",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "leaveAnimation",
      "type": "((baseEl: any, opts?: any) => Animation) | undefined",
      "complexType": {
        "original": "AnimationBuilder",
        "resolved": "((baseEl: any, opts?: any) => Animation) | undefined",
        "references": {
          "AnimationBuilder": {
            "location": "import",
            "path": "../../interface",
            "id": "src/interface.d.ts::AnimationBuilder"
          }
        }
      },
      "mutable": false,
      "attr": "leave-animation",
      "reflectToAttr": false,
      "docs": "Animation to use when the action sheet is dismissed.",
      "docsTags": [],
      "values": [
        {
          "type": "((baseEl: any, opts?: any) => Animation)"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "mode",
      "type": "\"ios\" | \"md\"",
      "mutable": false,
      "attr": "mode",
      "reflectToAttr": false,
      "docs": "The mode determines which platform styles to use.",
      "docsTags": [],
      "values": [
        {
          "value": "ios",
          "type": "string"
        },
        {
          "value": "md",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "subHeader",
      "type": "string | undefined",
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "sub-header",
      "reflectToAttr": false,
      "docs": "Subtitle for the action sheet.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "translucent",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "translucent",
      "reflectToAttr": false,
      "docs": "If `true`, the action sheet will be translucent.\nOnly applies when the mode is `\"ios\"` and the device supports\n[`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).",
      "docsTags": [
        {
          "name": "default",
          "text": "false"
        }
      ],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "trigger",
      "type": "string | undefined",
      "complexType": {
        "original": "string | undefined",
        "resolved": "string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "trigger",
      "reflectToAttr": false,
      "docs": "An ID corresponding to the trigger element that\ncauses the action sheet to open when clicked.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    }
  ],
  "methods": [
    {
      "name": "dismiss",
      "returns": {
        "type": "Promise<boolean>",
        "docs": ""
      },
      "complexType": {
        "signature": "(data?: any, role?: string) => Promise<boolean>",
        "parameters": [
          {
            "name": "data",
            "type": "any",
            "docs": "Any data to emit in the dismiss events."
          },
          {
            "name": "role",
            "type": "string | undefined",
            "docs": "The role of the element that is dismissing the action sheet.\nThis can be useful in a button handler for determining which button was\nclicked to dismiss the action sheet.\nSome examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n\nThis is a no-op if the overlay has not been presented yet. If you want\nto remove an overlay from the DOM that was never presented, use the\n[remove](https://developer.mozilla.org/en-US/docs/Web/API/Element/remove) method."
          }
        ],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          }
        },
        "return": "Promise<boolean>"
      },
      "signature": "dismiss(data?: any, role?: string) => Promise<boolean>",
      "parameters": [
        {
          "name": "data",
          "type": "any",
          "docs": "Any data to emit in the dismiss events."
        },
        {
          "name": "role",
          "type": "string | undefined",
          "docs": "The role of the element that is dismissing the action sheet.\nThis can be useful in a button handler for determining which button was\nclicked to dismiss the action sheet.\nSome examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n\nThis is a no-op if the overlay has not been presented yet. If you want\nto remove an overlay from the DOM that was never presented, use the\n[remove](https://developer.mozilla.org/en-US/docs/Web/API/Element/remove) method."
        }
      ],
      "docs": "Dismiss the action sheet overlay after it has been presented.",
      "docsTags": [
        {
          "name": "param",
          "text": "data Any data to emit in the dismiss events."
        },
        {
          "name": "param",
          "text": "role The role of the element that is dismissing the action sheet.\nThis can be useful in a button handler for determining which button was\nclicked to dismiss the action sheet.\nSome examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n\nThis is a no-op if the overlay has not been presented yet. If you want\nto remove an overlay from the DOM that was never presented, use the\n[remove](https://developer.mozilla.org/en-US/docs/Web/API/Element/remove) method."
        }
      ]
    },
    {
      "name": "onDidDismiss",
      "returns": {
        "type": "Promise<OverlayEventDetail<T>>",
        "docs": ""
      },
      "complexType": {
        "signature": "<T = any>() => Promise<OverlayEventDetail<T>>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          },
          "OverlayEventDetail": {
            "location": "import",
            "path": "../../utils/overlays-interface",
            "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
          },
          "T": {
            "location": "global",
            "id": "global::T"
          }
        },
        "return": "Promise<OverlayEventDetail<T>>"
      },
      "signature": "onDidDismiss<T = any>() => Promise<OverlayEventDetail<T>>",
      "parameters": [],
      "docs": "Returns a promise that resolves when the action sheet did dismiss.",
      "docsTags": []
    },
    {
      "name": "onWillDismiss",
      "returns": {
        "type": "Promise<OverlayEventDetail<T>>",
        "docs": ""
      },
      "complexType": {
        "signature": "<T = any>() => Promise<OverlayEventDetail<T>>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          },
          "OverlayEventDetail": {
            "location": "import",
            "path": "../../utils/overlays-interface",
            "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
          },
          "T": {
            "location": "global",
            "id": "global::T"
          }
        },
        "return": "Promise<OverlayEventDetail<T>>"
      },
      "signature": "onWillDismiss<T = any>() => Promise<OverlayEventDetail<T>>",
      "parameters": [],
      "docs": "Returns a promise that resolves when the action sheet will dismiss.",
      "docsTags": []
    },
    {
      "name": "present",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          }
        },
        "return": "Promise<void>"
      },
      "signature": "present() => Promise<void>",
      "parameters": [],
      "docs": "Present the action sheet overlay after it has been created.",
      "docsTags": []
    }
  ],
  "events": [
    {
      "event": "didDismiss",
      "detail": "OverlayEventDetail<any>",
      "bubbles": true,
      "complexType": {
        "original": "OverlayEventDetail",
        "resolved": "OverlayEventDetail<any>",
        "references": {
          "OverlayEventDetail": {
            "location": "import",
            "path": "../../utils/overlays-interface",
            "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted after the action sheet has dismissed.\nShorthand for ionActionSheetDidDismiss.",
      "docsTags": []
    },
    {
      "event": "didPresent",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted after the action sheet has presented.\nShorthand for ionActionSheetWillDismiss.",
      "docsTags": []
    },
    {
      "event": "ionActionSheetDidDismiss",
      "detail": "OverlayEventDetail<any>",
      "bubbles": true,
      "complexType": {
        "original": "OverlayEventDetail",
        "resolved": "OverlayEventDetail<any>",
        "references": {
          "OverlayEventDetail": {
            "location": "import",
            "path": "../../utils/overlays-interface",
            "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted after the action sheet has dismissed.",
      "docsTags": []
    },
    {
      "event": "ionActionSheetDidPresent",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted after the action sheet has presented.",
      "docsTags": []
    },
    {
      "event": "ionActionSheetWillDismiss",
      "detail": "OverlayEventDetail<any>",
      "bubbles": true,
      "complexType": {
        "original": "OverlayEventDetail",
        "resolved": "OverlayEventDetail<any>",
        "references": {
          "OverlayEventDetail": {
            "location": "import",
            "path": "../../utils/overlays-interface",
            "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted before the action sheet has dismissed.",
      "docsTags": []
    },
    {
      "event": "ionActionSheetWillPresent",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted before the action sheet has presented.",
      "docsTags": []
    },
    {
      "event": "willDismiss",
      "detail": "OverlayEventDetail<any>",
      "bubbles": true,
      "complexType": {
        "original": "OverlayEventDetail",
        "resolved": "OverlayEventDetail<any>",
        "references": {
          "OverlayEventDetail": {
            "location": "import",
            "path": "../../utils/overlays-interface",
            "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted before the action sheet has dismissed.\nShorthand for ionActionSheetWillDismiss.",
      "docsTags": []
    },
    {
      "event": "willPresent",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted before the action sheet has presented.\nShorthand for ionActionSheetWillPresent.",
      "docsTags": []
    }
  ],
  "listeners": [],
  "styles": [
    {
      "name": "--backdrop-opacity",
      "annotation": "prop",
      "docs": "Opacity of the backdrop",
      "mode": "ios"
    },
    {
      "name": "--backdrop-opacity",
      "annotation": "prop",
      "docs": "Opacity of the backdrop",
      "mode": "md"
    },
    {
      "name": "--background",
      "annotation": "prop",
      "docs": "Background of the action sheet group",
      "mode": "ios"
    },
    {
      "name": "--background",
      "annotation": "prop",
      "docs": "Background of the action sheet group",
      "mode": "md"
    },
    {
      "name": "--button-background",
      "annotation": "prop",
      "docs": "Background of the action sheet button",
      "mode": "ios"
    },
    {
      "name": "--button-background",
      "annotation": "prop",
      "docs": "Background of the action sheet button",
      "mode": "md"
    },
    {
      "name": "--button-background-activated",
      "annotation": "prop",
      "docs": "Background of the action sheet button when pressed. Note: setting this will interfere with the Material Design ripple.",
      "mode": "ios"
    },
    {
      "name": "--button-background-activated",
      "annotation": "prop",
      "docs": "Background of the action sheet button when pressed. Note: setting this will interfere with the Material Design ripple.",
      "mode": "md"
    },
    {
      "name": "--button-background-activated-opacity",
      "annotation": "prop",
      "docs": "Opacity of the action sheet button background when pressed",
      "mode": "ios"
    },
    {
      "name": "--button-background-activated-opacity",
      "annotation": "prop",
      "docs": "Opacity of the action sheet button background when pressed",
      "mode": "md"
    },
    {
      "name": "--button-background-focused",
      "annotation": "prop",
      "docs": "Background of the action sheet button when tabbed to",
      "mode": "ios"
    },
    {
      "name": "--button-background-focused",
      "annotation": "prop",
      "docs": "Background of the action sheet button when tabbed to",
      "mode": "md"
    },
    {
      "name": "--button-background-focused-opacity",
      "annotation": "prop",
      "docs": "Opacity of the action sheet button background when tabbed to",
      "mode": "ios"
    },
    {
      "name": "--button-background-focused-opacity",
      "annotation": "prop",
      "docs": "Opacity of the action sheet button background when tabbed to",
      "mode": "md"
    },
    {
      "name": "--button-background-hover",
      "annotation": "prop",
      "docs": "Background of the action sheet button on hover",
      "mode": "ios"
    },
    {
      "name": "--button-background-hover",
      "annotation": "prop",
      "docs": "Background of the action sheet button on hover",
      "mode": "md"
    },
    {
      "name": "--button-background-hover-opacity",
      "annotation": "prop",
      "docs": "Opacity of the action sheet button background on hover",
      "mode": "ios"
    },
    {
      "name": "--button-background-hover-opacity",
      "annotation": "prop",
      "docs": "Opacity of the action sheet button background on hover",
      "mode": "md"
    },
    {
      "name": "--button-background-selected",
      "annotation": "prop",
      "docs": "Background of the selected action sheet button",
      "mode": "ios"
    },
    {
      "name": "--button-background-selected",
      "annotation": "prop",
      "docs": "Background of the selected action sheet button",
      "mode": "md"
    },
    {
      "name": "--button-background-selected-opacity",
      "annotation": "prop",
      "docs": "Opacity of the selected action sheet button background",
      "mode": "ios"
    },
    {
      "name": "--button-background-selected-opacity",
      "annotation": "prop",
      "docs": "Opacity of the selected action sheet button background",
      "mode": "md"
    },
    {
      "name": "--button-color",
      "annotation": "prop",
      "docs": "Color of the action sheet button",
      "mode": "ios"
    },
    {
      "name": "--button-color",
      "annotation": "prop",
      "docs": "Color of the action sheet button",
      "mode": "md"
    },
    {
      "name": "--button-color-activated",
      "annotation": "prop",
      "docs": "Color of the action sheet button when pressed",
      "mode": "ios"
    },
    {
      "name": "--button-color-activated",
      "annotation": "prop",
      "docs": "Color of the action sheet button when pressed",
      "mode": "md"
    },
    {
      "name": "--button-color-disabled",
      "annotation": "prop",
      "docs": "Color of the selected action sheet button when disabled",
      "mode": "ios"
    },
    {
      "name": "--button-color-disabled",
      "annotation": "prop",
      "docs": "Color of the selected action sheet button when disabled",
      "mode": "md"
    },
    {
      "name": "--button-color-focused",
      "annotation": "prop",
      "docs": "Color of the action sheet button when tabbed to",
      "mode": "ios"
    },
    {
      "name": "--button-color-focused",
      "annotation": "prop",
      "docs": "Color of the action sheet button when tabbed to",
      "mode": "md"
    },
    {
      "name": "--button-color-hover",
      "annotation": "prop",
      "docs": "Color of the action sheet button on hover",
      "mode": "ios"
    },
    {
      "name": "--button-color-hover",
      "annotation": "prop",
      "docs": "Color of the action sheet button on hover",
      "mode": "md"
    },
    {
      "name": "--button-color-selected",
      "annotation": "prop",
      "docs": "Color of the selected action sheet button",
      "mode": "ios"
    },
    {
      "name": "--button-color-selected",
      "annotation": "prop",
      "docs": "Color of the selected action sheet button",
      "mode": "md"
    },
    {
      "name": "--color",
      "annotation": "prop",
      "docs": "Color of the action sheet text",
      "mode": "ios"
    },
    {
      "name": "--color",
      "annotation": "prop",
      "docs": "Color of the action sheet text",
      "mode": "md"
    },
    {
      "name": "--height",
      "annotation": "prop",
      "docs": "height of the action sheet",
      "mode": "ios"
    },
    {
      "name": "--height",
      "annotation": "prop",
      "docs": "height of the action sheet",
      "mode": "md"
    },
    {
      "name": "--max-height",
      "annotation": "prop",
      "docs": "Maximum height of the action sheet",
      "mode": "ios"
    },
    {
      "name": "--max-height",
      "annotation": "prop",
      "docs": "Maximum height of the action sheet",
      "mode": "md"
    },
    {
      "name": "--max-width",
      "annotation": "prop",
      "docs": "Maximum width of the action sheet",
      "mode": "ios"
    },
    {
      "name": "--max-width",
      "annotation": "prop",
      "docs": "Maximum width of the action sheet",
      "mode": "md"
    },
    {
      "name": "--min-height",
      "annotation": "prop",
      "docs": "Minimum height of the action sheet",
      "mode": "ios"
    },
    {
      "name": "--min-height",
      "annotation": "prop",
      "docs": "Minimum height of the action sheet",
      "mode": "md"
    },
    {
      "name": "--min-width",
      "annotation": "prop",
      "docs": "Minimum width of the action sheet",
      "mode": "ios"
    },
    {
      "name": "--min-width",
      "annotation": "prop",
      "docs": "Minimum width of the action sheet",
      "mode": "md"
    },
    {
      "name": "--width",
      "annotation": "prop",
      "docs": "Width of the action sheet",
      "mode": "ios"
    },
    {
      "name": "--width",
      "annotation": "prop",
      "docs": "Width of the action sheet",
      "mode": "md"
    }
  ],
  "slots": [],
  "parts": [],
  "dependents": [
    "ion-select"
  ],
  "dependencies": [
    "ion-backdrop",
    "ion-icon",
    "ion-ripple-effect"
  ],
  "dependencyGraph": {
    "ion-action-sheet": [
      "ion-backdrop",
      "ion-icon",
      "ion-ripple-effect"
    ],
    "ion-select": [
      "ion-action-sheet"
    ]
  }
}