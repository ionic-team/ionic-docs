{
  "filePath": "src/components/route/route.tsx",
  "encapsulation": "none",
  "tag": "ion-route",
  "docs": "",
  "docsTags": [],
  "usage": {},
  "props": [
    {
      "name": "beforeEnter",
      "type": "(() => NavigationHookResult | Promise<NavigationHookResult>) | undefined",
      "complexType": {
        "original": "NavigationHookCallback",
        "resolved": "(() => NavigationHookResult | Promise<NavigationHookResult>) | undefined",
        "references": {
          "NavigationHookCallback": {
            "location": "import",
            "path": "./route-interface",
            "id": "src/components/route/route-interface.ts::NavigationHookCallback"
          }
        }
      },
      "mutable": false,
      "attr": "before-enter",
      "reflectToAttr": false,
      "docs": "A navigation hook that is fired when the route tries to enter.\nReturning `true` allows the navigation to proceed, while returning\n`false` causes it to be cancelled. Returning a `NavigationHookOptions`\nobject causes the router to redirect to the path specified.",
      "docsTags": [],
      "values": [
        {
          "type": "(() => NavigationHookResult"
        },
        {
          "type": "Promise<NavigationHookResult>)"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "beforeLeave",
      "type": "(() => NavigationHookResult | Promise<NavigationHookResult>) | undefined",
      "complexType": {
        "original": "NavigationHookCallback",
        "resolved": "(() => NavigationHookResult | Promise<NavigationHookResult>) | undefined",
        "references": {
          "NavigationHookCallback": {
            "location": "import",
            "path": "./route-interface",
            "id": "src/components/route/route-interface.ts::NavigationHookCallback"
          }
        }
      },
      "mutable": false,
      "attr": "before-leave",
      "reflectToAttr": false,
      "docs": "A navigation hook that is fired when the route tries to leave.\nReturning `true` allows the navigation to proceed, while returning\n`false` causes it to be cancelled. Returning a `NavigationHookOptions`\nobject causes the router to redirect to the path specified.",
      "docsTags": [],
      "values": [
        {
          "type": "(() => NavigationHookResult"
        },
        {
          "type": "Promise<NavigationHookResult>)"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "component",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "component",
      "reflectToAttr": false,
      "docs": "Name of the component to load/select in the navigation outlet (`ion-tabs`, `ion-nav`)\nwhen the route matches.\n\nThe value of this property is not always the tagname of the component to load,\nin `ion-tabs` it actually refers to the name of the `ion-tab` to select.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": true,
      "getter": false,
      "setter": false
    },
    {
      "name": "componentProps",
      "type": "undefined | { [key: string]: any; }",
      "complexType": {
        "original": "{ [key: string]: any }",
        "resolved": "undefined | { [key: string]: any; }",
        "references": {}
      },
      "mutable": false,
      "attr": "component-props",
      "reflectToAttr": false,
      "docs": "A key value `{ 'red': true, 'blue': 'white'}` containing props that should be passed\nto the defined component when rendered.",
      "docsTags": [],
      "values": [
        {
          "type": "undefined"
        },
        {
          "type": "{ [key: string]: any; }"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "url",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "url",
      "reflectToAttr": false,
      "docs": "Relative path that needs to match in order for this route to apply.\n\nAccepts paths similar to expressjs so that you can define parameters\nin the url /foo/:bar where bar would be available in incoming props.",
      "docsTags": [
        {
          "name": "default",
          "text": "''"
        }
      ],
      "default": "''",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    }
  ],
  "methods": [],
  "events": [
    {
      "event": "ionRouteDataChanged",
      "detail": "any",
      "bubbles": true,
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Used internally by `ion-router` to know when this route did change.",
      "docsTags": []
    }
  ],
  "listeners": [],
  "styles": [],
  "slots": [],
  "parts": [],
  "dependents": [],
  "dependencies": [],
  "dependencyGraph": {}
}