{
  "filePath": "src/components/alert/alert.tsx",
  "encapsulation": "scoped",
  "tag": "ion-alert",
  "docs": "",
  "docsTags": [
    {
      "name": "virtualProp",
      "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
    }
  ],
  "usage": {},
  "props": [
    {
      "name": "animated",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "animated",
      "reflectToAttr": false,
      "docs": "If `true`, the alert will animate.",
      "docsTags": [
        {
          "name": "default",
          "text": "true"
        }
      ],
      "default": "true",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "backdropDismiss",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "backdrop-dismiss",
      "reflectToAttr": false,
      "docs": "If `true`, the alert will be dismissed when the backdrop is clicked.",
      "docsTags": [
        {
          "name": "default",
          "text": "true"
        }
      ],
      "default": "true",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "buttons",
      "type": "(string | AlertButton)[]",
      "complexType": {
        "original": "(AlertButton | string)[]",
        "resolved": "(string | AlertButton)[]",
        "references": {
          "AlertButton": {
            "location": "import",
            "path": "./alert-interface",
            "id": "src/components/alert/alert-interface.ts::AlertButton"
          }
        }
      },
      "mutable": false,
      "attr": "buttons",
      "reflectToAttr": false,
      "docs": "Array of buttons to be added to the alert.",
      "docsTags": [
        {
          "name": "default",
          "text": "[]"
        }
      ],
      "default": "[]",
      "values": [
        {
          "type": "(string"
        },
        {
          "type": "AlertButton)[]"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "cssClass",
      "type": "string | string[] | undefined",
      "complexType": {
        "original": "string | string[]",
        "resolved": "string | string[] | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "css-class",
      "reflectToAttr": false,
      "docs": "Additional classes to apply for custom CSS. If multiple classes are\nprovided they should be separated by spaces.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "string[]"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "enterAnimation",
      "type": "((baseEl: any, opts?: any) => Animation) | undefined",
      "complexType": {
        "original": "AnimationBuilder",
        "resolved": "((baseEl: any, opts?: any) => Animation) | undefined",
        "references": {
          "AnimationBuilder": {
            "location": "import",
            "path": "../../interface",
            "id": "src/interface.d.ts::AnimationBuilder"
          }
        }
      },
      "mutable": false,
      "attr": "enter-animation",
      "reflectToAttr": false,
      "docs": "Animation to use when the alert is presented.",
      "docsTags": [],
      "values": [
        {
          "type": "((baseEl: any, opts?: any) => Animation)"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "header",
      "type": "string | undefined",
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "header",
      "reflectToAttr": false,
      "docs": "The main title in the heading of the alert.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "htmlAttributes",
      "type": "undefined | { [key: string]: any; }",
      "complexType": {
        "original": "{ [key: string]: any }",
        "resolved": "undefined | { [key: string]: any; }",
        "references": {}
      },
      "mutable": false,
      "attr": "html-attributes",
      "reflectToAttr": false,
      "docs": "Additional attributes to pass to the alert.",
      "docsTags": [],
      "values": [
        {
          "type": "undefined"
        },
        {
          "type": "{ [key: string]: any; }"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "inputs",
      "type": "AlertInput[]",
      "complexType": {
        "original": "AlertInput[]",
        "resolved": "AlertInput[]",
        "references": {
          "AlertInput": {
            "location": "import",
            "path": "./alert-interface",
            "id": "src/components/alert/alert-interface.ts::AlertInput"
          }
        }
      },
      "mutable": true,
      "attr": "inputs",
      "reflectToAttr": false,
      "docs": "Array of input to show in the alert.",
      "docsTags": [
        {
          "name": "default",
          "text": "[]"
        }
      ],
      "default": "[]",
      "values": [
        {
          "type": "AlertInput[]"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "isOpen",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "is-open",
      "reflectToAttr": false,
      "docs": "If `true`, the alert will open. If `false`, the alert will close.\nUse this if you need finer grained control over presentation, otherwise\njust use the alertController or the `trigger` property.\nNote: `isOpen` will not automatically be set back to `false` when\nthe alert dismisses. You will need to do that in your code.",
      "docsTags": [
        {
          "name": "default",
          "text": "false"
        }
      ],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "keyboardClose",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "keyboard-close",
      "reflectToAttr": false,
      "docs": "If `true`, the keyboard will be automatically dismissed when the overlay is presented.",
      "docsTags": [
        {
          "name": "default",
          "text": "true"
        }
      ],
      "default": "true",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "leaveAnimation",
      "type": "((baseEl: any, opts?: any) => Animation) | undefined",
      "complexType": {
        "original": "AnimationBuilder",
        "resolved": "((baseEl: any, opts?: any) => Animation) | undefined",
        "references": {
          "AnimationBuilder": {
            "location": "import",
            "path": "../../interface",
            "id": "src/interface.d.ts::AnimationBuilder"
          }
        }
      },
      "mutable": false,
      "attr": "leave-animation",
      "reflectToAttr": false,
      "docs": "Animation to use when the alert is dismissed.",
      "docsTags": [],
      "values": [
        {
          "type": "((baseEl: any, opts?: any) => Animation)"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "message",
      "type": "IonicSafeString | string | undefined",
      "complexType": {
        "original": "string | IonicSafeString",
        "resolved": "IonicSafeString | string | undefined",
        "references": {
          "IonicSafeString": {
            "location": "import",
            "path": "../../utils/sanitization",
            "id": "src/utils/sanitization/index.ts::IonicSafeString"
          }
        }
      },
      "mutable": false,
      "attr": "message",
      "reflectToAttr": false,
      "docs": "The main message to be displayed in the alert.\n`message` can accept either plaintext or HTML as a string.\nTo display characters normally reserved for HTML, they\nmust be escaped. For example `<Ionic>` would become\n`&lt;Ionic&gt;`\n\nFor more information: [Security Documentation](https://ionicframework.com/docs/faq/security)\n\nThis property accepts custom HTML as a string.\nContent is parsed as plaintext by default.\n`innerHTMLTemplatesEnabled` must be set to `true` in the Ionic config\nbefore custom HTML can be used.",
      "docsTags": [],
      "values": [
        {
          "type": "IonicSafeString"
        },
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "mode",
      "type": "\"ios\" | \"md\"",
      "mutable": false,
      "attr": "mode",
      "reflectToAttr": false,
      "docs": "The mode determines which platform styles to use.",
      "docsTags": [],
      "values": [
        {
          "value": "ios",
          "type": "string"
        },
        {
          "value": "md",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "subHeader",
      "type": "string | undefined",
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "sub-header",
      "reflectToAttr": false,
      "docs": "The subtitle in the heading of the alert. Displayed under the title.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "translucent",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "translucent",
      "reflectToAttr": false,
      "docs": "If `true`, the alert will be translucent.\nOnly applies when the mode is `\"ios\"` and the device supports\n[`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).",
      "docsTags": [
        {
          "name": "default",
          "text": "false"
        }
      ],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "trigger",
      "type": "string | undefined",
      "complexType": {
        "original": "string | undefined",
        "resolved": "string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "trigger",
      "reflectToAttr": false,
      "docs": "An ID corresponding to the trigger element that\ncauses the alert to open when clicked.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    }
  ],
  "methods": [
    {
      "name": "dismiss",
      "returns": {
        "type": "Promise<boolean>",
        "docs": ""
      },
      "complexType": {
        "signature": "(data?: any, role?: string) => Promise<boolean>",
        "parameters": [
          {
            "name": "data",
            "type": "any",
            "docs": "Any data to emit in the dismiss events."
          },
          {
            "name": "role",
            "type": "string | undefined",
            "docs": "The role of the element that is dismissing the alert.\nThis can be useful in a button handler for determining which button was\nclicked to dismiss the alert.\nSome examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n\nThis is a no-op if the overlay has not been presented yet. If you want\nto remove an overlay from the DOM that was never presented, use the\n[remove](https://developer.mozilla.org/en-US/docs/Web/API/Element/remove) method."
          }
        ],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          }
        },
        "return": "Promise<boolean>"
      },
      "signature": "dismiss(data?: any, role?: string) => Promise<boolean>",
      "parameters": [
        {
          "name": "data",
          "type": "any",
          "docs": "Any data to emit in the dismiss events."
        },
        {
          "name": "role",
          "type": "string | undefined",
          "docs": "The role of the element that is dismissing the alert.\nThis can be useful in a button handler for determining which button was\nclicked to dismiss the alert.\nSome examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n\nThis is a no-op if the overlay has not been presented yet. If you want\nto remove an overlay from the DOM that was never presented, use the\n[remove](https://developer.mozilla.org/en-US/docs/Web/API/Element/remove) method."
        }
      ],
      "docs": "Dismiss the alert overlay after it has been presented.",
      "docsTags": [
        {
          "name": "param",
          "text": "data Any data to emit in the dismiss events."
        },
        {
          "name": "param",
          "text": "role The role of the element that is dismissing the alert.\nThis can be useful in a button handler for determining which button was\nclicked to dismiss the alert.\nSome examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n\nThis is a no-op if the overlay has not been presented yet. If you want\nto remove an overlay from the DOM that was never presented, use the\n[remove](https://developer.mozilla.org/en-US/docs/Web/API/Element/remove) method."
        }
      ]
    },
    {
      "name": "onDidDismiss",
      "returns": {
        "type": "Promise<OverlayEventDetail<T>>",
        "docs": ""
      },
      "complexType": {
        "signature": "<T = any>() => Promise<OverlayEventDetail<T>>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          },
          "OverlayEventDetail": {
            "location": "import",
            "path": "../../utils/overlays-interface",
            "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
          },
          "T": {
            "location": "global",
            "id": "global::T"
          }
        },
        "return": "Promise<OverlayEventDetail<T>>"
      },
      "signature": "onDidDismiss<T = any>() => Promise<OverlayEventDetail<T>>",
      "parameters": [],
      "docs": "Returns a promise that resolves when the alert did dismiss.",
      "docsTags": []
    },
    {
      "name": "onWillDismiss",
      "returns": {
        "type": "Promise<OverlayEventDetail<T>>",
        "docs": ""
      },
      "complexType": {
        "signature": "<T = any>() => Promise<OverlayEventDetail<T>>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          },
          "OverlayEventDetail": {
            "location": "import",
            "path": "../../utils/overlays-interface",
            "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
          },
          "T": {
            "location": "global",
            "id": "global::T"
          }
        },
        "return": "Promise<OverlayEventDetail<T>>"
      },
      "signature": "onWillDismiss<T = any>() => Promise<OverlayEventDetail<T>>",
      "parameters": [],
      "docs": "Returns a promise that resolves when the alert will dismiss.",
      "docsTags": []
    },
    {
      "name": "present",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          },
          "HTMLButtonElement": {
            "location": "global",
            "id": "global::HTMLButtonElement"
          }
        },
        "return": "Promise<void>"
      },
      "signature": "present() => Promise<void>",
      "parameters": [],
      "docs": "Present the alert overlay after it has been created.",
      "docsTags": []
    }
  ],
  "events": [
    {
      "event": "didDismiss",
      "detail": "OverlayEventDetail<any>",
      "bubbles": true,
      "complexType": {
        "original": "OverlayEventDetail",
        "resolved": "OverlayEventDetail<any>",
        "references": {
          "OverlayEventDetail": {
            "location": "import",
            "path": "../../utils/overlays-interface",
            "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted after the alert has dismissed.\nShorthand for ionAlertDidDismiss.",
      "docsTags": []
    },
    {
      "event": "didPresent",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted after the alert has presented.\nShorthand for ionAlertWillDismiss.",
      "docsTags": []
    },
    {
      "event": "ionAlertDidDismiss",
      "detail": "OverlayEventDetail<any>",
      "bubbles": true,
      "complexType": {
        "original": "OverlayEventDetail",
        "resolved": "OverlayEventDetail<any>",
        "references": {
          "OverlayEventDetail": {
            "location": "import",
            "path": "../../utils/overlays-interface",
            "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted after the alert has dismissed.",
      "docsTags": []
    },
    {
      "event": "ionAlertDidPresent",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted after the alert has presented.",
      "docsTags": []
    },
    {
      "event": "ionAlertWillDismiss",
      "detail": "OverlayEventDetail<any>",
      "bubbles": true,
      "complexType": {
        "original": "OverlayEventDetail",
        "resolved": "OverlayEventDetail<any>",
        "references": {
          "OverlayEventDetail": {
            "location": "import",
            "path": "../../utils/overlays-interface",
            "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted before the alert has dismissed.",
      "docsTags": []
    },
    {
      "event": "ionAlertWillPresent",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted before the alert has presented.",
      "docsTags": []
    },
    {
      "event": "willDismiss",
      "detail": "OverlayEventDetail<any>",
      "bubbles": true,
      "complexType": {
        "original": "OverlayEventDetail",
        "resolved": "OverlayEventDetail<any>",
        "references": {
          "OverlayEventDetail": {
            "location": "import",
            "path": "../../utils/overlays-interface",
            "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted before the alert has dismissed.\nShorthand for ionAlertWillDismiss.",
      "docsTags": []
    },
    {
      "event": "willPresent",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted before the alert has presented.\nShorthand for ionAlertWillPresent.",
      "docsTags": []
    }
  ],
  "listeners": [
    {
      "event": "keydown",
      "target": "document",
      "capture": false,
      "passive": false
    }
  ],
  "styles": [
    {
      "name": "--backdrop-opacity",
      "annotation": "prop",
      "docs": "Opacity of the backdrop",
      "mode": "ios"
    },
    {
      "name": "--backdrop-opacity",
      "annotation": "prop",
      "docs": "Opacity of the backdrop",
      "mode": "md"
    },
    {
      "name": "--background",
      "annotation": "prop",
      "docs": "Background of the alert",
      "mode": "ios"
    },
    {
      "name": "--background",
      "annotation": "prop",
      "docs": "Background of the alert",
      "mode": "md"
    },
    {
      "name": "--height",
      "annotation": "prop",
      "docs": "Height of the alert",
      "mode": "ios"
    },
    {
      "name": "--height",
      "annotation": "prop",
      "docs": "Height of the alert",
      "mode": "md"
    },
    {
      "name": "--max-height",
      "annotation": "prop",
      "docs": "Maximum height of the alert",
      "mode": "ios"
    },
    {
      "name": "--max-height",
      "annotation": "prop",
      "docs": "Maximum height of the alert",
      "mode": "md"
    },
    {
      "name": "--max-width",
      "annotation": "prop",
      "docs": "Maximum width of the alert",
      "mode": "ios"
    },
    {
      "name": "--max-width",
      "annotation": "prop",
      "docs": "Maximum width of the alert",
      "mode": "md"
    },
    {
      "name": "--min-height",
      "annotation": "prop",
      "docs": "Minimum height of the alert",
      "mode": "ios"
    },
    {
      "name": "--min-height",
      "annotation": "prop",
      "docs": "Minimum height of the alert",
      "mode": "md"
    },
    {
      "name": "--min-width",
      "annotation": "prop",
      "docs": "Minimum width of the alert",
      "mode": "ios"
    },
    {
      "name": "--min-width",
      "annotation": "prop",
      "docs": "Minimum width of the alert",
      "mode": "md"
    },
    {
      "name": "--width",
      "annotation": "prop",
      "docs": "Width of the alert",
      "mode": "ios"
    },
    {
      "name": "--width",
      "annotation": "prop",
      "docs": "Width of the alert",
      "mode": "md"
    }
  ],
  "slots": [],
  "parts": [],
  "dependents": [
    "ion-select"
  ],
  "dependencies": [
    "ion-ripple-effect",
    "ion-backdrop"
  ],
  "dependencyGraph": {
    "ion-alert": [
      "ion-ripple-effect",
      "ion-backdrop"
    ],
    "ion-select": [
      "ion-alert"
    ]
  }
}