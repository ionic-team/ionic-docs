{
  "filePath": "src/components/router/router.tsx",
  "encapsulation": "none",
  "tag": "ion-router",
  "docs": "",
  "docsTags": [],
  "usage": {},
  "props": [
    {
      "name": "root",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "root",
      "reflectToAttr": false,
      "docs": "The root path to use when matching URLs. By default, this is set to \"/\", but you can specify\nan alternate prefix for all URL paths.",
      "docsTags": [
        {
          "name": "default",
          "text": "'/'"
        }
      ],
      "default": "'/'",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "useHash",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "use-hash",
      "reflectToAttr": false,
      "docs": "The router can work in two \"modes\":\n- With hash: `/index.html#/path/to/page`\n- Without hash: `/path/to/page`\n\nUsing one or another might depend in the requirements of your app and/or where it's deployed.\n\nUsually \"hash-less\" navigation works better for SEO and it's more user friendly too, but it might\nrequires additional server-side configuration in order to properly work.\n\nOn the other side hash-navigation is much easier to deploy, it even works over the file protocol.\n\nBy default, this property is `true`, change to `false` to allow hash-less URLs.",
      "docsTags": [
        {
          "name": "default",
          "text": "true"
        }
      ],
      "default": "true",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    }
  ],
  "methods": [
    {
      "name": "back",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          }
        },
        "return": "Promise<void>"
      },
      "signature": "back() => Promise<void>",
      "parameters": [],
      "docs": "Go back to previous page in the window.history.",
      "docsTags": []
    },
    {
      "name": "push",
      "returns": {
        "type": "Promise<boolean>",
        "docs": ""
      },
      "complexType": {
        "signature": "(path: string, direction?: RouterDirection, animation?: AnimationBuilder) => Promise<boolean>",
        "parameters": [
          {
            "name": "path",
            "type": "string",
            "docs": "The path to navigate to."
          },
          {
            "name": "direction",
            "type": "\"root\" | \"back\" | \"forward\"",
            "docs": "The direction of the animation. Defaults to `\"forward\"`."
          },
          {
            "name": "animation",
            "type": "AnimationBuilder | undefined",
            "docs": ""
          }
        ],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          },
          "RouterDirection": {
            "location": "import",
            "path": "./utils/interface",
            "id": "src/components/router/utils/interface.ts::RouterDirection"
          },
          "AnimationBuilder": {
            "location": "import",
            "path": "../../interface",
            "id": "src/interface.d.ts::AnimationBuilder"
          }
        },
        "return": "Promise<boolean>"
      },
      "signature": "push(path: string, direction?: RouterDirection, animation?: AnimationBuilder) => Promise<boolean>",
      "parameters": [
        {
          "name": "path",
          "type": "string",
          "docs": "The path to navigate to."
        },
        {
          "name": "direction",
          "type": "\"root\" | \"back\" | \"forward\"",
          "docs": "The direction of the animation. Defaults to `\"forward\"`."
        },
        {
          "name": "animation",
          "type": "AnimationBuilder | undefined",
          "docs": ""
        }
      ],
      "docs": "Navigate to the specified path.",
      "docsTags": [
        {
          "name": "param",
          "text": "path The path to navigate to."
        },
        {
          "name": "param",
          "text": "direction The direction of the animation. Defaults to `\"forward\"`."
        }
      ]
    }
  ],
  "events": [
    {
      "event": "ionRouteDidChange",
      "detail": "RouterEventDetail",
      "bubbles": true,
      "complexType": {
        "original": "RouterEventDetail",
        "resolved": "RouterEventDetail",
        "references": {
          "RouterEventDetail": {
            "location": "import",
            "path": "./utils/interface",
            "id": "src/components/router/utils/interface.ts::RouterEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the route had changed",
      "docsTags": []
    },
    {
      "event": "ionRouteWillChange",
      "detail": "RouterEventDetail",
      "bubbles": true,
      "complexType": {
        "original": "RouterEventDetail",
        "resolved": "RouterEventDetail",
        "references": {
          "RouterEventDetail": {
            "location": "import",
            "path": "./utils/interface",
            "id": "src/components/router/utils/interface.ts::RouterEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Event emitted when the route is about to change",
      "docsTags": []
    }
  ],
  "listeners": [
    {
      "event": "popstate",
      "target": "window",
      "capture": false,
      "passive": false
    },
    {
      "event": "ionBackButton",
      "target": "document",
      "capture": false,
      "passive": false
    }
  ],
  "styles": [],
  "slots": [],
  "parts": [],
  "dependents": [],
  "dependencies": [],
  "dependencyGraph": {}
}