{
  "filePath": "src/components/range/range.tsx",
  "encapsulation": "shadow",
  "tag": "ion-range",
  "docs": "",
  "docsTags": [
    {
      "name": "virtualProp",
      "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
    },
    {
      "name": "slot",
      "text": "label - The label text to associate with the range. Use the \"labelPlacement\" property to control where the label is placed relative to the range."
    },
    {
      "name": "slot",
      "text": "start - Content is placed to the left of the range slider in LTR, and to the right in RTL."
    },
    {
      "name": "slot",
      "text": "end - Content is placed to the right of the range slider in LTR, and to the left in RTL."
    },
    {
      "name": "part",
      "text": "tick - An inactive tick mark."
    },
    {
      "name": "part",
      "text": "tick-active - An active tick mark."
    },
    {
      "name": "part",
      "text": "pin - The counter that appears above a knob."
    },
    {
      "name": "part",
      "text": "knob - The handle that is used to drag the range."
    },
    {
      "name": "part",
      "text": "bar - The inactive part of the bar."
    },
    {
      "name": "part",
      "text": "bar-active - The active part of the bar."
    }
  ],
  "usage": {},
  "props": [
    {
      "name": "activeBarStart",
      "type": "number | undefined",
      "complexType": {
        "original": "number",
        "resolved": "number | undefined",
        "references": {}
      },
      "mutable": true,
      "attr": "active-bar-start",
      "reflectToAttr": false,
      "docs": "The start position of the range active bar. This feature is only available with a single knob (dualKnobs=\"false\").\nValid values are greater than or equal to the min value and less than or equal to the max value.",
      "docsTags": [],
      "values": [
        {
          "type": "number"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "color",
      "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
      "complexType": {
        "original": "Color",
        "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
        "references": {
          "Color": {
            "location": "import",
            "path": "../../interface",
            "id": "src/interface.d.ts::Color"
          }
        }
      },
      "mutable": false,
      "attr": "color",
      "reflectToAttr": true,
      "docs": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
      "docsTags": [],
      "values": [
        {
          "value": "danger",
          "type": "string"
        },
        {
          "value": "dark",
          "type": "string"
        },
        {
          "value": "light",
          "type": "string"
        },
        {
          "value": "medium",
          "type": "string"
        },
        {
          "value": "primary",
          "type": "string"
        },
        {
          "value": "secondary",
          "type": "string"
        },
        {
          "value": "success",
          "type": "string"
        },
        {
          "value": "tertiary",
          "type": "string"
        },
        {
          "value": "warning",
          "type": "string"
        },
        {
          "type": "string & Record<never, never>"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "debounce",
      "type": "number | undefined",
      "complexType": {
        "original": "number",
        "resolved": "number | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "debounce",
      "reflectToAttr": false,
      "docs": "How long, in milliseconds, to wait to trigger the\n`ionInput` event after each change in the range value.",
      "docsTags": [],
      "values": [
        {
          "type": "number"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "disabled",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "disabled",
      "reflectToAttr": false,
      "docs": "If `true`, the user cannot interact with the range.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "dualKnobs",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "dual-knobs",
      "reflectToAttr": false,
      "docs": "Show two knobs.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "label",
      "type": "string | undefined",
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "label",
      "reflectToAttr": false,
      "docs": "The text to display as the control's label. Use this over the `label` slot if\nyou only need plain text. The `label` property will take priority over the\n`label` slot if both are used.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "labelPlacement",
      "type": "\"end\" | \"fixed\" | \"stacked\" | \"start\"",
      "complexType": {
        "original": "'start' | 'end' | 'fixed' | 'stacked'",
        "resolved": "\"end\" | \"fixed\" | \"stacked\" | \"start\"",
        "references": {}
      },
      "mutable": false,
      "attr": "label-placement",
      "reflectToAttr": false,
      "docs": "Where to place the label relative to the range.\n`\"start\"`: The label will appear to the left of the range in LTR and to the right in RTL.\n`\"end\"`: The label will appear to the right of the range in LTR and to the left in RTL.\n`\"fixed\"`: The label has the same behavior as `\"start\"` except it also has a fixed width. Long text will be truncated with ellipses (\"...\").\n`\"stacked\"`: The label will appear above the range regardless of the direction.",
      "docsTags": [],
      "default": "'start'",
      "values": [
        {
          "value": "end",
          "type": "string"
        },
        {
          "value": "fixed",
          "type": "string"
        },
        {
          "value": "stacked",
          "type": "string"
        },
        {
          "value": "start",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "legacy",
      "type": "boolean | undefined",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "legacy",
      "reflectToAttr": false,
      "docs": "Set the `legacy` property to `true` to forcibly use the legacy form control markup.\nIonic will only opt components in to the modern form markup when they are\nusing either the `aria-label` attribute or the `label` property. As a result,\nthe `legacy` property should only be used as an escape hatch when you want to\navoid this automatic opt-in behavior.\nNote that this property will be removed in an upcoming major release\nof Ionic, and all form components will be opted-in to using the modern form markup.",
      "docsTags": [],
      "values": [
        {
          "type": "boolean"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "max",
      "type": "number",
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "mutable": false,
      "attr": "max",
      "reflectToAttr": false,
      "docs": "Maximum integer value of the range.",
      "docsTags": [],
      "default": "100",
      "values": [
        {
          "type": "number"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "min",
      "type": "number",
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "mutable": false,
      "attr": "min",
      "reflectToAttr": false,
      "docs": "Minimum integer value of the range.",
      "docsTags": [],
      "default": "0",
      "values": [
        {
          "type": "number"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "mode",
      "type": "\"ios\" | \"md\"",
      "mutable": false,
      "attr": "mode",
      "reflectToAttr": false,
      "docs": "The mode determines which platform styles to use.",
      "docsTags": [],
      "values": [
        {
          "value": "ios",
          "type": "string"
        },
        {
          "value": "md",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "name",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "name",
      "reflectToAttr": false,
      "docs": "The name of the control, which is submitted with the form data.",
      "docsTags": [],
      "default": "this.rangeId",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "pin",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "pin",
      "reflectToAttr": false,
      "docs": "If `true`, a pin with integer value is shown when the knob\nis pressed.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "pinFormatter",
      "type": "(value: number) => string | number",
      "complexType": {
        "original": "PinFormatter",
        "resolved": "(value: number) => string | number",
        "references": {
          "PinFormatter": {
            "location": "import",
            "path": "./range-interface",
            "id": "src/components/range/range-interface.ts::PinFormatter"
          }
        }
      },
      "mutable": false,
      "reflectToAttr": false,
      "docs": "A callback used to format the pin text.\nBy default the pin text is set to `Math.round(value)`.",
      "docsTags": [],
      "default": "(value: number): number => Math.round(value)",
      "values": [
        {
          "type": "(value: number) => string"
        },
        {
          "type": "number"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "snaps",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "snaps",
      "reflectToAttr": false,
      "docs": "If `true`, the knob snaps to tick marks evenly spaced based\non the step property value.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "step",
      "type": "number",
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "mutable": false,
      "attr": "step",
      "reflectToAttr": false,
      "docs": "Specifies the value granularity.",
      "docsTags": [],
      "default": "1",
      "values": [
        {
          "type": "number"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "ticks",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "ticks",
      "reflectToAttr": false,
      "docs": "If `true`, tick marks are displayed based on the step value.\nOnly applies when `snaps` is `true`.",
      "docsTags": [],
      "default": "true",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "value",
      "type": "number | { lower: number; upper: number; }",
      "complexType": {
        "original": "RangeValue",
        "resolved": "number | { lower: number; upper: number; }",
        "references": {
          "RangeValue": {
            "location": "import",
            "path": "./range-interface",
            "id": "src/components/range/range-interface.ts::RangeValue"
          }
        }
      },
      "mutable": true,
      "attr": "value",
      "reflectToAttr": false,
      "docs": "the value of the range.",
      "docsTags": [],
      "default": "0",
      "values": [
        {
          "type": "number"
        },
        {
          "type": "{ lower: number; upper: number; }"
        }
      ],
      "optional": false,
      "required": false
    }
  ],
  "methods": [],
  "events": [
    {
      "event": "ionBlur",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the range loses focus.",
      "docsTags": []
    },
    {
      "event": "ionChange",
      "detail": "RangeChangeEventDetail",
      "bubbles": true,
      "complexType": {
        "original": "RangeChangeEventDetail",
        "resolved": "RangeChangeEventDetail",
        "references": {
          "RangeChangeEventDetail": {
            "location": "import",
            "path": "./range-interface",
            "id": "src/components/range/range-interface.ts::RangeChangeEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "The `ionChange` event is fired for `<ion-range>` elements when the user\nmodifies the element's value:\n- When the user releases the knob after dragging;\n- When the user moves the knob with keyboard arrows\n\n`ionChange` is not fired when the value is changed programmatically.",
      "docsTags": []
    },
    {
      "event": "ionFocus",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the range has focus.",
      "docsTags": []
    },
    {
      "event": "ionInput",
      "detail": "RangeChangeEventDetail",
      "bubbles": true,
      "complexType": {
        "original": "RangeChangeEventDetail",
        "resolved": "RangeChangeEventDetail",
        "references": {
          "RangeChangeEventDetail": {
            "location": "import",
            "path": "./range-interface",
            "id": "src/components/range/range-interface.ts::RangeChangeEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "The `ionInput` event is fired for `<ion-range>` elements when the value\nis modified. Unlike `ionChange`, `ionInput` is fired continuously\nwhile the user is dragging the knob.",
      "docsTags": []
    },
    {
      "event": "ionKnobMoveEnd",
      "detail": "RangeKnobMoveEndEventDetail",
      "bubbles": true,
      "complexType": {
        "original": "RangeKnobMoveEndEventDetail",
        "resolved": "RangeKnobMoveEndEventDetail",
        "references": {
          "RangeKnobMoveEndEventDetail": {
            "location": "import",
            "path": "./range-interface",
            "id": "src/components/range/range-interface.ts::RangeKnobMoveEndEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the user finishes moving the range knob, whether through\nmouse drag, touch gesture, or keyboard interaction.",
      "docsTags": []
    },
    {
      "event": "ionKnobMoveStart",
      "detail": "RangeKnobMoveStartEventDetail",
      "bubbles": true,
      "complexType": {
        "original": "RangeKnobMoveStartEventDetail",
        "resolved": "RangeKnobMoveStartEventDetail",
        "references": {
          "RangeKnobMoveStartEventDetail": {
            "location": "import",
            "path": "./range-interface",
            "id": "src/components/range/range-interface.ts::RangeKnobMoveStartEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the user starts moving the range knob, whether through\nmouse drag, touch gesture, or keyboard interaction.",
      "docsTags": []
    }
  ],
  "listeners": [],
  "styles": [
    {
      "name": "--bar-background",
      "annotation": "prop",
      "docs": "Background of the range bar"
    },
    {
      "name": "--bar-background-active",
      "annotation": "prop",
      "docs": "Background of the active range bar"
    },
    {
      "name": "--bar-border-radius",
      "annotation": "prop",
      "docs": "Border radius of the range bar"
    },
    {
      "name": "--bar-height",
      "annotation": "prop",
      "docs": "Height of the range bar"
    },
    {
      "name": "--height",
      "annotation": "prop",
      "docs": "Height of the range"
    },
    {
      "name": "--knob-background",
      "annotation": "prop",
      "docs": "Background of the range knob"
    },
    {
      "name": "--knob-border-radius",
      "annotation": "prop",
      "docs": "Border radius of the range knob"
    },
    {
      "name": "--knob-box-shadow",
      "annotation": "prop",
      "docs": "Box shadow of the range knob"
    },
    {
      "name": "--knob-size",
      "annotation": "prop",
      "docs": "Size of the range knob"
    },
    {
      "name": "--pin-background",
      "annotation": "prop",
      "docs": "Background of the range pin (only available in MD mode)"
    },
    {
      "name": "--pin-color",
      "annotation": "prop",
      "docs": "Color of the range pin (only available in MD mode)"
    }
  ],
  "slots": [
    {
      "name": "end",
      "docs": "Content is placed to the right of the range slider in LTR, and to the left in RTL."
    },
    {
      "name": "label",
      "docs": "The label text to associate with the range. Use the \"labelPlacement\" property to control where the label is placed relative to the range."
    },
    {
      "name": "start",
      "docs": "Content is placed to the left of the range slider in LTR, and to the right in RTL."
    }
  ],
  "parts": [
    {
      "name": "bar",
      "docs": "The inactive part of the bar."
    },
    {
      "name": "bar-active",
      "docs": "The active part of the bar."
    },
    {
      "name": "knob",
      "docs": "The handle that is used to drag the range."
    },
    {
      "name": "pin",
      "docs": "The counter that appears above a knob."
    },
    {
      "name": "tick",
      "docs": "An inactive tick mark."
    },
    {
      "name": "tick-active",
      "docs": "An active tick mark."
    }
  ],
  "dependents": [],
  "dependencies": [],
  "dependencyGraph": {}
}