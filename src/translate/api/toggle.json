{
  "filePath": "src/components/toggle/toggle.tsx",
  "encapsulation": "shadow",
  "tag": "ion-toggle",
  "docs": "",
  "docsTags": [
    {
      "name": "virtualProp",
      "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
    },
    {
      "name": "slot",
      "text": "- The label text to associate with the toggle. Use the \"labelPlacement\" property to control where the label is placed relative to the toggle."
    },
    {
      "name": "part",
      "text": "track - The background track of the toggle."
    },
    {
      "name": "part",
      "text": "handle - The toggle handle, or knob, used to change the checked state."
    },
    {
      "name": "part",
      "text": "label - The label text describing the toggle."
    },
    {
      "name": "part",
      "text": "supporting-text - Supporting text displayed beneath the toggle label."
    },
    {
      "name": "part",
      "text": "helper-text - Supporting text displayed beneath the toggle label when the toggle is valid."
    },
    {
      "name": "part",
      "text": "error-text - Supporting text displayed beneath the toggle label when the toggle is invalid and touched."
    }
  ],
  "usage": {},
  "props": [
    {
      "name": "alignment",
      "type": "\"center\" | \"start\" | undefined",
      "complexType": {
        "original": "'start' | 'center'",
        "resolved": "\"center\" | \"start\" | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "alignment",
      "reflectToAttr": false,
      "docs": "How to control the alignment of the toggle and label on the cross axis.\n`\"start\"`: The label and control will appear on the left of the cross axis in LTR, and on the right side in RTL.\n`\"center\"`: The label and control will appear at the center of the cross axis in both LTR and RTL.\nSetting this property will change the toggle `display` to `block`.",
      "docsTags": [],
      "values": [
        {
          "value": "center",
          "type": "string"
        },
        {
          "value": "start",
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "checked",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": true,
      "attr": "checked",
      "reflectToAttr": false,
      "docs": "If `true`, the toggle is selected.",
      "docsTags": [
        {
          "name": "default",
          "text": "false"
        }
      ],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "color",
      "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
      "complexType": {
        "original": "Color",
        "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
        "references": {
          "Color": {
            "location": "import",
            "path": "../../interface",
            "id": "src/interface.d.ts::Color"
          }
        }
      },
      "mutable": false,
      "attr": "color",
      "reflectToAttr": true,
      "docs": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
      "docsTags": [],
      "values": [
        {
          "value": "danger",
          "type": "string"
        },
        {
          "value": "dark",
          "type": "string"
        },
        {
          "value": "light",
          "type": "string"
        },
        {
          "value": "medium",
          "type": "string"
        },
        {
          "value": "primary",
          "type": "string"
        },
        {
          "value": "secondary",
          "type": "string"
        },
        {
          "value": "success",
          "type": "string"
        },
        {
          "value": "tertiary",
          "type": "string"
        },
        {
          "value": "warning",
          "type": "string"
        },
        {
          "type": "string & Record<never, never>"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "disabled",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "disabled",
      "reflectToAttr": false,
      "docs": "If `true`, the user cannot interact with the toggle.",
      "docsTags": [
        {
          "name": "default",
          "text": "false"
        }
      ],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "enableOnOffLabels",
      "type": "boolean | undefined",
      "complexType": {
        "original": "boolean | undefined",
        "resolved": "boolean | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "enable-on-off-labels",
      "reflectToAttr": false,
      "docs": "Enables the on/off accessibility switch labels within the toggle.",
      "docsTags": [
        {
          "name": "default",
          "text": "config.get('toggleOnOffLabels')"
        }
      ],
      "default": "config.get('toggleOnOffLabels')",
      "values": [
        {
          "type": "boolean"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "errorText",
      "type": "string | undefined",
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "error-text",
      "reflectToAttr": false,
      "docs": "Text that is placed under the toggle label and displayed when an error is detected.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "helperText",
      "type": "string | undefined",
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "helper-text",
      "reflectToAttr": false,
      "docs": "Text that is placed under the toggle label and displayed when no error is detected.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "justify",
      "type": "\"end\" | \"space-between\" | \"start\" | undefined",
      "complexType": {
        "original": "'start' | 'end' | 'space-between'",
        "resolved": "\"end\" | \"space-between\" | \"start\" | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "justify",
      "reflectToAttr": false,
      "docs": "How to pack the label and toggle within a line.\n`\"start\"`: The label and toggle will appear on the left in LTR and\non the right in RTL.\n`\"end\"`: The label and toggle will appear on the right in LTR and\non the left in RTL.\n`\"space-between\"`: The label and toggle will appear on opposite\nends of the line with space between the two elements.\nSetting this property will change the toggle `display` to `block`.",
      "docsTags": [],
      "values": [
        {
          "value": "end",
          "type": "string"
        },
        {
          "value": "space-between",
          "type": "string"
        },
        {
          "value": "start",
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "labelPlacement",
      "type": "\"end\" | \"fixed\" | \"stacked\" | \"start\"",
      "complexType": {
        "original": "'start' | 'end' | 'fixed' | 'stacked'",
        "resolved": "\"end\" | \"fixed\" | \"stacked\" | \"start\"",
        "references": {}
      },
      "mutable": false,
      "attr": "label-placement",
      "reflectToAttr": false,
      "docs": "Where to place the label relative to the input.\n`\"start\"`: The label will appear to the left of the toggle in LTR and to the right in RTL.\n`\"end\"`: The label will appear to the right of the toggle in LTR and to the left in RTL.\n`\"fixed\"`: The label has the same behavior as `\"start\"` except it also has a fixed width. Long text will be truncated with ellipses (\"...\").\n`\"stacked\"`: The label will appear above the toggle regardless of the direction. The alignment of the label can be controlled with the `alignment` property.",
      "docsTags": [
        {
          "name": "default",
          "text": "'start'"
        }
      ],
      "default": "'start'",
      "values": [
        {
          "value": "end",
          "type": "string"
        },
        {
          "value": "fixed",
          "type": "string"
        },
        {
          "value": "stacked",
          "type": "string"
        },
        {
          "value": "start",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "mode",
      "type": "\"ios\" | \"md\"",
      "mutable": false,
      "attr": "mode",
      "reflectToAttr": false,
      "docs": "The mode determines which platform styles to use.",
      "docsTags": [],
      "values": [
        {
          "value": "ios",
          "type": "string"
        },
        {
          "value": "md",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "name",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "name",
      "reflectToAttr": false,
      "docs": "The name of the control, which is submitted with the form data.",
      "docsTags": [
        {
          "name": "default",
          "text": "this.inputId"
        }
      ],
      "default": "this.inputId",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "required",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "required",
      "reflectToAttr": false,
      "docs": "If true, screen readers will announce it as a required field. This property\nworks only for accessibility purposes, it will not prevent the form from\nsubmitting if the value is invalid.",
      "docsTags": [
        {
          "name": "default",
          "text": "false"
        }
      ],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "value",
      "type": "null | string | undefined",
      "complexType": {
        "original": "string | null",
        "resolved": "null | string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "value",
      "reflectToAttr": false,
      "docs": "The value of the toggle does not mean if it's checked or not, use the `checked`\nproperty for that.\n\nThe value of a toggle is analogous to the value of a `<input type=\"checkbox\">`,\nit's only used when the toggle participates in a native `<form>`.",
      "docsTags": [
        {
          "name": "default",
          "text": "'on'"
        }
      ],
      "default": "'on'",
      "values": [
        {
          "type": "null"
        },
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    }
  ],
  "methods": [],
  "events": [
    {
      "event": "ionBlur",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the toggle loses focus.",
      "docsTags": []
    },
    {
      "event": "ionChange",
      "detail": "ToggleChangeEventDetail<any>",
      "bubbles": true,
      "complexType": {
        "original": "ToggleChangeEventDetail",
        "resolved": "ToggleChangeEventDetail<any>",
        "references": {
          "ToggleChangeEventDetail": {
            "location": "import",
            "path": "./toggle-interface",
            "id": "src/components/toggle/toggle-interface.ts::ToggleChangeEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the user switches the toggle on or off.\n\nThis event will not emit when programmatically setting the `checked` property.",
      "docsTags": []
    },
    {
      "event": "ionFocus",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the toggle has focus.",
      "docsTags": []
    }
  ],
  "listeners": [],
  "styles": [
    {
      "name": "--border-radius",
      "annotation": "prop",
      "docs": "Border radius of the toggle track",
      "mode": "ios"
    },
    {
      "name": "--border-radius",
      "annotation": "prop",
      "docs": "Border radius of the toggle track",
      "mode": "md"
    },
    {
      "name": "--handle-background",
      "annotation": "prop",
      "docs": "Background of the toggle handle",
      "mode": "ios"
    },
    {
      "name": "--handle-background",
      "annotation": "prop",
      "docs": "Background of the toggle handle",
      "mode": "md"
    },
    {
      "name": "--handle-background-checked",
      "annotation": "prop",
      "docs": "Background of the toggle handle when checked",
      "mode": "ios"
    },
    {
      "name": "--handle-background-checked",
      "annotation": "prop",
      "docs": "Background of the toggle handle when checked",
      "mode": "md"
    },
    {
      "name": "--handle-border-radius",
      "annotation": "prop",
      "docs": "Border radius of the toggle handle",
      "mode": "ios"
    },
    {
      "name": "--handle-border-radius",
      "annotation": "prop",
      "docs": "Border radius of the toggle handle",
      "mode": "md"
    },
    {
      "name": "--handle-box-shadow",
      "annotation": "prop",
      "docs": "Box shadow of the toggle handle",
      "mode": "ios"
    },
    {
      "name": "--handle-box-shadow",
      "annotation": "prop",
      "docs": "Box shadow of the toggle handle",
      "mode": "md"
    },
    {
      "name": "--handle-height",
      "annotation": "prop",
      "docs": "Height of the toggle handle",
      "mode": "ios"
    },
    {
      "name": "--handle-height",
      "annotation": "prop",
      "docs": "Height of the toggle handle",
      "mode": "md"
    },
    {
      "name": "--handle-max-height",
      "annotation": "prop",
      "docs": "Maximum height of the toggle handle",
      "mode": "ios"
    },
    {
      "name": "--handle-max-height",
      "annotation": "prop",
      "docs": "Maximum height of the toggle handle",
      "mode": "md"
    },
    {
      "name": "--handle-spacing",
      "annotation": "prop",
      "docs": "Horizontal spacing around the toggle handle",
      "mode": "ios"
    },
    {
      "name": "--handle-spacing",
      "annotation": "prop",
      "docs": "Horizontal spacing around the toggle handle",
      "mode": "md"
    },
    {
      "name": "--handle-transition",
      "annotation": "prop",
      "docs": "Transition of the toggle handle",
      "mode": "ios"
    },
    {
      "name": "--handle-transition",
      "annotation": "prop",
      "docs": "Transition of the toggle handle",
      "mode": "md"
    },
    {
      "name": "--handle-width",
      "annotation": "prop",
      "docs": "Width of the toggle handle",
      "mode": "ios"
    },
    {
      "name": "--handle-width",
      "annotation": "prop",
      "docs": "Width of the toggle handle",
      "mode": "md"
    },
    {
      "name": "--track-background",
      "annotation": "prop",
      "docs": "Background of the toggle track",
      "mode": "ios"
    },
    {
      "name": "--track-background",
      "annotation": "prop",
      "docs": "Background of the toggle track",
      "mode": "md"
    },
    {
      "name": "--track-background-checked",
      "annotation": "prop",
      "docs": "Background of the toggle track when checked",
      "mode": "ios"
    },
    {
      "name": "--track-background-checked",
      "annotation": "prop",
      "docs": "Background of the toggle track when checked",
      "mode": "md"
    }
  ],
  "slots": [
    {
      "name": "",
      "docs": "The label text to associate with the toggle. Use the \"labelPlacement\" property to control where the label is placed relative to the toggle."
    }
  ],
  "parts": [
    {
      "name": "error-text",
      "docs": "Supporting text displayed beneath the toggle label when the toggle is invalid and touched."
    },
    {
      "name": "handle",
      "docs": "The toggle handle, or knob, used to change the checked state."
    },
    {
      "name": "helper-text",
      "docs": "Supporting text displayed beneath the toggle label when the toggle is valid."
    },
    {
      "name": "label",
      "docs": "The label text describing the toggle."
    },
    {
      "name": "supporting-text",
      "docs": "Supporting text displayed beneath the toggle label."
    },
    {
      "name": "track",
      "docs": "The background track of the toggle."
    }
  ],
  "dependents": [],
  "dependencies": [
    "ion-icon"
  ],
  "dependencyGraph": {
    "ion-toggle": [
      "ion-icon"
    ]
  }
}