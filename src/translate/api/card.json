{
  "filePath": "src/components/card/card.tsx",
  "encapsulation": "shadow",
  "tag": "ion-card",
  "docs": "",
  "docsTags": [
    {
      "name": "virtualProp",
      "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
    },
    {
      "name": "part",
      "text": "native - The native HTML button, anchor, or div element that wraps all child elements."
    }
  ],
  "usage": {},
  "props": [
    {
      "name": "button",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "button",
      "reflectToAttr": false,
      "docs": "If `true`, a button tag will be rendered and the card will be tappable.",
      "docsTags": [
        {
          "name": "default",
          "text": "false"
        }
      ],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "color",
      "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
      "complexType": {
        "original": "Color",
        "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
        "references": {
          "Color": {
            "location": "import",
            "path": "../../interface",
            "id": "src/interface.d.ts::Color"
          }
        }
      },
      "mutable": false,
      "attr": "color",
      "reflectToAttr": true,
      "docs": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
      "docsTags": [],
      "values": [
        {
          "value": "danger",
          "type": "string"
        },
        {
          "value": "dark",
          "type": "string"
        },
        {
          "value": "light",
          "type": "string"
        },
        {
          "value": "medium",
          "type": "string"
        },
        {
          "value": "primary",
          "type": "string"
        },
        {
          "value": "secondary",
          "type": "string"
        },
        {
          "value": "success",
          "type": "string"
        },
        {
          "value": "tertiary",
          "type": "string"
        },
        {
          "value": "warning",
          "type": "string"
        },
        {
          "type": "string & Record<never, never>"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "disabled",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "disabled",
      "reflectToAttr": false,
      "docs": "If `true`, the user cannot interact with the card.",
      "docsTags": [
        {
          "name": "default",
          "text": "false"
        }
      ],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "download",
      "type": "string | undefined",
      "complexType": {
        "original": "string | undefined",
        "resolved": "string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "download",
      "reflectToAttr": false,
      "docs": "This attribute instructs browsers to download a URL instead of navigating to\nit, so the user will be prompted to save it as a local file. If the attribute\nhas a value, it is used as the pre-filled file name in the Save prompt\n(the user can still change the file name if they want).",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "href",
      "type": "string | undefined",
      "complexType": {
        "original": "string | undefined",
        "resolved": "string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "href",
      "reflectToAttr": false,
      "docs": "Contains a URL or a URL fragment that the hyperlink points to.\nIf this property is set, an anchor tag will be rendered.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "mode",
      "type": "\"ios\" | \"md\"",
      "mutable": false,
      "attr": "mode",
      "reflectToAttr": false,
      "docs": "The mode determines which platform styles to use.",
      "docsTags": [],
      "values": [
        {
          "value": "ios",
          "type": "string"
        },
        {
          "value": "md",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "rel",
      "type": "string | undefined",
      "complexType": {
        "original": "string | undefined",
        "resolved": "string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "rel",
      "reflectToAttr": false,
      "docs": "Specifies the relationship of the target object to the link object.\nThe value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "routerAnimation",
      "type": "((baseEl: any, opts?: any) => Animation) | undefined",
      "complexType": {
        "original": "AnimationBuilder | undefined",
        "resolved": "((baseEl: any, opts?: any) => Animation) | undefined",
        "references": {
          "AnimationBuilder": {
            "location": "import",
            "path": "../../interface",
            "id": "src/interface.d.ts::AnimationBuilder"
          }
        }
      },
      "mutable": false,
      "attr": "router-animation",
      "reflectToAttr": false,
      "docs": "When using a router, it specifies the transition animation when navigating to\nanother page using `href`.",
      "docsTags": [],
      "values": [
        {
          "type": "((baseEl: any, opts?: any) => Animation)"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "routerDirection",
      "type": "\"back\" | \"forward\" | \"root\"",
      "complexType": {
        "original": "RouterDirection",
        "resolved": "\"back\" | \"forward\" | \"root\"",
        "references": {
          "RouterDirection": {
            "location": "import",
            "path": "../router/utils/interface",
            "id": "src/components/router/utils/interface.ts::RouterDirection"
          }
        }
      },
      "mutable": false,
      "attr": "router-direction",
      "reflectToAttr": false,
      "docs": "When using a router, it specifies the transition direction when navigating to\nanother page using `href`.",
      "docsTags": [
        {
          "name": "default",
          "text": "'forward'"
        }
      ],
      "default": "'forward'",
      "values": [
        {
          "value": "back",
          "type": "string"
        },
        {
          "value": "forward",
          "type": "string"
        },
        {
          "value": "root",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "target",
      "type": "string | undefined",
      "complexType": {
        "original": "string | undefined",
        "resolved": "string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "target",
      "reflectToAttr": false,
      "docs": "Specifies where to display the linked URL.\nOnly applies when an `href` is provided.\nSpecial keywords: `\"_blank\"`, `\"_self\"`, `\"_parent\"`, `\"_top\"`.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "type",
      "type": "\"button\" | \"reset\" | \"submit\"",
      "complexType": {
        "original": "'submit' | 'reset' | 'button'",
        "resolved": "\"button\" | \"reset\" | \"submit\"",
        "references": {}
      },
      "mutable": false,
      "attr": "type",
      "reflectToAttr": false,
      "docs": "The type of the button. Only used when an `onclick` or `button` property is present.",
      "docsTags": [
        {
          "name": "default",
          "text": "'button'"
        }
      ],
      "default": "'button'",
      "values": [
        {
          "value": "button",
          "type": "string"
        },
        {
          "value": "reset",
          "type": "string"
        },
        {
          "value": "submit",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    }
  ],
  "methods": [],
  "events": [],
  "listeners": [],
  "styles": [
    {
      "name": "--background",
      "annotation": "prop",
      "docs": "Background of the card",
      "mode": "ios"
    },
    {
      "name": "--background",
      "annotation": "prop",
      "docs": "Background of the card",
      "mode": "md"
    },
    {
      "name": "--color",
      "annotation": "prop",
      "docs": "Color of the card",
      "mode": "ios"
    },
    {
      "name": "--color",
      "annotation": "prop",
      "docs": "Color of the card",
      "mode": "md"
    }
  ],
  "slots": [],
  "parts": [
    {
      "name": "native",
      "docs": "The native HTML button, anchor, or div element that wraps all child elements."
    }
  ],
  "dependents": [],
  "dependencies": [
    "ion-ripple-effect"
  ],
  "dependencyGraph": {
    "ion-card": [
      "ion-ripple-effect"
    ]
  }
}