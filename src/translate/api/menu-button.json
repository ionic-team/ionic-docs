{
  "filePath": "src/components/menu-button/menu-button.tsx",
  "encapsulation": "shadow",
  "tag": "ion-menu-button",
  "docs": "",
  "docsTags": [
    {
      "name": "virtualProp",
      "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
    },
    {
      "name": "part",
      "text": "native - The native HTML button element that wraps all child elements."
    },
    {
      "name": "part",
      "text": "icon - The menu button icon (uses ion-icon)."
    }
  ],
  "usage": {},
  "props": [
    {
      "name": "autoHide",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "auto-hide",
      "reflectToAttr": false,
      "docs": "Automatically hides the menu button when the corresponding menu is not active",
      "docsTags": [
        {
          "name": "default",
          "text": "true"
        }
      ],
      "default": "true",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "color",
      "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
      "complexType": {
        "original": "Color",
        "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
        "references": {
          "Color": {
            "location": "import",
            "path": "../../interface",
            "id": "src/interface.d.ts::Color"
          }
        }
      },
      "mutable": false,
      "attr": "color",
      "reflectToAttr": true,
      "docs": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
      "docsTags": [],
      "values": [
        {
          "value": "danger",
          "type": "string"
        },
        {
          "value": "dark",
          "type": "string"
        },
        {
          "value": "light",
          "type": "string"
        },
        {
          "value": "medium",
          "type": "string"
        },
        {
          "value": "primary",
          "type": "string"
        },
        {
          "value": "secondary",
          "type": "string"
        },
        {
          "value": "success",
          "type": "string"
        },
        {
          "value": "tertiary",
          "type": "string"
        },
        {
          "value": "warning",
          "type": "string"
        },
        {
          "type": "string & Record<never, never>"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "disabled",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "disabled",
      "reflectToAttr": false,
      "docs": "If `true`, the user cannot interact with the menu button.",
      "docsTags": [
        {
          "name": "default",
          "text": "false"
        }
      ],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "menu",
      "type": "string | undefined",
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "menu",
      "reflectToAttr": false,
      "docs": "Optional property that maps to a Menu's `menuId` prop. Can also be `start` or `end` for the menu side. This is used to find the correct menu to toggle",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "mode",
      "type": "\"ios\" | \"md\"",
      "mutable": false,
      "attr": "mode",
      "reflectToAttr": false,
      "docs": "The mode determines which platform styles to use.",
      "docsTags": [],
      "values": [
        {
          "value": "ios",
          "type": "string"
        },
        {
          "value": "md",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "type",
      "type": "\"button\" | \"reset\" | \"submit\"",
      "complexType": {
        "original": "'submit' | 'reset' | 'button'",
        "resolved": "\"button\" | \"reset\" | \"submit\"",
        "references": {}
      },
      "mutable": false,
      "attr": "type",
      "reflectToAttr": false,
      "docs": "The type of the button.",
      "docsTags": [
        {
          "name": "default",
          "text": "'button'"
        }
      ],
      "default": "'button'",
      "values": [
        {
          "value": "button",
          "type": "string"
        },
        {
          "value": "reset",
          "type": "string"
        },
        {
          "value": "submit",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    }
  ],
  "methods": [],
  "events": [],
  "listeners": [
    {
      "event": "ionMenuChange",
      "target": "body",
      "capture": false,
      "passive": false
    },
    {
      "event": "ionSplitPaneVisible",
      "target": "body",
      "capture": false,
      "passive": false
    }
  ],
  "styles": [
    {
      "name": "--background",
      "annotation": "prop",
      "docs": "Background of the menu button",
      "mode": "ios"
    },
    {
      "name": "--background",
      "annotation": "prop",
      "docs": "Background of the menu button",
      "mode": "md"
    },
    {
      "name": "--background-focused",
      "annotation": "prop",
      "docs": "Background of the menu button when focused with the tab key",
      "mode": "ios"
    },
    {
      "name": "--background-focused",
      "annotation": "prop",
      "docs": "Background of the menu button when focused with the tab key",
      "mode": "md"
    },
    {
      "name": "--background-focused-opacity",
      "annotation": "prop",
      "docs": "Opacity of the menu button background when focused with the tab key",
      "mode": "ios"
    },
    {
      "name": "--background-focused-opacity",
      "annotation": "prop",
      "docs": "Opacity of the menu button background when focused with the tab key",
      "mode": "md"
    },
    {
      "name": "--background-hover",
      "annotation": "prop",
      "docs": "Background of the menu button on hover",
      "mode": "ios"
    },
    {
      "name": "--background-hover",
      "annotation": "prop",
      "docs": "Background of the menu button on hover",
      "mode": "md"
    },
    {
      "name": "--background-hover-opacity",
      "annotation": "prop",
      "docs": "Opacity of the background on hover",
      "mode": "ios"
    },
    {
      "name": "--background-hover-opacity",
      "annotation": "prop",
      "docs": "Opacity of the background on hover",
      "mode": "md"
    },
    {
      "name": "--border-radius",
      "annotation": "prop",
      "docs": "Border radius of the menu button",
      "mode": "ios"
    },
    {
      "name": "--border-radius",
      "annotation": "prop",
      "docs": "Border radius of the menu button",
      "mode": "md"
    },
    {
      "name": "--color",
      "annotation": "prop",
      "docs": "Color of the menu button",
      "mode": "ios"
    },
    {
      "name": "--color",
      "annotation": "prop",
      "docs": "Color of the menu button",
      "mode": "md"
    },
    {
      "name": "--color-focused",
      "annotation": "prop",
      "docs": "Color of the menu button when focused with the tab key",
      "mode": "ios"
    },
    {
      "name": "--color-focused",
      "annotation": "prop",
      "docs": "Color of the menu button when focused with the tab key",
      "mode": "md"
    },
    {
      "name": "--color-hover",
      "annotation": "prop",
      "docs": "Color of the menu button on hover",
      "mode": "ios"
    },
    {
      "name": "--color-hover",
      "annotation": "prop",
      "docs": "Color of the menu button on hover",
      "mode": "md"
    },
    {
      "name": "--padding-bottom",
      "annotation": "prop",
      "docs": "Bottom padding of the button",
      "mode": "ios"
    },
    {
      "name": "--padding-bottom",
      "annotation": "prop",
      "docs": "Bottom padding of the button",
      "mode": "md"
    },
    {
      "name": "--padding-end",
      "annotation": "prop",
      "docs": "Right padding if direction is left-to-right, and left padding if direction is right-to-left of the button",
      "mode": "ios"
    },
    {
      "name": "--padding-end",
      "annotation": "prop",
      "docs": "Right padding if direction is left-to-right, and left padding if direction is right-to-left of the button",
      "mode": "md"
    },
    {
      "name": "--padding-start",
      "annotation": "prop",
      "docs": "Left padding if direction is left-to-right, and right padding if direction is right-to-left of the button",
      "mode": "ios"
    },
    {
      "name": "--padding-start",
      "annotation": "prop",
      "docs": "Left padding if direction is left-to-right, and right padding if direction is right-to-left of the button",
      "mode": "md"
    },
    {
      "name": "--padding-top",
      "annotation": "prop",
      "docs": "Top padding of the button",
      "mode": "ios"
    },
    {
      "name": "--padding-top",
      "annotation": "prop",
      "docs": "Top padding of the button",
      "mode": "md"
    }
  ],
  "slots": [],
  "parts": [
    {
      "name": "icon",
      "docs": "The menu button icon (uses ion-icon)."
    },
    {
      "name": "native",
      "docs": "The native HTML button element that wraps all child elements."
    }
  ],
  "dependents": [],
  "dependencies": [
    "ion-icon",
    "ion-ripple-effect"
  ],
  "dependencyGraph": {
    "ion-menu-button": [
      "ion-icon",
      "ion-ripple-effect"
    ]
  }
}