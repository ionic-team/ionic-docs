{
  "filePath": "src/components/textarea/textarea.tsx",
  "encapsulation": "scoped",
  "tag": "ion-textarea",
  "docs": "",
  "docsTags": [
    {
      "name": "virtualProp",
      "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
    },
    {
      "name": "slot",
      "text": "label - The label text to associate with the textarea. Use the `labelPlacement` property to control where the label is placed relative to the textarea. Use this if you need to render a label with custom HTML. (EXPERIMENTAL)"
    },
    {
      "name": "slot",
      "text": "start - Content to display at the leading edge of the textarea. (EXPERIMENTAL)"
    },
    {
      "name": "slot",
      "text": "end - Content to display at the trailing edge of the textarea. (EXPERIMENTAL)"
    }
  ],
  "usage": {},
  "props": [
    {
      "name": "autoGrow",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "auto-grow",
      "reflectToAttr": true,
      "docs": "If `true`, the textarea container will grow and shrink based\non the contents of the textarea.",
      "docsTags": [
        {
          "name": "default",
          "text": "false"
        }
      ],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "autocapitalize",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "autocapitalize",
      "reflectToAttr": false,
      "docs": "Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.\nAvailable options: `\"off\"`, `\"none\"`, `\"on\"`, `\"sentences\"`, `\"words\"`, `\"characters\"`.",
      "docsTags": [
        {
          "name": "default",
          "text": "'none'"
        }
      ],
      "default": "'none'",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "autofocus",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "autofocus",
      "reflectToAttr": false,
      "docs": "Sets the [`autofocus` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus) on the native input element.\n\nThis may not be sufficient for the element to be focused on page load. See [managing focus](/docs/developing/managing-focus) for more information.",
      "docsTags": [
        {
          "name": "default",
          "text": "false"
        }
      ],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "clearOnEdit",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "clear-on-edit",
      "reflectToAttr": false,
      "docs": "If `true`, the value will be cleared after focus upon edit.",
      "docsTags": [
        {
          "name": "default",
          "text": "false"
        }
      ],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "color",
      "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
      "complexType": {
        "original": "Color",
        "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
        "references": {
          "Color": {
            "location": "import",
            "path": "../../interface",
            "id": "src/interface.d.ts::Color"
          }
        }
      },
      "mutable": false,
      "attr": "color",
      "reflectToAttr": true,
      "docs": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
      "docsTags": [],
      "values": [
        {
          "value": "danger",
          "type": "string"
        },
        {
          "value": "dark",
          "type": "string"
        },
        {
          "value": "light",
          "type": "string"
        },
        {
          "value": "medium",
          "type": "string"
        },
        {
          "value": "primary",
          "type": "string"
        },
        {
          "value": "secondary",
          "type": "string"
        },
        {
          "value": "success",
          "type": "string"
        },
        {
          "value": "tertiary",
          "type": "string"
        },
        {
          "value": "warning",
          "type": "string"
        },
        {
          "type": "string & Record<never, never>"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "cols",
      "type": "number | undefined",
      "complexType": {
        "original": "number",
        "resolved": "number | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "cols",
      "reflectToAttr": true,
      "docs": "The visible width of the text control, in average character widths. If it is specified, it must be a positive integer.",
      "docsTags": [],
      "values": [
        {
          "type": "number"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "counter",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "counter",
      "reflectToAttr": false,
      "docs": "If `true`, a character counter will display the ratio of characters used and the total character limit.\nDevelopers must also set the `maxlength` property for the counter to be calculated correctly.",
      "docsTags": [
        {
          "name": "default",
          "text": "false"
        }
      ],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "counterFormatter",
      "type": "((inputLength: number, maxLength: number) => string) | undefined",
      "complexType": {
        "original": "(inputLength: number, maxLength: number) => string",
        "resolved": "((inputLength: number, maxLength: number) => string) | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "counter-formatter",
      "reflectToAttr": false,
      "docs": "A callback used to format the counter text.\nBy default the counter text is set to \"itemLength / maxLength\".\n\nSee https://ionicframework.com/docs/troubleshooting/runtime#accessing-this\nif you need to access `this` from within the callback.",
      "docsTags": [],
      "values": [
        {
          "type": "((inputLength: number, maxLength: number) => string)"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "debounce",
      "type": "number | undefined",
      "complexType": {
        "original": "number",
        "resolved": "number | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "debounce",
      "reflectToAttr": false,
      "docs": "Set the amount of time, in milliseconds, to wait to trigger the `ionInput` event after each keystroke.",
      "docsTags": [],
      "values": [
        {
          "type": "number"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "disabled",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "disabled",
      "reflectToAttr": false,
      "docs": "If `true`, the user cannot interact with the textarea.",
      "docsTags": [
        {
          "name": "default",
          "text": "false"
        }
      ],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "enterkeyhint",
      "type": "\"done\" | \"enter\" | \"go\" | \"next\" | \"previous\" | \"search\" | \"send\" | undefined",
      "complexType": {
        "original": "'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'",
        "resolved": "\"done\" | \"enter\" | \"go\" | \"next\" | \"previous\" | \"search\" | \"send\" | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "enterkeyhint",
      "reflectToAttr": false,
      "docs": "A hint to the browser for which enter key to display.\nPossible values: `\"enter\"`, `\"done\"`, `\"go\"`, `\"next\"`,\n`\"previous\"`, `\"search\"`, and `\"send\"`.",
      "docsTags": [],
      "values": [
        {
          "value": "done",
          "type": "string"
        },
        {
          "value": "enter",
          "type": "string"
        },
        {
          "value": "go",
          "type": "string"
        },
        {
          "value": "next",
          "type": "string"
        },
        {
          "value": "previous",
          "type": "string"
        },
        {
          "value": "search",
          "type": "string"
        },
        {
          "value": "send",
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "errorText",
      "type": "string | undefined",
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "error-text",
      "reflectToAttr": false,
      "docs": "Text that is placed under the textarea and displayed when an error is detected.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "fill",
      "type": "\"outline\" | \"solid\" | undefined",
      "complexType": {
        "original": "'outline' | 'solid'",
        "resolved": "\"outline\" | \"solid\" | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "fill",
      "reflectToAttr": false,
      "docs": "The fill for the item. If `\"solid\"` the item will have a background. If\n`\"outline\"` the item will be transparent with a border. Only available in `md` mode.",
      "docsTags": [],
      "values": [
        {
          "value": "outline",
          "type": "string"
        },
        {
          "value": "solid",
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "helperText",
      "type": "string | undefined",
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "helper-text",
      "reflectToAttr": false,
      "docs": "Text that is placed under the textarea and displayed when no error is detected.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "inputmode",
      "type": "\"decimal\" | \"email\" | \"none\" | \"numeric\" | \"search\" | \"tel\" | \"text\" | \"url\" | undefined",
      "complexType": {
        "original": "'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search'",
        "resolved": "\"decimal\" | \"email\" | \"none\" | \"numeric\" | \"search\" | \"tel\" | \"text\" | \"url\" | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "inputmode",
      "reflectToAttr": false,
      "docs": "A hint to the browser for which keyboard to display.\nPossible values: `\"none\"`, `\"text\"`, `\"tel\"`, `\"url\"`,\n`\"email\"`, `\"numeric\"`, `\"decimal\"`, and `\"search\"`.",
      "docsTags": [],
      "values": [
        {
          "value": "decimal",
          "type": "string"
        },
        {
          "value": "email",
          "type": "string"
        },
        {
          "value": "none",
          "type": "string"
        },
        {
          "value": "numeric",
          "type": "string"
        },
        {
          "value": "search",
          "type": "string"
        },
        {
          "value": "tel",
          "type": "string"
        },
        {
          "value": "text",
          "type": "string"
        },
        {
          "value": "url",
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "label",
      "type": "string | undefined",
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "label",
      "reflectToAttr": false,
      "docs": "The visible label associated with the textarea.\n\nUse this if you need to render a plaintext label.\n\nThe `label` property will take priority over the `label` slot if both are used.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "labelPlacement",
      "type": "\"end\" | \"fixed\" | \"floating\" | \"stacked\" | \"start\"",
      "complexType": {
        "original": "'start' | 'end' | 'floating' | 'stacked' | 'fixed'",
        "resolved": "\"end\" | \"fixed\" | \"floating\" | \"stacked\" | \"start\"",
        "references": {}
      },
      "mutable": false,
      "attr": "label-placement",
      "reflectToAttr": false,
      "docs": "Where to place the label relative to the textarea.\n`\"start\"`: The label will appear to the left of the textarea in LTR and to the right in RTL.\n`\"end\"`: The label will appear to the right of the textarea in LTR and to the left in RTL.\n`\"floating\"`: The label will appear smaller and above the textarea when the textarea is focused or it has a value. Otherwise it will appear on top of the textarea.\n`\"stacked\"`: The label will appear smaller and above the textarea regardless even when the textarea is blurred or has no value.\n`\"fixed\"`: The label has the same behavior as `\"start\"` except it also has a fixed width. Long text will be truncated with ellipses (\"...\").",
      "docsTags": [
        {
          "name": "default",
          "text": "'start'"
        }
      ],
      "default": "'start'",
      "values": [
        {
          "value": "end",
          "type": "string"
        },
        {
          "value": "fixed",
          "type": "string"
        },
        {
          "value": "floating",
          "type": "string"
        },
        {
          "value": "stacked",
          "type": "string"
        },
        {
          "value": "start",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "maxlength",
      "type": "number | undefined",
      "complexType": {
        "original": "number",
        "resolved": "number | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "maxlength",
      "reflectToAttr": false,
      "docs": "This attribute specifies the maximum number of characters that the user can enter.",
      "docsTags": [],
      "values": [
        {
          "type": "number"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "minlength",
      "type": "number | undefined",
      "complexType": {
        "original": "number",
        "resolved": "number | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "minlength",
      "reflectToAttr": false,
      "docs": "This attribute specifies the minimum number of characters that the user can enter.",
      "docsTags": [],
      "values": [
        {
          "type": "number"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "mode",
      "type": "\"ios\" | \"md\"",
      "mutable": false,
      "attr": "mode",
      "reflectToAttr": false,
      "docs": "The mode determines which platform styles to use.",
      "docsTags": [],
      "values": [
        {
          "value": "ios",
          "type": "string"
        },
        {
          "value": "md",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "name",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "name",
      "reflectToAttr": false,
      "docs": "The name of the control, which is submitted with the form data.",
      "docsTags": [
        {
          "name": "default",
          "text": "this.inputId"
        }
      ],
      "default": "this.inputId",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "placeholder",
      "type": "string | undefined",
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "placeholder",
      "reflectToAttr": false,
      "docs": "Instructional text that shows before the input has a value.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "readonly",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "readonly",
      "reflectToAttr": false,
      "docs": "If `true`, the user cannot modify the value.",
      "docsTags": [
        {
          "name": "default",
          "text": "false"
        }
      ],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "required",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "required",
      "reflectToAttr": false,
      "docs": "If `true`, the user must fill in a value before submitting a form.",
      "docsTags": [
        {
          "name": "default",
          "text": "false"
        }
      ],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "rows",
      "type": "number | undefined",
      "complexType": {
        "original": "number",
        "resolved": "number | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "rows",
      "reflectToAttr": false,
      "docs": "The number of visible text lines for the control.",
      "docsTags": [],
      "values": [
        {
          "type": "number"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "shape",
      "type": "\"round\" | undefined",
      "complexType": {
        "original": "'round'",
        "resolved": "\"round\" | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "shape",
      "reflectToAttr": false,
      "docs": "The shape of the textarea. If \"round\" it will have an increased border radius.",
      "docsTags": [],
      "values": [
        {
          "value": "round",
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "spellcheck",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "spellcheck",
      "reflectToAttr": false,
      "docs": "If `true`, the element will have its spelling and grammar checked.",
      "docsTags": [
        {
          "name": "default",
          "text": "false"
        }
      ],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "value",
      "type": "null | string | undefined",
      "complexType": {
        "original": "string | null",
        "resolved": "null | string | undefined",
        "references": {}
      },
      "mutable": true,
      "attr": "value",
      "reflectToAttr": false,
      "docs": "The value of the textarea.",
      "docsTags": [
        {
          "name": "default",
          "text": "''"
        }
      ],
      "default": "''",
      "values": [
        {
          "type": "null"
        },
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "wrap",
      "type": "\"hard\" | \"off\" | \"soft\" | undefined",
      "complexType": {
        "original": "'hard' | 'soft' | 'off'",
        "resolved": "\"hard\" | \"off\" | \"soft\" | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "wrap",
      "reflectToAttr": false,
      "docs": "Indicates how the control wraps text.",
      "docsTags": [],
      "values": [
        {
          "value": "hard",
          "type": "string"
        },
        {
          "value": "off",
          "type": "string"
        },
        {
          "value": "soft",
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    }
  ],
  "methods": [
    {
      "name": "getInputElement",
      "returns": {
        "type": "Promise<HTMLTextAreaElement>",
        "docs": ""
      },
      "complexType": {
        "signature": "() => Promise<HTMLTextAreaElement>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          },
          "HTMLTextAreaElement": {
            "location": "global",
            "id": "global::HTMLTextAreaElement"
          }
        },
        "return": "Promise<HTMLTextAreaElement>"
      },
      "signature": "getInputElement() => Promise<HTMLTextAreaElement>",
      "parameters": [],
      "docs": "Returns the native `<textarea>` element used under the hood.",
      "docsTags": []
    },
    {
      "name": "setFocus",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          }
        },
        "return": "Promise<void>"
      },
      "signature": "setFocus() => Promise<void>",
      "parameters": [],
      "docs": "Sets focus on the native `textarea` in `ion-textarea`. Use this method instead of the global\n`textarea.focus()`.\n\nSee [managing focus](/docs/developing/managing-focus) for more information.",
      "docsTags": []
    }
  ],
  "events": [
    {
      "event": "ionBlur",
      "detail": "FocusEvent",
      "bubbles": true,
      "complexType": {
        "original": "FocusEvent",
        "resolved": "FocusEvent",
        "references": {
          "FocusEvent": {
            "location": "global",
            "id": "global::FocusEvent"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the input loses focus.",
      "docsTags": []
    },
    {
      "event": "ionChange",
      "detail": "TextareaChangeEventDetail",
      "bubbles": true,
      "complexType": {
        "original": "TextareaChangeEventDetail",
        "resolved": "TextareaChangeEventDetail",
        "references": {
          "TextareaChangeEventDetail": {
            "location": "import",
            "path": "./textarea-interface",
            "id": "src/components/textarea/textarea-interface.ts::TextareaChangeEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "The `ionChange` event is fired when the user modifies the textarea's value.\nUnlike the `ionInput` event, the `ionChange` event is fired when\nthe element loses focus after its value has been modified.\n\nThis event will not emit when programmatically setting the `value` property.",
      "docsTags": []
    },
    {
      "event": "ionFocus",
      "detail": "FocusEvent",
      "bubbles": true,
      "complexType": {
        "original": "FocusEvent",
        "resolved": "FocusEvent",
        "references": {
          "FocusEvent": {
            "location": "global",
            "id": "global::FocusEvent"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the input has focus.",
      "docsTags": []
    },
    {
      "event": "ionInput",
      "detail": "TextareaInputEventDetail",
      "bubbles": true,
      "complexType": {
        "original": "TextareaInputEventDetail",
        "resolved": "TextareaInputEventDetail",
        "references": {
          "TextareaInputEventDetail": {
            "location": "import",
            "path": "./textarea-interface",
            "id": "src/components/textarea/textarea-interface.ts::TextareaInputEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "The `ionInput` event is fired each time the user modifies the textarea's value.\nUnlike the `ionChange` event, the `ionInput` event is fired for each alteration\nto the textarea's value. This typically happens for each keystroke as the user types.\n\nWhen `clearOnEdit` is enabled, the `ionInput` event will be fired when\nthe user clears the textarea by performing a keydown event.",
      "docsTags": []
    }
  ],
  "listeners": [
    {
      "event": "click",
      "capture": true,
      "passive": false
    }
  ],
  "styles": [
    {
      "name": "--background",
      "annotation": "prop",
      "docs": "Background of the textarea",
      "mode": "ios"
    },
    {
      "name": "--background",
      "annotation": "prop",
      "docs": "Background of the textarea",
      "mode": "md"
    },
    {
      "name": "--border-color",
      "annotation": "prop",
      "docs": "Color of the border below the textarea when using helper text, error text, or counter",
      "mode": "ios"
    },
    {
      "name": "--border-color",
      "annotation": "prop",
      "docs": "Color of the border below the textarea when using helper text, error text, or counter",
      "mode": "md"
    },
    {
      "name": "--border-radius",
      "annotation": "prop",
      "docs": "Border radius of the textarea",
      "mode": "ios"
    },
    {
      "name": "--border-radius",
      "annotation": "prop",
      "docs": "Border radius of the textarea",
      "mode": "md"
    },
    {
      "name": "--border-style",
      "annotation": "prop",
      "docs": "Style of the border below the textarea when using helper text, error text, or counter",
      "mode": "ios"
    },
    {
      "name": "--border-style",
      "annotation": "prop",
      "docs": "Style of the border below the textarea when using helper text, error text, or counter",
      "mode": "md"
    },
    {
      "name": "--border-width",
      "annotation": "prop",
      "docs": "Width of the border below the textarea when using helper text, error text, or counter",
      "mode": "ios"
    },
    {
      "name": "--border-width",
      "annotation": "prop",
      "docs": "Width of the border below the textarea when using helper text, error text, or counter",
      "mode": "md"
    },
    {
      "name": "--color",
      "annotation": "prop",
      "docs": "Color of the text",
      "mode": "ios"
    },
    {
      "name": "--color",
      "annotation": "prop",
      "docs": "Color of the text",
      "mode": "md"
    },
    {
      "name": "--highlight-color-focused",
      "annotation": "prop",
      "docs": "The color of the highlight on the textarea when focused",
      "mode": "ios"
    },
    {
      "name": "--highlight-color-focused",
      "annotation": "prop",
      "docs": "The color of the highlight on the textarea when focused",
      "mode": "md"
    },
    {
      "name": "--highlight-color-invalid",
      "annotation": "prop",
      "docs": "The color of the highlight on the textarea when invalid",
      "mode": "ios"
    },
    {
      "name": "--highlight-color-invalid",
      "annotation": "prop",
      "docs": "The color of the highlight on the textarea when invalid",
      "mode": "md"
    },
    {
      "name": "--highlight-color-valid",
      "annotation": "prop",
      "docs": "The color of the highlight on the textarea when valid",
      "mode": "ios"
    },
    {
      "name": "--highlight-color-valid",
      "annotation": "prop",
      "docs": "The color of the highlight on the textarea when valid",
      "mode": "md"
    },
    {
      "name": "--highlight-height",
      "annotation": "prop",
      "docs": "The height of the highlight on the textarea. Only applies to md mode.",
      "mode": "ios"
    },
    {
      "name": "--highlight-height",
      "annotation": "prop",
      "docs": "The height of the highlight on the textarea. Only applies to md mode.",
      "mode": "md"
    },
    {
      "name": "--padding-bottom",
      "annotation": "prop",
      "docs": "Bottom padding of the textarea",
      "mode": "ios"
    },
    {
      "name": "--padding-bottom",
      "annotation": "prop",
      "docs": "Bottom padding of the textarea",
      "mode": "md"
    },
    {
      "name": "--padding-end",
      "annotation": "prop",
      "docs": "Right padding if direction is left-to-right, and left padding if direction is right-to-left of the textarea",
      "mode": "ios"
    },
    {
      "name": "--padding-end",
      "annotation": "prop",
      "docs": "Right padding if direction is left-to-right, and left padding if direction is right-to-left of the textarea",
      "mode": "md"
    },
    {
      "name": "--padding-start",
      "annotation": "prop",
      "docs": "Left padding if direction is left-to-right, and right padding if direction is right-to-left of the textarea",
      "mode": "ios"
    },
    {
      "name": "--padding-start",
      "annotation": "prop",
      "docs": "Left padding if direction is left-to-right, and right padding if direction is right-to-left of the textarea",
      "mode": "md"
    },
    {
      "name": "--padding-top",
      "annotation": "prop",
      "docs": "Top padding of the textarea",
      "mode": "ios"
    },
    {
      "name": "--padding-top",
      "annotation": "prop",
      "docs": "Top padding of the textarea",
      "mode": "md"
    },
    {
      "name": "--placeholder-color",
      "annotation": "prop",
      "docs": "Color of the placeholder text",
      "mode": "ios"
    },
    {
      "name": "--placeholder-color",
      "annotation": "prop",
      "docs": "Color of the placeholder text",
      "mode": "md"
    },
    {
      "name": "--placeholder-font-style",
      "annotation": "prop",
      "docs": "Style of the placeholder text",
      "mode": "ios"
    },
    {
      "name": "--placeholder-font-style",
      "annotation": "prop",
      "docs": "Style of the placeholder text",
      "mode": "md"
    },
    {
      "name": "--placeholder-font-weight",
      "annotation": "prop",
      "docs": "Weight of the placeholder text",
      "mode": "ios"
    },
    {
      "name": "--placeholder-font-weight",
      "annotation": "prop",
      "docs": "Weight of the placeholder text",
      "mode": "md"
    },
    {
      "name": "--placeholder-opacity",
      "annotation": "prop",
      "docs": "Opacity of the placeholder text",
      "mode": "ios"
    },
    {
      "name": "--placeholder-opacity",
      "annotation": "prop",
      "docs": "Opacity of the placeholder text",
      "mode": "md"
    }
  ],
  "slots": [
    {
      "name": "end",
      "docs": "Content to display at the trailing edge of the textarea. (EXPERIMENTAL)"
    },
    {
      "name": "label",
      "docs": "The label text to associate with the textarea. Use the `labelPlacement` property to control where the label is placed relative to the textarea. Use this if you need to render a label with custom HTML. (EXPERIMENTAL)"
    },
    {
      "name": "start",
      "docs": "Content to display at the leading edge of the textarea. (EXPERIMENTAL)"
    }
  ],
  "parts": [],
  "dependents": [],
  "dependencies": [],
  "dependencyGraph": {}
}