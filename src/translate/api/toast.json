{
  "filePath": "src/components/toast/toast.tsx",
  "encapsulation": "shadow",
  "tag": "ion-toast",
  "docs": "",
  "docsTags": [
    {
      "name": "virtualProp",
      "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
    },
    {
      "name": "part",
      "text": "button - Any button element that is displayed inside of the toast."
    },
    {
      "name": "part",
      "text": "button cancel - Any button element with role \"cancel\" that is displayed inside of the toast."
    },
    {
      "name": "part",
      "text": "container - The element that wraps all child elements."
    },
    {
      "name": "part",
      "text": "header - The header text of the toast."
    },
    {
      "name": "part",
      "text": "message - The body text of the toast."
    },
    {
      "name": "part",
      "text": "icon - The icon that appears next to the toast content."
    }
  ],
  "usage": {},
  "props": [
    {
      "name": "animated",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "animated",
      "reflectToAttr": false,
      "docs": "If `true`, the toast will animate.",
      "docsTags": [],
      "default": "true",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "buttons",
      "type": "(string | ToastButton)[] | undefined",
      "complexType": {
        "original": "(ToastButton | string)[]",
        "resolved": "(string | ToastButton)[] | undefined",
        "references": {
          "ToastButton": {
            "location": "import",
            "path": "./toast-interface",
            "id": "src/components/toast/toast-interface.ts::ToastButton"
          }
        }
      },
      "mutable": false,
      "reflectToAttr": false,
      "docs": "An array of buttons for the toast.",
      "docsTags": [],
      "values": [
        {
          "type": "(string"
        },
        {
          "type": "ToastButton)[]"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "color",
      "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
      "complexType": {
        "original": "Color",
        "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
        "references": {
          "Color": {
            "location": "import",
            "path": "../../interface",
            "id": "src/interface.d.ts::Color"
          }
        }
      },
      "mutable": false,
      "attr": "color",
      "reflectToAttr": true,
      "docs": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
      "docsTags": [],
      "values": [
        {
          "value": "danger",
          "type": "string"
        },
        {
          "value": "dark",
          "type": "string"
        },
        {
          "value": "light",
          "type": "string"
        },
        {
          "value": "medium",
          "type": "string"
        },
        {
          "value": "primary",
          "type": "string"
        },
        {
          "value": "secondary",
          "type": "string"
        },
        {
          "value": "success",
          "type": "string"
        },
        {
          "value": "tertiary",
          "type": "string"
        },
        {
          "value": "warning",
          "type": "string"
        },
        {
          "type": "string & Record<never, never>"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "cssClass",
      "type": "string | string[] | undefined",
      "complexType": {
        "original": "string | string[]",
        "resolved": "string | string[] | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "css-class",
      "reflectToAttr": false,
      "docs": "Additional classes to apply for custom CSS. If multiple classes are\nprovided they should be separated by spaces.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "string[]"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "duration",
      "type": "number",
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "mutable": false,
      "attr": "duration",
      "reflectToAttr": false,
      "docs": "How many milliseconds to wait before hiding the toast. By default, it will show\nuntil `dismiss()` is called.",
      "docsTags": [],
      "default": "config.getNumber('toastDuration', 0)",
      "values": [
        {
          "type": "number"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "enterAnimation",
      "type": "((baseEl: any, opts?: any) => Animation) | undefined",
      "complexType": {
        "original": "AnimationBuilder",
        "resolved": "((baseEl: any, opts?: any) => Animation) | undefined",
        "references": {
          "AnimationBuilder": {
            "location": "import",
            "path": "../../interface",
            "id": "src/interface.d.ts::AnimationBuilder"
          }
        }
      },
      "mutable": false,
      "reflectToAttr": false,
      "docs": "Animation to use when the toast is presented.",
      "docsTags": [],
      "values": [
        {
          "type": "((baseEl: any, opts?: any) => Animation)"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "header",
      "type": "string | undefined",
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "header",
      "reflectToAttr": false,
      "docs": "Header to be shown in the toast.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "htmlAttributes",
      "type": "undefined | { [key: string]: any; }",
      "complexType": {
        "original": "{ [key: string]: any }",
        "resolved": "undefined | { [key: string]: any; }",
        "references": {}
      },
      "mutable": false,
      "reflectToAttr": false,
      "docs": "Additional attributes to pass to the toast.",
      "docsTags": [],
      "values": [
        {
          "type": "undefined"
        },
        {
          "type": "{ [key: string]: any; }"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "icon",
      "type": "string | undefined",
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "icon",
      "reflectToAttr": false,
      "docs": "The name of the icon to display, or the path to a valid SVG file. See `ion-icon`.\nhttps://ionic.io/ionicons",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "isOpen",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "is-open",
      "reflectToAttr": false,
      "docs": "If `true`, the toast will open. If `false`, the toast will close.\nUse this if you need finer grained control over presentation, otherwise\njust use the toastController or the `trigger` property.\nNote: `isOpen` will not automatically be set back to `false` when\nthe toast dismisses. You will need to do that in your code.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "keyboardClose",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "keyboard-close",
      "reflectToAttr": false,
      "docs": "If `true`, the keyboard will be automatically dismissed when the overlay is presented.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "layout",
      "type": "\"baseline\" | \"stacked\"",
      "complexType": {
        "original": "ToastLayout",
        "resolved": "\"baseline\" | \"stacked\"",
        "references": {
          "ToastLayout": {
            "location": "import",
            "path": "./toast-interface",
            "id": "src/components/toast/toast-interface.ts::ToastLayout"
          }
        }
      },
      "mutable": false,
      "attr": "layout",
      "reflectToAttr": false,
      "docs": "Defines how the message and buttons are laid out in the toast.\n'baseline': The message and the buttons will appear on the same line.\nMessage text may wrap within the message container.\n'stacked': The buttons containers and message will stack on top\nof each other. Use this if you have long text in your buttons.",
      "docsTags": [],
      "default": "'baseline'",
      "values": [
        {
          "value": "baseline",
          "type": "string"
        },
        {
          "value": "stacked",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "leaveAnimation",
      "type": "((baseEl: any, opts?: any) => Animation) | undefined",
      "complexType": {
        "original": "AnimationBuilder",
        "resolved": "((baseEl: any, opts?: any) => Animation) | undefined",
        "references": {
          "AnimationBuilder": {
            "location": "import",
            "path": "../../interface",
            "id": "src/interface.d.ts::AnimationBuilder"
          }
        }
      },
      "mutable": false,
      "reflectToAttr": false,
      "docs": "Animation to use when the toast is dismissed.",
      "docsTags": [],
      "values": [
        {
          "type": "((baseEl: any, opts?: any) => Animation)"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "message",
      "type": "IonicSafeString | string | undefined",
      "complexType": {
        "original": "string | IonicSafeString",
        "resolved": "IonicSafeString | string | undefined",
        "references": {
          "IonicSafeString": {
            "location": "import",
            "path": "../../utils/sanitization",
            "id": "src/utils/sanitization/index.ts::IonicSafeString"
          }
        }
      },
      "mutable": false,
      "attr": "message",
      "reflectToAttr": false,
      "docs": "Message to be shown in the toast.\nThis property accepts custom HTML as a string.\nContent is parsed as plaintext by default.\n`innerHTMLTemplatesEnabled` must be set to `true` in the Ionic config\nbefore custom HTML can be used.",
      "docsTags": [],
      "values": [
        {
          "type": "IonicSafeString"
        },
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "mode",
      "type": "\"ios\" | \"md\"",
      "mutable": false,
      "attr": "mode",
      "reflectToAttr": false,
      "docs": "The mode determines which platform styles to use.",
      "docsTags": [],
      "values": [
        {
          "value": "ios",
          "type": "string"
        },
        {
          "value": "md",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "position",
      "type": "\"bottom\" | \"middle\" | \"top\"",
      "complexType": {
        "original": "ToastPosition",
        "resolved": "\"bottom\" | \"middle\" | \"top\"",
        "references": {
          "ToastPosition": {
            "location": "import",
            "path": "./toast-interface",
            "id": "src/components/toast/toast-interface.ts::ToastPosition"
          }
        }
      },
      "mutable": false,
      "attr": "position",
      "reflectToAttr": false,
      "docs": "The starting position of the toast on the screen. Can be tweaked further\nusing the `positionAnchor` property.",
      "docsTags": [],
      "default": "'bottom'",
      "values": [
        {
          "value": "bottom",
          "type": "string"
        },
        {
          "value": "middle",
          "type": "string"
        },
        {
          "value": "top",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "positionAnchor",
      "type": "HTMLElement | string | undefined",
      "complexType": {
        "original": "HTMLElement | string",
        "resolved": "HTMLElement | string | undefined",
        "references": {
          "HTMLElement": {
            "location": "global",
            "id": "global::HTMLElement"
          }
        }
      },
      "mutable": false,
      "attr": "position-anchor",
      "reflectToAttr": false,
      "docs": "The element to anchor the toast's position to. Can be set as a direct reference\nor the ID of the element. With `position=\"bottom\"`, the toast will sit above the\nchosen element. With `position=\"top\"`, the toast will sit below the chosen element.\nWith `position=\"middle\"`, the value of `positionAnchor` is ignored.",
      "docsTags": [],
      "values": [
        {
          "type": "HTMLElement"
        },
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "translucent",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "translucent",
      "reflectToAttr": false,
      "docs": "If `true`, the toast will be translucent.\nOnly applies when the mode is `\"ios\"` and the device supports\n[`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "trigger",
      "type": "string | undefined",
      "complexType": {
        "original": "string | undefined",
        "resolved": "string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "trigger",
      "reflectToAttr": false,
      "docs": "An ID corresponding to the trigger element that\ncauses the toast to open when clicked.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": false,
      "required": false
    }
  ],
  "methods": [
    {
      "name": "dismiss",
      "returns": {
        "type": "Promise<boolean>",
        "docs": ""
      },
      "complexType": {
        "signature": "(data?: any, role?: string) => Promise<boolean>",
        "parameters": [
          {
            "tags": [
              {
                "name": "param",
                "text": "data Any data to emit in the dismiss events."
              }
            ],
            "text": "Any data to emit in the dismiss events."
          },
          {
            "tags": [
              {
                "name": "param",
                "text": "role The role of the element that is dismissing the toast.\nThis can be useful in a button handler for determining which button was\nclicked to dismiss the toast.\nSome examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`."
              }
            ],
            "text": "The role of the element that is dismissing the toast.\nThis can be useful in a button handler for determining which button was\nclicked to dismiss the toast.\nSome examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`."
          }
        ],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          },
          "ToastDismissOptions": {
            "location": "import",
            "path": "./toast-interface",
            "id": "src/components/toast/toast-interface.ts::ToastDismissOptions"
          }
        },
        "return": "Promise<boolean>"
      },
      "signature": "dismiss(data?: any, role?: string) => Promise<boolean>",
      "parameters": [],
      "docs": "Dismiss the toast overlay after it has been presented.",
      "docsTags": [
        {
          "name": "param",
          "text": "data Any data to emit in the dismiss events."
        },
        {
          "name": "param",
          "text": "role The role of the element that is dismissing the toast.\nThis can be useful in a button handler for determining which button was\nclicked to dismiss the toast.\nSome examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`."
        }
      ]
    },
    {
      "name": "onDidDismiss",
      "returns": {
        "type": "Promise<OverlayEventDetail<T>>",
        "docs": ""
      },
      "complexType": {
        "signature": "<T = any>() => Promise<OverlayEventDetail<T>>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          },
          "OverlayEventDetail": {
            "location": "import",
            "path": "../../utils/overlays-interface",
            "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
          },
          "T": {
            "location": "global",
            "id": "global::T"
          }
        },
        "return": "Promise<OverlayEventDetail<T>>"
      },
      "signature": "onDidDismiss<T = any>() => Promise<OverlayEventDetail<T>>",
      "parameters": [],
      "docs": "Returns a promise that resolves when the toast did dismiss.",
      "docsTags": []
    },
    {
      "name": "onWillDismiss",
      "returns": {
        "type": "Promise<OverlayEventDetail<T>>",
        "docs": ""
      },
      "complexType": {
        "signature": "<T = any>() => Promise<OverlayEventDetail<T>>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          },
          "OverlayEventDetail": {
            "location": "import",
            "path": "../../utils/overlays-interface",
            "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
          },
          "T": {
            "location": "global",
            "id": "global::T"
          }
        },
        "return": "Promise<OverlayEventDetail<T>>"
      },
      "signature": "onWillDismiss<T = any>() => Promise<OverlayEventDetail<T>>",
      "parameters": [],
      "docs": "Returns a promise that resolves when the toast will dismiss.",
      "docsTags": []
    },
    {
      "name": "present",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          },
          "ToastPresentOptions": {
            "location": "import",
            "path": "./toast-interface",
            "id": "src/components/toast/toast-interface.ts::ToastPresentOptions"
          }
        },
        "return": "Promise<void>"
      },
      "signature": "present() => Promise<void>",
      "parameters": [],
      "docs": "Present the toast overlay after it has been created.",
      "docsTags": []
    }
  ],
  "events": [
    {
      "event": "didDismiss",
      "detail": "OverlayEventDetail<any>",
      "bubbles": true,
      "complexType": {
        "original": "OverlayEventDetail",
        "resolved": "OverlayEventDetail<any>",
        "references": {
          "OverlayEventDetail": {
            "location": "import",
            "path": "../../utils/overlays-interface",
            "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted after the toast has dismissed.\nShorthand for ionToastDidDismiss.",
      "docsTags": []
    },
    {
      "event": "didPresent",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted after the toast has presented.\nShorthand for ionToastWillDismiss.",
      "docsTags": []
    },
    {
      "event": "ionToastDidDismiss",
      "detail": "OverlayEventDetail<any>",
      "bubbles": true,
      "complexType": {
        "original": "OverlayEventDetail",
        "resolved": "OverlayEventDetail<any>",
        "references": {
          "OverlayEventDetail": {
            "location": "import",
            "path": "../../utils/overlays-interface",
            "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted after the toast has dismissed.",
      "docsTags": []
    },
    {
      "event": "ionToastDidPresent",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted after the toast has presented.",
      "docsTags": []
    },
    {
      "event": "ionToastWillDismiss",
      "detail": "OverlayEventDetail<any>",
      "bubbles": true,
      "complexType": {
        "original": "OverlayEventDetail",
        "resolved": "OverlayEventDetail<any>",
        "references": {
          "OverlayEventDetail": {
            "location": "import",
            "path": "../../utils/overlays-interface",
            "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted before the toast has dismissed.",
      "docsTags": []
    },
    {
      "event": "ionToastWillPresent",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted before the toast has presented.",
      "docsTags": []
    },
    {
      "event": "willDismiss",
      "detail": "OverlayEventDetail<any>",
      "bubbles": true,
      "complexType": {
        "original": "OverlayEventDetail",
        "resolved": "OverlayEventDetail<any>",
        "references": {
          "OverlayEventDetail": {
            "location": "import",
            "path": "../../utils/overlays-interface",
            "id": "src/utils/overlays-interface.ts::OverlayEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted before the toast has dismissed.\nShorthand for ionToastWillDismiss.",
      "docsTags": []
    },
    {
      "event": "willPresent",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted before the toast has presented.\nShorthand for ionToastWillPresent.",
      "docsTags": []
    }
  ],
  "listeners": [],
  "styles": [
    {
      "name": "--background",
      "annotation": "prop",
      "docs": "Background of the toast"
    },
    {
      "name": "--border-color",
      "annotation": "prop",
      "docs": "Border color of the toast"
    },
    {
      "name": "--border-radius",
      "annotation": "prop",
      "docs": "Border radius of the toast"
    },
    {
      "name": "--border-style",
      "annotation": "prop",
      "docs": "Border style of the toast"
    },
    {
      "name": "--border-width",
      "annotation": "prop",
      "docs": "Border width of the toast"
    },
    {
      "name": "--box-shadow",
      "annotation": "prop",
      "docs": "Box shadow of the toast"
    },
    {
      "name": "--button-color",
      "annotation": "prop",
      "docs": "Color of the button text"
    },
    {
      "name": "--color",
      "annotation": "prop",
      "docs": "Color of the toast text"
    },
    {
      "name": "--end",
      "annotation": "prop",
      "docs": "Position from the right if direction is left-to-right, and from the left if direction is right-to-left"
    },
    {
      "name": "--height",
      "annotation": "prop",
      "docs": "Height of the toast"
    },
    {
      "name": "--max-height",
      "annotation": "prop",
      "docs": "Maximum height of the toast"
    },
    {
      "name": "--max-width",
      "annotation": "prop",
      "docs": "Maximum width of the toast"
    },
    {
      "name": "--min-height",
      "annotation": "prop",
      "docs": "Minimum height of the toast"
    },
    {
      "name": "--min-width",
      "annotation": "prop",
      "docs": "Minimum width of the toast"
    },
    {
      "name": "--start",
      "annotation": "prop",
      "docs": "Position from the left if direction is left-to-right, and from the right if direction is right-to-left"
    },
    {
      "name": "--white-space",
      "annotation": "prop",
      "docs": "White space of the toast message"
    },
    {
      "name": "--width",
      "annotation": "prop",
      "docs": "Width of the toast"
    }
  ],
  "slots": [],
  "parts": [
    {
      "name": "button",
      "docs": "Any button element that is displayed inside of the toast."
    },
    {
      "name": "button cancel",
      "docs": "Any button element with role \"cancel\" that is displayed inside of the toast."
    },
    {
      "name": "container",
      "docs": "The element that wraps all child elements."
    },
    {
      "name": "header",
      "docs": "The header text of the toast."
    },
    {
      "name": "icon",
      "docs": "The icon that appears next to the toast content."
    },
    {
      "name": "message",
      "docs": "The body text of the toast."
    }
  ],
  "dependents": [],
  "dependencies": [
    "ion-icon",
    "ion-ripple-effect"
  ],
  "dependencyGraph": {
    "ion-toast": [
      "ion-icon",
      "ion-ripple-effect"
    ]
  }
}