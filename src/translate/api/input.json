{
  "filePath": "src/components/input/input.tsx",
  "encapsulation": "scoped",
  "tag": "ion-input",
  "docs": "",
  "docsTags": [
    {
      "name": "virtualProp",
      "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
    },
    {
      "name": "slot",
      "text": "label - The label text to associate with the input. Use the `labelPlacement` property to control where the label is placed relative to the input. Use this if you need to render a label with custom HTML. (EXPERIMENTAL)"
    },
    {
      "name": "slot",
      "text": "start - Content to display at the leading edge of the input. (EXPERIMENTAL)"
    },
    {
      "name": "slot",
      "text": "end - Content to display at the trailing edge of the input. (EXPERIMENTAL)"
    }
  ],
  "usage": {},
  "props": [
    {
      "name": "autocapitalize",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "autocapitalize",
      "reflectToAttr": false,
      "docs": "Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.\nAvailable options: `\"off\"`, `\"none\"`, `\"on\"`, `\"sentences\"`, `\"words\"`, `\"characters\"`.",
      "docsTags": [],
      "default": "'off'",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "autocomplete",
      "type": "\"name\" | \"email\" | \"tel\" | \"url\" | \"on\" | \"off\" | \"honorific-prefix\" | \"given-name\" | \"additional-name\" | \"family-name\" | \"honorific-suffix\" | \"nickname\" | \"username\" | \"new-password\" | \"current-password\" | \"one-time-code\" | \"organization-title\" | \"organization\" | \"street-address\" | \"address-line1\" | \"address-line2\" | \"address-line3\" | \"address-level4\" | \"address-level3\" | \"address-level2\" | \"address-level1\" | \"country\" | \"country-name\" | \"postal-code\" | \"cc-name\" | \"cc-given-name\" | \"cc-additional-name\" | \"cc-family-name\" | \"cc-number\" | \"cc-exp\" | \"cc-exp-month\" | \"cc-exp-year\" | \"cc-csc\" | \"cc-type\" | \"transaction-currency\" | \"transaction-amount\" | \"language\" | \"bday\" | \"bday-day\" | \"bday-month\" | \"bday-year\" | \"sex\" | \"tel-country-code\" | \"tel-national\" | \"tel-area-code\" | \"tel-local\" | \"tel-extension\" | \"impp\" | \"photo\"",
      "complexType": {
        "original": "AutocompleteTypes",
        "resolved": "\"name\" | \"email\" | \"tel\" | \"url\" | \"on\" | \"off\" | \"honorific-prefix\" | \"given-name\" | \"additional-name\" | \"family-name\" | \"honorific-suffix\" | \"nickname\" | \"username\" | \"new-password\" | \"current-password\" | \"one-time-code\" | \"organization-title\" | \"organization\" | \"street-address\" | \"address-line1\" | \"address-line2\" | \"address-line3\" | \"address-level4\" | \"address-level3\" | \"address-level2\" | \"address-level1\" | \"country\" | \"country-name\" | \"postal-code\" | \"cc-name\" | \"cc-given-name\" | \"cc-additional-name\" | \"cc-family-name\" | \"cc-number\" | \"cc-exp\" | \"cc-exp-month\" | \"cc-exp-year\" | \"cc-csc\" | \"cc-type\" | \"transaction-currency\" | \"transaction-amount\" | \"language\" | \"bday\" | \"bday-day\" | \"bday-month\" | \"bday-year\" | \"sex\" | \"tel-country-code\" | \"tel-national\" | \"tel-area-code\" | \"tel-local\" | \"tel-extension\" | \"impp\" | \"photo\"",
        "references": {
          "AutocompleteTypes": {
            "location": "import",
            "path": "../../interface",
            "id": "src/interface.d.ts::AutocompleteTypes"
          }
        }
      },
      "mutable": false,
      "attr": "autocomplete",
      "reflectToAttr": false,
      "docs": "Indicates whether the value of the control can be automatically completed by the browser.",
      "docsTags": [],
      "default": "'off'",
      "values": [
        {
          "value": "name",
          "type": "string"
        },
        {
          "value": "email",
          "type": "string"
        },
        {
          "value": "tel",
          "type": "string"
        },
        {
          "value": "url",
          "type": "string"
        },
        {
          "value": "on",
          "type": "string"
        },
        {
          "value": "off",
          "type": "string"
        },
        {
          "value": "honorific-prefix",
          "type": "string"
        },
        {
          "value": "given-name",
          "type": "string"
        },
        {
          "value": "additional-name",
          "type": "string"
        },
        {
          "value": "family-name",
          "type": "string"
        },
        {
          "value": "honorific-suffix",
          "type": "string"
        },
        {
          "value": "nickname",
          "type": "string"
        },
        {
          "value": "username",
          "type": "string"
        },
        {
          "value": "new-password",
          "type": "string"
        },
        {
          "value": "current-password",
          "type": "string"
        },
        {
          "value": "one-time-code",
          "type": "string"
        },
        {
          "value": "organization-title",
          "type": "string"
        },
        {
          "value": "organization",
          "type": "string"
        },
        {
          "value": "street-address",
          "type": "string"
        },
        {
          "value": "address-line1",
          "type": "string"
        },
        {
          "value": "address-line2",
          "type": "string"
        },
        {
          "value": "address-line3",
          "type": "string"
        },
        {
          "value": "address-level4",
          "type": "string"
        },
        {
          "value": "address-level3",
          "type": "string"
        },
        {
          "value": "address-level2",
          "type": "string"
        },
        {
          "value": "address-level1",
          "type": "string"
        },
        {
          "value": "country",
          "type": "string"
        },
        {
          "value": "country-name",
          "type": "string"
        },
        {
          "value": "postal-code",
          "type": "string"
        },
        {
          "value": "cc-name",
          "type": "string"
        },
        {
          "value": "cc-given-name",
          "type": "string"
        },
        {
          "value": "cc-additional-name",
          "type": "string"
        },
        {
          "value": "cc-family-name",
          "type": "string"
        },
        {
          "value": "cc-number",
          "type": "string"
        },
        {
          "value": "cc-exp",
          "type": "string"
        },
        {
          "value": "cc-exp-month",
          "type": "string"
        },
        {
          "value": "cc-exp-year",
          "type": "string"
        },
        {
          "value": "cc-csc",
          "type": "string"
        },
        {
          "value": "cc-type",
          "type": "string"
        },
        {
          "value": "transaction-currency",
          "type": "string"
        },
        {
          "value": "transaction-amount",
          "type": "string"
        },
        {
          "value": "language",
          "type": "string"
        },
        {
          "value": "bday",
          "type": "string"
        },
        {
          "value": "bday-day",
          "type": "string"
        },
        {
          "value": "bday-month",
          "type": "string"
        },
        {
          "value": "bday-year",
          "type": "string"
        },
        {
          "value": "sex",
          "type": "string"
        },
        {
          "value": "tel-country-code",
          "type": "string"
        },
        {
          "value": "tel-national",
          "type": "string"
        },
        {
          "value": "tel-area-code",
          "type": "string"
        },
        {
          "value": "tel-local",
          "type": "string"
        },
        {
          "value": "tel-extension",
          "type": "string"
        },
        {
          "value": "impp",
          "type": "string"
        },
        {
          "value": "photo",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "autocorrect",
      "type": "\"off\" | \"on\"",
      "complexType": {
        "original": "'on' | 'off'",
        "resolved": "\"off\" | \"on\"",
        "references": {}
      },
      "mutable": false,
      "attr": "autocorrect",
      "reflectToAttr": false,
      "docs": "Whether auto correction should be enabled when the user is entering/editing the text value.",
      "docsTags": [],
      "default": "'off'",
      "values": [
        {
          "value": "off",
          "type": "string"
        },
        {
          "value": "on",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "autofocus",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "autofocus",
      "reflectToAttr": false,
      "docs": "Sets the [`autofocus` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus) on the native input element.\n\nThis may not be sufficient for the element to be focused on page load. See [managing focus](/docs/developing/managing-focus) for more information.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "clearInput",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "clear-input",
      "reflectToAttr": false,
      "docs": "If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "clearOnEdit",
      "type": "boolean | undefined",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "clear-on-edit",
      "reflectToAttr": false,
      "docs": "If `true`, the value will be cleared after focus upon edit. Defaults to `true` when `type` is `\"password\"`, `false` for all other types.",
      "docsTags": [],
      "values": [
        {
          "type": "boolean"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "color",
      "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
      "complexType": {
        "original": "Color",
        "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
        "references": {
          "Color": {
            "location": "import",
            "path": "../../interface",
            "id": "src/interface.d.ts::Color"
          }
        }
      },
      "mutable": false,
      "attr": "color",
      "reflectToAttr": true,
      "docs": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
      "docsTags": [],
      "values": [
        {
          "value": "danger",
          "type": "string"
        },
        {
          "value": "dark",
          "type": "string"
        },
        {
          "value": "light",
          "type": "string"
        },
        {
          "value": "medium",
          "type": "string"
        },
        {
          "value": "primary",
          "type": "string"
        },
        {
          "value": "secondary",
          "type": "string"
        },
        {
          "value": "success",
          "type": "string"
        },
        {
          "value": "tertiary",
          "type": "string"
        },
        {
          "value": "warning",
          "type": "string"
        },
        {
          "type": "string & Record<never, never>"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "counter",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "counter",
      "reflectToAttr": false,
      "docs": "If `true`, a character counter will display the ratio of characters used and the total character limit. Developers must also set the `maxlength` property for the counter to be calculated correctly.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "counterFormatter",
      "type": "((inputLength: number, maxLength: number) => string) | undefined",
      "complexType": {
        "original": "(inputLength: number, maxLength: number) => string",
        "resolved": "((inputLength: number, maxLength: number) => string) | undefined",
        "references": {}
      },
      "mutable": false,
      "reflectToAttr": false,
      "docs": "A callback used to format the counter text.\nBy default the counter text is set to \"itemLength / maxLength\".\n\nSee https://ionicframework.com/docs/troubleshooting/runtime#accessing-this\nif you need to access `this` from within the callback.",
      "docsTags": [],
      "values": [
        {
          "type": "((inputLength: number, maxLength: number) => string)"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "debounce",
      "type": "number | undefined",
      "complexType": {
        "original": "number",
        "resolved": "number | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "debounce",
      "reflectToAttr": false,
      "docs": "Set the amount of time, in milliseconds, to wait to trigger the `ionInput` event after each keystroke.",
      "docsTags": [],
      "values": [
        {
          "type": "number"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "disabled",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "disabled",
      "reflectToAttr": true,
      "docs": "If `true`, the user cannot interact with the input.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "enterkeyhint",
      "type": "\"done\" | \"enter\" | \"go\" | \"next\" | \"previous\" | \"search\" | \"send\" | undefined",
      "complexType": {
        "original": "'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'",
        "resolved": "\"done\" | \"enter\" | \"go\" | \"next\" | \"previous\" | \"search\" | \"send\" | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "enterkeyhint",
      "reflectToAttr": false,
      "docs": "A hint to the browser for which enter key to display.\nPossible values: `\"enter\"`, `\"done\"`, `\"go\"`, `\"next\"`,\n`\"previous\"`, `\"search\"`, and `\"send\"`.",
      "docsTags": [],
      "values": [
        {
          "value": "done",
          "type": "string"
        },
        {
          "value": "enter",
          "type": "string"
        },
        {
          "value": "go",
          "type": "string"
        },
        {
          "value": "next",
          "type": "string"
        },
        {
          "value": "previous",
          "type": "string"
        },
        {
          "value": "search",
          "type": "string"
        },
        {
          "value": "send",
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "errorText",
      "type": "string | undefined",
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "error-text",
      "reflectToAttr": false,
      "docs": "Text that is placed under the input and displayed when an error is detected.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "fill",
      "type": "\"outline\" | \"solid\" | undefined",
      "complexType": {
        "original": "'outline' | 'solid'",
        "resolved": "\"outline\" | \"solid\" | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "fill",
      "reflectToAttr": false,
      "docs": "The fill for the item. If `\"solid\"` the item will have a background. If\n`\"outline\"` the item will be transparent with a border. Only available in `md` mode.",
      "docsTags": [],
      "values": [
        {
          "value": "outline",
          "type": "string"
        },
        {
          "value": "solid",
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "helperText",
      "type": "string | undefined",
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "helper-text",
      "reflectToAttr": false,
      "docs": "Text that is placed under the input and displayed when no error is detected.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "inputmode",
      "type": "\"decimal\" | \"email\" | \"none\" | \"numeric\" | \"search\" | \"tel\" | \"text\" | \"url\" | undefined",
      "complexType": {
        "original": "'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search'",
        "resolved": "\"decimal\" | \"email\" | \"none\" | \"numeric\" | \"search\" | \"tel\" | \"text\" | \"url\" | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "inputmode",
      "reflectToAttr": false,
      "docs": "A hint to the browser for which keyboard to display.\nPossible values: `\"none\"`, `\"text\"`, `\"tel\"`, `\"url\"`,\n`\"email\"`, `\"numeric\"`, `\"decimal\"`, and `\"search\"`.",
      "docsTags": [],
      "values": [
        {
          "value": "decimal",
          "type": "string"
        },
        {
          "value": "email",
          "type": "string"
        },
        {
          "value": "none",
          "type": "string"
        },
        {
          "value": "numeric",
          "type": "string"
        },
        {
          "value": "search",
          "type": "string"
        },
        {
          "value": "tel",
          "type": "string"
        },
        {
          "value": "text",
          "type": "string"
        },
        {
          "value": "url",
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "label",
      "type": "string | undefined",
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "label",
      "reflectToAttr": false,
      "docs": "The visible label associated with the input.\n\nUse this if you need to render a plaintext label.\n\nThe `label` property will take priority over the `label` slot if both are used.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "labelPlacement",
      "type": "\"end\" | \"fixed\" | \"floating\" | \"stacked\" | \"start\"",
      "complexType": {
        "original": "'start' | 'end' | 'floating' | 'stacked' | 'fixed'",
        "resolved": "\"end\" | \"fixed\" | \"floating\" | \"stacked\" | \"start\"",
        "references": {}
      },
      "mutable": false,
      "attr": "label-placement",
      "reflectToAttr": false,
      "docs": "Where to place the label relative to the input.\n`\"start\"`: The label will appear to the left of the input in LTR and to the right in RTL.\n`\"end\"`: The label will appear to the right of the input in LTR and to the left in RTL.\n`\"floating\"`: The label will appear smaller and above the input when the input is focused or it has a value. Otherwise it will appear on top of the input.\n`\"stacked\"`: The label will appear smaller and above the input regardless even when the input is blurred or has no value.\n`\"fixed\"`: The label has the same behavior as `\"start\"` except it also has a fixed width. Long text will be truncated with ellipses (\"...\").",
      "docsTags": [],
      "default": "'start'",
      "values": [
        {
          "value": "end",
          "type": "string"
        },
        {
          "value": "fixed",
          "type": "string"
        },
        {
          "value": "floating",
          "type": "string"
        },
        {
          "value": "stacked",
          "type": "string"
        },
        {
          "value": "start",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "max",
      "type": "number | string | undefined",
      "complexType": {
        "original": "string | number",
        "resolved": "number | string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "max",
      "reflectToAttr": false,
      "docs": "The maximum value, which must not be less than its minimum (min attribute) value.",
      "docsTags": [],
      "values": [
        {
          "type": "number"
        },
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "maxlength",
      "type": "number | undefined",
      "complexType": {
        "original": "number",
        "resolved": "number | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "maxlength",
      "reflectToAttr": false,
      "docs": "If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.",
      "docsTags": [],
      "values": [
        {
          "type": "number"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "min",
      "type": "number | string | undefined",
      "complexType": {
        "original": "string | number",
        "resolved": "number | string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "min",
      "reflectToAttr": false,
      "docs": "The minimum value, which must not be greater than its maximum (max attribute) value.",
      "docsTags": [],
      "values": [
        {
          "type": "number"
        },
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "minlength",
      "type": "number | undefined",
      "complexType": {
        "original": "number",
        "resolved": "number | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "minlength",
      "reflectToAttr": false,
      "docs": "If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.",
      "docsTags": [],
      "values": [
        {
          "type": "number"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "mode",
      "type": "\"ios\" | \"md\"",
      "mutable": false,
      "attr": "mode",
      "reflectToAttr": false,
      "docs": "The mode determines which platform styles to use.",
      "docsTags": [],
      "values": [
        {
          "value": "ios",
          "type": "string"
        },
        {
          "value": "md",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "multiple",
      "type": "boolean | undefined",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "multiple",
      "reflectToAttr": false,
      "docs": "If `true`, the user can enter more than one value. This attribute applies when the type attribute is set to `\"email\"`, otherwise it is ignored.",
      "docsTags": [],
      "values": [
        {
          "type": "boolean"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "name",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "name",
      "reflectToAttr": false,
      "docs": "The name of the control, which is submitted with the form data.",
      "docsTags": [],
      "default": "this.inputId",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "pattern",
      "type": "string | undefined",
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "pattern",
      "reflectToAttr": false,
      "docs": "A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `\"text\"`, `\"search\"`, `\"tel\"`, `\"url\"`, `\"email\"`, `\"date\"`, or `\"password\"`, otherwise it is ignored. When the type attribute is `\"date\"`, `pattern` will only be used in browsers that do not support the `\"date\"` input type natively. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date for more information.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "placeholder",
      "type": "string | undefined",
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "placeholder",
      "reflectToAttr": false,
      "docs": "Instructional text that shows before the input has a value.\nThis property applies only when the `type` property is set to `\"email\"`,\n`\"number\"`, `\"password\"`, `\"search\"`, `\"tel\"`, `\"text\"`, or `\"url\"`, otherwise it is ignored.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "readonly",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "readonly",
      "reflectToAttr": true,
      "docs": "If `true`, the user cannot modify the value.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "required",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "required",
      "reflectToAttr": false,
      "docs": "If `true`, the user must fill in a value before submitting a form.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "shape",
      "type": "\"round\" | undefined",
      "complexType": {
        "original": "'round'",
        "resolved": "\"round\" | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "shape",
      "reflectToAttr": false,
      "docs": "The shape of the input. If \"round\" it will have an increased border radius.",
      "docsTags": [],
      "values": [
        {
          "value": "round",
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "spellcheck",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "spellcheck",
      "reflectToAttr": false,
      "docs": "If `true`, the element will have its spelling and grammar checked.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "step",
      "type": "string | undefined",
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "step",
      "reflectToAttr": false,
      "docs": "Works with the min and max attributes to limit the increments at which a value can be set.\nPossible values are: `\"any\"` or a positive floating point number.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "type",
      "type": "\"date\" | \"datetime-local\" | \"email\" | \"month\" | \"number\" | \"password\" | \"search\" | \"tel\" | \"text\" | \"time\" | \"url\" | \"week\"",
      "complexType": {
        "original": "TextFieldTypes",
        "resolved": "\"date\" | \"datetime-local\" | \"email\" | \"month\" | \"number\" | \"password\" | \"search\" | \"tel\" | \"text\" | \"time\" | \"url\" | \"week\"",
        "references": {
          "TextFieldTypes": {
            "location": "import",
            "path": "../../interface",
            "id": "src/interface.d.ts::TextFieldTypes"
          }
        }
      },
      "mutable": false,
      "attr": "type",
      "reflectToAttr": false,
      "docs": "The type of control to display. The default type is text.",
      "docsTags": [],
      "default": "'text'",
      "values": [
        {
          "value": "date",
          "type": "string"
        },
        {
          "value": "datetime-local",
          "type": "string"
        },
        {
          "value": "email",
          "type": "string"
        },
        {
          "value": "month",
          "type": "string"
        },
        {
          "value": "number",
          "type": "string"
        },
        {
          "value": "password",
          "type": "string"
        },
        {
          "value": "search",
          "type": "string"
        },
        {
          "value": "tel",
          "type": "string"
        },
        {
          "value": "text",
          "type": "string"
        },
        {
          "value": "time",
          "type": "string"
        },
        {
          "value": "url",
          "type": "string"
        },
        {
          "value": "week",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "value",
      "type": "null | number | string | undefined",
      "complexType": {
        "original": "string | number | null",
        "resolved": "null | number | string | undefined",
        "references": {}
      },
      "mutable": true,
      "attr": "value",
      "reflectToAttr": false,
      "docs": "The value of the input.",
      "docsTags": [],
      "default": "''",
      "values": [
        {
          "type": "null"
        },
        {
          "type": "number"
        },
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "methods": [
    {
      "name": "getInputElement",
      "returns": {
        "type": "Promise<HTMLInputElement>",
        "docs": ""
      },
      "complexType": {
        "signature": "() => Promise<HTMLInputElement>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          },
          "HTMLInputElement": {
            "location": "global",
            "id": "global::HTMLInputElement"
          }
        },
        "return": "Promise<HTMLInputElement>"
      },
      "signature": "getInputElement() => Promise<HTMLInputElement>",
      "parameters": [],
      "docs": "Returns the native `<input>` element used under the hood.",
      "docsTags": []
    },
    {
      "name": "setFocus",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          }
        },
        "return": "Promise<void>"
      },
      "signature": "setFocus() => Promise<void>",
      "parameters": [],
      "docs": "Sets focus on the native `input` in `ion-input`. Use this method instead of the global\n`input.focus()`.\n\nDevelopers who wish to focus an input when a page enters\nshould call `setFocus()` in the `ionViewDidEnter()` lifecycle method.\n\nDevelopers who wish to focus an input when an overlay is presented\nshould call `setFocus` after `didPresent` has resolved.\n\nSee [managing focus](/docs/developing/managing-focus) for more information.",
      "docsTags": []
    }
  ],
  "events": [
    {
      "event": "ionBlur",
      "detail": "FocusEvent",
      "bubbles": true,
      "complexType": {
        "original": "FocusEvent",
        "resolved": "FocusEvent",
        "references": {
          "FocusEvent": {
            "location": "global",
            "id": "global::FocusEvent"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the input loses focus.",
      "docsTags": []
    },
    {
      "event": "ionChange",
      "detail": "InputChangeEventDetail",
      "bubbles": true,
      "complexType": {
        "original": "InputChangeEventDetail",
        "resolved": "InputChangeEventDetail",
        "references": {
          "InputChangeEventDetail": {
            "location": "import",
            "path": "./input-interface",
            "id": "src/components/input/input-interface.ts::InputChangeEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "The `ionChange` event is fired when the user modifies the input's value.\nUnlike the `ionInput` event, the `ionChange` event is only fired when changes\nare committed, not as the user types.\n\nDepending on the way the users interacts with the element, the `ionChange`\nevent fires at a different moment:\n- When the user commits the change explicitly (e.g. by selecting a date\nfrom a date picker for `<ion-input type=\"date\">`, pressing the \"Enter\" key, etc.).\n- When the element loses focus after its value has changed: for elements\nwhere the user's interaction is typing.",
      "docsTags": []
    },
    {
      "event": "ionFocus",
      "detail": "FocusEvent",
      "bubbles": true,
      "complexType": {
        "original": "FocusEvent",
        "resolved": "FocusEvent",
        "references": {
          "FocusEvent": {
            "location": "global",
            "id": "global::FocusEvent"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the input has focus.",
      "docsTags": []
    },
    {
      "event": "ionInput",
      "detail": "InputInputEventDetail",
      "bubbles": true,
      "complexType": {
        "original": "InputInputEventDetail",
        "resolved": "InputInputEventDetail",
        "references": {
          "InputInputEventDetail": {
            "location": "import",
            "path": "./input-interface",
            "id": "src/components/input/input-interface.ts::InputInputEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "The `ionInput` event is fired each time the user modifies the input's value.\nUnlike the `ionChange` event, the `ionInput` event is fired for each alteration\nto the input's value. This typically happens for each keystroke as the user types.\n\nFor elements that accept text input (`type=text`, `type=tel`, etc.), the interface\nis [`InputEvent`](https://developer.mozilla.org/en-US/docs/Web/API/InputEvent); for others,\nthe interface is [`Event`](https://developer.mozilla.org/en-US/docs/Web/API/Event). If\nthe input is cleared on edit, the type is `null`.",
      "docsTags": []
    }
  ],
  "listeners": [],
  "styles": [
    {
      "name": "--background",
      "annotation": "prop",
      "docs": "Background of the input"
    },
    {
      "name": "--border-color",
      "annotation": "prop",
      "docs": "Color of the border below the input when using helper text, error text, or counter"
    },
    {
      "name": "--border-radius",
      "annotation": "prop",
      "docs": "Radius of the input. A large radius may display unevenly when using fill=\"outline\"; if needed, use shape=\"round\" instead or increase --padding-start."
    },
    {
      "name": "--border-style",
      "annotation": "prop",
      "docs": "Style of the border below the input when using helper text, error text, or counter"
    },
    {
      "name": "--border-width",
      "annotation": "prop",
      "docs": "Width of the border below the input when using helper text, error text, or counter"
    },
    {
      "name": "--color",
      "annotation": "prop",
      "docs": "Color of the input text"
    },
    {
      "name": "--highlight-color-focused",
      "annotation": "prop",
      "docs": "The color of the highlight on the input when focused"
    },
    {
      "name": "--highlight-color-invalid",
      "annotation": "prop",
      "docs": "The color of the highlight on the input when invalid"
    },
    {
      "name": "--highlight-color-valid",
      "annotation": "prop",
      "docs": "The color of the highlight on the input when valid"
    },
    {
      "name": "--highlight-height",
      "annotation": "prop",
      "docs": "The height of the highlight on the input. Only applies to md mode."
    },
    {
      "name": "--padding-bottom",
      "annotation": "prop",
      "docs": "Bottom padding of the input"
    },
    {
      "name": "--padding-end",
      "annotation": "prop",
      "docs": "Right padding if direction is left-to-right, and left padding if direction is right-to-left of the input"
    },
    {
      "name": "--padding-start",
      "annotation": "prop",
      "docs": "Left padding if direction is left-to-right, and right padding if direction is right-to-left of the input"
    },
    {
      "name": "--padding-top",
      "annotation": "prop",
      "docs": "Top padding of the input"
    },
    {
      "name": "--placeholder-color",
      "annotation": "prop",
      "docs": "Color of the input placeholder text"
    },
    {
      "name": "--placeholder-font-style",
      "annotation": "prop",
      "docs": "Font style of the input placeholder text"
    },
    {
      "name": "--placeholder-font-weight",
      "annotation": "prop",
      "docs": "Font weight of the input placeholder text"
    },
    {
      "name": "--placeholder-opacity",
      "annotation": "prop",
      "docs": "Opacity of the input placeholder text"
    }
  ],
  "slots": [
    {
      "name": "end",
      "docs": "Content to display at the trailing edge of the input. (EXPERIMENTAL)"
    },
    {
      "name": "label",
      "docs": "The label text to associate with the input. Use the `labelPlacement` property to control where the label is placed relative to the input. Use this if you need to render a label with custom HTML. (EXPERIMENTAL)"
    },
    {
      "name": "start",
      "docs": "Content to display at the leading edge of the input. (EXPERIMENTAL)"
    }
  ],
  "parts": [],
  "dependents": [],
  "dependencies": [
    "ion-icon"
  ],
  "dependencyGraph": {
    "ion-input": [
      "ion-icon"
    ]
  }
}