{
  "filePath": "src/components/item/item.tsx",
  "encapsulation": "shadow",
  "tag": "ion-item",
  "docs": "",
  "docsTags": [
    {
      "name": "virtualProp",
      "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
    },
    {
      "name": "slot",
      "text": "- Content is placed between the named slots if provided without a slot."
    },
    {
      "name": "slot",
      "text": "start - Content is placed to the left of the item text in LTR, and to the right in RTL."
    },
    {
      "name": "slot",
      "text": "end - Content is placed to the right of the item text in LTR, and to the left in RTL."
    },
    {
      "name": "slot",
      "text": "helper - Content is placed under the item and displayed when no error is detected. **DEPRECATED** Use the \"helperText\" property on ion-input or ion-textarea instead."
    },
    {
      "name": "slot",
      "text": "error - Content is placed under the item and displayed when an error is detected. **DEPRECATED** Use the \"errorText\" property on ion-input or ion-textarea instead."
    },
    {
      "name": "part",
      "text": "native - The native HTML button, anchor or div element that wraps all child elements."
    },
    {
      "name": "part",
      "text": "detail-icon - The chevron icon for the item. Only applies when `detail=\"true\"`."
    }
  ],
  "usage": {},
  "props": [
    {
      "name": "button",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "button",
      "reflectToAttr": false,
      "docs": "If `true`, a button tag will be rendered and the item will be tappable.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "color",
      "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
      "complexType": {
        "original": "Color",
        "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
        "references": {
          "Color": {
            "location": "import",
            "path": "../../interface",
            "id": "src/interface.d.ts::Color"
          }
        }
      },
      "mutable": false,
      "attr": "color",
      "reflectToAttr": true,
      "docs": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
      "docsTags": [],
      "values": [
        {
          "value": "danger",
          "type": "string"
        },
        {
          "value": "dark",
          "type": "string"
        },
        {
          "value": "light",
          "type": "string"
        },
        {
          "value": "medium",
          "type": "string"
        },
        {
          "value": "primary",
          "type": "string"
        },
        {
          "value": "secondary",
          "type": "string"
        },
        {
          "value": "success",
          "type": "string"
        },
        {
          "value": "tertiary",
          "type": "string"
        },
        {
          "value": "warning",
          "type": "string"
        },
        {
          "type": "string & Record<never, never>"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "counter",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "counter",
      "reflectToAttr": false,
      "docs": "If `true`, a character counter will display the ratio of characters used and the total character limit. Only applies when the `maxlength` property is set on the inner `ion-input` or `ion-textarea`.",
      "docsTags": [
        {
          "name": "deprecated",
          "text": "Use the `counter` property on `ion-input` or `ion-textarea` instead."
        }
      ],
      "default": "false",
      "deprecation": "Use the `counter` property on `ion-input` or `ion-textarea` instead.",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "counterFormatter",
      "type": "((inputLength: number, maxLength: number) => string) | undefined",
      "complexType": {
        "original": "CounterFormatter",
        "resolved": "((inputLength: number, maxLength: number) => string) | undefined",
        "references": {
          "CounterFormatter": {
            "location": "import",
            "path": "./item-interface",
            "id": "src/components/item/item-interface.ts::CounterFormatter"
          }
        }
      },
      "mutable": false,
      "reflectToAttr": false,
      "docs": "A callback used to format the counter text.\nBy default the counter text is set to \"itemLength / maxLength\".",
      "docsTags": [
        {
          "name": "deprecated",
          "text": "Use the `counterFormatter` property on `ion-input` or `ion-textarea` instead."
        }
      ],
      "deprecation": "Use the `counterFormatter` property on `ion-input` or `ion-textarea` instead.",
      "values": [
        {
          "type": "((inputLength: number, maxLength: number) => string)"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "detail",
      "type": "boolean | undefined",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "detail",
      "reflectToAttr": false,
      "docs": "If `true`, a detail arrow will appear on the item. Defaults to `false` unless the `mode`\nis `ios` and an `href` or `button` property is present.",
      "docsTags": [],
      "values": [
        {
          "type": "boolean"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "detailIcon",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "detail-icon",
      "reflectToAttr": false,
      "docs": "The icon to use when `detail` is set to `true`.",
      "docsTags": [],
      "default": "chevronForward",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "disabled",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "disabled",
      "reflectToAttr": false,
      "docs": "If `true`, the user cannot interact with the item.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "download",
      "type": "string | undefined",
      "complexType": {
        "original": "string | undefined",
        "resolved": "string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "download",
      "reflectToAttr": false,
      "docs": "This attribute instructs browsers to download a URL instead of navigating to\nit, so the user will be prompted to save it as a local file. If the attribute\nhas a value, it is used as the pre-filled file name in the Save prompt\n(the user can still change the file name if they want).",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "fill",
      "type": "\"outline\" | \"solid\" | undefined",
      "complexType": {
        "original": "'outline' | 'solid'",
        "resolved": "\"outline\" | \"solid\" | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "fill",
      "reflectToAttr": false,
      "docs": "The fill for the item. If `\"solid\"` the item will have a background. If\n`\"outline\"` the item will be transparent with a border. Only available in `md` mode.",
      "docsTags": [
        {
          "name": "deprecated",
          "text": "Use the `fill` property on `ion-input` or `ion-textarea` instead."
        }
      ],
      "deprecation": "Use the `fill` property on `ion-input` or `ion-textarea` instead.",
      "values": [
        {
          "value": "outline",
          "type": "string"
        },
        {
          "value": "solid",
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "href",
      "type": "string | undefined",
      "complexType": {
        "original": "string | undefined",
        "resolved": "string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "href",
      "reflectToAttr": false,
      "docs": "Contains a URL or a URL fragment that the hyperlink points to.\nIf this property is set, an anchor tag will be rendered.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "lines",
      "type": "\"full\" | \"inset\" | \"none\" | undefined",
      "complexType": {
        "original": "'full' | 'inset' | 'none'",
        "resolved": "\"full\" | \"inset\" | \"none\" | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "lines",
      "reflectToAttr": false,
      "docs": "How the bottom border should be displayed on the item.",
      "docsTags": [],
      "values": [
        {
          "value": "full",
          "type": "string"
        },
        {
          "value": "inset",
          "type": "string"
        },
        {
          "value": "none",
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "mode",
      "type": "\"ios\" | \"md\"",
      "mutable": false,
      "attr": "mode",
      "reflectToAttr": false,
      "docs": "The mode determines which platform styles to use.",
      "docsTags": [],
      "values": [
        {
          "value": "ios",
          "type": "string"
        },
        {
          "value": "md",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "rel",
      "type": "string | undefined",
      "complexType": {
        "original": "string | undefined",
        "resolved": "string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "rel",
      "reflectToAttr": false,
      "docs": "Specifies the relationship of the target object to the link object.\nThe value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "routerAnimation",
      "type": "((baseEl: any, opts?: any) => Animation) | undefined",
      "complexType": {
        "original": "AnimationBuilder | undefined",
        "resolved": "((baseEl: any, opts?: any) => Animation) | undefined",
        "references": {
          "AnimationBuilder": {
            "location": "import",
            "path": "../../interface",
            "id": "src/interface.d.ts::AnimationBuilder"
          }
        }
      },
      "mutable": false,
      "reflectToAttr": false,
      "docs": "When using a router, it specifies the transition animation when navigating to\nanother page using `href`.",
      "docsTags": [],
      "values": [
        {
          "type": "((baseEl: any, opts?: any) => Animation)"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "routerDirection",
      "type": "\"back\" | \"forward\" | \"root\"",
      "complexType": {
        "original": "RouterDirection",
        "resolved": "\"back\" | \"forward\" | \"root\"",
        "references": {
          "RouterDirection": {
            "location": "import",
            "path": "../router/utils/interface",
            "id": "src/components/router/utils/interface.ts::RouterDirection"
          }
        }
      },
      "mutable": false,
      "attr": "router-direction",
      "reflectToAttr": false,
      "docs": "When using a router, it specifies the transition direction when navigating to\nanother page using `href`.",
      "docsTags": [],
      "default": "'forward'",
      "values": [
        {
          "value": "back",
          "type": "string"
        },
        {
          "value": "forward",
          "type": "string"
        },
        {
          "value": "root",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "shape",
      "type": "\"round\" | undefined",
      "complexType": {
        "original": "'round'",
        "resolved": "\"round\" | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "shape",
      "reflectToAttr": false,
      "docs": "The shape of the item. If \"round\" it will have increased\nborder radius.",
      "docsTags": [],
      "values": [
        {
          "value": "round",
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "target",
      "type": "string | undefined",
      "complexType": {
        "original": "string | undefined",
        "resolved": "string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "target",
      "reflectToAttr": false,
      "docs": "Specifies where to display the linked URL.\nOnly applies when an `href` is provided.\nSpecial keywords: `\"_blank\"`, `\"_self\"`, `\"_parent\"`, `\"_top\"`.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "type",
      "type": "\"button\" | \"reset\" | \"submit\"",
      "complexType": {
        "original": "'submit' | 'reset' | 'button'",
        "resolved": "\"button\" | \"reset\" | \"submit\"",
        "references": {}
      },
      "mutable": false,
      "attr": "type",
      "reflectToAttr": false,
      "docs": "The type of the button. Only used when an `onclick` or `button` property is present.",
      "docsTags": [],
      "default": "'button'",
      "values": [
        {
          "value": "button",
          "type": "string"
        },
        {
          "value": "reset",
          "type": "string"
        },
        {
          "value": "submit",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    }
  ],
  "methods": [],
  "events": [],
  "listeners": [
    {
      "event": "ionInput",
      "capture": false,
      "passive": false
    },
    {
      "event": "ionColor",
      "capture": false,
      "passive": false
    },
    {
      "event": "ionStyle",
      "capture": false,
      "passive": false
    }
  ],
  "styles": [
    {
      "name": "--background",
      "annotation": "prop",
      "docs": "Background of the item"
    },
    {
      "name": "--background-activated",
      "annotation": "prop",
      "docs": "Background of the item when pressed. Note: setting this will interfere with the Material Design ripple."
    },
    {
      "name": "--background-activated-opacity",
      "annotation": "prop",
      "docs": "Opacity of the item background when pressed"
    },
    {
      "name": "--background-focused",
      "annotation": "prop",
      "docs": "Background of the item when focused with the tab key"
    },
    {
      "name": "--background-focused-opacity",
      "annotation": "prop",
      "docs": "Opacity of the item background when focused with the tab key"
    },
    {
      "name": "--background-hover",
      "annotation": "prop",
      "docs": "Background of the item on hover"
    },
    {
      "name": "--background-hover-opacity",
      "annotation": "prop",
      "docs": "Opacity of the background of the item on hover"
    },
    {
      "name": "--border-color",
      "annotation": "prop",
      "docs": "Color of the item border"
    },
    {
      "name": "--border-radius",
      "annotation": "prop",
      "docs": "Radius of the item border"
    },
    {
      "name": "--border-style",
      "annotation": "prop",
      "docs": "Style of the item border"
    },
    {
      "name": "--border-width",
      "annotation": "prop",
      "docs": "Width of the item border"
    },
    {
      "name": "--color",
      "annotation": "prop",
      "docs": "Color of the item"
    },
    {
      "name": "--color-activated",
      "annotation": "prop",
      "docs": "Color of the item when pressed"
    },
    {
      "name": "--color-focused",
      "annotation": "prop",
      "docs": "Color of the item when focused with the tab key"
    },
    {
      "name": "--color-hover",
      "annotation": "prop",
      "docs": "Color of the item on hover"
    },
    {
      "name": "--detail-icon-color",
      "annotation": "prop",
      "docs": "Color of the item detail icon"
    },
    {
      "name": "--detail-icon-font-size",
      "annotation": "prop",
      "docs": "Font size of the item detail icon"
    },
    {
      "name": "--detail-icon-opacity",
      "annotation": "prop",
      "docs": "Opacity of the item detail icon"
    },
    {
      "name": "--highlight-color-focused",
      "annotation": "prop",
      "docs": "The color of the highlight on the item when focused. Only applies to inputs and textareas using the legacy form syntax. DEPRECATED: Highlights can be styled on `ion-input` or `ion-textarea` when using the modern form syntax."
    },
    {
      "name": "--highlight-color-invalid",
      "annotation": "prop",
      "docs": "The color of the highlight on the item when invalid. Only applies to inputs and textareas using the legacy form syntax. DEPRECATED: Highlights can be styled on `ion-input` or `ion-textarea` when using the modern form syntax."
    },
    {
      "name": "--highlight-color-valid",
      "annotation": "prop",
      "docs": "The color of the highlight on the item when valid. Only applies to inputs and textareas using the legacy form syntax. DEPRECATED: Highlights can be styled on `ion-input` or `ion-textarea` when using the modern form syntax."
    },
    {
      "name": "--highlight-height",
      "annotation": "prop",
      "docs": "The height of the highlight on the item. Only applies to inputs and textareas using the legacy form syntax. DEPRECATED: Highlights can be styled on `ion-input` or `ion-textarea` when using the modern form syntax."
    },
    {
      "name": "--inner-border-width",
      "annotation": "prop",
      "docs": "Width of the item inner border"
    },
    {
      "name": "--inner-box-shadow",
      "annotation": "prop",
      "docs": "Box shadow of the item inner"
    },
    {
      "name": "--inner-padding-bottom",
      "annotation": "prop",
      "docs": "Bottom padding of the item inner"
    },
    {
      "name": "--inner-padding-end",
      "annotation": "prop",
      "docs": "Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item inner"
    },
    {
      "name": "--inner-padding-start",
      "annotation": "prop",
      "docs": "Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item inner"
    },
    {
      "name": "--inner-padding-top",
      "annotation": "prop",
      "docs": "Top padding of the item inner"
    },
    {
      "name": "--min-height",
      "annotation": "prop",
      "docs": "Minimum height of the item"
    },
    {
      "name": "--padding-bottom",
      "annotation": "prop",
      "docs": "Bottom padding of the item"
    },
    {
      "name": "--padding-end",
      "annotation": "prop",
      "docs": "Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item"
    },
    {
      "name": "--padding-start",
      "annotation": "prop",
      "docs": "Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item"
    },
    {
      "name": "--padding-top",
      "annotation": "prop",
      "docs": "Top padding of the item"
    },
    {
      "name": "--ripple-color",
      "annotation": "prop",
      "docs": "Color of the item ripple effect"
    },
    {
      "name": "--transition",
      "annotation": "prop",
      "docs": "Transition of the item"
    }
  ],
  "slots": [
    {
      "name": "",
      "docs": "Content is placed between the named slots if provided without a slot."
    },
    {
      "name": "end",
      "docs": "Content is placed to the right of the item text in LTR, and to the left in RTL."
    },
    {
      "name": "error",
      "docs": "Content is placed under the item and displayed when an error is detected. **DEPRECATED** Use the \"errorText\" property on ion-input or ion-textarea instead."
    },
    {
      "name": "helper",
      "docs": "Content is placed under the item and displayed when no error is detected. **DEPRECATED** Use the \"helperText\" property on ion-input or ion-textarea instead."
    },
    {
      "name": "start",
      "docs": "Content is placed to the left of the item text in LTR, and to the right in RTL."
    }
  ],
  "parts": [
    {
      "name": "detail-icon",
      "docs": "The chevron icon for the item. Only applies when `detail=\"true\"`."
    },
    {
      "name": "native",
      "docs": "The native HTML button, anchor or div element that wraps all child elements."
    }
  ],
  "dependents": [
    "ion-datetime",
    "ion-select-popover"
  ],
  "dependencies": [
    "ion-icon",
    "ion-ripple-effect",
    "ion-note"
  ],
  "dependencyGraph": {
    "ion-item": [
      "ion-icon",
      "ion-ripple-effect",
      "ion-note"
    ],
    "ion-datetime": [
      "ion-item"
    ],
    "ion-select-popover": [
      "ion-item"
    ]
  }
}