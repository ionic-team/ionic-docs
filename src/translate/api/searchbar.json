{
  "filePath": "src/components/searchbar/searchbar.tsx",
  "encapsulation": "scoped",
  "tag": "ion-searchbar",
  "docs": "",
  "docsTags": [
    {
      "name": "virtualProp",
      "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
    }
  ],
  "usage": {},
  "props": [
    {
      "name": "animated",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "animated",
      "reflectToAttr": false,
      "docs": "If `true`, enable searchbar animation.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "autocapitalize",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "autocapitalize",
      "reflectToAttr": false,
      "docs": "Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.\nAvailable options: `\"off\"`, `\"none\"`, `\"on\"`, `\"sentences\"`, `\"words\"`, `\"characters\"`.",
      "docsTags": [],
      "default": "'off'",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "autocomplete",
      "type": "\"name\" | \"email\" | \"tel\" | \"url\" | \"on\" | \"off\" | \"honorific-prefix\" | \"given-name\" | \"additional-name\" | \"family-name\" | \"honorific-suffix\" | \"nickname\" | \"username\" | \"new-password\" | \"current-password\" | \"one-time-code\" | \"organization-title\" | \"organization\" | \"street-address\" | \"address-line1\" | \"address-line2\" | \"address-line3\" | \"address-level4\" | \"address-level3\" | \"address-level2\" | \"address-level1\" | \"country\" | \"country-name\" | \"postal-code\" | \"cc-name\" | \"cc-given-name\" | \"cc-additional-name\" | \"cc-family-name\" | \"cc-number\" | \"cc-exp\" | \"cc-exp-month\" | \"cc-exp-year\" | \"cc-csc\" | \"cc-type\" | \"transaction-currency\" | \"transaction-amount\" | \"language\" | \"bday\" | \"bday-day\" | \"bday-month\" | \"bday-year\" | \"sex\" | \"tel-country-code\" | \"tel-national\" | \"tel-area-code\" | \"tel-local\" | \"tel-extension\" | \"impp\" | \"photo\"",
      "complexType": {
        "original": "AutocompleteTypes",
        "resolved": "\"name\" | \"email\" | \"tel\" | \"url\" | \"on\" | \"off\" | \"honorific-prefix\" | \"given-name\" | \"additional-name\" | \"family-name\" | \"honorific-suffix\" | \"nickname\" | \"username\" | \"new-password\" | \"current-password\" | \"one-time-code\" | \"organization-title\" | \"organization\" | \"street-address\" | \"address-line1\" | \"address-line2\" | \"address-line3\" | \"address-level4\" | \"address-level3\" | \"address-level2\" | \"address-level1\" | \"country\" | \"country-name\" | \"postal-code\" | \"cc-name\" | \"cc-given-name\" | \"cc-additional-name\" | \"cc-family-name\" | \"cc-number\" | \"cc-exp\" | \"cc-exp-month\" | \"cc-exp-year\" | \"cc-csc\" | \"cc-type\" | \"transaction-currency\" | \"transaction-amount\" | \"language\" | \"bday\" | \"bday-day\" | \"bday-month\" | \"bday-year\" | \"sex\" | \"tel-country-code\" | \"tel-national\" | \"tel-area-code\" | \"tel-local\" | \"tel-extension\" | \"impp\" | \"photo\"",
        "references": {
          "AutocompleteTypes": {
            "location": "import",
            "path": "../../interface",
            "id": "src/interface.d.ts::AutocompleteTypes"
          }
        }
      },
      "mutable": false,
      "attr": "autocomplete",
      "reflectToAttr": false,
      "docs": "Set the input's autocomplete property.",
      "docsTags": [],
      "default": "'off'",
      "values": [
        {
          "value": "name",
          "type": "string"
        },
        {
          "value": "email",
          "type": "string"
        },
        {
          "value": "tel",
          "type": "string"
        },
        {
          "value": "url",
          "type": "string"
        },
        {
          "value": "on",
          "type": "string"
        },
        {
          "value": "off",
          "type": "string"
        },
        {
          "value": "honorific-prefix",
          "type": "string"
        },
        {
          "value": "given-name",
          "type": "string"
        },
        {
          "value": "additional-name",
          "type": "string"
        },
        {
          "value": "family-name",
          "type": "string"
        },
        {
          "value": "honorific-suffix",
          "type": "string"
        },
        {
          "value": "nickname",
          "type": "string"
        },
        {
          "value": "username",
          "type": "string"
        },
        {
          "value": "new-password",
          "type": "string"
        },
        {
          "value": "current-password",
          "type": "string"
        },
        {
          "value": "one-time-code",
          "type": "string"
        },
        {
          "value": "organization-title",
          "type": "string"
        },
        {
          "value": "organization",
          "type": "string"
        },
        {
          "value": "street-address",
          "type": "string"
        },
        {
          "value": "address-line1",
          "type": "string"
        },
        {
          "value": "address-line2",
          "type": "string"
        },
        {
          "value": "address-line3",
          "type": "string"
        },
        {
          "value": "address-level4",
          "type": "string"
        },
        {
          "value": "address-level3",
          "type": "string"
        },
        {
          "value": "address-level2",
          "type": "string"
        },
        {
          "value": "address-level1",
          "type": "string"
        },
        {
          "value": "country",
          "type": "string"
        },
        {
          "value": "country-name",
          "type": "string"
        },
        {
          "value": "postal-code",
          "type": "string"
        },
        {
          "value": "cc-name",
          "type": "string"
        },
        {
          "value": "cc-given-name",
          "type": "string"
        },
        {
          "value": "cc-additional-name",
          "type": "string"
        },
        {
          "value": "cc-family-name",
          "type": "string"
        },
        {
          "value": "cc-number",
          "type": "string"
        },
        {
          "value": "cc-exp",
          "type": "string"
        },
        {
          "value": "cc-exp-month",
          "type": "string"
        },
        {
          "value": "cc-exp-year",
          "type": "string"
        },
        {
          "value": "cc-csc",
          "type": "string"
        },
        {
          "value": "cc-type",
          "type": "string"
        },
        {
          "value": "transaction-currency",
          "type": "string"
        },
        {
          "value": "transaction-amount",
          "type": "string"
        },
        {
          "value": "language",
          "type": "string"
        },
        {
          "value": "bday",
          "type": "string"
        },
        {
          "value": "bday-day",
          "type": "string"
        },
        {
          "value": "bday-month",
          "type": "string"
        },
        {
          "value": "bday-year",
          "type": "string"
        },
        {
          "value": "sex",
          "type": "string"
        },
        {
          "value": "tel-country-code",
          "type": "string"
        },
        {
          "value": "tel-national",
          "type": "string"
        },
        {
          "value": "tel-area-code",
          "type": "string"
        },
        {
          "value": "tel-local",
          "type": "string"
        },
        {
          "value": "tel-extension",
          "type": "string"
        },
        {
          "value": "impp",
          "type": "string"
        },
        {
          "value": "photo",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "autocorrect",
      "type": "\"off\" | \"on\"",
      "complexType": {
        "original": "'on' | 'off'",
        "resolved": "\"off\" | \"on\"",
        "references": {}
      },
      "mutable": false,
      "attr": "autocorrect",
      "reflectToAttr": false,
      "docs": "Set the input's autocorrect property.",
      "docsTags": [],
      "default": "'off'",
      "values": [
        {
          "value": "off",
          "type": "string"
        },
        {
          "value": "on",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "cancelButtonIcon",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "cancel-button-icon",
      "reflectToAttr": false,
      "docs": "Set the cancel button icon. Only applies to `md` mode.\nDefaults to `arrow-back-sharp`.",
      "docsTags": [],
      "default": "config.get('backButtonIcon', arrowBackSharp) as string",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "cancelButtonText",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "cancel-button-text",
      "reflectToAttr": false,
      "docs": "Set the the cancel button text. Only applies to `ios` mode.",
      "docsTags": [],
      "default": "'Cancel'",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "clearIcon",
      "type": "string | undefined",
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "clear-icon",
      "reflectToAttr": false,
      "docs": "Set the clear icon. Defaults to `close-circle` for `ios` and `close-sharp` for `md`.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "color",
      "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
      "complexType": {
        "original": "Color",
        "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
        "references": {
          "Color": {
            "location": "import",
            "path": "../../interface",
            "id": "src/interface.d.ts::Color"
          }
        }
      },
      "mutable": false,
      "attr": "color",
      "reflectToAttr": true,
      "docs": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
      "docsTags": [],
      "values": [
        {
          "value": "danger",
          "type": "string"
        },
        {
          "value": "dark",
          "type": "string"
        },
        {
          "value": "light",
          "type": "string"
        },
        {
          "value": "medium",
          "type": "string"
        },
        {
          "value": "primary",
          "type": "string"
        },
        {
          "value": "secondary",
          "type": "string"
        },
        {
          "value": "success",
          "type": "string"
        },
        {
          "value": "tertiary",
          "type": "string"
        },
        {
          "value": "warning",
          "type": "string"
        },
        {
          "type": "string & Record<never, never>"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "debounce",
      "type": "number | undefined",
      "complexType": {
        "original": "number",
        "resolved": "number | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "debounce",
      "reflectToAttr": false,
      "docs": "Set the amount of time, in milliseconds, to wait to trigger the `ionInput` event after each keystroke.",
      "docsTags": [],
      "values": [
        {
          "type": "number"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "disabled",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "disabled",
      "reflectToAttr": false,
      "docs": "If `true`, the user cannot interact with the input.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "enterkeyhint",
      "type": "\"done\" | \"enter\" | \"go\" | \"next\" | \"previous\" | \"search\" | \"send\" | undefined",
      "complexType": {
        "original": "'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'",
        "resolved": "\"done\" | \"enter\" | \"go\" | \"next\" | \"previous\" | \"search\" | \"send\" | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "enterkeyhint",
      "reflectToAttr": false,
      "docs": "A hint to the browser for which enter key to display.\nPossible values: `\"enter\"`, `\"done\"`, `\"go\"`, `\"next\"`,\n`\"previous\"`, `\"search\"`, and `\"send\"`.",
      "docsTags": [],
      "values": [
        {
          "value": "done",
          "type": "string"
        },
        {
          "value": "enter",
          "type": "string"
        },
        {
          "value": "go",
          "type": "string"
        },
        {
          "value": "next",
          "type": "string"
        },
        {
          "value": "previous",
          "type": "string"
        },
        {
          "value": "search",
          "type": "string"
        },
        {
          "value": "send",
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "inputmode",
      "type": "\"decimal\" | \"email\" | \"none\" | \"numeric\" | \"search\" | \"tel\" | \"text\" | \"url\" | undefined",
      "complexType": {
        "original": "'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search'",
        "resolved": "\"decimal\" | \"email\" | \"none\" | \"numeric\" | \"search\" | \"tel\" | \"text\" | \"url\" | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "inputmode",
      "reflectToAttr": false,
      "docs": "A hint to the browser for which keyboard to display.\nPossible values: `\"none\"`, `\"text\"`, `\"tel\"`, `\"url\"`,\n`\"email\"`, `\"numeric\"`, `\"decimal\"`, and `\"search\"`.",
      "docsTags": [],
      "values": [
        {
          "value": "decimal",
          "type": "string"
        },
        {
          "value": "email",
          "type": "string"
        },
        {
          "value": "none",
          "type": "string"
        },
        {
          "value": "numeric",
          "type": "string"
        },
        {
          "value": "search",
          "type": "string"
        },
        {
          "value": "tel",
          "type": "string"
        },
        {
          "value": "text",
          "type": "string"
        },
        {
          "value": "url",
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "maxlength",
      "type": "number | undefined",
      "complexType": {
        "original": "number",
        "resolved": "number | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "maxlength",
      "reflectToAttr": false,
      "docs": "This attribute specifies the maximum number of characters that the user can enter.",
      "docsTags": [],
      "values": [
        {
          "type": "number"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "minlength",
      "type": "number | undefined",
      "complexType": {
        "original": "number",
        "resolved": "number | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "minlength",
      "reflectToAttr": false,
      "docs": "This attribute specifies the minimum number of characters that the user can enter.",
      "docsTags": [],
      "values": [
        {
          "type": "number"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "mode",
      "type": "\"ios\" | \"md\"",
      "mutable": false,
      "attr": "mode",
      "reflectToAttr": false,
      "docs": "The mode determines which platform styles to use.",
      "docsTags": [],
      "values": [
        {
          "value": "ios",
          "type": "string"
        },
        {
          "value": "md",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "name",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "name",
      "reflectToAttr": false,
      "docs": "If used in a form, set the name of the control, which is submitted with the form data.",
      "docsTags": [],
      "default": "this.inputId",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "placeholder",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "placeholder",
      "reflectToAttr": false,
      "docs": "Set the input's placeholder.\n`placeholder` can accept either plaintext or HTML as a string.\nTo display characters normally reserved for HTML, they\nmust be escaped. For example `<Ionic>` would become\n`&lt;Ionic&gt;`\n\nFor more information: [Security Documentation](https://ionicframework.com/docs/faq/security)",
      "docsTags": [],
      "default": "'Search'",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "searchIcon",
      "type": "string | undefined",
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "search-icon",
      "reflectToAttr": false,
      "docs": "The icon to use as the search icon. Defaults to `search-outline` in\n`ios` mode and `search-sharp` in `md` mode.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "showCancelButton",
      "type": "\"always\" | \"focus\" | \"never\"",
      "complexType": {
        "original": "'never' | 'focus' | 'always'",
        "resolved": "\"always\" | \"focus\" | \"never\"",
        "references": {}
      },
      "mutable": false,
      "attr": "show-cancel-button",
      "reflectToAttr": false,
      "docs": "Sets the behavior for the cancel button. Defaults to `\"never\"`.\nSetting to `\"focus\"` shows the cancel button on focus.\nSetting to `\"never\"` hides the cancel button.\nSetting to `\"always\"` shows the cancel button regardless\nof focus state.",
      "docsTags": [],
      "default": "'never'",
      "values": [
        {
          "value": "always",
          "type": "string"
        },
        {
          "value": "focus",
          "type": "string"
        },
        {
          "value": "never",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "showClearButton",
      "type": "\"always\" | \"focus\" | \"never\"",
      "complexType": {
        "original": "'never' | 'focus' | 'always'",
        "resolved": "\"always\" | \"focus\" | \"never\"",
        "references": {}
      },
      "mutable": false,
      "attr": "show-clear-button",
      "reflectToAttr": false,
      "docs": "Sets the behavior for the clear button. Defaults to `\"focus\"`.\nSetting to `\"focus\"` shows the clear button on focus if the\ninput is not empty.\nSetting to `\"never\"` hides the clear button.\nSetting to `\"always\"` shows the clear button regardless\nof focus state, but only if the input is not empty.",
      "docsTags": [],
      "default": "'always'",
      "values": [
        {
          "value": "always",
          "type": "string"
        },
        {
          "value": "focus",
          "type": "string"
        },
        {
          "value": "never",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "spellcheck",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "spellcheck",
      "reflectToAttr": false,
      "docs": "If `true`, enable spellcheck on the input.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "type",
      "type": "\"email\" | \"number\" | \"password\" | \"search\" | \"tel\" | \"text\" | \"url\"",
      "complexType": {
        "original": "'text' | 'password' | 'email' | 'number' | 'search' | 'tel' | 'url'",
        "resolved": "\"email\" | \"number\" | \"password\" | \"search\" | \"tel\" | \"text\" | \"url\"",
        "references": {}
      },
      "mutable": false,
      "attr": "type",
      "reflectToAttr": false,
      "docs": "Set the type of the input.",
      "docsTags": [],
      "default": "'search'",
      "values": [
        {
          "value": "email",
          "type": "string"
        },
        {
          "value": "number",
          "type": "string"
        },
        {
          "value": "password",
          "type": "string"
        },
        {
          "value": "search",
          "type": "string"
        },
        {
          "value": "tel",
          "type": "string"
        },
        {
          "value": "text",
          "type": "string"
        },
        {
          "value": "url",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "value",
      "type": "null | string | undefined",
      "complexType": {
        "original": "string | null",
        "resolved": "null | string | undefined",
        "references": {}
      },
      "mutable": true,
      "attr": "value",
      "reflectToAttr": false,
      "docs": "the value of the searchbar.",
      "docsTags": [],
      "default": "''",
      "values": [
        {
          "type": "null"
        },
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "methods": [
    {
      "name": "getInputElement",
      "returns": {
        "type": "Promise<HTMLInputElement>",
        "docs": ""
      },
      "complexType": {
        "signature": "() => Promise<HTMLInputElement>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          },
          "HTMLInputElement": {
            "location": "global",
            "id": "global::HTMLInputElement"
          }
        },
        "return": "Promise<HTMLInputElement>"
      },
      "signature": "getInputElement() => Promise<HTMLInputElement>",
      "parameters": [],
      "docs": "Returns the native `<input>` element used under the hood.",
      "docsTags": []
    },
    {
      "name": "setFocus",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          }
        },
        "return": "Promise<void>"
      },
      "signature": "setFocus() => Promise<void>",
      "parameters": [],
      "docs": "Sets focus on the native `input` in `ion-searchbar`. Use this method instead of the global\n`input.focus()`.\n\nDevelopers who wish to focus an input when a page enters\nshould call `setFocus()` in the `ionViewDidEnter()` lifecycle method.\n\nDevelopers who wish to focus an input when an overlay is presented\nshould call `setFocus` after `didPresent` has resolved.\n\nSee [managing focus](/docs/developing/managing-focus) for more information.",
      "docsTags": []
    }
  ],
  "events": [
    {
      "event": "ionBlur",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the input loses focus.",
      "docsTags": []
    },
    {
      "event": "ionCancel",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the cancel button is clicked.",
      "docsTags": []
    },
    {
      "event": "ionChange",
      "detail": "SearchbarChangeEventDetail",
      "bubbles": true,
      "complexType": {
        "original": "SearchbarChangeEventDetail",
        "resolved": "SearchbarChangeEventDetail",
        "references": {
          "SearchbarChangeEventDetail": {
            "location": "import",
            "path": "./searchbar-interface",
            "id": "src/components/searchbar/searchbar-interface.ts::SearchbarChangeEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "The `ionChange` event is fired for `<ion-searchbar>` elements when the user\nmodifies the element's value. Unlike the `ionInput` event, the `ionChange`\nevent is not necessarily fired for each alteration to an element's value.\n\nThe `ionChange` event is fired when the value has been committed\nby the user. This can happen when the element loses focus or\nwhen the \"Enter\" key is pressed. `ionChange` can also fire\nwhen clicking the clear or cancel buttons.",
      "docsTags": []
    },
    {
      "event": "ionClear",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the clear input button is clicked.",
      "docsTags": []
    },
    {
      "event": "ionFocus",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the input has focus.",
      "docsTags": []
    },
    {
      "event": "ionInput",
      "detail": "SearchbarInputEventDetail",
      "bubbles": true,
      "complexType": {
        "original": "SearchbarInputEventDetail",
        "resolved": "SearchbarInputEventDetail",
        "references": {
          "SearchbarInputEventDetail": {
            "location": "import",
            "path": "./searchbar-interface",
            "id": "src/components/searchbar/searchbar-interface.ts::SearchbarInputEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the `value` of the `ion-searchbar` element has changed.",
      "docsTags": []
    }
  ],
  "listeners": [],
  "styles": [
    {
      "name": "--background",
      "annotation": "prop",
      "docs": "Background of the searchbar input"
    },
    {
      "name": "--border-radius",
      "annotation": "prop",
      "docs": "Border radius of the searchbar input"
    },
    {
      "name": "--box-shadow",
      "annotation": "prop",
      "docs": "Box shadow of the searchbar input"
    },
    {
      "name": "--cancel-button-color",
      "annotation": "prop",
      "docs": "Color of the searchbar cancel button"
    },
    {
      "name": "--clear-button-color",
      "annotation": "prop",
      "docs": "Color of the searchbar clear button"
    },
    {
      "name": "--color",
      "annotation": "prop",
      "docs": "Color of the searchbar text"
    },
    {
      "name": "--icon-color",
      "annotation": "prop",
      "docs": "Color of the searchbar icon"
    },
    {
      "name": "--placeholder-color",
      "annotation": "prop",
      "docs": "Color of the searchbar placeholder"
    },
    {
      "name": "--placeholder-font-style",
      "annotation": "prop",
      "docs": "Font style of the searchbar placeholder"
    },
    {
      "name": "--placeholder-font-weight",
      "annotation": "prop",
      "docs": "Font weight of the searchbar placeholder"
    },
    {
      "name": "--placeholder-opacity",
      "annotation": "prop",
      "docs": "Opacity of the searchbar placeholder"
    }
  ],
  "slots": [],
  "parts": [],
  "dependents": [],
  "dependencies": [
    "ion-icon"
  ],
  "dependencyGraph": {
    "ion-searchbar": [
      "ion-icon"
    ]
  }
}