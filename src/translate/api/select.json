{
  "filePath": "src/components/select/select.tsx",
  "encapsulation": "shadow",
  "tag": "ion-select",
  "docs": "",
  "docsTags": [
    {
      "name": "virtualProp",
      "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use."
    },
    {
      "name": "slot",
      "text": "label - The label text to associate with the select. Use the `labelPlacement` property to control where the label is placed relative to the select. Use this if you need to render a label with custom HTML."
    },
    {
      "name": "slot",
      "text": "start - Content to display at the leading edge of the select."
    },
    {
      "name": "slot",
      "text": "end - Content to display at the trailing edge of the select."
    },
    {
      "name": "part",
      "text": "placeholder - The text displayed in the select when there is no value."
    },
    {
      "name": "part",
      "text": "text - The displayed value of the select."
    },
    {
      "name": "part",
      "text": "icon - The select icon container."
    },
    {
      "name": "part",
      "text": "container - The container for the selected text or placeholder."
    },
    {
      "name": "part",
      "text": "label - The label text describing the select."
    },
    {
      "name": "part",
      "text": "supporting-text - Supporting text displayed beneath the select."
    },
    {
      "name": "part",
      "text": "helper-text - Supporting text displayed beneath the select when the select is valid."
    },
    {
      "name": "part",
      "text": "error-text - Supporting text displayed beneath the select when the select is invalid and touched."
    }
  ],
  "usage": {},
  "props": [
    {
      "name": "cancelText",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "cancel-text",
      "reflectToAttr": false,
      "docs": "The text to display on the cancel button.",
      "docsTags": [
        {
          "name": "default",
          "text": "'Cancel'"
        }
      ],
      "default": "'Cancel'",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "color",
      "type": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
      "complexType": {
        "original": "Color",
        "resolved": "\"danger\" | \"dark\" | \"light\" | \"medium\" | \"primary\" | \"secondary\" | \"success\" | \"tertiary\" | \"warning\" | string & Record<never, never> | undefined",
        "references": {
          "Color": {
            "location": "import",
            "path": "../../interface",
            "id": "src/interface.d.ts::Color"
          }
        }
      },
      "mutable": false,
      "attr": "color",
      "reflectToAttr": true,
      "docs": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).\n\nThis property is only available when using the modern select syntax.",
      "docsTags": [],
      "values": [
        {
          "value": "danger",
          "type": "string"
        },
        {
          "value": "dark",
          "type": "string"
        },
        {
          "value": "light",
          "type": "string"
        },
        {
          "value": "medium",
          "type": "string"
        },
        {
          "value": "primary",
          "type": "string"
        },
        {
          "value": "secondary",
          "type": "string"
        },
        {
          "value": "success",
          "type": "string"
        },
        {
          "value": "tertiary",
          "type": "string"
        },
        {
          "value": "warning",
          "type": "string"
        },
        {
          "type": "string & Record<never, never>"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "compareWith",
      "type": "((currentValue: any, compareValue: any) => boolean) | null | string | undefined",
      "complexType": {
        "original": "string | SelectCompareFn | null",
        "resolved": "((currentValue: any, compareValue: any) => boolean) | null | string | undefined",
        "references": {
          "SelectCompareFn": {
            "location": "import",
            "path": "./select-interface",
            "id": "src/components/select/select-interface.ts::SelectCompareFn"
          }
        }
      },
      "mutable": false,
      "attr": "compare-with",
      "reflectToAttr": false,
      "docs": "This property allows developers to specify a custom function or property\nname for comparing objects when determining the selected option in the\nion-select. When not specified, the default behavior will use strict\nequality (===) for comparison.",
      "docsTags": [],
      "values": [
        {
          "type": "((currentValue: any, compareValue: any) => boolean)"
        },
        {
          "type": "null"
        },
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "disabled",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "disabled",
      "reflectToAttr": false,
      "docs": "If `true`, the user cannot interact with the select.",
      "docsTags": [
        {
          "name": "default",
          "text": "false"
        }
      ],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "errorText",
      "type": "string | undefined",
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "error-text",
      "reflectToAttr": false,
      "docs": "Text that is placed under the select and displayed when an error is detected.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "expandedIcon",
      "type": "string | undefined",
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "expanded-icon",
      "reflectToAttr": false,
      "docs": "The toggle icon to show when the select is open. If defined, the icon\nrotation behavior in `md` mode will be disabled. If undefined, `toggleIcon`\nwill be used for when the select is both open and closed.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "fill",
      "type": "\"outline\" | \"solid\" | undefined",
      "complexType": {
        "original": "'outline' | 'solid'",
        "resolved": "\"outline\" | \"solid\" | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "fill",
      "reflectToAttr": false,
      "docs": "The fill for the item. If `\"solid\"` the item will have a background. If\n`\"outline\"` the item will be transparent with a border. Only available in `md` mode.",
      "docsTags": [],
      "values": [
        {
          "value": "outline",
          "type": "string"
        },
        {
          "value": "solid",
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "helperText",
      "type": "string | undefined",
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "helper-text",
      "reflectToAttr": false,
      "docs": "Text that is placed under the select and displayed when no error is detected.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "interface",
      "type": "\"action-sheet\" | \"alert\" | \"modal\" | \"popover\"",
      "complexType": {
        "original": "SelectInterface",
        "resolved": "\"action-sheet\" | \"alert\" | \"modal\" | \"popover\"",
        "references": {
          "SelectInterface": {
            "location": "import",
            "path": "./select-interface",
            "id": "src/components/select/select-interface.ts::SelectInterface"
          }
        }
      },
      "mutable": false,
      "attr": "interface",
      "reflectToAttr": false,
      "docs": "The interface the select should use: `action-sheet`, `popover`, `alert`, or `modal`.",
      "docsTags": [
        {
          "name": "default",
          "text": "'alert'"
        }
      ],
      "default": "'alert'",
      "values": [
        {
          "value": "action-sheet",
          "type": "string"
        },
        {
          "value": "alert",
          "type": "string"
        },
        {
          "value": "modal",
          "type": "string"
        },
        {
          "value": "popover",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "interfaceOptions",
      "type": "any",
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      },
      "mutable": false,
      "attr": "interface-options",
      "reflectToAttr": false,
      "docs": "Any additional options that the `alert`, `action-sheet` or `popover` interface\ncan take. See the [ion-alert docs](./alert), the\n[ion-action-sheet docs](./action-sheet), the\n[ion-popover docs](./popover), and the [ion-modal docs](./modal) for the\ncreate options for each interface.\n\nNote: `interfaceOptions` will not override `inputs` or `buttons` with the `alert` interface.",
      "docsTags": [
        {
          "name": "default",
          "text": "{}"
        }
      ],
      "default": "{}",
      "values": [
        {
          "type": "any"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "justify",
      "type": "\"end\" | \"space-between\" | \"start\" | undefined",
      "complexType": {
        "original": "'start' | 'end' | 'space-between'",
        "resolved": "\"end\" | \"space-between\" | \"start\" | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "justify",
      "reflectToAttr": false,
      "docs": "How to pack the label and select within a line.\n`justify` does not apply when the label and select\nare on different lines when `labelPlacement` is set to\n`\"floating\"` or `\"stacked\"`.\n`\"start\"`: The label and select will appear on the left in LTR and\non the right in RTL.\n`\"end\"`: The label and select will appear on the right in LTR and\non the left in RTL.\n`\"space-between\"`: The label and select will appear on opposite\nends of the line with space between the two elements.",
      "docsTags": [],
      "values": [
        {
          "value": "end",
          "type": "string"
        },
        {
          "value": "space-between",
          "type": "string"
        },
        {
          "value": "start",
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "label",
      "type": "string | undefined",
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "label",
      "reflectToAttr": false,
      "docs": "The visible label associated with the select.\n\nUse this if you need to render a plaintext label.\n\nThe `label` property will take priority over the `label` slot if both are used.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "labelPlacement",
      "type": "\"end\" | \"fixed\" | \"floating\" | \"stacked\" | \"start\" | undefined",
      "complexType": {
        "original": "'start' | 'end' | 'floating' | 'stacked' | 'fixed'",
        "resolved": "\"end\" | \"fixed\" | \"floating\" | \"stacked\" | \"start\" | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "label-placement",
      "reflectToAttr": false,
      "docs": "Where to place the label relative to the select.\n`\"start\"`: The label will appear to the left of the select in LTR and to the right in RTL.\n`\"end\"`: The label will appear to the right of the select in LTR and to the left in RTL.\n`\"floating\"`: The label will appear smaller and above the select when the select is focused or it has a value. Otherwise it will appear on top of the select.\n`\"stacked\"`: The label will appear smaller and above the select regardless even when the select is blurred or has no value.\n`\"fixed\"`: The label has the same behavior as `\"start\"` except it also has a fixed width. Long text will be truncated with ellipses (\"...\").\nWhen using `\"floating\"` or `\"stacked\"` we recommend initializing the select with either a `value` or a `placeholder`.",
      "docsTags": [
        {
          "name": "default",
          "text": "'start'"
        }
      ],
      "default": "'start'",
      "values": [
        {
          "value": "end",
          "type": "string"
        },
        {
          "value": "fixed",
          "type": "string"
        },
        {
          "value": "floating",
          "type": "string"
        },
        {
          "value": "stacked",
          "type": "string"
        },
        {
          "value": "start",
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "mode",
      "type": "\"ios\" | \"md\"",
      "mutable": false,
      "attr": "mode",
      "reflectToAttr": false,
      "docs": "The mode determines which platform styles to use.",
      "docsTags": [],
      "values": [
        {
          "value": "ios",
          "type": "string"
        },
        {
          "value": "md",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "multiple",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "multiple",
      "reflectToAttr": false,
      "docs": "If `true`, the select can accept multiple values.",
      "docsTags": [
        {
          "name": "default",
          "text": "false"
        }
      ],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "name",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "name",
      "reflectToAttr": false,
      "docs": "The name of the control, which is submitted with the form data.",
      "docsTags": [
        {
          "name": "default",
          "text": "this.inputId"
        }
      ],
      "default": "this.inputId",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "okText",
      "type": "string",
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "mutable": false,
      "attr": "ok-text",
      "reflectToAttr": false,
      "docs": "The text to display on the ok button.",
      "docsTags": [
        {
          "name": "default",
          "text": "'OK'"
        }
      ],
      "default": "'OK'",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "placeholder",
      "type": "string | undefined",
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "placeholder",
      "reflectToAttr": false,
      "docs": "The text to display when the select is empty.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "required",
      "type": "boolean",
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "mutable": false,
      "attr": "required",
      "reflectToAttr": false,
      "docs": "If true, screen readers will announce it as a required field. This property\nworks only for accessibility purposes, it will not prevent the form from\nsubmitting if the value is invalid.",
      "docsTags": [
        {
          "name": "default",
          "text": "false"
        }
      ],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "selectedText",
      "type": "null | string | undefined",
      "complexType": {
        "original": "string | null",
        "resolved": "null | string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "selected-text",
      "reflectToAttr": false,
      "docs": "The text to display instead of the selected option's value.",
      "docsTags": [],
      "values": [
        {
          "type": "null"
        },
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "shape",
      "type": "\"round\" | undefined",
      "complexType": {
        "original": "'round'",
        "resolved": "\"round\" | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "shape",
      "reflectToAttr": false,
      "docs": "The shape of the select. If \"round\" it will have an increased border radius.",
      "docsTags": [],
      "values": [
        {
          "value": "round",
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "toggleIcon",
      "type": "string | undefined",
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "mutable": false,
      "attr": "toggle-icon",
      "reflectToAttr": false,
      "docs": "The toggle icon to use. Defaults to `chevronExpand` for `ios` mode,\nor `caretDownSharp` for `md` mode.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    },
    {
      "name": "value",
      "type": "any",
      "complexType": {
        "original": "any | null",
        "resolved": "any",
        "references": {}
      },
      "mutable": true,
      "attr": "value",
      "reflectToAttr": false,
      "docs": "The value of the select.",
      "docsTags": [],
      "values": [
        {
          "type": "any"
        }
      ],
      "optional": true,
      "required": false,
      "getter": false,
      "setter": false
    }
  ],
  "methods": [
    {
      "name": "open",
      "returns": {
        "type": "Promise<any>",
        "docs": ""
      },
      "complexType": {
        "signature": "(event?: UIEvent) => Promise<any>",
        "parameters": [
          {
            "name": "event",
            "type": "UIEvent | undefined",
            "docs": "The user interface event that called the open."
          }
        ],
        "references": {
          "Promise": {
            "location": "global",
            "id": "global::Promise"
          },
          "UIEvent": {
            "location": "global",
            "id": "global::UIEvent"
          },
          "HTMLElement": {
            "location": "global",
            "id": "global::HTMLElement"
          },
          "HTMLIonRadioElement": {
            "location": "global",
            "id": "global::HTMLIonRadioElement"
          },
          "HTMLIonCheckboxElement": {
            "location": "global",
            "id": "global::HTMLIonCheckboxElement"
          }
        },
        "return": "Promise<any>"
      },
      "signature": "open(event?: UIEvent) => Promise<any>",
      "parameters": [
        {
          "name": "event",
          "type": "UIEvent | undefined",
          "docs": "The user interface event that called the open."
        }
      ],
      "docs": "Open the select overlay. The overlay is either an alert, action sheet, or popover,\ndepending on the `interface` property on the `ion-select`.",
      "docsTags": [
        {
          "name": "param",
          "text": "event The user interface event that called the open."
        }
      ]
    }
  ],
  "events": [
    {
      "event": "ionBlur",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the select loses focus.",
      "docsTags": []
    },
    {
      "event": "ionCancel",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the selection is cancelled.",
      "docsTags": []
    },
    {
      "event": "ionChange",
      "detail": "SelectChangeEventDetail<any>",
      "bubbles": true,
      "complexType": {
        "original": "SelectChangeEventDetail",
        "resolved": "SelectChangeEventDetail<any>",
        "references": {
          "SelectChangeEventDetail": {
            "location": "import",
            "path": "./select-interface",
            "id": "src/components/select/select-interface.ts::SelectChangeEventDetail"
          }
        }
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the value has changed.\n\nThis event will not emit when programmatically setting the `value` property.",
      "docsTags": []
    },
    {
      "event": "ionDismiss",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the overlay is dismissed.",
      "docsTags": []
    },
    {
      "event": "ionFocus",
      "detail": "void",
      "bubbles": true,
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      },
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the select has focus.",
      "docsTags": []
    }
  ],
  "listeners": [],
  "styles": [
    {
      "name": "--background",
      "annotation": "prop",
      "docs": "Background of the select",
      "mode": "ios"
    },
    {
      "name": "--background",
      "annotation": "prop",
      "docs": "Background of the select",
      "mode": "md"
    },
    {
      "name": "--border-color",
      "annotation": "prop",
      "docs": "Color of the select border",
      "mode": "ios"
    },
    {
      "name": "--border-color",
      "annotation": "prop",
      "docs": "Color of the select border",
      "mode": "md"
    },
    {
      "name": "--border-radius",
      "annotation": "prop",
      "docs": "Radius of the select border. A large radius may display unevenly when using fill=\"outline\"; if needed, use shape=\"round\" instead or increase --padding-start.",
      "mode": "ios"
    },
    {
      "name": "--border-radius",
      "annotation": "prop",
      "docs": "Radius of the select border. A large radius may display unevenly when using fill=\"outline\"; if needed, use shape=\"round\" instead or increase --padding-start.",
      "mode": "md"
    },
    {
      "name": "--border-style",
      "annotation": "prop",
      "docs": "Style of the select border",
      "mode": "ios"
    },
    {
      "name": "--border-style",
      "annotation": "prop",
      "docs": "Style of the select border",
      "mode": "md"
    },
    {
      "name": "--border-width",
      "annotation": "prop",
      "docs": "Width of the select border",
      "mode": "ios"
    },
    {
      "name": "--border-width",
      "annotation": "prop",
      "docs": "Width of the select border",
      "mode": "md"
    },
    {
      "name": "--highlight-color-focused",
      "annotation": "prop",
      "docs": "The color of the highlight on the select when focused",
      "mode": "ios"
    },
    {
      "name": "--highlight-color-focused",
      "annotation": "prop",
      "docs": "The color of the highlight on the select when focused",
      "mode": "md"
    },
    {
      "name": "--highlight-color-invalid",
      "annotation": "prop",
      "docs": "The color of the highlight on the select when invalid",
      "mode": "ios"
    },
    {
      "name": "--highlight-color-invalid",
      "annotation": "prop",
      "docs": "The color of the highlight on the select when invalid",
      "mode": "md"
    },
    {
      "name": "--highlight-color-valid",
      "annotation": "prop",
      "docs": "The color of the highlight on the select when valid",
      "mode": "ios"
    },
    {
      "name": "--highlight-color-valid",
      "annotation": "prop",
      "docs": "The color of the highlight on the select when valid",
      "mode": "md"
    },
    {
      "name": "--highlight-height",
      "annotation": "prop",
      "docs": "The height of the highlight on the select. Only applies to md mode.",
      "mode": "ios"
    },
    {
      "name": "--highlight-height",
      "annotation": "prop",
      "docs": "The height of the highlight on the select. Only applies to md mode.",
      "mode": "md"
    },
    {
      "name": "--padding-bottom",
      "annotation": "prop",
      "docs": "Bottom padding of the select",
      "mode": "ios"
    },
    {
      "name": "--padding-bottom",
      "annotation": "prop",
      "docs": "Bottom padding of the select",
      "mode": "md"
    },
    {
      "name": "--padding-end",
      "annotation": "prop",
      "docs": "Right padding if direction is left-to-right, and left padding if direction is right-to-left of the select",
      "mode": "ios"
    },
    {
      "name": "--padding-end",
      "annotation": "prop",
      "docs": "Right padding if direction is left-to-right, and left padding if direction is right-to-left of the select",
      "mode": "md"
    },
    {
      "name": "--padding-start",
      "annotation": "prop",
      "docs": "Left padding if direction is left-to-right, and right padding if direction is right-to-left of the select",
      "mode": "ios"
    },
    {
      "name": "--padding-start",
      "annotation": "prop",
      "docs": "Left padding if direction is left-to-right, and right padding if direction is right-to-left of the select",
      "mode": "md"
    },
    {
      "name": "--padding-top",
      "annotation": "prop",
      "docs": "Top padding of the select",
      "mode": "ios"
    },
    {
      "name": "--padding-top",
      "annotation": "prop",
      "docs": "Top padding of the select",
      "mode": "md"
    },
    {
      "name": "--placeholder-color",
      "annotation": "prop",
      "docs": "Color of the select placeholder text",
      "mode": "ios"
    },
    {
      "name": "--placeholder-color",
      "annotation": "prop",
      "docs": "Color of the select placeholder text",
      "mode": "md"
    },
    {
      "name": "--placeholder-opacity",
      "annotation": "prop",
      "docs": "Opacity of the select placeholder text",
      "mode": "ios"
    },
    {
      "name": "--placeholder-opacity",
      "annotation": "prop",
      "docs": "Opacity of the select placeholder text",
      "mode": "md"
    },
    {
      "name": "--ripple-color",
      "annotation": "prop",
      "docs": "The color of the ripple effect on MD mode.",
      "mode": "ios"
    },
    {
      "name": "--ripple-color",
      "annotation": "prop",
      "docs": "The color of the ripple effect on MD mode.",
      "mode": "md"
    }
  ],
  "slots": [
    {
      "name": "end",
      "docs": "Content to display at the trailing edge of the select."
    },
    {
      "name": "label",
      "docs": "The label text to associate with the select. Use the `labelPlacement` property to control where the label is placed relative to the select. Use this if you need to render a label with custom HTML."
    },
    {
      "name": "start",
      "docs": "Content to display at the leading edge of the select."
    }
  ],
  "parts": [
    {
      "name": "container",
      "docs": "The container for the selected text or placeholder."
    },
    {
      "name": "error-text",
      "docs": "Supporting text displayed beneath the select when the select is invalid and touched."
    },
    {
      "name": "helper-text",
      "docs": "Supporting text displayed beneath the select when the select is valid."
    },
    {
      "name": "icon",
      "docs": "The select icon container."
    },
    {
      "name": "label",
      "docs": "The label text describing the select."
    },
    {
      "name": "placeholder",
      "docs": "The text displayed in the select when there is no value."
    },
    {
      "name": "supporting-text",
      "docs": "Supporting text displayed beneath the select."
    },
    {
      "name": "text",
      "docs": "The displayed value of the select."
    }
  ],
  "dependents": [],
  "dependencies": [
    "ion-select-popover",
    "ion-popover",
    "ion-action-sheet",
    "ion-alert",
    "ion-select-modal",
    "ion-modal",
    "ion-icon"
  ],
  "dependencyGraph": {
    "ion-select": [
      "ion-select-popover",
      "ion-popover",
      "ion-action-sheet",
      "ion-alert",
      "ion-select-modal",
      "ion-modal",
      "ion-icon"
    ],
    "ion-select-popover": [
      "ion-item",
      "ion-checkbox",
      "ion-radio-group",
      "ion-radio",
      "ion-list",
      "ion-list-header",
      "ion-label"
    ],
    "ion-item": [
      "ion-icon",
      "ion-ripple-effect"
    ],
    "ion-popover": [
      "ion-backdrop"
    ],
    "ion-action-sheet": [
      "ion-backdrop",
      "ion-icon",
      "ion-ripple-effect"
    ],
    "ion-alert": [
      "ion-ripple-effect",
      "ion-backdrop"
    ],
    "ion-select-modal": [
      "ion-radio-group",
      "ion-item",
      "ion-radio",
      "ion-checkbox",
      "ion-header",
      "ion-toolbar",
      "ion-title",
      "ion-buttons",
      "ion-button",
      "ion-content",
      "ion-list"
    ],
    "ion-button": [
      "ion-ripple-effect"
    ],
    "ion-modal": [
      "ion-backdrop"
    ]
  }
}